{
    "procedures": {
        "raise_error": "PROCEDURE raise_error (v_msg IN VARCHAR2)\n    IS\n    BEGIN\n        IF SQLCODE != 0\n        THEN\n            raise_application_error (-20015,\n                                     v_msg || ' - ' || SQLERRM (SQLCODE));\n        ELSE\n            raise_application_error (-20015, v_msg);\n        END IF;\n    END raise_error;",
        "gen_pol_numbers": "PROCEDURE gen_pol_numbers (v_prod_code     IN     NUMBER,\n                               v_brn_code      IN     NUMBER,\n                               v_uw_yr         IN     NUMBER,\n                               v_trans_code    IN     VARCHAR2,\n                               v_policy_no     IN OUT VARCHAR2,\n                               v_endos_no      IN OUT VARCHAR2,\n                               v_batch_no      IN OUT NUMBER,\n                               v_serial        IN     NUMBER,\n                               v_policy_type   IN     VARCHAR2,\n                               v_coinsurance   IN     VARCHAR2,\n                               v_div_code      IN     VARCHAR2)\n    IS\n        v_pol_type           VARCHAR2 (5);\n        v_seq                NUMBER;\n        v_seqno              VARCHAR2 (35);\n        v_brn_sht_length     NUMBER;\n        v_src                VARCHAR2 (1);\n        v_binderpols_param   VARCHAR2 (1) DEFAULT 'N';\n    BEGIN\n        BEGIN\n            v_binderpols_param :=\n                gin_parameters_pkg.get_param_varchar (\n                    'NORMAL_BINDER_POLS_USESAME_SEQ');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_binderpols_param := 'N';\n        END;\n\n        IF NVL (v_binderpols_param, 'N') != 'Y'\n        THEN\n            IF NVL (v_policy_type, 'N') = 'N'\n            THEN\n                v_pol_type := 'P';\n            ELSIF NVL (v_policy_type, 'N') = 'B'\n            THEN\n                v_pol_type := 'B';\n            ELSE\n                v_pol_type := 'F';\n            END IF;\n        ELSE\n            IF NVL (v_policy_type, 'N') IN ('N', 'B')\n            THEN\n                v_pol_type := 'P';\n            ELSE\n                v_pol_type := 'F';\n            END IF;\n        END IF;\n\n        IF NVL (v_coinsurance, 'N') != 'Y'\n        THEN\n            v_src := 'N';\n        ELSE\n            v_src := 'Y';\n        END IF;\n\n        IF v_policy_no IS NULL\n        THEN\n            -- RAISE_ERROR('v_div_code='||v_div_code||'v_policy_no='||v_policy_no);\n            v_policy_no :=\n                gin_sequences_pkg.get_number_format (v_pol_type,\n                                                     v_prod_code,\n                                                     v_brn_code,\n                                                     v_uw_yr,\n                                                     v_trans_code,\n                                                     v_serial,\n                                                     v_src,             --'N',\n                                                     v_policy_no,\n                                                     NULL,\n                                                     NULL,\n                                                     v_div_code);\n        END IF;\n\n        IF v_endos_no IS NULL\n        THEN\n            v_endos_no :=\n                gin_sequences_pkg.get_number_format ('E',\n                                                     v_prod_code,\n                                                     v_brn_code,\n                                                     v_uw_yr,\n                                                     v_trans_code,\n                                                     NULL,\n                                                     v_src,             --'N',\n                                                     v_policy_no,\n                                                     v_div_code);\n        END IF;\n\n        IF v_batch_no IS NULL\n        THEN\n            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YY'))\n                   || gin_pol_batch_no_seq.NEXTVAL\n              INTO v_batch_no\n              FROM DUAL;\n        END IF;\n\n        BEGIN\n            check_policy_unique (v_policy_no);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                BEGIN\n                    SELECT TO_NUMBER (\n                               SUBSTR (\n                                   v_policy_no,\n                                   DECODE (\n                                       gin_parameters_pkg.get_param_varchar (\n                                           'POL_SERIAL_AT_END'),\n                                       'N', DECODE (\n                                                v_pol_type,\n                                                'P', gin_parameters_pkg.get_param_varchar (\n                                                         'POL_SERIAL_POS'),\n                                                gin_parameters_pkg.get_param_varchar (\n                                                    'POL_FAC_SERIAL_POS')),\n                                         LENGTH (v_policy_no)\n                                       - gin_parameters_pkg.get_param_varchar (\n                                             'POLNOSRLENGTH')\n                                       + 1),\n                                   gin_parameters_pkg.get_param_varchar (\n                                       'POLNOSRLENGTH')))\n                      INTO v_seq\n                      FROM DUAL;\n                --            EXCEPTION\n                --               WHEN OTHERS\n                --               THEN\n                --                  raise_error ('ERROR SELECTING USED SEQUENCE...');\n                END;\n\n                BEGIN\n                    gin_sequences_pkg.update_used_sequence (v_pol_type,\n                                                            v_prod_code,\n                                                            v_brn_code,\n                                                            v_uw_yr,\n                                                            v_trans_code,\n                                                            v_seq,\n                                                            v_policy_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        -- introduced for monarch where branch id vary from 2 charaters to 3 characters posing a challenge\n                        BEGIN\n                            SELECT TO_NUMBER (\n                                       SUBSTR (\n                                           v_policy_no,\n                                           DECODE (\n                                               gin_parameters_pkg.get_param_varchar (\n                                                   'POL_SERIAL_AT_END'),\n                                               'N', DECODE (\n                                                        DECODE (v_pol_type,\n                                                                'N', 'P',\n                                                                'F'),\n                                                        'P', gin_parameters_pkg.get_param_varchar (\n                                                                 'POL_SERIAL_POS'),\n                                                        gin_parameters_pkg.get_param_varchar (\n                                                            'POL_FAC_SERIAL_POS')),\n                                                 LENGTH (v_policy_no)\n                                               - gin_parameters_pkg.get_param_varchar (\n                                                     'POLNOSRLENGTH')\n                                               + 1),\n                                           gin_parameters_pkg.get_param_varchar (\n                                               'POLNOSRLENGTH')))\n                              INTO v_seqno\n                              FROM DUAL;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'ERROR SELECTING USED SEQUENCE...');\n                        END;\n\n                        BEGIN\n                            SELECT LENGTH (brn_sht_desc)\n                              INTO v_brn_sht_length\n                              FROM tqc_branches\n                             WHERE brn_code = v_brn_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        END;\n\n                        IF NVL (v_brn_sht_length, 0) = 2\n                        THEN\n                            BEGIN\n                                v_seq := TO_NUMBER (v_seqno);\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        ELSIF NVL (v_brn_sht_length, 0) = 3\n                        THEN\n                            BEGIN\n                                v_seq := TO_NUMBER (SUBSTR (v_seqno, 2));\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        ELSE\n                            raise_error ('Error here....');\n                        END IF;\n\n                        BEGIN\n                            gin_sequences_pkg.update_used_sequence (\n                                v_pol_type,\n                                v_prod_code,\n                                v_brn_code,\n                                v_uw_yr,\n                                v_trans_code,\n                                v_seq,\n                                v_policy_no);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Error Updating Used Sequence...');\n                        END;\n                --RAISE_ERROR('ERROR UPDATING USED SEQUENCE...');\n                END;\n\n                raise_error (\n                       'Error generating Policy number at step 1 v_seq=== '\n                    || v_seq\n                    || '  '\n                    || v_policy_no);\n        END;\n    END;",
        "get_risk_dates": "PROCEDURE get_risk_dates (\n        v_scl_code                 IN     NUMBER,\n        v_covt_code                IN     NUMBER,\n        v_pol_tot_instlmt          IN     NUMBER,\n        v_pro_expiry_period        IN     VARCHAR2,\n        v_pol_cover_from           IN     DATE,\n        v_pol_cover_to             IN     DATE,\n        v_increment                IN     VARCHAR2,\n        v_increment_by             IN     NUMBER,\n        v_susp_reinstate           IN     VARCHAR2,\n        v_susp_reinst_type         IN     VARCHAR2,\n        v_risk_pymt_install_pcts   IN OUT VARCHAR2,\n        v_wef_date                 IN OUT DATE,\n        v_wet_date                 IN OUT DATE,\n        v_install_period           IN OUT NUMBER,\n        v_cover_days               IN OUT NUMBER,\n        v_susp_wef                 IN OUT DATE,\n        v_susp_wet                 IN OUT DATE,\n        v_new_pol_wet                 OUT DATE,\n        v_pol_install_wet          IN OUT DATE,\n        v_pol_loaded                      VARCHAR2 DEFAULT 'N',\n        v_ipu_status               IN     VARCHAR2 DEFAULT NULL)\n    IS\n        v_cvt_install_type          gin_subclass_cover_types.sclcovt_install_type%TYPE;\n        v_cvt_max_installs          gin_subclass_cover_types.sclcovt_max_installs%TYPE;\n        v_cvt_pymt_install_pcts     gin_subclass_cover_types.sclcovt_pymt_install_pcts%TYPE;\n        v_cvt_install_periods       gin_subclass_cover_types.sclcovt_install_periods%TYPE;\n        v_install_pct               NUMBER;\n        v_pymnt_tot_instlmt         NUMBER;\n        v_suspend_days              NUMBER;\n        v_install_days              NUMBER;\n        v_max_installs              NUMBER;\n        v_months_added              NUMBER;\n        v_day                       NUMBER;\n        v_month                     NUMBER;\n        v_year                      NUMBER;\n        v_mnth                      NUMBER;\n        v_add_days                  NUMBER;\n        v_reinsdayspremsubs_param   NUMBER;\n    --v_pol_install_wet DATE;\n    BEGIN\n        --raise_error ('Error getting cover type details..');\n        BEGIN\n            SELECT sclcovt_install_type,\n                   sclcovt_max_installs,\n                   sclcovt_pymt_install_pcts,\n                   sclcovt_install_periods\n              INTO v_cvt_install_type,\n                   v_cvt_max_installs,\n                   v_cvt_pymt_install_pcts,\n                   v_cvt_install_periods\n              FROM gin_subclass_cover_types\n             WHERE     sclcovt_covt_code = v_covt_code\n                   AND sclcovt_scl_code = v_scl_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error getting cover type details..');\n        END;\n\n        BEGIN\n            v_reinsdayspremsubs_param :=\n                gin_parameters_pkg.get_param_varchar (\n                    'REINS_DAYS_PREM_SUBS%');\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_reinsdayspremsubs_param := 100;\n            WHEN OTHERS\n            THEN\n                raise_when_others (\n                    'Error fetching REINS_DAYS_PREM_SUBS parameter...');\n        END;\n\n        IF    NVL (v_cvt_install_type, 'NONE') NOT IN ('PYMT', 'CVRP')\n           OR NVL (v_pol_tot_instlmt, 0) <= 1\n        THEN\n            v_wef_date := v_wef_date;\n            v_wet_date := v_wet_date;\n            v_pol_install_wet := v_wet_date;\n\n            IF     v_susp_reinstate = 'Y'\n               AND v_susp_reinst_type IN ('SUBS', 'DAYS')\n            THEN\n                IF NVL (v_reinsdayspremsubs_param, 100) != 100\n                THEN\n                    v_suspend_days :=\n                        ROUND (\n                              (v_susp_wet - v_susp_wef)\n                            * v_reinsdayspremsubs_param\n                            / 100);\n                    v_install_days :=\n                        LEAST (v_wet_date, v_susp_wet) - v_susp_wef;\n                    v_wef_date := v_susp_wet;\n                    v_wet_date := v_wet_date + NVL (v_suspend_days, 0);\n                    v_new_pol_wet :=\n                        NVL (v_wet_date,\n                             v_pol_cover_to + NVL (v_install_days, 0));\n                ELSE\n                    v_suspend_days := v_susp_wet - v_susp_wef;\n                    v_install_days :=\n                        LEAST (v_wet_date, v_susp_wet) - v_susp_wef;\n                    v_wef_date := v_susp_wet;\n                    v_wet_date :=\n                          GREATEST (v_susp_wet, v_wet_date)\n                        + NVL (v_install_days, 0);\n                    v_new_pol_wet := v_pol_cover_to + NVL (v_install_days, 0);\n                END IF;\n            END IF;\n        ELSE\n            IF     NVL (v_cvt_install_type, 'NONE') = 'PYMT'\n               AND NVL (v_pol_tot_instlmt, 0) > 1\n            THEN\n                v_risk_pymt_install_pcts :=\n                    NVL (v_risk_pymt_install_pcts, v_cvt_pymt_install_pcts);\n                v_install_pct :=\n                    get_instalment_pct (1,\n                                        v_risk_pymt_install_pcts,\n                                        v_pymnt_tot_instlmt);\n\n                IF NVL (v_pymnt_tot_instlmt, 0) != NVL (v_pol_tot_instlmt, 0)\n                THEN\n                    raise_error (\n                           'Specified installments '\n                        || NVL (v_pol_tot_instlmt, 0)\n                        || ' do not tally with the payments percentages given '\n                        || v_risk_pymt_install_pcts);\n                END IF;\n            END IF;\n\n            IF NVL (v_pol_tot_instlmt, 0) > NVL (v_cvt_max_installs, 12)\n            THEN\n                raise_error (\n                       'Installments specified greater than allowed at cover types '\n                    || NVL (v_cvt_max_installs, 12));\n            ELSE\n                IF NVL (v_cvt_install_periods, 'M') = 'A'\n                THEN\n                    raise_error (\n                        'Annual cannot be extended beyond policy period..');\n                ELSIF NVL (v_cvt_install_periods, 'M') = 'S'\n                THEN\n                    v_max_installs := 2;\n                    v_months_added := 6;\n                ELSIF NVL (v_cvt_install_periods, 'M') = 'Q'\n                THEN\n                    v_max_installs := 4;\n                    v_months_added := 3;\n                ELSE\n                    v_max_installs := 12;\n                    v_months_added := 1;\n                END IF;\n\n                IF v_increment = 'N'\n                THEN\n                    v_install_period := v_install_period;\n                    v_wef_date := v_wef_date;\n                ELSIF v_increment = 'Y'\n                THEN\n                    IF NVL (v_susp_reinstate, 'N') = 'Y'\n                    THEN\n                        raise_error (\n                            'Risk has been suspended. Reinstate before Extending..');\n                    END IF;\n\n                    v_install_period := NVL (v_install_period, 1) + 1;\n\n                    --22-FEB-13<=>21-MAR-13<=>4\n                    -- RAISE_ERROR(v_wef_date||'<=>'||v_wet_date||'<=>'||v_install_period||'<=>'||v_increment_by);\n                    IF NVL (v_increment_by, 1) = 0\n                    THEN\n                        v_wef_date := v_wef_date;\n                    ELSIF NVL (v_increment_by, 1) = 1\n                    THEN\n                        v_wef_date := GREATEST ((v_wet_date + 1), v_wef_date);\n                    ELSE\n                        /*FOR y IN 1..v_increment_by LOOP\n                            v_wef_date := ADD_MONTHS(v_wef_date,v_months_added);\n                        END LOOP;*/\n                        v_day := TO_NUMBER (TO_CHAR (v_wef_date, 'DD'));\n                        v_month := TO_NUMBER (TO_CHAR (v_wef_date, 'MM'));\n                        v_year := TO_NUMBER (TO_CHAR (v_wef_date, 'YYYY'));\n\n                        FOR y IN 1 .. v_increment_by\n                        LOOP\n                            v_month := v_month + 1;\n\n                            IF v_month > 12\n                            THEN\n                                v_month := v_month - 12;\n                                v_year := v_year + 1;\n                            END IF;\n                        END LOOP;\n\n                        IF v_month IN (2)\n                        THEN\n                            IF MOD (v_year, 4) = 0 AND v_day > 29\n                            THEN\n                                v_day := 29;\n                            ELSE\n                                v_day := 28;\n                            END IF;\n                        ELSIF     v_month IN (4,\n                                              6,\n                                              9,\n                                              11)\n                              AND v_day > 30\n                        THEN\n                            v_day := 30;\n                        END IF;\n\n                        v_wef_date :=\n                            TO_DATE (\n                                   TO_CHAR (v_day, '00')\n                                || '/'\n                                || TO_CHAR (v_month, '00')\n                                || '/'\n                                || TO_CHAR (v_year),\n                                'DD/MM/YYYY');\n                    END IF;\n\n                    v_pol_install_wet :=\n                        LEAST ((ADD_MONTHS (v_wef_date, 1) - 1),\n                               v_pol_cover_to);\n                --                END IF;\n                ELSE\n                    raise_error ('Action type not specified..');\n                END IF;\n\n                IF v_install_period <\n                   LEAST (v_pol_tot_instlmt, v_max_installs)\n                THEN\n                    v_day := TO_NUMBER (TO_CHAR (v_wef_date, 'DD'));\n                    v_month := TO_NUMBER (TO_CHAR (v_wef_date, 'MM'));\n                    v_year := TO_NUMBER (TO_CHAR (v_wef_date, 'YYYY'));\n\n                    FOR i IN v_month .. (v_month + v_months_added) - 1\n                    LOOP\n                        IF i > 12\n                        THEN\n                            v_mnth := i - 12;\n                        ELSE\n                            v_mnth := i;\n                        END IF;\n\n                        IF v_mnth = 2\n                        THEN\n                            IF MOD (v_year, 4) = 0\n                            THEN\n                                --v_add_days := NVL(v_add_days,0) + 29;\n                                v_add_days := NVL (v_add_days, 0) + 28;\n                            ELSE\n                                --v_add_days := NVL(v_add_days,0) + 28;\n                                v_add_days := NVL (v_add_days, 0) + 27;\n                            END IF;\n                        ELSIF v_mnth IN (4,\n                                         6,\n                                         9,\n                                         11)\n                        THEN\n                            --v_add_days := NVL(v_add_days,0) + 30;\n                            v_add_days := NVL (v_add_days, 0) + 29;\n                        ELSE\n                            --v_add_days := NVL(v_add_days,0) + 31;\n                            v_add_days := NVL (v_add_days, 0) + 30;\n                        --RAISE_ERROR(v_mnth||'='||v_year||'='||v_add_days||'='||v_months_added||'='||v_wef_date||'='||v_wet_date||'='||v_susp_reinst_type);\n                        END IF;\n\n                        DBMS_OUTPUT.put_line (\n                            i || '=' || v_add_days || '=' || v_month);\n                    END LOOP;\n\n                    --RAISE_ERROR('v_ipu_status'||v_ipu_status||'v_susp_reinst_type='||v_susp_reinst_type||'='||v_wef_date||'='||v_wet_date||'='||v_day);\n                    IF NVL (v_susp_reinst_type, 'XXX') != 'DAYS'\n                    THEN\n                        IF NVL (v_ipu_status, 'XXX') != 'SB'\n                        THEN\n                            IF v_day = 1\n                            THEN\n                                v_wet_date := LAST_DAY (v_wef_date);\n                            ELSIF TO_NUMBER (TO_CHAR (v_wet_date, 'DD')) =\n                                  TO_NUMBER (TO_CHAR (v_wef_date, 'DD')) - 1\n                            THEN\n                                IF v_mnth IN (1)\n                                THEN\n                                    IF MOD (v_year, 4) = 2\n                                    THEN          --masinde intro if statement\n                                        IF TO_NUMBER (\n                                               TO_CHAR (v_wef_date, 'DD')) =\n                                           29\n                                        THEN\n                                            v_wet_date :=\n                                                ADD_MONTHS (\n                                                    TO_DATE (v_wef_date),\n                                                    1);\n                                        ELSE\n                                            v_wet_date :=\n                                                ADD_MONTHS (\n                                                    TO_DATE (v_wef_date),\n                                                    1);\n                                        ---1;\n                                        --raise_Error('v_mnth1='||v_mnth||v_wef_date||'='||v_wet_date);\n                                        END IF;\n                                    ELSE\n                                        v_wet_date :=\n                                            ADD_MONTHS (TO_DATE (v_wef_date),\n                                                        1);\n                                    END IF;\n                                --v_wet_date := ADD_MONTHS (TO_DATE (v_wef_date), 1);\n                                ELSE\n                                    v_wet_date := v_wef_date + v_add_days;\n                                END IF;\n                            --raise_Error('v_mnth='||v_mnth||v_wef_date||'='||v_wet_date);\n                            ELSIF TO_NUMBER (\n                                      TO_CHAR (LAST_DAY (v_wef_date), 'DD')) =\n                                  30\n                            THEN\n                                -- RAISE_ERROR(v_wef_date||'='||v_wet_date||' '||v_mnth||' 2 '||v_add_days);\n                                v_wet_date := v_wef_date + v_add_days;\n                            ELSE\n                                IF MOD (v_year, 4) = 0\n                                THEN\n                                    IF v_mnth IN (1) AND v_day > 29\n                                    THEN\n                                        v_wet_date :=\n                                            ADD_MONTHS (TO_DATE (v_wef_date),\n                                                        1);\n                                    ELSE\n                                        v_wet_date := v_wef_date + v_add_days;\n                                    --ADD_MONTHS(v_wef_date,1)-1;\n                                    END IF;\n                                ELSE\n                                    IF v_mnth IN (1) AND v_day > 28\n                                    THEN\n                                        v_wet_date :=\n                                            ADD_MONTHS (TO_DATE (v_wef_date),\n                                                        1);\n                                    ELSE\n                                        v_wet_date := v_wef_date + v_add_days;\n                                    --ADD_MONTHS(v_wef_date,1)-1;\n                                    END IF;\n                                END IF;\n                            END IF;\n                        ELSE\n                            --RAISE_ERROR(v_wef_date||'='||v_wet_date);\n                            v_wef_date := v_wef_date;\n                            v_wet_date := v_wet_date;\n                        END IF;\n                    ELSE\n                        v_wef_date := v_wef_date;\n                        v_wet_date := v_wet_date;\n                    END IF;\n\n                    IF NVL (v_pol_loaded, 'N') = 'Y'\n                    THEN\n                        v_pol_install_wet := v_wet_date;\n                    ELSIF v_pol_install_wet IS NULL\n                    THEN\n                        v_pol_install_wet :=\n                            LEAST (\n                                (  ADD_MONTHS (\n                                       v_pol_cover_from,\n                                       v_months_added * v_install_period)\n                                 - 1),\n                                v_pol_cover_to);\n                    END IF;\n                ELSIF v_install_period =\n                      LEAST (v_pol_tot_instlmt, v_max_installs)\n                THEN\n                    v_wet_date := v_pol_cover_to;\n                    v_pol_install_wet := v_pol_cover_to;\n                ELSIF     NVL (v_install_period, 0) >\n                          LEAST (v_pol_tot_instlmt, v_max_installs)\n                      AND NVL (v_pol_loaded, 'N') != 'Y'\n                THEN\n                    --   RAISE_ERROR(v_install_period||'='||v_pol_tot_instlmt||'='||v_max_installs);\n                    raise_error (\n                           'Installment periods cannot be greater than '\n                        || LEAST (v_pol_tot_instlmt, v_max_installs)\n                        || ' policy specified installments');\n                END IF;\n\n                --   RAISE_ERROR(v_susp_reinstate||'='||v_Susp_reinst_type||'='||v_wef_date||'='||v_wet_date||'='||v_susp_wef||'='||v_susp_wet||'='||v_pol_cover_from||'='||v_pol_cover_to||'='||v_pol_install_wet);\n                IF     NVL (v_susp_reinstate, 'N') = 'Y'\n                   AND NVL (v_susp_reinst_type, 'PREM') = 'DAYS'\n                THEN\n                    v_suspend_days := v_susp_wet - v_susp_wef;\n                    v_install_days :=\n                        LEAST (v_wet_date, v_susp_wet) - v_susp_wef;\n                    v_wef_date := v_susp_wet;  --LEAST(v_wet_date,v_susp_wet);\n                    v_wet_date :=\n                          GREATEST (v_susp_wet, v_wet_date)\n                        + NVL (v_install_days, 0);\n                    v_new_pol_wet := v_pol_cover_to + NVL (v_install_days, 0);\n                    v_pol_install_wet :=\n                        v_pol_install_wet + NVL (v_install_days, 0);\n                --  RAISE_ERROR(v_suspend_days||'='||v_install_days||'='||v_wet_date||'='||v_wef_date||'='||v_susp_wef||'='||v_pol_cover_to||'='||v_new_pol_wet);\n                ELSIF     NVL (v_susp_reinstate, 'N') = 'Y'\n                      AND NVL (v_susp_reinst_type, 'PREM') = 'SUBS'\n                THEN\n                    v_suspend_days := v_susp_wet - v_susp_wef;\n                    v_install_days :=\n                        LEAST (v_wet_date, v_susp_wet) - v_susp_wef;\n                    v_pol_install_wet :=\n                        v_pol_install_wet + NVL (v_install_days, 0);\n                    v_wef_date := v_wef_date;\n                    v_wet_date := v_susp_wef;\n                    v_new_pol_wet := v_pol_cover_to + NVL (v_install_days, 0);\n                --  RAISE_ERROR('SDYS='||v_suspend_days||'IDYS='||v_install_days||'WET='||v_wet_date||'WEF='||v_wef_date||'SWEF='||v_susp_wef||'PTO='||v_pol_cover_to||'NPWET='||v_new_pol_wet||'PIWT='||v_pol_install_wet);\n                ELSIF     NVL (v_susp_reinstate, 'N') = 'Y'\n                      AND NVL (v_susp_reinst_type, 'PREM') = 'PREM'\n                THEN\n                    v_wef_date := v_wef_date;\n                    v_wet_date := v_wet_date;\n                ELSE\n                    --RAISE_ERROR(v_wef_date||'='||v_wet_date||'='||v_pol_install_wet);\n                    IF NVL (v_pol_loaded, 'N') = 'Y'\n                    THEN\n                        v_wet_date :=\n                            LEAST (v_wet_date,\n                                   NVL (v_pol_install_wet, v_wet_date));\n                    ELSE\n                        v_wet_date := v_wet_date;\n                    END IF;\n                --  v_wet_date := LEAST(v_wet_date,NVL(v_pol_install_wet,v_wet_date));\n                END IF;\n            --RAISE_ERROR(v_wef_date||'='||v_wet_date||'='||v_pol_install_wet||'='||v_pol_cover_from||'='||v_months_added||'='||v_install_period||'='||v_pol_cover_to);\n            END IF;                                                         --\n        END IF;\n\n        -- RAISE_ERROR(v_install_period||'='||v_wet_date||'='||v_months_added||' = '||v_increment||' ='||v_pol_cover_to);\n        --RAISE_ERROR(v_wef_date||'='||v_wet_date||'='||v_pol_install_wet||'='||v_pol_cover_from||'='||v_months_added||'='||v_install_period||'='||v_pol_cover_to);\n        v_cover_days := TO_NUMBER (v_wet_date - v_wef_date);\n\n        --RAISE_ERROR(v_wef_date||'='||v_wet_date||'='||v_cover_days||'='||v_pro_expiry_period);\n        IF NVL (v_pro_expiry_period, 'Y') = 'Y'\n        THEN\n            v_cover_days := v_cover_days + 1;\n        END IF;\n    --     RAISE_ERROR('v_new_pol_wet= '||v_new_pol_wet);\n    END;",
        "pop_mand_policy_rsk_limits": "PROCEDURE pop_mand_policy_rsk_limits (v_new_ipu_code   IN NUMBER,\n                                          v_scl_code       IN NUMBER,\n                                          v_bind_code      IN NUMBER,\n                                          v_cvt_code       IN NUMBER,\n                                          v_batch_no       IN NUMBER)\n    IS                 -- populates mandatory sections for non binder policies\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_pol_binder                VARCHAR2 (2);\n        v_ncd_status                gin_insured_property_unds.ipu_ncd_status%TYPE;\n        v_ncd_level                 gin_insured_property_unds.ipu_ncd_level%TYPE;\n\n        CURSOR pil_cur IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type != 'ND'\n                   AND sect_code IN\n                           (SELECT scvts_sect_code\n                              FROM gin_subcl_covt_sections\n                             WHERE     scvts_scl_code = v_scl_code\n                                   AND scvts_covt_code = v_cvt_code\n                                   AND NVL (scvts_mandatory, 'N') = 'Y')\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code)\n            UNION\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND NVL (v_ncd_status, 'N') = 'Y'\n                   AND NVL (v_ncd_level, 0) > 0\n                   AND sect_type = 'ND'\n                   AND sect_code IN\n                           (SELECT scvts_sect_code\n                              FROM gin_subcl_covt_sections\n                             WHERE     scvts_scl_code = v_scl_code\n                                   AND scvts_covt_code = v_cvt_code\n                                   AND NVL (scvts_mandatory, 'N') = 'Y')\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n    BEGIN\n        BEGIN\n            SELECT pol_binder_policy,\n                   NVL (ipu_ncd_status, 'N'),\n                   NVL (ipu_ncd_level, 0)\n              INTO v_pol_binder, v_ncd_status, v_ncd_level\n              FROM gin_policies, gin_insured_property_unds\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND ipu_code = v_new_ipu_code\n                   AND pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error determining the policy binder...');\n        END;\n\n        IF NVL (v_pol_binder, 'N') != 'Y'\n        THEN     --AND Tqc_Parameters_Pkg.get_org_type(37) NOT IN ('INS') THEN\n            FOR pil_cur_rec IN pil_cur\n            LOOP\n                v_row := NVL (v_row, 0) + 1;\n\n                --raise_Error('innnnnnnnnnnn');\n                BEGIN\n                    SELECT sec_declaration\n                      INTO v_pil_declaration_section\n                      FROM gin_subcl_sections\n                     WHERE     sec_sect_code = pil_cur_rec.sect_code\n                           AND sec_scl_code = v_scl_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to retrieve the section declaration status');\n                END;\n\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections.1.');\n                END;\n            END LOOP;\n        END IF;\n    END pop_mand_policy_rsk_limits;",
        "get_ren_policy_no": "PROCEDURE get_ren_policy_no (v_prod_code       IN     NUMBER,\n                                 v_prod_sht_desc   IN     VARCHAR2,\n                                 v_brn_code        IN     NUMBER,\n                                 v_brn_sht_desc    IN     VARCHAR2,\n                                 v_pol_binder      IN     VARCHAR2,\n                                 v_pol_type        IN     VARCHAR2,\n                                 v_policy_no       IN OUT VARCHAR2,\n                                 v_endos_no        IN OUT VARCHAR2,\n                                 v_batch_no        IN OUT NUMBER)\n    IS\n        v_serial       VARCHAR2 (10);\n        v_pol_prefix   VARCHAR2 (15);\n    BEGIN\n        DBMS_OUTPUT.put_line ('GPOL' || 1);\n\n        --\n        BEGIN\n            SELECT pro_policy_prefix\n              INTO v_pol_prefix\n              FROM gin_products\n             WHERE pro_code = v_prod_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                raise_error (\n                       'The product '\n                    || v_prod_sht_desc\n                    || ' is not defined in the setup');\n            WHEN OTHERS\n            THEN\n                raise_error (\n                       'Unable to retrieve the policy prefix for the product '\n                    || v_prod_sht_desc);\n        END;\n\n        IF v_pol_prefix IS NULL\n        THEN\n            raise_error (\n                   'The policy prefix for the product '\n                || v_prod_sht_desc\n                || ' is not defined in the setup');\n        END IF;\n\n        BEGIN\n            get_policy_seq (v_pol_prefix,\n                            v_brn_code,\n                            TO_NUMBER (TO_CHAR (TRUNC (SYSDATE), 'RRRR')),\n                            2,\n                            v_serial);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Unable to retrieve the policy number sequence');\n        END;\n\n        IF v_policy_no IS NULL\n        THEN\n            IF v_pol_binder = 'N'\n            THEN\n                IF v_pol_type = 'N'\n                THEN\n                    v_policy_no :=\n                           v_brn_sht_desc\n                        || 'P'\n                        || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                        || v_pol_prefix\n                        || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), 0);\n                ELSE\n                    v_policy_no :=\n                           v_brn_sht_desc\n                        || 'P'\n                        || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                        || 'R'\n                        || v_pol_prefix\n                        || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), 0);\n                END IF;\n            ELSE\n                v_policy_no :=\n                       v_brn_sht_desc\n                    || 'P'\n                    || 'B'\n                    || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                    || v_pol_prefix\n                    || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), 0);\n            END IF;\n        END IF;\n\n        DBMS_OUTPUT.put_line ('GPOL' || 2);\n\n        IF v_endos_no IS NULL\n        THEN\n            IF NVL (v_pol_type, 'N') = 'N'\n            THEN\n                v_endos_no :=\n                       'E'\n                    || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                    || v_pol_prefix\n                    || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), '0')\n                    || v_brn_sht_desc;\n            ELSE\n                v_endos_no :=\n                       'E'\n                    || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                    || 'R'\n                    || v_pol_prefix\n                    || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), '0')\n                    || v_brn_sht_desc;\n            END IF;\n        END IF;\n\n        IF v_batch_no IS NULL\n        THEN\n            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YY'))\n                   || gin_pol_batch_no_seq.NEXTVAL\n              INTO v_batch_no\n              FROM DUAL;\n        END IF;\n\n        --RAISE_ERROR(232332);\n        DBMS_OUTPUT.put_line ('GPOL' || 3);\n\n        BEGIN\n            NULL;                         -- Check_Policy_Unique(v_policy_no);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error generating Policy number ' || v_policy_no);\n        END;\n\n        DBMS_OUTPUT.put_line ('GPOL' || 4);\n    END;",
        "get_policy_no": "PROCEDURE get_policy_no (v_prod_code       IN     NUMBER,\n                             v_prod_sht_desc   IN     VARCHAR2,\n                             v_brn_code        IN     NUMBER,\n                             v_brn_sht_desc    IN     VARCHAR2,\n                             v_pol_binder      IN     VARCHAR2,\n                             v_pol_type        IN     VARCHAR2,\n                             v_policy_no       IN OUT VARCHAR2,\n                             v_endos_no        IN OUT VARCHAR2,\n                             v_batch_no        IN OUT NUMBER)\n    IS\n        v_serial       VARCHAR2 (10);\n        v_pol_prefix   VARCHAR2 (15);\n    BEGIN\n        DBMS_OUTPUT.put_line ('GPOL' || 1);\n\n        IF v_policy_no IS NULL\n        THEN\n            BEGIN\n                SELECT pro_policy_prefix\n                  INTO v_pol_prefix\n                  FROM gin_products\n                 WHERE pro_code = v_prod_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    raise_error (\n                           'The product '\n                        || v_prod_sht_desc\n                        || ' is not defined in the setup');\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                           'Unable to retrieve the policy prefix for the product '\n                        || v_prod_sht_desc);\n            END;\n\n            IF v_pol_prefix IS NULL\n            THEN\n                raise_error (\n                       'The policy prefix for the product '\n                    || v_prod_sht_desc\n                    || ' is not defined in the setup');\n            END IF;\n\n            BEGIN\n                get_policy_seq (\n                    v_pol_prefix,\n                    v_brn_code,\n                    TO_NUMBER (TO_CHAR (TRUNC (SYSDATE), 'RRRR')),\n                    2,\n                    v_serial);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Unable to retrieve the policy number sequence');\n            END;\n\n            IF v_pol_binder = 'N'\n            THEN\n                IF v_pol_type = 'N'\n                THEN\n                    v_policy_no :=\n                           v_brn_sht_desc\n                        || 'P'\n                        || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                        || v_pol_prefix\n                        || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), 0);\n                ELSE\n                    v_policy_no :=\n                           v_brn_sht_desc\n                        || 'P'\n                        || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                        || 'R'\n                        || v_pol_prefix\n                        || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), 0);\n                END IF;\n            ELSE\n                v_policy_no :=\n                       v_brn_sht_desc\n                    || 'P'\n                    || 'B'\n                    || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                    || v_pol_prefix\n                    || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), 0);\n            END IF;\n        END IF;\n\n        DBMS_OUTPUT.put_line ('GPOL' || 2);\n\n        IF v_endos_no IS NULL\n        THEN\n            IF v_pol_type = 'N'\n            THEN\n                v_endos_no :=\n                       'E'\n                    || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                    || v_pol_prefix\n                    || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), '0')\n                    || v_brn_sht_desc;\n            ELSE\n                v_endos_no :=\n                       'E'\n                    || TO_CHAR (TRUNC (SYSDATE), 'YY')\n                    || 'R'\n                    || v_pol_prefix\n                    || LPAD (v_serial, 6 - LENGTH (v_pol_prefix), '0')\n                    || v_brn_sht_desc;\n            END IF;\n        END IF;\n\n        IF v_batch_no IS NULL\n        THEN\n            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YY'))\n                   || gin_pol_batch_no_seq.NEXTVAL\n              INTO v_batch_no\n              FROM DUAL;\n        END IF;\n\n        DBMS_OUTPUT.put_line ('GPOL' || 3);\n\n        BEGIN\n            check_policy_unique (v_policy_no);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error generating Policy number ' || v_policy_no);\n        END;\n\n        DBMS_OUTPUT.put_line ('GPOL' || 4);\n    --v_policy_no := v_pol_policy_no;\n    --v_endos_no  := v_pol_endos_no;\n    --v_batch_no  := v_pol_batch_no;\n    END;",
        "pop_policy_rsk_limits": "PROCEDURE pop_policy_rsk_limits (v_new_ipu_code   IN NUMBER,\n                                     v_scl_code       IN NUMBER,\n                                     v_bind_code      IN NUMBER,\n                                     v_cvt_code       IN NUMBER,\n                                     v_batch_no       IN NUMBER)\n    IS\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_pol_binder                VARCHAR2 (2);\n        v_ncd_status                gin_insured_property_unds.ipu_ncd_status%TYPE;\n        v_ncd_level                 gin_insured_property_unds.ipu_ncd_level%TYPE;\n\n        CURSOR pil_cur IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_si_rate,\n                   prr_si_limit_type,\n                   prr_min_rate,\n                   prr_max_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND (   sect_type != 'ND'\n                        OR (    sect_type = 'ND'\n                            AND NVL (v_ncd_status, 'N') = 'Y'\n                            AND NVL (v_ncd_level, 0) > 0))\n                   AND sect_code IN\n                           (SELECT scvts_sect_code\n                              FROM gin_subcl_covt_sections\n                             WHERE     scvts_scl_code = v_scl_code\n                                   AND scvts_covt_code = v_cvt_code)\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n    BEGIN\n        BEGIN\n            SELECT pol_binder_policy,\n                   NVL (ipu_ncd_status, 'N'),\n                   NVL (ipu_ncd_level, 0)\n              INTO v_pol_binder, v_ncd_status, v_ncd_level\n              FROM gin_policies, gin_insured_property_unds\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND ipu_code = v_new_ipu_code\n                   AND pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error determining the policy binder...');\n        END;\n\n        --IF (NVL(v_pol_binder,'N') ='Y' AND Tqc_Parameters_Pkg.get_org_type(37) NOT IN ('INS')) THEN\n        -- RAISE_ERROR('BINDER POLICY '||v_pol_binder);\n        IF NVL (v_pol_binder, 'N') = 'Y'\n        THEN\n            FOR pil_cur_rec IN pil_cur\n            LOOP\n                v_row := NVL (v_row, 0) + 1;\n\n                BEGIN\n                    SELECT sec_declaration\n                      INTO v_pil_declaration_section\n                      FROM gin_subcl_sections\n                     WHERE     sec_sect_code = pil_cur_rec.sect_code\n                           AND sec_scl_code = v_scl_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_when_others (\n                            'Unable to retrieve the section declaration status');\n                END;\n\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_si_limit_type,\n                                    pil_si_rate,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_si_limit_type,\n                                        pil_cur_rec.prr_si_rate,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..3');\n                END;\n            END LOOP;\n        --        IF NVL(v_row,0) = 0 THEN\n        --            RAISE_APPLICATION_ERROR(-20001, 'Sections already defined or Premium rates not defined for the selected class and binder...');\n        --        END IF;\n        END IF;\n    END;",
        "process_stp_rsk_limits": "PROCEDURE process_stp_rsk_limits (v_new_ipu_code    IN NUMBER,\n                                      v_scl_code        IN NUMBER,\n                                      v_bind_code       IN NUMBER,\n                                      v_sect_code       IN NUMBER,\n                                      v_limit           IN NUMBER,\n                                      v_row             IN NUMBER,\n                                      v_add_edit        IN VARCHAR2,\n                                      v_rsk_sect_data   IN rsk_sect_tab)\n    IS\n        v_sect_sht_desc            VARCHAR2 (30);\n        v_sect_desc                VARCHAR2 (80);\n        v_sect_type                VARCHAR2 (30);\n        v_type_desc                VARCHAR2 (30);\n        v_prr_rate_type            VARCHAR2 (10);\n        v_prr_rate                 NUMBER;\n        v_terr_description         VARCHAR2 (30);\n        v_prr_prem_minimum_amt     NUMBER;\n        v_prr_multiplier_rate      NUMBER;\n        v_prr_division_factor      NUMBER;\n        v_prr_multplier_div_fact   NUMBER;\n        v_prr_rate_desc            VARCHAR2 (30);\n        v_batch_no                 NUMBER;\n        v_prr_max_rate             NUMBER;\n        v_prr_min_rate             NUMBER;\n\n        CURSOR pil_cur (vsectcode   IN NUMBER,\n                        vbindcode   IN NUMBER,\n                        vsclcode    IN NUMBER)\n        IS\n            SELECT sect_sht_desc,\n                   sect_desc,\n                   sect_type,\n                   type_desc,\n                   prr_rate_type,\n                   prr_rate,\n                   terr_description,\n                   prr_prem_minimum_amt,\n                   prr_multiplier_rate,\n                   prr_division_factor,\n                   prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM (SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc                      sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')    type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate                       rate,\n                           '0'                            terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type = 'FXD'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type IN ('SRG', 'RCU')\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type = 'ARG'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'ND', 'NCD')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type = 'ND');\n    BEGIN\n        BEGIN\n            ---RAISE_ERROR('v_sect_code'||v_sect_code||'v_bind_code'||v_bind_code||'v_scl_code'||v_scl_code);\n            OPEN pil_cur (v_sect_code, v_bind_code, v_scl_code);\n\n            LOOP\n                EXIT WHEN pil_cur%NOTFOUND;\n\n                FETCH pil_cur\n                    INTO v_sect_sht_desc,\n                         v_sect_desc,\n                         v_sect_type,\n                         v_type_desc,\n                         v_prr_rate_type,\n                         v_prr_rate,\n                         v_terr_description,\n                         v_prr_prem_minimum_amt,\n                         v_prr_multiplier_rate,\n                         v_prr_division_factor,\n                         v_prr_multplier_div_fact,\n                         v_prr_rate_desc,\n                         v_prr_max_rate,\n                         v_prr_min_rate;\n            END LOOP;\n\n            CLOSE pil_cur;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                       'Error getting the premium rates for 1st section..'\n                    || v_sect_code\n                    || '-'\n                    || v_bind_code\n                    || '-'\n                    || v_scl_code);\n        END;\n\n        IF NVL (v_add_edit, 'A') = 'A'\n        THEN\n            BEGIN\n                INSERT INTO gin_policy_insured_limits (\n                                pil_code,\n                                pil_ipu_code,\n                                pil_sect_code,\n                                pil_sect_sht_desc,\n                                pil_desc,\n                                pil_row_num,\n                                pil_calc_group,\n                                pil_limit_amt,\n                                pil_prem_rate,\n                                pil_prem_amt,\n                                pil_rate_type,\n                                pil_rate_desc,\n                                pil_sect_type,\n                                pil_original_prem_rate,\n                                pil_multiplier_rate,\n                                pil_multiplier_div_factor,\n                                pil_annual_premium,\n                                pil_rate_div_fact,\n                                --PIL_DESC,\n                                pil_compute,\n                                pil_prd_type,\n                                pil_dual_basis,\n                                pil_prem_accumulation,\n                                pil_declaration_section,\n                                pil_annual_actual_prem,\n                                pil_comment,\n                                pil_free_limit,\n                                pil_limit_prd,\n                                pil_prorata_full,\n                                pil_prr_max_rate,\n                                pil_prr_min_rate)\n                         VALUES (\n                                       TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                                    || gin_pil_code_seq.NEXTVAL,\n                                    v_new_ipu_code,\n                                    v_sect_code,\n                                    v_sect_sht_desc,\n                                    v_sect_desc,\n                                    v_row,\n                                    NVL (v_rsk_sect_data (1).pil_calc_group,\n                                         1),\n                                    NVL (v_rsk_sect_data (1).pil_limit_amt,\n                                         v_limit),\n                                    NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                         v_prr_rate),\n                                    NVL (v_rsk_sect_data (1).pil_prem_amt, 0),\n                                    v_prr_rate_type,\n                                    v_prr_rate_desc,\n                                    v_sect_type,\n                                    v_prr_rate,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_multiplier_rate,\n                                        v_prr_multiplier_rate),\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_multiplier_div_factor,\n                                        v_prr_multplier_div_fact),\n                                    0,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_rate_div_fact,\n                                        v_prr_division_factor),\n                                    --v_type_desc,\n                                    NVL (v_rsk_sect_data (1).pil_compute,\n                                         'Y'),\n                                    NULL,\n                                    NVL (v_rsk_sect_data (1).pil_dual_basis,\n                                         'N'),\n                                    0,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_declaration_section,\n                                        'N'),\n                                    0,\n                                    v_rsk_sect_data (1).pil_comment,\n                                    v_rsk_sect_data (1).pil_free_limit_amt,\n                                    v_rsk_sect_data (1).pil_limit_prd,\n                                    v_rsk_sect_data (1).pil_prorata_full,\n                                    v_prr_max_rate,\n                                    v_prr_min_rate);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error inserting risk sections..4');\n            END;\n        ELSE\n            BEGIN\n                UPDATE gin_policy_insured_limits\n                   SET pil_limit_amt =\n                           NVL (v_rsk_sect_data (1).pil_limit_amt, v_limit),\n                       pil_prem_rate =\n                           NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                v_prr_rate),\n                       pil_sect_type = v_sect_type,\n                       pil_min_premium = v_prr_prem_minimum_amt,\n                       pil_rate_type = v_prr_rate_type,\n                       pil_rate_desc = v_prr_rate_desc,\n                       pil_rate_div_fact =\n                           NVL (v_rsk_sect_data (1).pil_rate_div_fact,\n                                v_prr_division_factor),\n                       pil_multiplier_rate =\n                           NVL (v_rsk_sect_data (1).pil_multiplier_rate,\n                                v_prr_multiplier_rate),\n                       pil_multiplier_div_factor =\n                           NVL (\n                               v_rsk_sect_data (1).pil_multiplier_div_factor,\n                               v_prr_multplier_div_fact),\n                       pil_row_num = v_row,\n                       pil_compute =\n                           NVL (v_rsk_sect_data (1).pil_compute, 'Y'),\n                       pil_desc = v_sect_desc,\n                       pil_dual_basis =\n                           NVL (v_rsk_sect_data (1).pil_dual_basis, 'N'),\n                       pil_calc_group =\n                           NVL (v_rsk_sect_data (1).pil_calc_group, 1),\n                       pil_prem_amt =\n                           NVL (v_rsk_sect_data (1).pil_prem_amt, 0),\n                       pil_comment = v_rsk_sect_data (1).pil_comment,\n                       pil_declaration_section =\n                           NVL (v_rsk_sect_data (1).pil_declaration_section,\n                                'N'),\n                       pil_free_limit_amt =\n                           v_rsk_sect_data (1).pil_free_limit_amt,\n                       pil_limit_prd = v_rsk_sect_data (1).pil_limit_prd,\n                       pil_prorata_full =\n                           v_rsk_sect_data (1).pil_prorata_full,\n                       pil_prr_max_rate = v_prr_max_rate,\n                       pil_prr_min_rate = v_prr_min_rate\n                 WHERE     pil_ipu_code = v_new_ipu_code\n                       AND pil_code = v_rsk_sect_data (1).pil_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error updating risk sections..');\n            END;\n        END IF;\n    END;",
        "del_quot_risks": "PROCEDURE del_quot_risks (v_qr_code IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_quot_risk_excess\n         WHERE qre_qr_code = v_qr_code;\n\n        DELETE gin_quot_risk_clauses\n         WHERE qrc_qr_code = v_qr_code;\n\n        DELETE gin_quot_risk_limits\n         WHERE qrl_qr_code = v_qr_code;\n\n        DELETE gin_quot_risks\n         WHERE qr_code = v_qr_code;\n    END;",
        "del_quot_prod": "PROCEDURE del_quot_prod (v_qp_code IN NUMBER)\n    IS\n        CURSOR qp_risks IS\n            SELECT qr_code\n              FROM gin_quot_risks\n             WHERE qr_qp_code = v_qp_code;\n    BEGIN\n        FOR qpr IN qp_risks\n        LOOP\n            del_quot_risks (qpr.qr_code);\n        END LOOP;\n\n        DELETE gin_quot_product_taxes\n         WHERE qpt_qp_code = v_qp_code;\n\n        DELETE gin_quot_clauses\n         WHERE qc_qp_code = v_qp_code;\n\n        DELETE gin_quot_products\n         WHERE qp_code = v_qp_code;\n    END;",
        "del_quotation": "PROCEDURE del_quotation (v_quot_code IN NUMBER)\n    IS\n        CURSOR quot_prods IS\n            SELECT qp_code\n              FROM gin_quot_products\n             WHERE qp_quot_code = v_quot_code;\n    BEGIN\n        FOR qps IN quot_prods\n        LOOP\n            del_quot_prod (qps.qp_code);\n        END LOOP;\n\n        DELETE gin_policy_exceptions\n         WHERE gpe_quot_code = v_quot_code;\n\n        DELETE gin_quotations\n         WHERE quot_code = v_quot_code;\n    END;",
        "process_ren_rsk_limits": "PROCEDURE process_ren_rsk_limits (v_new_ipu_code    IN NUMBER,\n                                      v_scl_code        IN NUMBER,\n                                      v_bind_code       IN NUMBER,\n                                      v_sect_code       IN NUMBER,\n                                      v_limit           IN NUMBER,\n                                      v_row             IN NUMBER,\n                                      v_add_edit        IN VARCHAR2,\n                                      v_rsk_sect_data   IN rsk_sect_tab)\n    IS\n        v_sect_sht_desc            VARCHAR2 (30);\n        v_sect_desc                VARCHAR2 (80);\n        v_sect_type                VARCHAR2 (30);\n        v_type_desc                VARCHAR2 (30);\n        v_prr_rate_type            VARCHAR2 (10);\n        v_prr_rate                 NUMBER;\n        v_terr_description         VARCHAR2 (30);\n        v_prr_prem_minimum_amt     NUMBER;\n        v_prr_multiplier_rate      NUMBER;\n        v_prr_division_factor      NUMBER;\n        v_prr_multplier_div_fact   NUMBER;\n        v_prr_rate_desc            VARCHAR2 (30);\n\n        CURSOR pil_cur (vsectcode   IN NUMBER,\n                        vbindcode   IN NUMBER,\n                        vsclcode    IN NUMBER)\n        IS\n            SELECT sect_sht_desc,\n                   sect_desc,\n                   sect_type,\n                   type_desc,\n                   prr_rate_type,\n                   prr_rate,\n                   terr_description,\n                   prr_prem_minimum_amt,\n                   prr_multiplier_rate,\n                   prr_division_factor,\n                   prr_multplier_div_fact,\n                   prr_rate_desc\n              FROM (SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc                      sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')    type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate                       rate,\n                           '0'                            terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type = 'FXD'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type IN ('SRG', 'RCU')\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type = 'ARG'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'ND', 'NCD')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type = 'ND');\n    BEGIN\n        BEGIN\n            OPEN pil_cur (v_sect_code, v_bind_code, v_scl_code);\n\n            LOOP\n                EXIT WHEN pil_cur%NOTFOUND;\n\n                FETCH pil_cur\n                    INTO v_sect_sht_desc,\n                         v_sect_desc,\n                         v_sect_type,\n                         v_type_desc,\n                         v_prr_rate_type,\n                         v_prr_rate,\n                         v_terr_description,\n                         v_prr_prem_minimum_amt,\n                         v_prr_multiplier_rate,\n                         v_prr_division_factor,\n                         v_prr_multplier_div_fact,\n                         v_prr_rate_desc;\n            END LOOP;\n\n            CLOSE pil_cur;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                       'Error getting the premium rates for 1st section..'\n                    || v_sect_code\n                    || '-'\n                    || v_bind_code\n                    || '-'\n                    || v_scl_code);\n        END;\n\n        IF NVL (v_add_edit, 'A') = 'A'\n        THEN\n            BEGIN\n                INSERT INTO gin_ren_policy_insured_limits (\n                                pil_code,\n                                pil_ipu_code,\n                                pil_sect_code,\n                                pil_sect_sht_desc,\n                                pil_desc,\n                                pil_row_num,\n                                pil_calc_group,\n                                pil_limit_amt,\n                                pil_prem_rate,\n                                pil_prem_amt,\n                                pil_rate_type,\n                                pil_rate_desc,\n                                pil_sect_type,\n                                pil_original_prem_rate,\n                                pil_multiplier_rate,\n                                pil_multiplier_div_factor,\n                                pil_annual_premium,\n                                pil_rate_div_fact,\n                                --PIL_DESC,\n                                pil_compute,\n                                pil_prd_type,\n                                pil_dual_basis,\n                                pil_prem_accumulation,\n                                pil_declaration_section,\n                                --    PIL_ANNUAL_ACTUAL_PREM,\n                                pil_comment,\n                                pil_free_limit,\n                                pil_limit_prd)\n                         VALUES (\n                                    gin_pil_code_seq.NEXTVAL,\n                                    v_new_ipu_code,\n                                    v_sect_code,\n                                    v_sect_sht_desc,\n                                    v_sect_desc,\n                                    v_row,\n                                    NVL (v_rsk_sect_data (1).pil_calc_group,\n                                         1),\n                                    NVL (v_rsk_sect_data (1).pil_limit_amt,\n                                         v_limit),\n                                    NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                         v_prr_rate),\n                                    NVL (v_rsk_sect_data (1).pil_prem_amt, 0),\n                                    v_prr_rate_type,\n                                    v_prr_rate_desc,\n                                    v_sect_type,\n                                    v_prr_rate,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_multiplier_rate,\n                                        v_prr_multiplier_rate),\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_multiplier_div_factor,\n                                        v_prr_multplier_div_fact),\n                                    0,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_rate_div_fact,\n                                        v_prr_division_factor),\n                                    --v_type_desc,\n                                    NVL (v_rsk_sect_data (1).pil_compute,\n                                         'Y'),\n                                    NULL,\n                                    NVL (v_rsk_sect_data (1).pil_dual_basis,\n                                         'N'),\n                                    0,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_declaration_section,\n                                        'N'),\n                                    --0,\n                                    v_rsk_sect_data (1).pil_comment,\n                                    v_rsk_sect_data (1).pil_free_limit_amt,\n                                    v_rsk_sect_data (1).pil_limit_prd);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error inserting risk sections..5');\n            END;\n        ELSE\n            BEGIN\n                UPDATE gin_ren_policy_insured_limits\n                   SET --PIL_SECT_CODE=v_sect_code, PIL_SECT_SHT_DESC=v_sect_sht_desc,\n                       pil_limit_amt =\n                           NVL (v_rsk_sect_data (1).pil_limit_amt, v_limit),\n                       pil_prem_rate =\n                           NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                v_prr_rate),\n                       pil_sect_type = v_sect_type,\n                       pil_min_premium = v_prr_prem_minimum_amt,\n                       pil_rate_type = v_prr_rate_type,\n                       pil_rate_desc = v_prr_rate_desc,\n                       pil_rate_div_fact =\n                           NVL (v_rsk_sect_data (1).pil_rate_div_fact,\n                                v_prr_division_factor),\n                       pil_multiplier_rate =\n                           NVL (v_rsk_sect_data (1).pil_multiplier_rate,\n                                v_prr_multiplier_rate),\n                       pil_multiplier_div_factor =\n                           NVL (\n                               v_rsk_sect_data (1).pil_multiplier_div_factor,\n                               v_prr_multplier_div_fact),\n                       pil_row_num = v_row,\n                       pil_compute =\n                           NVL (v_rsk_sect_data (1).pil_compute, 'Y'),\n                       pil_desc = v_sect_desc,\n                       pil_dual_basis =\n                           NVL (v_rsk_sect_data (1).pil_dual_basis, 'N'),\n                       pil_calc_group =\n                           NVL (v_rsk_sect_data (1).pil_calc_group, 1),\n                       pil_prem_amt =\n                           NVL (v_rsk_sect_data (1).pil_prem_amt, 0),\n                       pil_comment = v_rsk_sect_data (1).pil_comment,\n                       pil_declaration_section =\n                           NVL (v_rsk_sect_data (1).pil_declaration_section,\n                                'N'),\n                       pil_free_limit_amt =\n                           v_rsk_sect_data (1).pil_free_limit_amt,\n                       pil_limit_prd = v_rsk_sect_data (1).pil_limit_prd\n                 WHERE     pil_ipu_code = v_new_ipu_code\n                       AND pil_code = v_rsk_sect_data (1).pil_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error updating risk sections..');\n            END;\n        END IF;\n    END;",
        "process_quot_rsk_limits": "PROCEDURE process_quot_rsk_limits (v_qr_code         IN NUMBER,\n                                       v_qp_code         IN NUMBER,\n                                       v_quot_code       IN NUMBER,\n                                       v_pro_code        IN NUMBER,\n                                       v_scl_code        IN NUMBER,\n                                       v_bind_code       IN NUMBER,\n                                       v_sect_code       IN NUMBER,\n                                       v_limit           IN NUMBER,\n                                       v_row             IN NUMBER,\n                                       v_add_edit        IN VARCHAR2,\n                                       v_rsk_sect_data   IN rsk_sect_tab   --,\n                                                                        --v_qrl_code     IN NUMBER\n                                                                        )\n    IS\n        v_sect_sht_desc            VARCHAR2 (30);\n        v_sect_desc                VARCHAR2 (80);\n        v_sect_type                VARCHAR2 (30);\n        v_type_desc                VARCHAR2 (30);\n        v_prr_rate_type            VARCHAR2 (10);\n        v_prr_rate                 NUMBER;\n        v_terr_description         VARCHAR2 (30);\n        v_prr_prem_minimum_amt     NUMBER;\n        v_prr_multiplier_rate      NUMBER;\n        v_prr_division_factor      NUMBER;\n        v_prr_multplier_div_fact   NUMBER;\n        v_prr_rate_desc            VARCHAR2 (30);\n\n        CURSOR pil_cur (vsectcode   IN NUMBER,\n                        vbindcode   IN NUMBER,\n                        vsclcode    IN NUMBER)\n        IS\n            SELECT sect_sht_desc,\n                   sect_desc,\n                   sect_type,\n                   type_desc,\n                   prr_rate_type,\n                   prr_rate,\n                   terr_description,\n                   prr_prem_minimum_amt,\n                   prr_multiplier_rate,\n                   prr_division_factor,\n                   prr_multplier_div_fact,\n                   prr_rate_desc\n              FROM (SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc                      sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')    type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate                       rate,\n                           '0'                            terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type = 'FXD'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type IN ('SRG', 'RCU')\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type = 'ARG'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'ND', 'NCD')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type = 'ND');\n    BEGIN\n        BEGIN\n            OPEN pil_cur (v_sect_code, v_bind_code, v_scl_code);\n\n            LOOP\n                EXIT WHEN pil_cur%NOTFOUND;\n\n                FETCH pil_cur\n                    INTO v_sect_sht_desc,\n                         v_sect_desc,\n                         v_sect_type,\n                         v_type_desc,\n                         v_prr_rate_type,\n                         v_prr_rate,\n                         v_terr_description,\n                         v_prr_prem_minimum_amt,\n                         v_prr_multiplier_rate,\n                         v_prr_division_factor,\n                         v_prr_multplier_div_fact,\n                         v_prr_rate_desc;\n            END LOOP;\n\n            CLOSE pil_cur;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                       'Error getting the premium rates for 1st section..'\n                    || v_sect_code\n                    || '-'\n                    || v_bind_code\n                    || '-'\n                    || v_scl_code);\n        END;\n\n        IF NVL (v_add_edit, 'A') = 'A'\n        THEN\n            BEGIN\n                INSERT INTO gin_quot_risk_limits (qrl_code,\n                                                  qrl_ipu_code,\n                                                  qrl_sect_code,\n                                                  qrl_sect_sht_desc,\n                                                  qrl_limit_amt,\n                                                  qrl_prem_rate,\n                                                  qrl_prem_amt,\n                                                  qrl_qr_code,\n                                                  qrl_qr_quot_code,\n                                                  qrl_qp_pro_code,\n                                                  qrl_qp_code,\n                                                  qrl_sect_type,\n                                                  qrl_min_premium,\n                                                  qrl_rate_type,\n                                                  qrl_rate_desc,\n                                                  qrl_rate_div_factor,\n                                                  qrl_multiplier_rate,\n                                                  qrl_multiplier_div_factor,\n                                                  qrl_row_num,\n                                                  qrl_calc_group,\n                                                  qrl_compute,\n                                                  qrl_annual_prem,\n                                                  qrl_used_limit,\n                                                  qrl_desc,\n                                                  qrl_dual_basis,\n                                                  qrl_indem_prd,\n                                                  qrl_prd_type,\n                                                  qrl_indem_fstprd,\n                                                  qrl_indem_fstprd_pct,\n                                                  qrl_indem_remprd_pct,\n                                                  qrl_free_limit)\n                         VALUES (\n                                    TO_NUMBER (\n                                           TO_CHAR (SYSDATE, 'YYYY')\n                                        || gin_qrl_code_seq.NEXTVAL),\n                                    NULL,\n                                    v_sect_code,\n                                    v_sect_sht_desc,\n                                    NVL (v_rsk_sect_data (1).pil_limit_amt,\n                                         v_limit),\n                                    NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                         v_prr_rate),\n                                    NVL (v_rsk_sect_data (1).pil_prem_amt, 0),\n                                    v_qr_code,\n                                    v_quot_code,\n                                    v_pro_code,\n                                    v_qp_code,\n                                    v_sect_type,\n                                    v_prr_prem_minimum_amt,\n                                    v_prr_rate_type,\n                                    v_prr_rate_desc,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_rate_div_fact,\n                                        v_prr_division_factor),\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_multiplier_rate,\n                                        v_prr_multiplier_rate),\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_multiplier_div_factor,\n                                        v_prr_multplier_div_fact),\n                                    v_row,\n                                    NVL (v_rsk_sect_data (1).pil_calc_group,\n                                         1),\n                                    NVL (v_rsk_sect_data (1).pil_compute,\n                                         'Y'),\n                                    0,\n                                    NULL,\n                                    v_sect_desc,\n                                    NVL (v_rsk_sect_data (1).pil_dual_basis,\n                                         'N'),\n                                    NULL,\n                                    NULL,\n                                    NULL,\n                                    NULL,\n                                    NULL,\n                                    v_rsk_sect_data (1).pil_free_limit_amt);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error inserting risk sections..');\n            END;\n        ELSE\n            BEGIN\n                UPDATE gin_quot_risk_limits\n                   SET --QRL_SECT_CODE=v_sect_code, QRL_SECT_SHT_DESC=v_sect_sht_desc,\n                       qrl_limit_amt =\n                           NVL (v_rsk_sect_data (1).pil_limit_amt, v_limit),\n                       qrl_prem_rate =\n                           NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                v_prr_rate),\n                       qrl_qp_pro_code = v_pro_code,\n                       qrl_sect_type = v_sect_type,\n                       qrl_min_premium = v_prr_prem_minimum_amt,\n                       qrl_rate_type = v_prr_rate_type,\n                       qrl_rate_desc = v_prr_rate_desc,\n                       qrl_rate_div_factor =\n                           NVL (v_rsk_sect_data (1).pil_rate_div_fact,\n                                v_prr_division_factor),\n                       qrl_multiplier_rate =\n                           NVL (v_rsk_sect_data (1).pil_multiplier_rate,\n                                v_prr_multiplier_rate),\n                       qrl_multiplier_div_factor =\n                           NVL (\n                               v_rsk_sect_data (1).pil_multiplier_div_factor,\n                               v_prr_multplier_div_fact),\n                       qrl_row_num = v_row,\n                       qrl_calc_group =\n                           NVL (v_rsk_sect_data (1).pil_calc_group, 1),\n                       qrl_compute =\n                           NVL (v_rsk_sect_data (1).pil_compute, 'Y'),\n                       qrl_desc = v_sect_desc,\n                       qrl_dual_basis =\n                           NVL (v_rsk_sect_data (1).pil_dual_basis, 'N'),\n                       qrl_prem_amt =\n                           NVL (v_rsk_sect_data (1).pil_prem_amt, 0),\n                       qrl_free_limit =\n                           v_rsk_sect_data (1).pil_free_limit_amt\n                 WHERE     qrl_qr_code = v_qr_code\n                       AND qrl_code = v_rsk_sect_data (1).pil_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error updating risk sections..');\n            END;\n        END IF;\n    END;\n\n    --",
        "pop_quot_rsk_limits": "PROCEDURE pop_quot_rsk_limits (v_qr_code     IN NUMBER,\n                                   v_qp_code     IN NUMBER,\n                                   v_quot_code   IN NUMBER,\n                                   v_pro_code    IN NUMBER,\n                                   v_scl_code    IN NUMBER,\n                                   v_bind_code   IN NUMBER,\n                                   v_cvt_code    IN NUMBER)\n    IS\n    BEGIN\n        update_mandatory_sections (v_qr_code,\n                                   v_scl_code,\n                                   v_bind_code,\n                                   v_cvt_code,\n                                   NULL,\n                                   'N',\n                                   'Q');\n    END;",
        "pop_ren_clauses": "PROCEDURE pop_ren_clauses (v_pol_policy_no   IN VARCHAR2,\n                               v_pol_endos_no    IN VARCHAR2,\n                               v_pol_batch_no    IN NUMBER,\n                               v_pro_code        IN NUMBER)\n    IS\n        v_clause   LONG;\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_ren_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no);\n    BEGIN\n        FOR cls IN clause\n        LOOP\n            INSERT INTO gin_ren_policy_lvl_clauses (plcl_sbcl_cls_code,\n                                                    plcl_sbcl_scl_code,\n                                                    plcl_pro_sht_desc,\n                                                    plcl_pro_code,\n                                                    plcl_pol_policy_no,\n                                                    plcl_pol_ren_endos_no,\n                                                    plcl_pol_batch_no,\n                                                    plcl_sbcl_cls_sht_desc,\n                                                    plcl_cls_type, --PLCL_CLAUSE,\n                                                    plcl_cls_editable,\n                                                    plcl_new,\n                                                    plcl_heading)\n                 VALUES (cls.sbcl_cls_code,\n                         cls.clp_scl_code,\n                         cls.clp_pro_sht_desc,\n                         cls.clp_pro_code,\n                         v_pol_policy_no,\n                         v_pol_endos_no,\n                         v_pol_batch_no,\n                         cls.sbcl_cls_sht_desc,\n                         cls.cls_type,                          --PLCL_CLAUSE,\n                         cls.cls_editable,\n                         'Y',\n                         cls.cls_heading);\n\n            IF NVL (cls.cls_editable, 'N') = 'Y'\n            THEN\n                SELECT cls_wording\n                  INTO v_clause\n                  FROM gin_clause\n                 WHERE cls_code = cls.sbcl_cls_code;\n\n                BEGIN\n                    v_clause :=\n                        merge_policies_text (v_pol_batch_no, v_clause);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                UPDATE gin_ren_policy_lvl_clauses\n                   SET plcl_clause = v_clause\n                 WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND plcl_pol_batch_no = v_pol_batch_no;\n            END IF;\n        END LOOP;\n    END;",
        "pop_clauses": "PROCEDURE pop_clauses (v_pol_policy_no   IN VARCHAR2,\n                           v_pol_endos_no    IN VARCHAR2,\n                           v_pol_batch_no    IN NUMBER,\n                           v_pro_code        IN NUMBER)\n    IS\n        v_clause           CLOB;\n        v_pro_mult_class   VARCHAR2 (1);\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                   AND NVL (sbcl_cls_lien_clause, 'N') != 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n            UNION\n            SELECT cls_heading,\n                   scvtmc_cls_sht_desc,\n                   scvtmc_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_scl_cvt_mand_clauses,\n                   gin_product_sub_classes,\n                   gin_clause\n             WHERE     clp_scl_code = scvtmc_scl_code\n                   AND scvtmc_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (scvmtc_cls_mandatory, 'N') = 'Y'\n                   AND scvtmc_sclcovt_code IN\n                           (SELECT ipu_covt_code\n                              FROM gin_insured_property_unds\n                             WHERE ipu_pol_batch_no = v_pol_batch_no)\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n                   AND scvtmc_cls_code NOT IN\n                           (SELECT sbcl_cls_code\n                              FROM gin_subcl_clauses\n                             WHERE     NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                                   AND sbcl_scl_code IN\n                                           (SELECT ipu_sec_scl_code\n                                              FROM gin_insured_property_unds\n                                             WHERE ipu_pol_batch_no =\n                                                   v_pol_batch_no));\n\n        CURSOR pckge_clauses IS\n            SELECT pro_code,\n                   pro_sht_desc,\n                   sbcl_cls_code,\n                   sclcnt,\n                   clscnt,\n                   sbcl_cls_sht_desc,\n                   cls_heading,\n                   cls_type,\n                   cls_editable,\n                   clp_scl_code\n              FROM (  SELECT pro_code,\n                             pro_sht_desc,\n                             MAX (clp_scl_code)     clp_scl_code,\n                             COUNT (1)              sclcnt\n                        FROM gin_products, gin_product_sub_classes\n                       WHERE pro_code = clp_pro_code\n                    --    AND pro_code = 810\n                    GROUP BY pro_code, pro_sht_desc),\n                   (  SELECT clp_pro_code,\n                             sbcl_cls_code,\n                             sbcl_cls_sht_desc,\n                             cls_heading,\n                             cls_type,\n                             cls_editable,\n                             COUNT (1)     clscnt\n                        FROM gin_subcl_clauses,\n                             gin_product_sub_classes,\n                             gin_clause\n                       WHERE     clp_scl_code = sbcl_scl_code\n                             AND sbcl_cls_code = cls_code\n                             AND NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                             AND NVL (sbcl_cls_lien_clause, 'N') != 'Y'\n                    -- AND CLP_pro_code = 810\n                    GROUP BY clp_pro_code,\n                             sbcl_cls_code,\n                             sbcl_cls_sht_desc,\n                             cls_heading,\n                             cls_type,\n                             cls_editable) b\n             WHERE     pro_code = clp_pro_code(+)\n                   AND sbcl_cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n                   AND pro_code = (SELECT pol_pro_code\n                                     FROM gin_policies\n                                    WHERE pol_batch_no = v_pol_batch_no);\n\n        CURSOR clause2 IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                   AND NVL (sbcl_cls_lien_clause, 'N') != 'Y'\n                   AND clp_scl_code IN\n                           (SELECT ipu_sec_scl_code\n                              FROM gin_insured_property_unds\n                             WHERE ipu_pol_batch_no = v_pol_batch_no)\n                   /* AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)*/\n                   AND NOT EXISTS\n                           (SELECT poscl_scl_code, poscl_cls_code\n                              FROM gin_policy_subclass_clauses\n                             WHERE     poscl_pol_policy_no = v_pol_policy_no\n                                   AND poscl_scl_code = clp_scl_code\n                                   AND poscl_cls_code = cls_code);\n\n        CURSOR clause_autofill IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (sbcl_cls_lien_clause, 'N') != 'Y'\n                   AND cls_code IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n            UNION\n            SELECT cls_heading,\n                   scvtmc_cls_sht_desc,\n                   scvtmc_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable\n              FROM gin_scl_cvt_mand_clauses,\n                   gin_product_sub_classes,\n                   gin_clause\n             WHERE     clp_scl_code = scvtmc_scl_code\n                   AND scvtmc_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND cls_code IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no);\n\n        v_rownum           NUMBER := 0;\n        v_scl_cnt          NUMBER;\n    BEGIN\n        BEGIN\n              SELECT pro_mult_class, COUNT (1)\n                INTO v_pro_mult_class, v_scl_cnt\n                FROM gin_products, gin_product_sub_classes\n               WHERE pro_code = clp_pro_code AND pro_code = v_pro_code\n            GROUP BY pro_mult_class;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                NULL;\n        END;\n\n        IF NVL (v_pro_mult_class, 'N') = 'N'         --OR NVL(v_scl_cnt,0) = 1\n        THEN\n            FOR cls IN clause\n            LOOP\n                v_rownum := v_rownum + 1;\n\n                --RAISE_ERROR('v_pro_code= '||v_pro_code||'v_pol_batch_no= '||v_pol_batch_no);\n                INSERT INTO gin_policy_lvl_clauses (plcl_sbcl_cls_code,\n                                                    plcl_sbcl_scl_code,\n                                                    plcl_pro_sht_desc,\n                                                    plcl_pro_code,\n                                                    plcl_pol_policy_no,\n                                                    plcl_pol_ren_endos_no,\n                                                    plcl_pol_batch_no,\n                                                    plcl_sbcl_cls_sht_desc,\n                                                    plcl_cls_type, --PLCL_CLAUSE,\n                                                    plcl_cls_editable,\n                                                    plcl_new,\n                                                    plcl_header,\n                                                    plcl_rownum,\n                                                    plcl_product_appl,\n                                                    plcl_heading)\n                     VALUES (cls.sbcl_cls_code,\n                             cls.clp_scl_code,\n                             cls.clp_pro_sht_desc,\n                             cls.clp_pro_code,\n                             v_pol_policy_no,\n                             v_pol_endos_no,\n                             v_pol_batch_no,\n                             cls.sbcl_cls_sht_desc,\n                             cls.cls_type,                      --PLCL_CLAUSE,\n                             cls.cls_editable,\n                             'Y',\n                             NULL,\n                             v_rownum,\n                             'Y',\n                             cls.cls_heading);\n\n                IF NVL (cls.cls_editable, 'N') = 'Y'\n                THEN\n                    SELECT cls_wording\n                      INTO v_clause\n                      FROM gin_clause\n                     WHERE cls_code = cls.sbcl_cls_code;\n\n                    BEGIN\n                        v_clause :=\n                            merge_policies_text (v_pol_batch_no, v_clause);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n\n                    UPDATE gin_policy_lvl_clauses\n                       SET plcl_clause = v_clause\n                     WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                           AND plcl_pol_batch_no = v_pol_batch_no;\n                END IF;\n            END LOOP;\n        ELSE\n            --raise_error(v_pro_mult_class||'='||v_pol_batch_no||'='||v_pro_code);\n            FOR pcls IN pckge_clauses\n            LOOP\n                IF     NVL (pcls.sclcnt, 0) = NVL (pcls.clscnt, 0)\n                   AND NVL (pcls.clscnt, 0) != 0\n                THEN\n                    INSERT INTO gin_policy_lvl_clauses (\n                                    plcl_sbcl_cls_code,\n                                    plcl_sbcl_scl_code,\n                                    plcl_pro_sht_desc,\n                                    plcl_pro_code,\n                                    plcl_pol_policy_no,\n                                    plcl_pol_ren_endos_no,\n                                    plcl_pol_batch_no,\n                                    plcl_sbcl_cls_sht_desc,\n                                    plcl_cls_type,              --PLCL_CLAUSE,\n                                    plcl_cls_editable,\n                                    plcl_new,\n                                    plcl_header,\n                                    plcl_rownum,\n                                    plcl_product_appl,\n                                    plcl_heading)\n                         VALUES (pcls.sbcl_cls_code,\n                                 pcls.clp_scl_code,\n                                 pcls.pro_sht_desc,\n                                 pcls.pro_code,\n                                 v_pol_policy_no,\n                                 v_pol_endos_no,\n                                 v_pol_batch_no,\n                                 pcls.sbcl_cls_sht_desc,\n                                 pcls.cls_type,                 --PLCL_CLAUSE,\n                                 pcls.cls_editable,\n                                 'Y',\n                                 NULL,\n                                 NULL,\n                                 'Y',\n                                 pcls.cls_heading);\n\n                    IF NVL (pcls.cls_editable, 'N') = 'Y'\n                    THEN\n                        SELECT cls_wording\n                          INTO v_clause\n                          FROM gin_clause\n                         WHERE cls_code = pcls.sbcl_cls_code;\n\n                        BEGIN\n                            v_clause :=\n                                merge_policies_text (v_pol_batch_no,\n                                                     v_clause);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        END;\n\n                        UPDATE gin_policy_lvl_clauses\n                           SET plcl_clause = v_clause\n                         WHERE     plcl_sbcl_cls_code = pcls.sbcl_cls_code\n                               AND plcl_pol_batch_no = v_pol_batch_no;\n                    END IF;\n                END IF;\n            END LOOP;\n\n            FOR cls IN clause2\n            LOOP\n                INSERT INTO gin_policy_subclass_clauses (poscl_cls_code,\n                                                         poscl_sht_desc,\n                                                         poscl_heading,\n                                                         poscl_scl_code,\n                                                         poscl_pol_policy_no,\n                                                         poscl_cls_type,\n                                                         poscl_cls_editable,\n                                                         poscl_new,\n                                                         poscl_pol_batch_no,\n                                                         poscl_code)\n                         VALUES (\n                                    cls.sbcl_cls_code,\n                                    cls.sbcl_cls_sht_desc,\n                                    cls.cls_heading,\n                                    cls.clp_scl_code,\n                                    v_pol_policy_no,\n                                    cls.cls_type,\n                                    cls.cls_editable,\n                                    'Y',\n                                    v_pol_batch_no,\n                                       TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                                    || gin_poscl_code_seq.NEXTVAL);\n\n                IF NVL (cls.cls_editable, 'N') = 'Y'\n                THEN\n                    SELECT cls_wording\n                      INTO v_clause\n                      FROM gin_clause\n                     WHERE cls_code = cls.sbcl_cls_code;\n\n                    BEGIN\n                        v_clause :=\n                            merge_policies_text (v_pol_batch_no, v_clause);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n\n                    UPDATE gin_policy_subclass_clauses\n                       SET poscl_clause = v_clause\n                     WHERE     poscl_cls_code = cls.sbcl_cls_code\n                           AND poscl_pol_policy_no = v_pol_policy_no;\n                END IF;\n            END LOOP;\n\n            /*    FOR cls IN clause2\n                LOOP\n                  -- raise_error('v_pro_mult_class='||v_pro_mult_class||'='||v_pol_batch_no||'='||v_pro_code);\n                   INSERT INTO gin_policy_lvl_clauses\n                               (plcl_sbcl_cls_code, plcl_sbcl_scl_code,\n                                plcl_pro_sht_desc, plcl_pro_code,\n                                plcl_pol_policy_no, plcl_pol_ren_endos_no,\n                                plcl_pol_batch_no, plcl_sbcl_cls_sht_desc,\n                                plcl_cls_type, --plcl_clause,\n                                plcl_cls_editable, plcl_new,\n                                plcl_header, plcl_rownum, plcl_product_appl,\n                                plcl_heading\n                               )\n                        VALUES (cls.sbcl_cls_code, cls.clp_scl_code,\n                                cls.clp_pro_sht_desc, cls.clp_pro_code,\n                                v_pol_policy_no, v_pol_endos_no,\n                                v_pol_batch_no, cls.sbcl_cls_sht_desc,\n                                cls.cls_type,--PLCL_CLAUSE,\n                                cls.cls_editable, 'Y',\n                                NULL, NULL, 'Y',\n                                cls.cls_heading\n                               );\n\n                   IF NVL (cls.cls_editable, 'N') = 'Y'\n                   THEN\n                      SELECT cls_wording\n                        INTO v_clause\n                        FROM gin_clause\n                       WHERE cls_code = cls.sbcl_cls_code;\n\n                      BEGIN\n                         v_clause := merge_policies_text (v_pol_batch_no, v_clause);\n                      EXCEPTION\n                         WHEN OTHERS\n                         THEN\n                            NULL;\n                      END;\n\n                      UPDATE gin_policy_lvl_clauses\n                         SET plcl_clause = v_clause\n                       WHERE plcl_sbcl_cls_code = cls.sbcl_cls_code\n                         AND plcl_pol_batch_no = v_pol_batch_no;\n                   END IF;\n                END LOOP;*/\n\n\n\n            FOR cls IN clause_autofill\n            LOOP\n                IF NVL (cls.cls_editable, 'N') = 'Y'\n                THEN\n                    SELECT cls_wording\n                      INTO v_clause\n                      FROM gin_clause\n                     WHERE cls_code = cls.sbcl_cls_code;\n\n                    BEGIN\n                        v_clause :=\n                            merge_policies_text (v_pol_batch_no, v_clause);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n                --UPDATE gin_policy_lvl_clauses\n                -- SET plcl_clause = v_clause\n                -- WHERE plcl_sbcl_cls_code = cls.sbcl_cls_code\n                -- AND plcl_pol_batch_no = v_pol_batch_no;\n                END IF;\n            END LOOP;\n        END IF;\n    END;",
        "pop_lien_clauses": "PROCEDURE pop_lien_clauses (v_pol_policy_no   IN VARCHAR2,\n                                v_pol_endos_no    IN VARCHAR2,\n                                v_pol_batch_no    IN NUMBER,\n                                v_pro_code        IN NUMBER)\n    IS\n        v_clause           CLOB;\n        v_pro_mult_class   VARCHAR2 (1);\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (sbcl_cls_lien_clause, 'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no);\n\n        CURSOR pckge_clauses IS\n            SELECT pro_code,\n                   pro_sht_desc,\n                   sbcl_cls_code,\n                   sclcnt,\n                   clscnt,\n                   sbcl_cls_sht_desc,\n                   cls_heading,\n                   cls_type,\n                   cls_editable,\n                   clp_scl_code\n              FROM (  SELECT pro_code,\n                             pro_sht_desc,\n                             MAX (clp_scl_code)     clp_scl_code,\n                             COUNT (1)              sclcnt\n                        FROM gin_products, gin_product_sub_classes\n                       WHERE pro_code = clp_pro_code\n                    GROUP BY pro_code, pro_sht_desc),\n                   (  SELECT clp_pro_code,\n                             sbcl_cls_code,\n                             sbcl_cls_sht_desc,\n                             cls_heading,\n                             cls_type,\n                             cls_editable,\n                             COUNT (1)     clscnt\n                        FROM gin_subcl_clauses,\n                             gin_product_sub_classes,\n                             gin_clause\n                       WHERE     clp_scl_code = sbcl_scl_code\n                             AND sbcl_cls_code = cls_code\n                             AND NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                             AND NVL (sbcl_cls_lien_clause, 'N') = 'Y'\n                    GROUP BY clp_pro_code,\n                             sbcl_cls_code,\n                             sbcl_cls_sht_desc,\n                             cls_heading,\n                             cls_type,\n                             cls_editable) b\n             WHERE     pro_code = clp_pro_code(+)\n                   AND sbcl_cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n                   AND pro_code = (SELECT pol_pro_code\n                                     FROM gin_policies\n                                    WHERE pol_batch_no = v_pol_batch_no);\n\n        CURSOR clause2 IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (sbcl_cls_lien_clause, 'N') = 'Y'\n                   AND clp_scl_code IN\n                           (SELECT ipu_sec_scl_code\n                              FROM gin_insured_property_unds\n                             WHERE ipu_pol_batch_no = v_pol_batch_no)\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n                   AND NOT EXISTS\n                           (SELECT poscl_scl_code, poscl_cls_code\n                              FROM gin_policy_subclass_clauses\n                             WHERE     poscl_pol_policy_no = v_pol_policy_no\n                                   AND poscl_scl_code = clp_scl_code\n                                   AND poscl_cls_code = cls_code);\n\n        CURSOR clause_autofill IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND NVL (sbcl_cls_lien_clause, 'N') = 'Y'\n                   AND clp_pro_code = v_pro_code\n                   AND cls_code IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no);\n\n        v_rownum           NUMBER := 0;\n        v_scl_cnt          NUMBER;\n    BEGIN\n        --RAISE_ERROR(v_pro_code||'='||v_pol_batch_no);\n        BEGIN\n              SELECT pro_mult_class, COUNT (1)\n                INTO v_pro_mult_class, v_scl_cnt\n                FROM gin_products, gin_product_sub_classes\n               WHERE pro_code = clp_pro_code AND pro_code = v_pro_code\n            GROUP BY pro_mult_class;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                NULL;\n        END;\n\n        IF NVL (v_pro_mult_class, 'N') = 'N'         --OR NVL(v_scl_cnt,0) = 1\n        THEN\n            FOR cls IN clause\n            LOOP\n                v_rownum := v_rownum + 1;\n\n                INSERT INTO gin_policy_lvl_clauses (plcl_sbcl_cls_code,\n                                                    plcl_sbcl_scl_code,\n                                                    plcl_pro_sht_desc,\n                                                    plcl_pro_code,\n                                                    plcl_pol_policy_no,\n                                                    plcl_pol_ren_endos_no,\n                                                    plcl_pol_batch_no,\n                                                    plcl_sbcl_cls_sht_desc,\n                                                    plcl_cls_type,\n                                                    plcl_cls_editable,\n                                                    plcl_new,\n                                                    plcl_header,\n                                                    plcl_rownum,\n                                                    plcl_product_appl,\n                                                    plcl_heading)\n                     VALUES (cls.sbcl_cls_code,\n                             cls.clp_scl_code,\n                             cls.clp_pro_sht_desc,\n                             cls.clp_pro_code,\n                             v_pol_policy_no,\n                             v_pol_endos_no,\n                             v_pol_batch_no,\n                             cls.sbcl_cls_sht_desc,\n                             cls.cls_type,\n                             cls.cls_editable,\n                             'Y',\n                             NULL,\n                             v_rownum,\n                             'Y',\n                             cls.cls_heading);\n\n                IF NVL (cls.cls_editable, 'N') = 'Y'\n                THEN\n                    SELECT cls_wording\n                      INTO v_clause\n                      FROM gin_clause\n                     WHERE cls_code = cls.sbcl_cls_code;\n\n                    BEGIN\n                        v_clause :=\n                            merge_policies_text (v_pol_batch_no, v_clause);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n\n                    UPDATE gin_policy_lvl_clauses\n                       SET plcl_clause = v_clause\n                     WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                           AND plcl_pol_batch_no = v_pol_batch_no;\n                END IF;\n            END LOOP;\n        ELSE\n            FOR pcls IN pckge_clauses\n            LOOP\n                IF     NVL (pcls.sclcnt, 0) = NVL (pcls.clscnt, 0)\n                   AND NVL (pcls.clscnt, 0) != 0\n                THEN\n                    INSERT INTO gin_policy_lvl_clauses (\n                                    plcl_sbcl_cls_code,\n                                    plcl_sbcl_scl_code,\n                                    plcl_pro_sht_desc,\n                                    plcl_pro_code,\n                                    plcl_pol_policy_no,\n                                    plcl_pol_ren_endos_no,\n                                    plcl_pol_batch_no,\n                                    plcl_sbcl_cls_sht_desc,\n                                    plcl_cls_type,\n                                    plcl_cls_editable,\n                                    plcl_new,\n                                    plcl_header,\n                                    plcl_rownum,\n                                    plcl_product_appl,\n                                    plcl_heading)\n                         VALUES (pcls.sbcl_cls_code,\n                                 pcls.clp_scl_code,\n                                 pcls.pro_sht_desc,\n                                 pcls.pro_code,\n                                 v_pol_policy_no,\n                                 v_pol_endos_no,\n                                 v_pol_batch_no,\n                                 pcls.sbcl_cls_sht_desc,\n                                 pcls.cls_type,\n                                 pcls.cls_editable,\n                                 'Y',\n                                 NULL,\n                                 NULL,\n                                 'Y',\n                                 pcls.cls_heading);\n\n                    IF NVL (pcls.cls_editable, 'N') = 'Y'\n                    THEN\n                        SELECT cls_wording\n                          INTO v_clause\n                          FROM gin_clause\n                         WHERE cls_code = pcls.sbcl_cls_code;\n\n                        BEGIN\n                            v_clause :=\n                                merge_policies_text (v_pol_batch_no,\n                                                     v_clause);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        END;\n\n                        UPDATE gin_policy_lvl_clauses\n                           SET plcl_clause = v_clause\n                         WHERE     plcl_sbcl_cls_code = pcls.sbcl_cls_code\n                               AND plcl_pol_batch_no = v_pol_batch_no;\n                    END IF;\n                END IF;\n            END LOOP;\n\n            FOR cls IN clause2\n            LOOP\n                INSERT INTO gin_policy_subclass_clauses (poscl_cls_code,\n                                                         poscl_sht_desc,\n                                                         poscl_heading,\n                                                         poscl_scl_code,\n                                                         poscl_pol_policy_no,\n                                                         poscl_cls_type,\n                                                         poscl_cls_editable,\n                                                         poscl_new)\n                     VALUES (cls.sbcl_cls_code,\n                             cls.sbcl_cls_sht_desc,\n                             cls.cls_heading,\n                             cls.clp_scl_code,\n                             v_pol_policy_no,\n                             cls.cls_type,\n                             cls.cls_editable,\n                             'Y');\n\n                IF NVL (cls.cls_editable, 'N') = 'Y'\n                THEN\n                    SELECT cls_wording\n                      INTO v_clause\n                      FROM gin_clause\n                     WHERE cls_code = cls.sbcl_cls_code;\n\n                    BEGIN\n                        v_clause :=\n                            merge_policies_text (v_pol_batch_no, v_clause);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n\n                    UPDATE gin_policy_subclass_clauses\n                       SET poscl_clause = v_clause\n                     WHERE     poscl_cls_code = cls.sbcl_cls_code\n                           AND poscl_pol_policy_no = v_pol_policy_no;\n                END IF;\n            END LOOP;\n\n            FOR cls IN clause_autofill\n            LOOP\n                IF NVL (cls.cls_editable, 'N') = 'Y'\n                THEN\n                    SELECT cls_wording\n                      INTO v_clause\n                      FROM gin_clause\n                     WHERE cls_code = cls.sbcl_cls_code;\n\n                    BEGIN\n                        v_clause :=\n                            merge_policies_text (v_pol_batch_no, v_clause);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n                --UPDATE gin_policy_lvl_clauses\n                -- SET plcl_clause = v_clause\n                -- WHERE plcl_sbcl_cls_code = cls.sbcl_cls_code\n                -- AND plcl_pol_batch_no = v_pol_batch_no;\n                END IF;\n            END LOOP;\n        END IF;\n    END;",
        "pop_liab_limits": "PROCEDURE pop_liab_limits (v_pol_policy_no   IN VARCHAR2,\n                               v_pol_endos_no    IN VARCHAR2,\n                               v_pol_batch_no    IN NUMBER,\n                               v_pro_code        IN NUMBER)\n    IS\n        CURSOR pop_limits_liabilities IS\n            SELECT schv_code,\n                   schv_narration,\n                   schv_value,\n                   schv_scl_code\n              FROM gin_schedule_values\n             WHERE schv_scl_code = (SELECT pro_sht_desc\n                                      FROM gin_products\n                                     WHERE pro_code = v_pro_code);\n\n        v_auto_pop_limits_param   VARCHAR2 (1) := 'N';\n        v_trans_type              VARCHAR2 (100);\n    BEGIN\n        v_auto_pop_limits_param :=\n            NVL (\n                GIN_PARAMETERS_PKG.get_param_varchar (\n                    'AUTO_POP_LIMITS_LIABILITIES'),\n                'N');\n\n        BEGIN\n            SELECT pol_policy_status\n              INTO v_trans_type\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_trans_type := NULL;\n        END;\n\n\n        FOR lmts IN pop_limits_liabilities\n        LOOP\n            IF NVL (v_auto_pop_limits_param, 'N') = 'Y'\n            THEN\n                INSERT INTO gin_pol_schedule_values (schpv_code,\n                                                     schpv_schv_code,\n                                                     schpv_pol_batch_no,\n                                                     schpv_value,\n                                                     schpv_narration)\n                     VALUES (gin_schpv_code_seq.NEXTVAL,\n                             lmts.schv_code,\n                             v_pol_batch_no,\n                             lmts.schv_value,\n                             lmts.schv_narration);\n            ELSIF     NVL (v_auto_pop_limits_param, 'N') = 'N'\n                  AND v_trans_type NOT IN ('NB')\n            THEN\n                INSERT INTO gin_pol_schedule_values (schpv_code,\n                                                     schpv_schv_code,\n                                                     schpv_pol_batch_no,\n                                                     schpv_value,\n                                                     schpv_narration)\n                     VALUES (gin_schpv_code_seq.NEXTVAL,\n                             lmts.schv_code,\n                             v_pol_batch_no,\n                             lmts.schv_value,\n                             lmts.schv_narration);\n            END IF;\n        END LOOP;\n    END;",
        "pop_binder_clauses": "PROCEDURE pop_binder_clauses (v_pol_policy_no   IN VARCHAR2,\n                                  v_pol_endos_no    IN VARCHAR2,\n                                  v_pol_batch_no    IN NUMBER,\n                                  v_pro_code        IN NUMBER)\n    IS\n        v_clause   LONG;\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND cls_code IN\n                           (SELECT bsccl_cls_code\n                              FROM gin_binder_subcl_clauses, gin_policies\n                             WHERE     pol_bind_code = bsccl_bind_code\n                                   AND pol_batch_no = v_pol_batch_no\n                                   AND NVL (pol_binder_policy, 'N') = 'Y')\n                   AND clp_pro_code = v_pro_code\n                   --AND NVL(SBCL_CLS_MANDATORY,'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n            UNION\n            SELECT cls_heading,\n                   scvtmc_cls_sht_desc,\n                   scvtmc_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_scl_cvt_mand_clauses,\n                   gin_product_sub_classes,\n                   gin_clause\n             WHERE     clp_scl_code = scvtmc_scl_code\n                   AND scvtmc_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (scvmtc_cls_mandatory, 'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n                   AND scvtmc_cls_code NOT IN\n                           (SELECT sbcl_cls_code\n                              FROM gin_subcl_clauses\n                             WHERE NVL (sbcl_cls_mandatory, 'N') = 'Y');\n    BEGIN\n        FOR cls IN clause\n        LOOP\n            INSERT INTO gin_policy_lvl_clauses (plcl_sbcl_cls_code,\n                                                plcl_sbcl_scl_code,\n                                                plcl_pro_sht_desc,\n                                                plcl_pro_code,\n                                                plcl_pol_policy_no,\n                                                plcl_pol_ren_endos_no,\n                                                plcl_pol_batch_no,\n                                                plcl_sbcl_cls_sht_desc,\n                                                plcl_cls_type,  --PLCL_CLAUSE,\n                                                plcl_cls_editable,\n                                                plcl_new,\n                                                plcl_header,\n                                                plcl_rownum,\n                                                plcl_product_appl,\n                                                plcl_heading)\n                 VALUES (cls.sbcl_cls_code,\n                         cls.clp_scl_code,\n                         cls.clp_pro_sht_desc,\n                         cls.clp_pro_code,\n                         v_pol_policy_no,\n                         v_pol_endos_no,\n                         v_pol_batch_no,\n                         cls.sbcl_cls_sht_desc,\n                         cls.cls_type,                          --PLCL_CLAUSE,\n                         cls.cls_editable,\n                         'Y',\n                         NULL,\n                         NULL,\n                         'Y',\n                         cls.cls_heading);\n\n            IF NVL (cls.cls_editable, 'N') = 'Y'\n            THEN\n                SELECT cls_wording\n                  INTO v_clause\n                  FROM gin_clause\n                 WHERE cls_code = cls.sbcl_cls_code;\n\n                BEGIN\n                    v_clause :=\n                        merge_policies_text (v_pol_batch_no, v_clause);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                UPDATE gin_policy_lvl_clauses\n                   SET plcl_clause = v_clause\n                 WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND plcl_pol_batch_no = v_pol_batch_no;\n            END IF;\n        END LOOP;\n    END;",
        "pop_binder_quot_clauses": "PROCEDURE pop_binder_quot_clauses (\n        v_quot_code     IN NUMBER,\n        v_qp_pro_code   IN NUMBER,\n        v_all_prod      IN BOOLEAN DEFAULT TRUE)\n    IS\n        CURSOR quot_pro IS\n            SELECT *\n              FROM gin_quot_products\n             WHERE qp_quot_code = v_quot_code;\n\n        CURSOR cur_clauses (v_pro_code IN NUMBER, v_qp_code IN NUMBER)\n        IS\n            SELECT cls_code,\n                   cls_sht_desc,\n                   clp_pro_code,\n                   cls_editable,\n                   sbcl_scl_code,\n                   cls_type,\n                   cls_heading\n              FROM gin_clause, gin_product_sub_classes, gin_subcl_clauses\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND cls_code IN\n                           (SELECT bsccl_cls_code\n                              FROM gin_binder_subcl_clauses,\n                                   gin_quot_products\n                             WHERE     qp_bind_code = bsccl_bind_code\n                                   AND qp_code = v_qp_code\n                                   AND NVL (qp_binder, 'N') = 'Y')\n                   AND clp_pro_code = v_pro_code\n                   --AND NVL(SBCL_CLS_MANDATORY,'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT qc_cls_code\n                              FROM gin_quot_clauses\n                             WHERE     qc_pro_code = v_pro_code\n                                   AND qc_qp_code = v_qp_code);\n\n        v_clause   LONG;\n    BEGIN\n        FOR qp IN quot_pro\n        LOOP\n            IF v_all_prod OR qp.qp_pro_code = v_qp_pro_code\n            THEN\n                --RAISE_ERROR('v_quot_code =='||v_quot_code||'v_qp_pro_code =='||v_qp_pro_code);\n                FOR cls IN cur_clauses (qp.qp_pro_code, qp.qp_code)\n                LOOP\n                    BEGIN\n                        --RAISE_ERROR('--------- inserting clauses1..');\n                        INSERT INTO gin_quot_clauses (qc_cls_code,\n                                                      qc_cls_sht_desc,\n                                                      qc_pro_code,\n                                                      qc_quot_code,\n                                                      qc_quot_no,\n                                                      qc_quot_revision_no,\n                                                      qc_qp_code,\n                                                      qc_cls_editable,\n                                                      qc_sbcl_scl_code,\n                                                      qc_cls_type,\n                                                      qrc_cls_type,\n                                                      qc_cls_heading)\n                             VALUES (cls.cls_code,\n                                     cls.cls_sht_desc,\n                                     cls.clp_pro_code,\n                                     qp.qp_quot_code,\n                                     qp.qp_quot_no,\n                                     qp.qp_quot_revision_no,\n                                     qp.qp_code,\n                                     cls.cls_editable,\n                                     cls.sbcl_scl_code,\n                                     cls.cls_type,\n                                     NULL,\n                                     cls.cls_heading);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error inserting clauses..');\n                    END;\n\n                    SELECT cls_wording\n                      INTO v_clause\n                      FROM gin_clause\n                     WHERE cls_code = cls.cls_code;\n\n                    UPDATE gin_quot_clauses\n                       SET qc_clause = v_clause\n                     WHERE     qc_cls_code = cls.cls_code\n                           AND qc_qp_code = qp.qp_code;\n                --RAISE_ERROR('--------- inserting clauses2..');\n                END LOOP;\n            END IF;\n        END LOOP;\n    END;",
        "pop_quot_clauses": "PROCEDURE pop_quot_clauses (v_quot_code     IN NUMBER,\n                                v_qp_pro_code   IN NUMBER,\n                                v_all_prod      IN BOOLEAN DEFAULT TRUE)\n    IS\n        CURSOR quot_pro IS\n            SELECT *\n              FROM gin_quot_products\n             WHERE qp_quot_code = v_quot_code;\n\n        CURSOR cur_clauses (v_pro_code IN NUMBER, v_qp_code IN NUMBER)\n        IS\n            SELECT cls_code,\n                   cls_sht_desc,\n                   clp_pro_code,\n                   cls_editable,\n                   sbcl_scl_code,\n                   cls_type,\n                   cls_heading\n              FROM gin_clause, gin_product_sub_classes, gin_subcl_clauses\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT qc_cls_code\n                              FROM gin_quot_clauses\n                             WHERE     qc_pro_code = v_pro_code\n                                   AND qc_qp_code = v_qp_code);\n\n        v_clause   LONG;\n    BEGIN\n        FOR qp IN quot_pro\n        LOOP\n            IF v_all_prod OR qp.qp_pro_code = v_qp_pro_code\n            THEN\n                FOR cls IN cur_clauses (qp.qp_pro_code, qp.qp_code)\n                LOOP\n                    BEGIN\n                        INSERT INTO gin_quot_clauses (qc_cls_code,\n                                                      qc_cls_sht_desc,\n                                                      qc_pro_code,\n                                                      qc_quot_code,\n                                                      qc_quot_no,\n                                                      qc_quot_revision_no,\n                                                      qc_qp_code,\n                                                      qc_cls_editable,\n                                                      qc_sbcl_scl_code,\n                                                      qc_cls_type,\n                                                      qrc_cls_type,\n                                                      qc_cls_heading)\n                             VALUES (cls.cls_code,\n                                     cls.cls_sht_desc,\n                                     cls.clp_pro_code,\n                                     qp.qp_quot_code,\n                                     qp.qp_quot_no,\n                                     qp.qp_quot_revision_no,\n                                     qp.qp_code,\n                                     cls.cls_editable,\n                                     cls.sbcl_scl_code,\n                                     cls.cls_type,\n                                     NULL,\n                                     cls.cls_heading);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error inserting clauses..');\n                    END;\n\n                    SELECT cls_wording\n                      INTO v_clause\n                      FROM gin_clause\n                     WHERE cls_code = cls.cls_code;\n\n                    UPDATE gin_quot_clauses\n                       SET qc_clause = v_clause\n                     WHERE     qc_cls_code = cls.cls_code\n                           AND qc_qp_code = qp.qp_code;\n                END LOOP;\n            END IF;\n        END LOOP;\n    END;",
        "pop_insured": "PROCEDURE pop_insured (v_pol_policy_no   IN VARCHAR2,\n                           v_pol_endos_no    IN VARCHAR2,\n                           v_pol_batch_no    IN NUMBER,\n                           v_prp_code        IN NUMBER)\n    IS\n    BEGIN\n        INSERT INTO gin_policy_insureds (polin_code,\n                                         polin_pol_policy_no,\n                                         polin_pol_ren_endos_no,\n                                         polin_pol_batch_no,\n                                         polin_prp_code)\n                 VALUES (\n                               TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                            || polin_code_seq.NEXTVAL,\n                            v_pol_policy_no,  ---:GIN_POLICIES1.POL_POLICY_NO,\n                            v_pol_endos_no,\n                            ---:GIN_POLICIES1.POL_REN_ENDOS_NO,\n                            v_pol_batch_no,    ---:GIN_POLICIES1.POL_BATCH_NO,\n                            v_prp_code);      ---:GIN_POLICIES1.POL_PRP_CODE);\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error ('Error inserting Insureds..');\n    END;",
        "pop_taxes": "PROCEDURE pop_taxes (v_pol_policy_no   IN VARCHAR2,\n                         v_pol_endos_no    IN VARCHAR2,\n                         v_pol_batch_no    IN NUMBER,\n                         v_pro_code        IN NUMBER,\n                         v_pol_binder      IN VARCHAR2 DEFAULT 'N',\n                         v_trans_type      IN VARCHAR2)\n    IS\n        v_cnt                      NUMBER;\n        v_pol_policy_type          VARCHAR2 (1);\n        v_pop_taxes                VARCHAR2 (1);\n        v_scl_code                 NUMBER;\n        v_allowsdonfacrein_param   VARCHAR2 (1);\n        v_con_type                 VARCHAR2 (100) := NULL;\n        v_sd_param                 VARCHAR2 (1) := 'N';\n\n        CURSOR sub_class IS\n            SELECT *\n              FROM gin_insured_property_unds\n             WHERE ipu_pol_batch_no = v_pol_batch_no;\n\n        CURSOR taxes (v_scl_code NUMBER)\n        IS\n            SELECT *\n              FROM gin_taxes_types_view\n             WHERE     (   scl_code IS NULL\n                        OR scl_code IN\n                               (SELECT clp_scl_code\n                                  FROM gin_product_sub_classes\n                                 WHERE     clp_pro_code = v_pro_code\n                                       AND clp_scl_code = v_scl_code))\n                   AND trnt_mandatory = 'Y'\n                   AND trnt_type IN ('UTX',\n                                     'SD',\n                                     'UTL',\n                                     'EX',\n                                     'PHFUND',\n                                     'MPSD',\n                                     'MSD',\n                                     'COPHFUND',\n                                     'PRM-VAT',\n                                     'ROAD',\n                                     'HEALTH',\n                                     'CERTCHG',\n                                     'MOTORTX')\n                   AND taxr_trnt_code NOT IN\n                           (SELECT ptx_trac_trnt_code\n                              FROM gin_policy_taxes\n                             WHERE ptx_pol_batch_no = v_pol_batch_no)\n                   AND NVL (\n                           DECODE (v_trans_type,\n                                   'NB', trnt_apply_nb,\n                                   'SP', trnt_apply_sp,\n                                   'RN', trnt_apply_rn,\n                                   'EN', trnt_apply_en,\n                                   'CN', trnt_apply_cn,\n                                   'EX', trnt_apply_ex,\n                                   'DC', trnt_apply_dc,\n                                   'RE', trnt_apply_re,\n                                   'ME', trnt_apply_re /*This was added to resolve ME policies which were not populating taxes*/\n                                                      ),\n                           'N') =\n                       'Y'\n                   AND trnt_code NOT IN (SELECT petx_trnt_code\n                                           FROM gin_product_excluded_taxes\n                                          WHERE petx_pro_code = v_pro_code);\n    BEGIN\n        IF v_pol_batch_no = 2019181747\n        THEN\n            RAISE_ERROR ('TEST THIS');\n        END IF;\n\n        BEGIN\n            SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR (\n                       'ALLOW_SD_ON_BINDER_POLICY')\n              INTO v_sd_param\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_sd_param := 'N';\n        END;\n\n        BEGIN\n            SELECT pol_policy_type, NVL (pol_pop_taxes, 'Y')\n              INTO v_pol_policy_type, v_pop_taxes\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error Checking the policy ...');\n        END;\n\n        ---RAISE_eRROR(v_pol_policy_type||' = '||v_pop_taxes);\n\n        BEGIN\n            v_allowsdonfacrein_param :=\n                gin_parameters_pkg.get_param_varchar ('ALLOW_SD_ON_FACREIN');\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_allowsdonfacrein_param := 'N';\n            WHEN OTHERS\n            THEN\n                v_allowsdonfacrein_param := 'N';\n        END;\n\n        FOR sub_class_rec IN sub_class\n        LOOP\n            v_con_type := UPPER (TRIM (sub_class_rec.ipu_conveyance_type));\n\n            IF v_con_type NOT IN ('SEA',\n                                  'AIR',\n                                  'RAIL',\n                                  'ROAD')\n            THEN\n                v_con_type := UPPER (TRIM (sub_class_rec.ipu_covt_sht_desc));\n            END IF;\n\n            IF NVL (sub_class_rec.ipu_sec_scl_code, 0) = 0\n            THEN\n                raise_error (\n                       'sub_class_rec.ipu_sec_scl_code: '\n                    || sub_class_rec.ipu_sec_scl_code);\n            END IF;\n\n            --RAISE_ERROR('v_pol_policy_type='||v_pol_policy_type||'v_pop_taxes='||v_pop_taxes||'v_pol_binder='||v_pol_binder||'v_sd_param='||v_sd_param);\n            IF     NVL (v_pol_policy_type, 'N') = 'N'\n               AND NVL (v_pop_taxes, 'Y') = 'Y'\n            THEN\n                FOR taxes_rec IN taxes (sub_class_rec.ipu_sec_scl_code)\n                LOOP\n                    --RAISE_eRROR(v_pol_policy_type||' = '||v_pop_taxes);\n                    IF NOT (    taxes_rec.trnt_type = 'SD'\n                            AND NVL (v_pol_binder, 'N') = 'Y'\n                            AND v_sd_param = 'N')\n                    THEN\n                        v_cnt := NVL (v_cnt, 0) + 1;\n\n                        BEGIN\n                            INSERT INTO gin_policy_taxes (\n                                            ptx_trac_scl_code,\n                                            ptx_trac_trnt_code,\n                                            ptx_pol_policy_no,\n                                            ptx_pol_ren_endos_no,\n                                            ptx_pol_batch_no,\n                                            ptx_rate,\n                                            ptx_amount,\n                                            ptx_tl_lvl_code,\n                                            ptx_rate_type,\n                                            ptx_rate_desc,\n                                            ptx_endos_diff_amt,\n                                            ptx_tax_type,\n                                            ptx_risk_pol_level)\n                                     VALUES (\n                                                sub_class_rec.ipu_sec_scl_code,\n                                                --taxes_rec.taxr_scl_code,\n                                                taxes_rec.trnt_code,\n                                                v_pol_policy_no,\n                                                v_pol_endos_no,\n                                                v_pol_batch_no,\n                                                taxes_rec.taxr_rate,\n                                                NULL,\n                                                'UP',\n                                                taxes_rec.taxr_rate_type,\n                                                taxes_rec.taxr_rate_desc,\n                                                NULL,\n                                                taxes_rec.trnt_type,\n                                                NVL (\n                                                    taxes_rec.taxr_application_area,\n                                                    'P'));\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error ('Error applying taxes..');\n                        END;\n                    END IF;\n                END LOOP;\n            ELSIF v_pol_policy_type = 'F' AND NVL (v_pop_taxes, 'Y') = 'Y'\n            THEN\n                FOR taxes_rec IN taxes (sub_class_rec.ipu_sec_scl_code)\n                LOOP\n                    IF NVL (v_allowsdonfacrein_param, 'N') = 'Y'\n                    THEN\n                        IF     taxes_rec.trnt_type = 'SD'\n                           AND NVL (v_trans_type, 'XX') = 'NB'\n                        THEN\n                            v_cnt := NVL (v_cnt, 0) + 1;\n\n                            BEGIN\n                                INSERT INTO gin_policy_taxes (\n                                                ptx_trac_scl_code,\n                                                ptx_trac_trnt_code,\n                                                ptx_pol_policy_no,\n                                                ptx_pol_ren_endos_no,\n                                                ptx_pol_batch_no,\n                                                ptx_rate,\n                                                ptx_amount,\n                                                ptx_tl_lvl_code,\n                                                ptx_rate_type,\n                                                ptx_rate_desc,\n                                                ptx_endos_diff_amt,\n                                                ptx_tax_type,\n                                                ptx_risk_pol_level)\n                                         VALUES (\n                                                    sub_class_rec.ipu_sec_scl_code,\n                                                    --taxes_rec.taxr_scl_code,\n                                                    taxes_rec.trnt_code,\n                                                    v_pol_policy_no,\n                                                    v_pol_endos_no,\n                                                    v_pol_batch_no,\n                                                    taxes_rec.taxr_rate,\n                                                    NULL,\n                                                    'UP',\n                                                    taxes_rec.taxr_rate_type,\n                                                    taxes_rec.taxr_rate_desc,\n                                                    NULL,\n                                                    taxes_rec.trnt_type,\n                                                    NVL (\n                                                        taxes_rec.taxr_application_area,\n                                                        'P'));\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    raise_error ('Error applying taxes..');\n                            END;\n                        END IF;\n                    END IF;\n                END LOOP;\n            END IF;\n        END LOOP;\n\n        --- raise_error('v_con_type: '||v_con_type);\n\n        IF NVL (TRIM (v_con_type), 'XYZ') = 'AIR'\n        THEN\n            DELETE gin_policy_taxes\n             WHERE     ptx_trac_trnt_code = 'MPSD'\n                   AND ptx_pol_batch_no = v_pol_batch_no;\n        END IF;\n\n        IF NVL (TRIM (v_con_type), 'XYZ') = 'SEA'\n        THEN\n            DELETE gin_policy_taxes\n             WHERE     ptx_trac_trnt_code = 'SD'\n                   AND ptx_pol_batch_no = v_pol_batch_no;\n\n            UPDATE gin_policy_taxes\n               SET ptx_tl_lvl_code = 'SI'\n             WHERE     ptx_trac_trnt_code = 'MPSD'\n                   AND ptx_pol_batch_no = v_pol_batch_no;\n        END IF;\n\n        --RAISE_eRROR(v_pol_policy_type||' 88888 '||v_pop_taxes);\n\n        IF NVL (v_cnt, 0) != 0\n        THEN\n            BEGIN\n                UPDATE gin_policies\n                   SET pol_prem_computed = 'N'\n                 WHERE pol_batch_no = v_pol_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error updating policy premium status to changed');\n            END;\n        END IF;\n    END;",
        "pop_quot_taxes": "PROCEDURE pop_quot_taxes (v_quot_code IN NUMBER)\n    IS\n        x   NUMBER := 0;\n\n        CURSOR qprod IS\n            SELECT *\n              FROM gin_quot_products\n             WHERE qp_quot_code = v_quot_code;\n\n        CURSOR taxes (v_prod_code IN NUMBER, v_qp_code IN NUMBER)\n        IS\n            SELECT *\n              FROM gin_taxes_types_view\n             WHERE     (   scl_code IS NULL\n                        OR scl_code IN (SELECT clp_scl_code\n                                          FROM gin_product_sub_classes\n                                         WHERE clp_pro_code = v_prod_code))\n                   AND trnt_mandatory = 'Y'\n                   AND trnt_type IN ('UTX',\n                                     'SD',\n                                     'UTL',\n                                     'EX',\n                                     'PRM-VAT',\n                                     'ROAD',\n                                     'HEALTH')\n                   AND taxr_trnt_code NOT IN (SELECT qpt_trac_trnt_code\n                                                FROM gin_quot_product_taxes\n                                               WHERE qpt_qp_code = v_qp_code)\n                   AND NVL (trnt_apply_nb, 'N') = 'Y'\n                   AND trnt_code NOT IN (SELECT petx_trnt_code\n                                           FROM gin_product_excluded_taxes\n                                          WHERE petx_pro_code = v_prod_code);\n    BEGIN\n        FOR qp IN qprod\n        LOOP\n            FOR txs IN taxes (qp.qp_pro_code, qp.qp_code)\n            LOOP\n                x := NVL (x, 0) + 1;\n\n                INSERT INTO gin_quot_product_taxes (qpt_code,\n                                                    qpt_trac_trnt_code,\n                                                    qpt_rate,\n                                                    qpt_rate_type,\n                                                    qpt_trnt_renewal_endos,\n                                                    qpt_taxr_code,\n                                                    qpt_qp_code,\n                                                    qpt_quot_code,\n                                                    qpt_tax_type,\n                                                    qpt_tl_lvl_code,\n                                                    qpt_risk_prod_level)\n                     VALUES (gin_qpt_code_seq.NEXTVAL,\n                             txs.trnt_code,\n                             txs.taxr_rate,\n                             txs.taxr_rate_type,\n                             NULL,\n                             txs.taxr_code,\n                             qp.qp_code,\n                             v_quot_code,\n                             'UTX',\n                             'UP',\n                             'P');\n            END LOOP;\n        END LOOP;\n    END;",
        "pop_quick_quot_taxes": "PROCEDURE pop_quick_quot_taxes (v_qqtn_code   IN NUMBER,\n                                    v_prod_code   IN NUMBER,\n                                    v_con_type    IN VARCHAR2 DEFAULT NULL)\n    IS\n        x   NUMBER := 0;\n\n        CURSOR taxes IS\n            SELECT *\n              FROM gin_taxes_types_view\n             WHERE     (   scl_code IS NULL\n                        OR scl_code IN (SELECT clp_scl_code\n                                          FROM gin_product_sub_classes\n                                         WHERE clp_pro_code = v_prod_code))\n                   -- AND trnt_mandatory = 'Y'\n                   --AND trnt_type IN ('PHFUND', 'SD', 'UTL', 'EX','MPSD','MSD','COPHFUND')\n                   AND trnt_type IN ('UTX',\n                                     'SD',\n                                     'UTL',\n                                     'EX',\n                                     'PHFUND',\n                                     'MPSD',\n                                     'MSD',\n                                     'ROAD',\n                                     'HEALTH',\n                                     'CERTCHG',\n                                     'MOTORTX')\n                   AND taxr_trnt_code NOT IN\n                           (SELECT qqtt_trac_trnt_code\n                              FROM gin_quick_quot_taxes\n                             WHERE qqtt_qqtn_code = v_qqtn_code)\n                   AND NVL (trnt_apply_nb, 'N') = 'Y'\n                   AND trnt_code NOT IN (SELECT petx_trnt_code\n                                           FROM gin_product_excluded_taxes\n                                          WHERE petx_pro_code = v_prod_code);\n    BEGIN\n        --      RAISE_ERROR(v_qqtn_code ||'='|| v_prod_code);\n        FOR txs IN taxes\n        LOOP\n            x := NVL (x, 0) + 1;\n\n            --        IF txs.trnt_type='MSD' THEN\n            --        RAISE_ERROR(v_qqtn_code ||'='|| v_prod_code);\n            --       END IF;\n            INSERT INTO gin_quick_quot_taxes (qqtt_code,\n                                              qqtt_trac_trnt_code,\n                                              qqtt_rate,\n                                              qqtt_rate_type,\n                                              qqtt_trnt_renewal_endos,\n                                              qqtt_taxr_code,\n                                              qqtt_qqtn_code,\n                                              qqtt_tax_type,\n                                              qqtt_tl_lvl_code,\n                                              qqtt_risk_prod_level)\n                 VALUES (gin_qqtt_code_seq.NEXTVAL,\n                         txs.trnt_code,\n                         txs.taxr_rate,\n                         txs.taxr_rate_type,\n                         NULL,\n                         txs.taxr_code,\n                         v_qqtn_code,\n                         'UTX',\n                         'UP',\n                         'P');\n        END LOOP;\n\n        IF NVL (TRIM (v_con_type), 'XYZ') = 'SEA'\n        THEN\n            DELETE gin_quick_quot_taxes\n             WHERE     qqtt_trac_trnt_code = 'SD'\n                   AND qqtt_qqtn_code = v_qqtn_code;\n\n            UPDATE gin_quick_quot_taxes\n               SET qqtt_tl_lvl_code = 'SI'\n             WHERE     qqtt_trac_trnt_code = 'MPSD'\n                   AND qqtt_qqtn_code = v_qqtn_code;\n        END IF;\n\n        IF NVL (TRIM (v_con_type), 'XYZ') = 'AIR'\n        THEN\n            DELETE gin_quick_quot_taxes\n             WHERE     qqtt_trac_trnt_code = 'MPSD'\n                   AND qqtt_qqtn_code = v_qqtn_code;\n        END IF;\n    END;",
        "pop_ren_taxes": "PROCEDURE pop_ren_taxes (v_pol_policy_no   IN VARCHAR2,\n                             v_pol_endos_no    IN VARCHAR2,\n                             v_pol_batch_no    IN NUMBER,\n                             v_pro_code        IN NUMBER,\n                             v_pol_binder      IN VARCHAR2 DEFAULT 'N',\n                             v_trans_type      IN VARCHAR2)\n    IS\n        CURSOR taxes IS\n            SELECT *\n              FROM gin_taxes_types_view\n             WHERE     (   scl_code IS NULL\n                        OR scl_code IN (SELECT clp_scl_code\n                                          FROM gin_product_sub_classes\n                                         WHERE clp_pro_code = v_pro_code))\n                   AND trnt_mandatory = 'Y'\n                   AND trnt_type IN ('UTX',\n                                     'UTL',\n                                     'EX',\n                                     'PHFUND',\n                                     'PRM-VAT',\n                                     'ROAD',\n                                     'HEALTH',\n                                     'CERTCHG',\n                                     'MOTORTX')                        --'SD',\n                   AND taxr_trnt_code NOT IN\n                           (SELECT ptx_trac_trnt_code\n                              FROM gin_ren_policy_taxes\n                             WHERE ptx_pol_batch_no = v_pol_batch_no)\n                   AND NVL (\n                           DECODE (v_trans_type,\n                                   'NB', trnt_apply_nb,\n                                   'SP', trnt_apply_sp,\n                                   'RN', trnt_apply_rn,\n                                   'EN', trnt_apply_en,\n                                   'CN', trnt_apply_cn,\n                                   'EX', trnt_apply_ex,\n                                   'DC', trnt_apply_dc,\n                                   'RE', trnt_apply_re),\n                           'N') =\n                       'Y'\n                   AND trnt_code NOT IN (SELECT petx_trnt_code\n                                           FROM gin_product_excluded_taxes\n                                          WHERE petx_pro_code = v_pro_code);\n    BEGIN\n        FOR taxes_rec IN taxes\n        LOOP\n            IF NOT (    taxes_rec.trnt_type = 'SD'\n                    AND NVL (v_pol_binder, 'N') = 'Y')\n            THEN\n                BEGIN\n                    INSERT INTO gin_ren_policy_taxes (ptx_trac_scl_code,\n                                                      ptx_trac_trnt_code,\n                                                      ptx_pol_policy_no,\n                                                      ptx_pol_ren_endos_no,\n                                                      ptx_pol_batch_no,\n                                                      ptx_rate,\n                                                      ptx_amount,\n                                                      ptx_tl_lvl_code,\n                                                      ptx_rate_type,\n                                                      ptx_rate_desc,\n                                                      ptx_endos_diff_amt,\n                                                      ptx_tax_type,\n                                                      ptx_risk_pol_level)\n                         VALUES (taxes_rec.taxr_scl_code,\n                                 taxes_rec.trnt_code,\n                                 v_pol_policy_no,\n                                 v_pol_endos_no,\n                                 v_pol_batch_no,\n                                 taxes_rec.taxr_rate,\n                                 NULL,\n                                 'UP',\n                                 taxes_rec.taxr_rate_type,\n                                 taxes_rec.taxr_rate_desc,\n                                 NULL,\n                                 taxes_rec.trnt_type,\n                                 'P');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error applying taxes..');\n                END;\n            END IF;\n        END LOOP;\n    END;",
        "gin_tmplt_schedules": "PROCEDURE gin_tmplt_schedules (v_web_ipu_code   IN NUMBER,\n                                   v_pro_code       IN NUMBER,\n                                   v_new_ipu_code   IN NUMBER,\n                                   v_property_id    IN VARCHAR2,\n                                   v_risk_value     IN NUMBER,\n                                   v_cover_type     IN VARCHAR2)\n    IS\n        v_cnt   NUMBER (4);\n\n        CURSOR sched_cur IS\n              SELECT clp_unwr_scr_code,\n                     screen_name,\n                     INITCAP (scl_sht_desc)     scl_sht_desc\n                FROM gin_product_sub_classes, gin_screens, gin_sub_classes\n               WHERE     clp_unwr_scr_code = screen_code\n                     AND clp_scl_code = scl_code\n                     AND clp_pro_code = v_pro_code\n                     AND screen_name IS NOT NULL\n            GROUP BY clp_unwr_scr_code, screen_name, scl_sht_desc;\n\n        CURSOR rsks_cur IS\n            SELECT mps_reg_no,\n                   mps_make,\n                   mps_cubic_capacity,\n                   mps_yr_manft,\n                   mps_carry_capacity,\n                   mps_value,\n                   mps_body_type,\n                   mps_cover_type,\n                   mps_covt_code,\n                   mps_itemno,\n                   mps_chasis_no,\n                   mps_engine_no,\n                   mps_color,\n                   mps_logbook,\n                   mps_acc_limit,\n                   mps_itmno_code,\n                   mps_waiver_1st_amt,\n                   mps_car_hire\n              FROM gin_web_motor_sch\n             WHERE mps_ipu_code = v_web_ipu_code;\n    BEGIN\n        FOR rsks_cur_rec IN rsks_cur\n        LOOP\n            FOR sched_cur_rec IN sched_cur\n            LOOP\n                IF sched_cur_rec.screen_name = 'UMOTORP'\n                THEN\n                    BEGIN\n                        SELECT COUNT (1)\n                          INTO v_cnt\n                          FROM gin_motor_private_sch\n                         WHERE mps_ipu_code = TO_NUMBER (v_new_ipu_code);\n\n                        raise_error ('SCHEDULE COUNT ' || v_cnt);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error securing whether Motor schedule exists..1');\n                    END;\n\n                    IF v_cnt != 0\n                    THEN\n                        UPDATE gin_motor_private_sch\n                           SET mps_value = v_risk_value,\n                               mps_body_type = rsks_cur_rec.mps_body_type,\n                               mps_cover_type = v_cover_type\n                         WHERE mps_ipu_code = v_new_ipu_code;\n                    ELSE\n                        BEGIN\n                            INSERT INTO gin_motor_private_sch (\n                                            mps_ipu_code,\n                                            mps_reg_no,\n                                            mps_make,\n                                            mps_cubic_capacity,\n                                            mps_yr_manft,\n                                            mps_value,\n                                            mps_body_type,\n                                            mps_cover_type,\n                                            mps_itemno)\n                                     VALUES (\n                                                v_new_ipu_code,\n                                                v_property_id,\n                                                rsks_cur_rec.mps_make,\n                                                TO_NUMBER (\n                                                    rsks_cur_rec.mps_cubic_capacity),\n                                                TO_NUMBER (\n                                                    rsks_cur_rec.mps_yr_manft),\n                                                v_risk_value,\n                                                rsks_cur_rec.mps_body_type,\n                                                rsks_cur_rec.mps_cover_type,\n                                                1);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                       'Unable to populate vehicle details..1'\n                                    || v_property_id);\n                        END;\n                    END IF;\n                ELSIF sched_cur_rec.screen_name = 'UMOTCYC'\n                THEN\n                    BEGIN\n                        SELECT COUNT (1)\n                          INTO v_cnt\n                          FROM gin_motor_cycle_sch\n                         WHERE mcs_ipu_code = v_new_ipu_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error securing whether Motor schedule exists..2');\n                    END;\n\n                    IF v_cnt != 0\n                    THEN\n                        UPDATE gin_motor_cycle_sch\n                           SET mcs_value = v_risk_value,\n                               mcs_body_type = rsks_cur_rec.mps_body_type,\n                               mcs_covt_sht_desc =\n                                   rsks_cur_rec.mps_cover_type,\n                               mcs_covt_code = rsks_cur_rec.mps_covt_code\n                         WHERE mcs_ipu_code = v_new_ipu_code;\n                    ELSE\n                        BEGIN\n                            INSERT INTO gin_motor_cycle_sch (\n                                            mcs_body_type,\n                                            mcs_ipu_code,\n                                            mcs_reg_no,\n                                            mcs_make,\n                                            mcs_cubic_capacity,\n                                            mcs_yr_manft,\n                                            mcs_value,\n                                            mcs_covt_code,\n                                            mcs_covt_sht_desc,\n                                            mcs_itemno)\n                                     VALUES (\n                                                rsks_cur_rec.mps_body_type,\n                                                v_new_ipu_code,\n                                                v_property_id,\n                                                rsks_cur_rec.mps_make,\n                                                TO_NUMBER (\n                                                    rsks_cur_rec.mps_cubic_capacity),\n                                                TO_NUMBER (\n                                                    rsks_cur_rec.mps_yr_manft),\n                                                v_risk_value,\n                                                rsks_cur_rec.mps_covt_code,\n                                                rsks_cur_rec.mps_cover_type,\n                                                1);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to populate vehicle details..2');\n                        END;\n                    END IF;\n                ELSIF sched_cur_rec.screen_name IN ('UMOTCOM', 'UMOTPSV')\n                THEN\n                    BEGIN\n                        SELECT COUNT (1)\n                          INTO v_cnt\n                          FROM gin_motor_commercial_sch\n                         WHERE mcoms_ipu_code = TO_NUMBER (v_new_ipu_code);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error securing whether Motor schedule exists..2');\n                    END;\n\n                    IF v_cnt != 0\n                    THEN\n                        UPDATE gin_motor_commercial_sch\n                           SET mcoms_value = v_risk_value,\n                               mcoms_body_type = rsks_cur_rec.mps_body_type,\n                               mcoms_cover_type = rsks_cur_rec.mps_cover_type\n                         WHERE mcoms_ipu_code = v_new_ipu_code;\n                    ELSE\n                        BEGIN\n                            INSERT INTO gin_motor_commercial_sch (\n                                            mcoms_ipu_code,\n                                            mcoms_reg_no,\n                                            mcoms_make,\n                                            mcoms_body_type,\n                                            mcoms_cubic_capacity,\n                                            mcoms_yr_manft,\n                                            mcoms_value,\n                                            mcoms_cover_type,\n                                            mcoms_item_no)\n                                     VALUES (\n                                                v_new_ipu_code,\n                                                v_property_id,\n                                                rsks_cur_rec.mps_make,\n                                                rsks_cur_rec.mps_body_type,\n                                                TO_NUMBER (\n                                                    rsks_cur_rec.mps_cubic_capacity),\n                                                TO_NUMBER (\n                                                    rsks_cur_rec.mps_yr_manft),\n                                                v_risk_value,\n                                                rsks_cur_rec.mps_cover_type,\n                                                1);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to populate vehicle details..3');\n                        END;\n                    END IF;\n                END IF;\n            END LOOP;\n        END LOOP;\n    END;",
        "process_policy": "PROCEDURE process_policy (v_pol_data       IN     policy_tab,\n                              v_risks_data     IN     risk_tab,\n                              v_agentcontact   IN     VARCHAR2,\n                              v_pol_batch_no      OUT NUMBER)\n    IS\n        v_cnt                NUMBER;\n        v_new_ipu_code       NUMBER;\n        v_new_polin_code     NUMBER;\n        v_exp_flag           VARCHAR2 (2);\n        v_uw_yr              VARCHAR2 (1);\n        v_open_cover         VARCHAR2 (2);\n        v_user               VARCHAR2 (35)\n            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');\n        v_pol_status         VARCHAR2 (5);\n        v_row                NUMBER := 0;\n        v_trans_no           NUMBER;\n        v_stp_code           NUMBER;\n        v_scl_desc           VARCHAR2 (75);\n        v_bind_desc          VARCHAR2 (75);\n        v_wet_date           DATE;\n        v_pol_renewal_dt     DATE;\n        v_pol_no             VARCHAR2 (45);\n        v_end_no             VARCHAR2 (45);\n        v_batchno            NUMBER;\n        v_cur_code           NUMBER;\n        v_cur_symbol         VARCHAR2 (15);\n        v_cur_rate           NUMBER;\n        v_pol_uwyr           NUMBER;\n        v_policy_doc         VARCHAR2 (45);\n        v_tran_ref_no        VARCHAR2 (45);\n        v_serial             VARCHAR2 (45);\n        v_endrsd_rsks_tab    gin_stp_pkg.endrsd_rsks_tab;\n        v_rsk_sect_data      rsk_sect_tab;\n        next_ggts_trans_no   NUMBER;\n        v_error              VARCHAR2 (200);\n\n        CURSOR rsks IS\n            SELECT DISTINCT stpr_gis_ipu_code,\n                            stpr_action_type,\n                            stpr_stp_code,\n                            stpr_property_id,\n                            stpr_desc,\n                            stpr_scl_code,\n                            stpr_scl_desc,\n                            stpr_cvt_code,\n                            stpr_cvt_desc,\n                            stpr_bind_code,\n                            stpr_bind_desc\n              FROM gin_risk_stp_temp_data\n             WHERE stpr_stp_code = v_stp_code;\n\n        CURSOR rsk_limits (rsk_prp_id IN VARCHAR2)\n        IS\n            SELECT DISTINCT stpr_stp_code,\n                            stpr_property_id,\n                            stpr_desc,\n                            stpr_scl_code,\n                            stpr_scl_desc,\n                            stpr_cvt_code,\n                            stpr_cvt_desc,\n                            stpr_bind_code,\n                            stpr_bind_desc,\n                            stpr_sect_code,\n                            stpr_sect_desc,\n                            stpr_limit\n              FROM gin_risk_stp_temp_data\n             WHERE     stpr_stp_code = v_stp_code\n                   AND stpr_property_id = rsk_prp_id;\n    BEGIN\n        v_user := NVL (v_agentcontact, v_user);\n\n        --raise_error ('No policy data provided..');\n        SELECT gin_stp_code_seq.NEXTVAL INTO v_stp_code FROM DUAL;\n\n        IF v_pol_data.COUNT = 0\n        THEN\n            raise_error ('No policy data provided..');\n        END IF;\n\n        IF v_risks_data.COUNT = 0\n        THEN\n            raise_error ('No Risk data provided..');\n        END IF;\n\n        DBMS_OUTPUT.put_line (1);\n\n        FOR x IN 1 .. v_risks_data.COUNT\n        LOOP\n            v_scl_desc := v_risks_data (x).ipu_scl_desc;\n\n            IF v_scl_desc IS NULL\n            THEN\n                SELECT scl_sht_desc\n                  INTO v_scl_desc\n                  FROM gin_sub_classes\n                 WHERE scl_code = v_risks_data (x).ipu_scl_code;\n            END IF;\n\n            v_bind_desc := v_risks_data (x).ipu_bind_desc;\n\n            IF v_bind_desc IS NULL\n            THEN\n                SELECT bind_name\n                  INTO v_bind_desc\n                  FROM gin_binders\n                 WHERE bind_code = v_risks_data (x).ipu_bind_code;\n            END IF;\n\n            INSERT INTO gin_risk_stp_temp_data (stpr_stp_code,\n                                                stpr_property_id,\n                                                stpr_desc,\n                                                stpr_scl_code,\n                                                stpr_scl_desc,\n                                                stpr_cvt_code,\n                                                stpr_cvt_desc,\n                                                stpr_bind_code,\n                                                stpr_bind_desc,\n                                                stpr_sect_code,\n                                                stpr_sect_desc,\n                                                stpr_limit,\n                                                stpr_gis_ipu_code,\n                                                stpr_action_type)\n                 VALUES (v_stp_code,\n                         v_risks_data (x).ipu_property_id,\n                         v_risks_data (x).ipu_desc,\n                         v_risks_data (x).ipu_scl_code,\n                         v_scl_desc,\n                         v_risks_data (x).ipu_cvt_code,\n                         v_risks_data (x).ipu_cvt_desc,\n                         v_risks_data (x).ipu_bind_code,\n                         v_bind_desc,\n                         v_risks_data (x).ipu_sect_code,\n                         v_risks_data (x).ipu_sect_desc,\n                         v_risks_data (x).ipu_limit,\n                         v_risks_data (x).gis_ipu_code,\n                         v_risks_data (x).ipu_action_type);\n        END LOOP;\n\n        DBMS_OUTPUT.put_line (2);\n\n        FOR pcount IN 1 .. v_pol_data.COUNT\n        LOOP\n            IF v_pol_data (pcount).pol_brn_sht_desc IS NULL\n            THEN\n                raise_error ('PROVIDE THE BRANCH ...');\n            END IF;\n\n            IF v_pol_data (pcount).pol_pro_code IS NULL\n            THEN\n                raise_error ('SELECT THE POLICY PRODUCT ...');\n            END IF;\n\n            IF v_pol_data (pcount).pol_wef_dt IS NULL\n            THEN\n                raise_error ('PROVIDE THE COVER FROM DATE ...');\n            END IF;\n\n            DBMS_OUTPUT.put_line (21);\n            v_wet_date := v_pol_data (pcount).pol_wet_dt;\n\n            IF v_wet_date IS NULL\n            THEN\n                v_wet_date :=\n                    get_wet_date (v_pol_data (pcount).pol_pro_code,\n                                  v_pol_data (pcount).pol_wef_dt);\n            END IF;\n\n            DBMS_OUTPUT.put_line (22);\n\n            IF v_wet_date IS NULL\n            THEN\n                raise_error ('PROVIDE THE COVER TO DATE ...');\n            END IF;\n\n            DBMS_OUTPUT.put_line (23);\n\n            IF     NVL (v_pol_data (pcount).pol_binder_policy, 'N') = 'Y'\n               AND v_pol_data (pcount).pol_bind_code IS NULL\n            THEN\n                raise_error ('YOU HAVE NOT DEFINED THE BORDEREAUX CODE ..');\n            END IF;\n\n            DBMS_OUTPUT.put_line (v_pol_data (pcount).pol_wef_dt);\n            DBMS_OUTPUT.put_line (TO_CHAR (v_pol_data (pcount).pol_wef_dt));\n            DBMS_OUTPUT.put_line (\n                TO_NUMBER (TO_CHAR (v_pol_data (pcount).pol_wef_dt, 'RRRR')));\n            v_pol_uwyr :=\n                TO_NUMBER (TO_CHAR (v_pol_data (pcount).pol_wef_dt, 'RRRR'));\n            /*IF v_pol_Data(pcount).POL_UW_YEAR IS NULL OR v_pol_Data(pcount).POL_UW_YEAR = 0 THEN\n                RAISE_ERROR('THE UNDERWRITING YEAR MUST BE A VALID YEAR...');\n            END IF;*/\n            DBMS_OUTPUT.put_line (25);\n            v_pol_renewal_dt :=\n                get_renewal_date (v_pol_data (pcount).pol_pro_code,\n                                  v_wet_date);\n            v_cur_code := v_pol_data (pcount).pol_cur_code;\n            v_cur_rate := v_pol_data (pcount).pol_cur_rate;\n\n            IF v_cur_code IS NULL\n            THEN\n                v_cur_rate := NULL;\n\n                BEGIN\n                    SELECT org_cur_code, cur_symbol\n                      INTO v_cur_code, v_cur_symbol\n                      FROM tqc_organizations, tqc_systems, tqc_currencies\n                     WHERE     org_code = sys_org_code\n                           AND org_cur_code = cur_code\n                           AND sys_code = 37;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('UNABLE TO RETRIEVE THE BASE CURRENCY');\n                END;\n\n                IF v_cur_code IS NULL\n                THEN\n                    raise_error (\n                        'THE BASE CURRENCY HAVE NOT BEEN DEDFINED. CANNOT PROCEED.');\n                END IF;\n            ELSE\n                SELECT cur_code, cur_symbol\n                  INTO v_cur_code, v_cur_symbol\n                  FROM tqc_currencies\n                 WHERE cur_code = v_cur_code;\n            END IF;\n\n            IF v_cur_rate IS NULL\n            THEN\n                v_cur_rate :=\n                    get_exchange_rate (v_cur_code,\n                                       v_pol_data (pcount).pol_cur_code);\n            END IF;\n\n            BEGIN\n                SELECT NVL (pro_expiry_period, 'Y'),\n                       NVL (pro_open_cover, 'N')\n                  INTO v_exp_flag, v_open_cover\n                  FROM gin_products\n                 WHERE pro_code = v_pol_data (pcount).pol_pro_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('ERROR SECURING OPEN COVER STATUS..');\n            END;\n\n            IF    NVL (v_pol_data (pcount).pol_binder_policy, 'N') = 'Y'\n               OR NVL (v_open_cover, 'N') = 'Y'\n            THEN\n                v_uw_yr := 'R';\n            ---to_number(to_char(:GIN_INSURED_PROPERTY_UNDS.IPU_WEF,'RRRR'));\n            ELSE\n                v_uw_yr := 'P';\n            ---:GIN_INSURED_PROPERTY_UNDS.IPU_UW_YR :=  :GIN_POLICIES.POL_UW_YEAR;\n            END IF;\n\n            DBMS_OUTPUT.put_line (\n                'TransType=' || v_pol_data (pcount).pol_trans_type);\n            DBMS_OUTPUT.put_line (\n                'ActionType=' || v_pol_data (pcount).pol_action_type);\n\n            IF     v_pol_data (pcount).pol_trans_type = 'NB'\n               AND v_pol_data (pcount).pol_action_type = 'A'\n            THEN\n                DBMS_OUTPUT.put_line (3);\n                v_pol_no := v_pol_data (pcount).pol_policy_no;\n                v_end_no := v_pol_data (pcount).pol_endos_no;\n                v_batchno := NULL;          --v_pol_Data(pcount).POL_BATCH_NO;\n                DBMS_OUTPUT.put_line (31);\n\n                IF v_pol_no IS NULL OR v_end_no IS NULL OR v_batchno IS NULL\n                THEN\n                    BEGIN\n                        --     1288=807=223=N=N=N\n                        --   DBMS_OUTPUT.PUT_LINE(v_pol_Data(pcount).POL_pro_code||'='||v_pol_Data(pcount).POL_pro_sht_desc||'='||v_pol_Data(pcount).POL_brn_code||'='||\n                        --                  v_pol_Data(pcount).POL_brn_sht_desc||'='||v_pol_Data(pcount).POL_BINDER_POLICY||'='||v_pol_Data(pcount).POL_POLICY_TYPE);\n                        get_policy_no (v_pol_data (pcount).pol_pro_code,\n                                       v_pol_data (pcount).pol_pro_sht_desc,\n                                       v_pol_data (pcount).pol_brn_code,\n                                       v_pol_data (pcount).pol_brn_sht_desc,\n                                       v_pol_data (pcount).pol_binder_policy,\n                                       v_pol_data (pcount).pol_policy_type,\n                                       v_pol_no,\n                                       v_end_no,\n                                       v_batchno);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'UNABLE TO GENERATE THE POLICY NUMBER...');\n                    END;\n                END IF;\n\n                IF NVL (v_pol_data (pcount).pol_short_period, 'N') = 'Y'\n                THEN\n                    v_pol_status := 'SP';\n                ELSE\n                    v_pol_status := 'NB';\n                END IF;\n\n                DBMS_OUTPUT.put_line (4);\n                v_policy_doc := v_pol_data (pcount).pol_policy_doc;\n\n                IF v_policy_doc IS NULL\n                THEN\n                    BEGIN\n                        SELECT pro_policy_word_doc\n                          INTO v_policy_doc\n                          FROM gin_products\n                         WHERE pro_code = v_pol_data (pcount).pol_pro_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error getting the default policy document..');\n                    END;\n                END IF;\n\n                v_pol_batch_no := v_batchno;\n\n                BEGIN\n                    INSERT INTO gin_policies (pol_policy_no,\n                                              pol_ren_endos_no,\n                                              pol_batch_no,\n                                              pol_agnt_agent_code,\n                                              pol_agnt_sht_desc,\n                                              pol_bind_code,\n                                              pol_wef_dt,\n                                              pol_wet_dt,\n                                              pol_uw_year,\n                                              pol_policy_status,\n                                              pol_inception_dt,\n                                              pol_cur_code,\n                                              pol_prepared_by,\n                                              pol_prepared_date,\n                                              pol_policy_type,\n                                              pol_client_policy_number,\n                                              pol_brn_code,\n                                              pol_cur_rate,\n                                              pol_coinsurance,\n                                              pol_coinsure_leader,\n                                              pol_cur_symbol,\n                                              pol_brn_sht_desc,\n                                              pol_prp_code,\n                                              pol_current_status,\n                                              pol_authosrised,\n                                              pol_post_status,\n                                              pol_inception_uwyr,\n                                              pol_pro_code,\n                                              pol_your_ref,\n                                              pol_prop_holding_co_prp_code,\n                                              pol_oth_int_parties,\n                                              pol_pro_sht_desc,\n                                              pol_prev_batch_no,\n                                              pol_uwyr_length,\n                                              pol_binder_policy,\n                                              pol_renewable,\n                                              pol_policy_cover_to,\n                                              pol_policy_cover_from,\n                                              pol_coinsurance_share,\n                                              pol_renewal_dt,\n                                              pol_trans_eff_wet,\n                                              pol_ri_agent_comm_rate,\n                                              pol_ri_agnt_sht_desc,\n                                              pol_ri_agnt_agent_code,\n                                              pol_policy_doc,\n                                              pol_commission_allowed,\n                                              pol_admin_fee_allowed        --,\n                                                                   --POL_INTRO_CODE,\n                                                                   --POL_EXCH_RATE_FIXED\n                                                                   )\n                             VALUES (\n                                        v_pol_no,\n                                        v_end_no,\n                                        v_batchno,\n                                        v_pol_data (pcount).pol_agnt_agent_code,\n                                        v_pol_data (pcount).pol_agnt_sht_desc,\n                                        v_pol_data (pcount).pol_bind_code,\n                                        v_pol_data (pcount).pol_wef_dt,\n                                        v_wet_date,\n                                        v_pol_uwyr,\n                                        v_pol_status,\n                                        v_pol_data (pcount).pol_wef_dt,\n                                        v_cur_code,\n                                        v_user,\n                                        TRUNC (SYSDATE),\n                                        NVL (\n                                            v_pol_data (pcount).pol_policy_type,\n                                            'N'),\n                                        v_pol_data (pcount).pol_policy_no,\n                                        v_pol_data (pcount).pol_brn_code,\n                                        v_cur_rate,\n                                        v_pol_data (pcount).pol_coinsurance,\n                                        v_pol_data (pcount).pol_coinsure_leader,\n                                        v_cur_symbol,\n                                        v_pol_data (pcount).pol_brn_sht_desc,\n                                        v_pol_data (pcount).pol_prp_code,\n                                        'D',\n                                        'N',\n                                        'N',\n                                        v_pol_uwyr,\n                                        v_pol_data (pcount).pol_pro_code,\n                                        v_pol_data (pcount).pol_your_ref,\n                                        v_pol_data (pcount).pol_prop_holding_co_prp_code,\n                                        v_pol_data (pcount).pol_oth_int_parties,\n                                        v_pol_data (pcount).pol_pro_sht_desc,\n                                        v_batchno,\n                                        CEIL (\n                                            MONTHS_BETWEEN (\n                                                v_wet_date,\n                                                v_pol_data (pcount).pol_wef_dt)),\n                                        v_pol_data (pcount).pol_binder_policy,\n                                        v_pol_data (pcount).pol_renewable,\n                                        v_wet_date,\n                                        v_pol_data (pcount).pol_wef_dt,\n                                        v_pol_data (pcount).pol_coinsurance_share,\n                                        get_renewal_date (\n                                            v_pol_data (pcount).pol_pro_code,\n                                            v_wet_date),\n                                        v_wet_date,\n                                        v_pol_data (pcount).pol_ri_agent_comm_rate,\n                                        v_pol_data (pcount).pol_ri_agnt_sht_desc,\n                                        v_pol_data (pcount).pol_ri_agnt_agent_code,\n                                        v_policy_doc,\n                                        NVL (\n                                            v_pol_data (pcount).pol_commission_allowed,\n                                            'Y'),\n                                        'N'                                --,\n                                           --v_pol_Data(pcount).POL_INTRO_CODE,\n                                           --v_pol_Data(pcount).POL_EXCH_RATE_FIXED\n                                           );\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR CREATING POLICY RECORD..');\n                END;\n\n                BEGIN\n                    SELECT TO_NUMBER (\n                                  TO_CHAR (SYSDATE, 'RRRR')\n                               || ggt_trans_no_seq.NEXTVAL)\n                      INTO v_trans_no\n                      FROM DUAL;\n\n                    INSERT INTO gin_gis_transactions (\n                                    ggt_doc_ref,\n                                    ggt_trans_no,\n                                    ggt_pol_policy_no,\n                                    ggt_cmb_claim_no,\n                                    ggt_pro_code,\n                                    ggt_pol_batch_no,\n                                    ggt_pro_sht_desc,\n                                    ggt_btr_trans_code,\n                                    ggt_done_by,\n                                    ggt_done_date,\n                                    ggt_client_policy_number,\n                                    ggt_uw_clm_tran,\n                                    ggt_trans_date,\n                                    ggt_trans_authorised,\n                                    ggt_trans_authorised_by,\n                                    ggt_trans_authorise_date,\n                                    ggt_old_tran_no,\n                                    ggt_effective_date)\n                         VALUES (v_pol_data (pcount).pol_your_ref,\n                                 v_trans_no,\n                                 v_pol_no,\n                                 NULL,\n                                 v_pol_data (pcount).pol_pro_code,\n                                 v_batchno,\n                                 v_pol_data (pcount).pol_pro_sht_desc,\n                                 'NB',\n                                 v_user,\n                                 TRUNC (SYSDATE),\n                                 v_pol_no,\n                                 'U',\n                                 TRUNC (SYSDATE),\n                                 'N',\n                                 NULL,\n                                 NULL,\n                                 NULL,\n                                 TRUNC (SYSDATE));\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR CREATING TRANSACTION RECORD..');\n                END;\n\n                /*transmittal",
        "update_declarations": "PROCEDURE update_declarations (v_batch_no    IN NUMBER,\n                                   v_policy_no   IN VARCHAR2,\n                                   v_uw_yr       IN NUMBER,\n                                   v_ipu_code    IN NUMBER DEFAULT NULL)\n    IS\n        v_cnt   NUMBER;\n\n        CURSOR decl_cur IS\n              SELECT poldc_policy_no,\n                     poldc_uw_yr,\n                     rskdc_ipu_id,\n                     rltdc_sect_code,\n                     SUM (NVL (rltdc_decl_amount, 0))     decl_amnt\n                FROM gin_policy_declarations,\n                     gin_risks_declarations,\n                     gin_risk_limits_declarations\n               WHERE     poldc_code = rskdc_poldc_code\n                     AND rskdc_code = rltdc_rskdc_code\n                     AND poldc_policy_no = v_policy_no\n                     AND poldc_uw_yr = v_uw_yr\n                     AND rskdc_ipu_id =\n                         DECODE (NVL (v_ipu_code, 0),\n                                 0, rskdc_ipu_id,\n                                 (SELECT ipu_id\n                                    FROM gin_insured_property_unds\n                                   WHERE ipu_code = v_ipu_code))\n            GROUP BY poldc_policy_no,\n                     poldc_uw_yr,\n                     rskdc_ipu_id,\n                     rltdc_sect_code;\n    BEGIN\n        FOR decl_rec IN decl_cur\n        LOOP\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM gin_insured_property_unds, gin_policies\n                 WHERE     pol_batch_no = ipu_pol_batch_no\n                       AND pol_batch_no = v_batch_no\n                       AND ipu_id = decl_rec.rskdc_ipu_id;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error verifying underwriting year..');\n            END;\n\n            IF NVL (v_cnt, 0) > 1\n            THEN\n                raise_error ('Risk or sections duplicated ..');\n            END IF;\n\n            UPDATE gin_policy_insured_limits\n               SET pil_limit_amt = decl_rec.decl_amnt\n             WHERE     pil_sect_code = decl_rec.rltdc_sect_code\n                   AND pil_ipu_code =\n                       (SELECT ipu_code\n                          FROM gin_insured_property_unds, gin_policies\n                         WHERE     pol_batch_no = ipu_pol_batch_no\n                               AND pol_batch_no = v_batch_no\n                               AND ipu_id = decl_rec.rskdc_ipu_id);\n        END LOOP;\n    END;",
        "create_midterm_trans": "PROCEDURE create_midterm_trans (v_old_batch   IN     NUMBER,\n                                    v_batch_no       OUT NUMBER,\n                                    v_user        IN     VARCHAR2,\n                                    v_eff_date    IN     DATE)\n    IS\n        v_serial             NUMBER (10);\n        v_pol_no             VARCHAR2 (26);\n        v_ends_no            VARCHAR2 (26);\n        v_pol_prefix         VARCHAR2 (15);\n        v_new_ipu_code       NUMBER;\n        vdummy               NUMBER;\n        v_tran_no            NUMBER;\n        v_prrd_code          NUMBER;\n        v_wef                DATE;\n        v_wet                DATE;\n        v_ren_date           DATE;\n        v_year               NUMBER;\n        next_ggts_trans_no   NUMBER;\n        v_serialno           VARCHAR2 (26);\n        v_tran_ref_no        VARCHAR2 (26);\n\n        CURSOR cur_pol IS\n            SELECT *\n              FROM gin_policies\n             WHERE pol_batch_no = v_old_batch;\n\n        CURSOR cur_taxes IS\n            SELECT *\n              FROM gin_policy_taxes\n             WHERE     ptx_pol_batch_no = v_old_batch\n                   AND NVL (ptx_trac_trnt_code, 'XX') != 'SD';\n\n        CURSOR cur_coinsurer IS\n            SELECT *\n              FROM gin_coinsurers\n             WHERE coin_pol_batch_no = v_old_batch;\n\n        CURSOR cur_facre_dtls IS\n            SELECT *\n              FROM gin_facre_in_dtls\n             WHERE fid_pol_batch_no = v_old_batch;\n\n        CURSOR cur_conditions IS\n            SELECT *\n              FROM gin_policy_lvl_clauses\n             WHERE plcl_pol_batch_no = v_old_batch;\n\n        CURSOR cur_insureds IS\n            SELECT *\n              FROM gin_policy_insureds\n             WHERE polin_pol_batch_no = v_old_batch;\n\n        CURSOR cur_ipu (v_polin_code NUMBER)\n        IS\n            SELECT *\n              FROM gin_insured_property_unds\n             WHERE     ipu_pol_batch_no = v_old_batch\n                   AND ipu_polin_code = v_polin_code;\n\n        CURSOR cur_limits (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_insured_limits\n             WHERE pil_ipu_code = v_ipu;\n\n        CURSOR cur_clauses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_clauses\n             WHERE pocl_ipu_code = v_ipu;\n\n        CURSOR perils (v_ipu NUMBER)\n        IS\n            SELECT gpsp_per_code,\n                   gpsp_per_sht_desc,\n                   gpsp_sec_sect_code,\n                   gpsp_sect_sht_desc,\n                   gpsp_sec_scl_code,\n                   gpsp_ipp_code,\n                   gpsp_ipu_code,\n                   gpsp_limit_amt,\n                   gpsp_excess_amt\n              FROM gin_pol_sec_perils\n             WHERE gpsp_ipu_code = v_ipu;\n\n        CURSOR risk_excesses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_risk_excess\n             WHERE re_ipu_code = v_ipu;\n\n        CURSOR schedules (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_risk_schedules\n             WHERE polrs_ipu_code = v_ipu;\n    BEGIN\n        --      raise_error ('v_old_batch' || v_old_batch);\n        IF v_user IS NULL\n        THEN\n            raise_error ('User not defined.');\n        END IF;\n\n        FOR cur_pol_rec IN cur_pol\n        LOOP\n            IF     NVL (cur_pol_rec.pol_reinsured, 'N') != 'Y'\n               AND NVL (cur_pol_rec.pol_loaded, 'N') = 'N'\n               AND tqc_interfaces_pkg.get_org_type (37) = 'INS'\n            THEN\n                raise_error (\n                    'Reinsurance for the previous transaction on this policy has not been performed/Authorised. Cannot continue..');\n            END IF;\n\n            BEGIN\n                SELECT pro_policy_prefix\n                  INTO v_pol_prefix\n                  FROM gin_products\n                 WHERE pro_code = cur_pol_rec.pol_pro_code;\n\n                IF v_pol_prefix IS NULL\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           'The policy prefix for the product '\n                        || cur_pol_rec.pol_pro_sht_desc\n                        || ' is not defined in the setup');\n                END IF;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           'The product '\n                        || cur_pol_rec.pol_pro_sht_desc\n                        || ' is not defined in the setup');\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           'Unable to retrieve the policy prefix for the product '\n                        || cur_pol_rec.pol_pro_sht_desc);\n            END;\n\n            IF cur_pol_rec.pol_policy_type = 'N'\n            THEN\n                v_ends_no :=\n                    gin_sequences_pkg.get_number_format (\n                        'E',\n                        cur_pol_rec.pol_pro_code,\n                        cur_pol_rec.pol_brn_code,\n                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                        'EN',\n                        v_serial,\n                        'N',\n                        cur_pol_rec.pol_policy_no);\n            ELSE\n                v_ends_no :=\n                    gin_sequences_pkg.get_number_format (\n                        'ER',\n                        cur_pol_rec.pol_pro_code,\n                        cur_pol_rec.pol_brn_code,\n                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                        'EN',\n                        v_serial);\n            END IF;\n\n            BEGIN\n                SELECT COUNT (1)\n                  INTO vdummy\n                  FROM gin_policies\n                 WHERE     pol_policy_no = cur_pol_rec.pol_policy_no\n                       AND pol_ren_endos_no = v_ends_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            IF NVL (vdummy, 0) > 0\n            THEN\n                v_ends_no := v_ends_no || '-' || vdummy;\n            END IF;\n\n            v_wef := v_eff_date;\n            v_wet := get_wet_date (cur_pol_rec.pol_pro_code, v_wef);\n            v_ren_date := get_renewal_date (cur_pol_rec.pol_pro_code, v_wet);\n            v_year := TO_NUMBER (TO_CHAR (v_wef, 'RRRR'));\n\n            IF cur_pol_rec.pol_paid_to_date > v_wef\n            THEN\n                raise_error (\n                       'ME effective date '\n                    || TO_CHAR (v_wef, 'DD/MM/RRRR')\n                    || ' cannot be less than the policy paid to date '\n                    || TO_CHAR (cur_pol_rec.pol_paid_to_date, 'DD/MM/RRRR'));\n            ELSIF v_wef > cur_pol_rec.pol_policy_cover_to\n            THEN\n                raise_error (\n                       'ME effective date '\n                    || TO_CHAR (v_wef, 'DD/MM/RRRR')\n                    || ' cannot be beyond the current policy cover to date '\n                    || TO_CHAR (cur_pol_rec.pol_policy_cover_to,\n                                'DD/MM/RRRR'));\n            END IF;\n\n            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                   || gin_pol_batch_no_seq.NEXTVAL\n              INTO v_batch_no\n              FROM DUAL;\n\n            --Insert intO policies table\n            BEGIN\n                INSERT INTO gin_policies (pol_policy_no,\n                                          pol_ren_endos_no,\n                                          pol_batch_no,\n                                          pol_agnt_agent_code,\n                                          pol_agnt_sht_desc,\n                                          pol_pmod_code,\n                                          pol_bind_code,\n                                          pol_wef_dt,\n                                          pol_wet_dt,\n                                          pol_uw_year,\n                                          pol_total_sum_insured,\n                                          pol_policy_status,\n                                          pol_comm_amt,\n                                          pol_comm_rate,\n                                          pol_inception_dt,\n                                          pol_tran_type,\n                                          pol_acpr_code,\n                                          pol_acpr_sht_desc,\n                                          pol_alp_proposal_no,\n                                          pol_basic_premium,\n                                          pol_nett_premium,\n                                          pol_cur_code,\n                                          pol_prepared_by,\n                                          pol_prepared_date,\n                                          pol_checked_by,\n                                          pol_check_date,\n                                          pol_policy_type,\n                                          pol_conversion_rate,\n                                          pol_client_policy_number,\n                                          pol_brn_code,\n                                          pol_business_type,\n                                          pol_cur_rate,\n                                          pol_curr_rate_type,\n                                          pol_comm_endos_diff_amt,\n                                          pol_total_fap,\n                                          pol_total_gp,\n                                          pol_tot_endos_diff_amt,\n                                          pol_coinsurance,\n                                          pol_coinsure_leader,\n                                          pol_fp,\n                                          pol_post_status,\n                                          pol_drcr_no,\n                                          pol_cur_symbol,\n                                          pol_post_ok,\n                                          pol_brn_sht_desc,\n                                          pol_prp_code,\n                                          pol_current_status,\n                                          pol_authosrised,\n                                          pol_cancel_dt,\n                                          pol_inception_uwyr,\n                                          pol_pro_code,\n                                          pol_btr_code,\n                                          pol_btr_trans_code,\n                                          pol_your_ref,\n                                          pol_prop_holding_co_prp_code,\n                                          pol_oth_int_parties,\n                                          pol_pro_sht_desc,\n                                          pol_prev_batch_no,\n                                          pol_uwyr_length,\n                                          pol_binder_policy,\n                                          pol_bind_pro_code,\n                                          pol_bind_pro_sht_desc,\n                                          pol_remarks,\n                                          pol_coinsure_pct,\n                                          pol_renewed_rec,\n                                          pol_renewable,\n                                          pol_policy_cover_to,\n                                          pol_policy_cover_from,\n                                          pol_si_diff,\n                                          pol_wtht,\n                                          pol_prem_tax,\n                                          pol_mar_cert_no,\n                                          pol_coinsurance_share,\n                                          pol_coin_tot_prem,\n                                          pol_coin_endos_prem,\n                                          pol_coin_tot_si,\n                                          pol_renewal_dt,\n                                          pol_prev_prem,\n                                          pol_ri_agnt_agent_code,\n                                          pol_ri_agnt_sht_desc,\n                                          pol_ri_agent_comm_rate,\n                                          pol_trans_eff_wet,\n                                          pol_tot_tl,\n                                          pol_tl,\n                                          pol_coin_fee,\n                                          pol_coin_fee_amt,\n                                          pol_coin_policy_no,\n                                          pol_annual_tl,\n                                          pol_duties,\n                                          pol_extras,\n                                          pol_old_policy_no,\n                                          pol_commission_allowed,\n                                          pol_edp_batch,\n                                          pol_pip_code,\n                                          pol_tot_phfund,\n                                          pol_phfund,\n                                          pol_vat_amt,\n                                          pol_vat_rate,\n                                          pol_prem_computed,\n                                          pol_bussiness_growth_type,\n                                          pol_coin_leader_combined,\n                                          pol_open_cover,\n                                          pol_co_phfund,\n                                          pol_policy_debit,\n                                          pol_scheme_policy,\n                                          pol_pro_interface_type,\n                                          pol_freq_of_payment,\n                                          pol_policy_doc,\n                                          pol_health_tax,\n                                          pol_road_safety_tax,\n                                          pol_certchg,\n                                          pol_motor_levy,\n                                          pol_admin_fee_allowed,\n                                          pol_pop_taxes,\n                                          pol_debiting_type,\n                                          pol_debt_owner,\n                                          pol_credit_limit,\n                                          pol_promise_date)\n                     VALUES (cur_pol_rec.pol_policy_no,\n                             v_ends_no,\n                             v_batch_no,\n                             cur_pol_rec.pol_agnt_agent_code,\n                             cur_pol_rec.pol_agnt_sht_desc,\n                             cur_pol_rec.pol_pmod_code,\n                             cur_pol_rec.pol_bind_code,\n                             v_wef,\n                             v_wet,\n                             TO_NUMBER (TO_CHAR (v_wef, 'RRRR')),    --v_year,\n                             cur_pol_rec.pol_total_sum_insured,\n                             'ME',\n                             NVL (cur_pol_rec.pol_comm_amt, 0),\n                             cur_pol_rec.pol_comm_rate,\n                             cur_pol_rec.pol_inception_dt,\n                             cur_pol_rec.pol_tran_type,\n                             cur_pol_rec.pol_acpr_code,\n                             cur_pol_rec.pol_acpr_sht_desc,\n                             cur_pol_rec.pol_alp_proposal_no,\n                             NVL (cur_pol_rec.pol_basic_premium, 0),\n                             NVL (cur_pol_rec.pol_nett_premium, 0),\n                             cur_pol_rec.pol_cur_code,\n                             v_user,\n                             TRUNC (SYSDATE),\n                             NULL,\n                             NULL,\n                             cur_pol_rec.pol_policy_type,\n                             cur_pol_rec.pol_conversion_rate,\n                             cur_pol_rec.pol_client_policy_number,\n                             cur_pol_rec.pol_brn_code,\n                             cur_pol_rec.pol_business_type,\n                             cur_pol_rec.pol_cur_rate,\n                             cur_pol_rec.pol_curr_rate_type,\n                             NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),\n                             NVL (cur_pol_rec.pol_total_fap, 0),\n                             NVL (cur_pol_rec.pol_total_gp, 0),\n                             cur_pol_rec.pol_tot_endos_diff_amt,\n                             cur_pol_rec.pol_coinsurance,\n                             cur_pol_rec.pol_coinsure_leader,\n                             cur_pol_rec.pol_fp,\n                             'N',\n                             NULL,\n                             cur_pol_rec.pol_cur_symbol,\n                             cur_pol_rec.pol_post_ok,\n                             cur_pol_rec.pol_brn_sht_desc,\n                             cur_pol_rec.pol_prp_code,\n                             'D',\n                             'R',\n                             cur_pol_rec.pol_cancel_dt,\n                             cur_pol_rec.pol_inception_uwyr,\n                             cur_pol_rec.pol_pro_code,\n                             cur_pol_rec.pol_btr_code,\n                             cur_pol_rec.pol_btr_trans_code,\n                             cur_pol_rec.pol_your_ref,\n                             cur_pol_rec.pol_prop_holding_co_prp_code,\n                             cur_pol_rec.pol_oth_int_parties,\n                             cur_pol_rec.pol_pro_sht_desc,\n                             v_old_batch,\n                             cur_pol_rec.pol_uwyr_length,\n                             cur_pol_rec.pol_binder_policy,\n                             cur_pol_rec.pol_bind_pro_code,\n                             cur_pol_rec.pol_bind_pro_sht_desc,\n                             cur_pol_rec.pol_remarks,\n                             cur_pol_rec.pol_coinsure_pct,\n                             cur_pol_rec.pol_renewed_rec,\n                             cur_pol_rec.pol_renewable,\n                             v_wet,\n                             v_wef,\n                             NVL (cur_pol_rec.pol_si_diff, 0),\n                             NVL (cur_pol_rec.pol_wtht, 0),\n                             cur_pol_rec.pol_prem_tax,\n                             cur_pol_rec.pol_mar_cert_no,\n                             cur_pol_rec.pol_coinsurance_share,\n                             cur_pol_rec.pol_coin_tot_prem,\n                             cur_pol_rec.pol_coin_endos_prem,\n                             cur_pol_rec.pol_coin_tot_si,\n                             v_ren_date,\n                             NVL (cur_pol_rec.pol_prev_prem, 0),\n                             cur_pol_rec.pol_ri_agnt_agent_code,\n                             cur_pol_rec.pol_ri_agnt_sht_desc,\n                             cur_pol_rec.pol_ri_agent_comm_rate,\n                             v_wet,\n                             cur_pol_rec.pol_tot_tl,\n                             cur_pol_rec.pol_tl,\n                             cur_pol_rec.pol_coin_fee,\n                             cur_pol_rec.pol_coin_fee_amt,\n                             cur_pol_rec.pol_coin_policy_no,\n                             cur_pol_rec.pol_annual_tl,\n                             cur_pol_rec.pol_duties,\n                             cur_pol_rec.pol_extras,\n                             cur_pol_rec.pol_old_policy_no,\n                             cur_pol_rec.pol_commission_allowed,\n                             cur_pol_rec.pol_edp_batch,\n                             cur_pol_rec.pol_oth_int_parties,\n                             cur_pol_rec.pol_tot_phfund,\n                             cur_pol_rec.pol_phfund,\n                             cur_pol_rec.pol_vat_amt,\n                             cur_pol_rec.pol_vat_rate,\n                             'Y',\n                             gin_stp_uw_pkg.get_growth_type (\n                                 cur_pol_rec.pol_prp_code,\n                                 'EN',\n                                 cur_pol_rec.pol_policy_no,\n                                 v_batch_no),\n                             cur_pol_rec.pol_coin_leader_combined,\n                             cur_pol_rec.pol_open_cover,\n                             cur_pol_rec.pol_co_phfund,\n                             cur_pol_rec.pol_policy_debit,\n                             cur_pol_rec.pol_scheme_policy,\n                             cur_pol_rec.pol_pro_interface_type,\n                             cur_pol_rec.pol_freq_of_payment,\n                             cur_pol_rec.pol_policy_doc,\n                             cur_pol_rec.pol_health_tax,\n                             cur_pol_rec.pol_road_safety_tax,\n                             cur_pol_rec.pol_certchg,\n                             cur_pol_rec.pol_motor_levy,\n                             cur_pol_rec.pol_admin_fee_allowed,\n                             'Y',\n                             cur_pol_rec.pol_debiting_type,\n                             cur_pol_rec.pol_debt_owner,\n                             cur_pol_rec.pol_credit_limit,\n                             cur_pol_rec.pol_promise_date);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                        ' Error creating policy endorsement record. Contact the system administrator...');\n            END;\n\n            --OPEN CUR_TAXES\n            FOR cur_tax_rec IN cur_taxes\n            LOOP\n                --INSERTING INTO GIN_POLICY_TAXES\n                /*BEGIN\n\n                   INSERT INTO gin_policy_taxes\n                               (ptx_trac_trnt_code,\n                                ptx_pol_policy_no, ptx_pol_ren_endos_no,\n                                ptx_pol_batch_no, ptx_rate,\n                                ptx_amount,\n                                ptx_tl_lvl_code,\n                                ptx_rate_type,\n                                ptx_rate_desc,\n                                ptx_endos_diff_amt,\n                                ptx_tax_type\n                               )\n                        VALUES (cur_tax_rec.ptx_trac_trnt_code,\n                                cur_tax_rec.ptx_pol_policy_no, v_ends_no,\n                                v_batch_no, cur_tax_rec.ptx_rate,\n                                NVL (cur_tax_rec.ptx_amount, 0),\n                                cur_tax_rec.ptx_tl_lvl_code,\n                                cur_tax_rec.ptx_rate_type,\n                                cur_tax_rec.ptx_rate_desc,\n                                cur_tax_rec.ptx_endos_diff_amt,\n                                cur_tax_rec.ptx_tax_type\n                               );\n                 */\n\n                BEGIN\n                    pop_taxes (cur_pol_rec.pol_policy_no,\n                               v_ends_no,\n                               v_old_batch,\n                               cur_pol_rec.pol_pro_code,\n                               'N',\n                               'ME');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            ' Error creating policy tax record. Contact the system administrator...');\n                END;\n            /*EXCEPTION\n              WHEN OTHERS\n              THEN\n                 ROLLBACK;\n                 raise_error\n                    (' Error creating policy tax record. Contact the system administrator...'\n                    );\n           END;*/\n            END LOOP;                                            --cur_tax_rec\n\n            /****** Insert FACRE IN Details ********/\n            BEGIN\n                SELECT TO_NUMBER (\n                              TO_CHAR (SYSDATE, 'YY')\n                           || ggt_trans_no_seq.NEXTVAL)\n                  INTO v_tran_no\n                  FROM DUAL;\n\n                INSERT INTO gin_gis_transactions (ggt_trans_no,\n                                                  ggt_pol_policy_no,\n                                                  ggt_pol_batch_no,\n                                                  ggt_pro_sht_desc,\n                                                  ggt_btr_trans_code,\n                                                  ggt_done_by,\n                                                  ggt_client_policy_number,\n                                                  ggt_uw_clm_tran,\n                                                  ggt_trans_date,\n                                                  ggt_old_tran_no,\n                                                  ggt_effective_date)\n                    SELECT v_tran_no,\n                           cur_pol_rec.pol_policy_no,\n                           v_batch_no,\n                           cur_pol_rec.pol_pro_sht_desc,\n                           'ME',\n                           v_user,\n                           cur_pol_rec.pol_client_policy_number,\n                           'U',\n                           TRUNC (SYSDATE),\n                           ggt_old_tran_no,\n                           NVL (v_eff_date, SYSDATE)\n                      FROM gin_gis_transactions\n                     WHERE     ggt_pol_batch_no = v_old_batch\n                           AND ggt_uw_clm_tran = 'U';\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           'No previous record found for contra; policy No.'\n                        || cur_pol_rec.pol_policy_no);\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                        'Unable to retrieve and create record for contra..');\n            END;\n\n            BEGIN\n                FOR cur_facre_dtls_rec IN cur_facre_dtls\n                LOOP\n                    INSERT INTO gin_facre_in_dtls (fid_pol_policy_no,\n                                                   fid_pol_ren_endos_no,\n                                                   fid_pol_batch_no,\n                                                   fid_agnt_agent_code,\n                                                   fid_agnt_sht_desc,\n                                                   fid_prp_code,\n                                                   fid_sum_insured,\n                                                   fid_gross_rate,\n                                                   fid_cede_comp_first_prem,\n                                                   fid_cede_comp_terms,\n                                                   fid_rein_terms,\n                                                   fid_cede_comp_gross_ret,\n                                                   fid_cede_comp_rein_amt,\n                                                   fid_amt_perc_sum_insured,\n                                                   fid_wef,\n                                                   fid_wet,\n                                                   fid_code,\n                                                   fid_cede_comp_policy_no,\n                                                   fid_cede_comp_term_frm,\n                                                   fid_cede_comp_term_to,\n                                                   fid_cede_company_ren_prem,\n                                                   fid_reins_term_to,\n                                                   fid_cede_sign_dt)\n                             VALUES (\n                                        cur_facre_dtls_rec.fid_pol_policy_no,\n                                        v_ends_no,\n                                        v_batch_no,\n                                        cur_facre_dtls_rec.fid_agnt_agent_code,\n                                        cur_facre_dtls_rec.fid_agnt_sht_desc,\n                                        cur_facre_dtls_rec.fid_prp_code,\n                                        cur_facre_dtls_rec.fid_sum_insured,\n                                        cur_facre_dtls_rec.fid_gross_rate,\n                                        cur_facre_dtls_rec.fid_cede_comp_first_prem,\n                                        cur_facre_dtls_rec.fid_cede_comp_terms,\n                                        cur_facre_dtls_rec.fid_rein_terms,\n                                        cur_facre_dtls_rec.fid_cede_comp_gross_ret,\n                                        cur_facre_dtls_rec.fid_cede_comp_rein_amt,\n                                        cur_facre_dtls_rec.fid_amt_perc_sum_insured,\n                                        cur_facre_dtls_rec.fid_wef,\n                                        cur_facre_dtls_rec.fid_wet,\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_fid_code_seq.NEXTVAL,\n                                        cur_facre_dtls_rec.fid_cede_comp_policy_no,\n                                        cur_facre_dtls_rec.fid_cede_comp_term_frm,\n                                        cur_facre_dtls_rec.fid_cede_comp_term_to,\n                                        cur_facre_dtls_rec.fid_cede_company_ren_prem,\n                                        cur_facre_dtls_rec.fid_reins_term_to,\n                                        cur_facre_dtls_rec.fid_cede_sign_dt);\n                END LOOP;                                 --cur_facre_dtls_rec\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (' Unable to insert facre details...');\n            END;\n\n            /*insert facre details*/\n            BEGIN\n                v_tran_ref_no :=\n                    gin_sequences_pkg.get_number_format (\n                        'BARCODE',\n                        cur_pol_rec.pol_pro_code,\n                        cur_pol_rec.pol_brn_code,\n                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                        'NB',\n                        v_serialno);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'unable to generate transmittal number.Contact the system administrator...');\n            END;\n\n            BEGIN\n                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                       || ggts_tran_no_seq.NEXTVAL\n                  INTO next_ggts_trans_no\n                  FROM DUAL;\n\n                INSERT INTO gin_gis_transmitals (ggts_tran_no,\n                                                 ggts_pol_policy_no,\n                                                 ggts_cmb_claim_no,\n                                                 ggts_pol_batch_no,\n                                                 ggts_done_by,\n                                                 ggts_done_date,\n                                                 ggts_uw_clm_tran,\n                                                 ggts_pol_renewal_batch,\n                                                 ggts_tran_ref_no,\n                                                 ggts_ipay_alphanumeric)\n                     VALUES (next_ggts_trans_no,\n                             cur_pol_rec.pol_policy_no,\n                             NULL,\n                             v_batch_no,\n                             v_user,\n                             SYSDATE,\n                             'U',\n                             NULL,\n                             v_tran_ref_no,\n                             'Y');\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error unable to creaete a transaction record. Contact the system administrator...');\n            END;\n\n            FOR cur_coinsurer_rec IN cur_coinsurer\n            LOOP\n                --INSERT INTO GIN_COINSURERS\n                BEGIN\n                    INSERT INTO gin_coinsurers (coin_agnt_agent_code,\n                                                coin_agnt_sht_desc,\n                                                coin_gl_code,\n                                                coin_lead,\n                                                coin_perct,\n                                                coin_prem,\n                                                coin_pol_policy_no,\n                                                coin_pol_ren_endos_no,\n                                                coin_pol_batch_no,\n                                                coin_fee_rate,\n                                                coin_fee_amt,\n                                                coin_duties,\n                                                coin_si,\n                                                coin_commission,\n                                                coin_whtx,\n                                                coin_prem_tax,\n                                                coin_annual_prem,\n                                                coin_fee_type,\n                                                coin_aga_code,\n                                                coin_aga_sht_desc,\n                                                coin_com_disc_amt,\n                                                coin_vat_amt,\n                                                coin_optional_comm,\n                                                coin_comm_rate)\n                         VALUES (cur_coinsurer_rec.coin_agnt_agent_code,\n                                 cur_coinsurer_rec.coin_agnt_sht_desc,\n                                 cur_coinsurer_rec.coin_gl_code,\n                                 cur_coinsurer_rec.coin_lead,\n                                 cur_coinsurer_rec.coin_perct,\n                                 NVL (cur_coinsurer_rec.coin_prem, 0),\n                                 cur_coinsurer_rec.coin_pol_policy_no,\n                                 v_ends_no,\n                                 v_batch_no,\n                                 cur_coinsurer_rec.coin_fee_rate,\n                                 cur_coinsurer_rec.coin_fee_amt,\n                                 cur_coinsurer_rec.coin_duties,\n                                 cur_coinsurer_rec.coin_si,\n                                 cur_coinsurer_rec.coin_commission,\n                                 cur_coinsurer_rec.coin_whtx,\n                                 cur_coinsurer_rec.coin_prem_tax,\n                                 cur_coinsurer_rec.coin_annual_prem,\n                                 cur_coinsurer_rec.coin_fee_type,\n                                 cur_coinsurer_rec.coin_aga_code,\n                                 cur_coinsurer_rec.coin_aga_sht_desc,\n                                 cur_coinsurer_rec.coin_com_disc_amt,\n                                 cur_coinsurer_rec.coin_vat_amt,\n                                 cur_coinsurer_rec.coin_optional_comm,\n                                 cur_coinsurer_rec.coin_comm_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            '  Error creating policy coinsurance record. Contact the system administrator...');\n                END;\n            END LOOP;\n\n            --OPEN CONDITIONS\n            FOR cur_conditions_rec IN cur_conditions\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_lvl_clauses (\n                                    plcl_sbcl_cls_code,\n                                    plcl_sbcl_scl_code,\n                                    plcl_pro_sht_desc,\n                                    plcl_pro_code,\n                                    plcl_pol_policy_no,\n                                    plcl_pol_ren_endos_no,\n                                    plcl_pol_batch_no,\n                                    plcl_sbcl_cls_sht_desc,\n                                    plcl_cls_type,\n                                    plcl_clause,\n                                    plcl_cls_editable,\n                                    plcl_new,\n                                    plcl_heading)\n                         VALUES (cur_conditions_rec.plcl_sbcl_cls_code,\n                                 cur_conditions_rec.plcl_sbcl_scl_code,\n                                 cur_conditions_rec.plcl_pro_sht_desc,\n                                 cur_conditions_rec.plcl_pro_code,\n                                 cur_conditions_rec.plcl_pol_policy_no,\n                                 v_ends_no,\n                                 v_batch_no,\n                                 cur_conditions_rec.plcl_sbcl_cls_sht_desc,\n                                 cur_conditions_rec.plcl_cls_type,\n                                 cur_conditions_rec.plcl_clause,\n                                 cur_conditions_rec.plcl_cls_editable,\n                                 cur_conditions_rec.plcl_new,\n                                 cur_conditions_rec.plcl_heading);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            '  Error creating policy clauses record. Contact the system administrator...');\n                END;\n            END LOOP;\n\n            --OPEN cur_insureds\n            FOR cur_insureds_rec IN cur_insureds\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_insureds (polin_code,\n                                                     polin_pa,\n                                                     polin_pol_policy_no,\n                                                     polin_pol_ren_endos_no,\n                                                     polin_pol_batch_no,\n                                                     polin_category,\n                                                     polin_prp_code)\n                             VALUES (\n                                        TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR')\n                                            || polin_code_seq.NEXTVAL),\n                                        NULL,\n                                        cur_pol_rec.pol_policy_no,\n                                        v_ends_no,\n                                        v_batch_no,\n                                        NULL,\n                                        cur_insureds_rec.polin_prp_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            ' Error creating insureds record. Contact the system administrator...');\n                END;\n\n                FOR cur_ipu_rec IN cur_ipu (cur_insureds_rec.polin_code)\n                LOOP\n                    SELECT TO_NUMBER (\n                                  TO_CHAR (SYSDATE, 'RRRR')\n                               || gin_ipu_code_seq.NEXTVAL)\n                      INTO v_new_ipu_code\n                      FROM DUAL;\n\n                    -- DO YOUR INSERTS INTO ipu\n                    BEGIN\n                        INSERT INTO gin_insured_property_unds (\n                                        ipu_code,\n                                        ipu_property_id,\n                                        ipu_item_desc,\n                                        ipu_qty,\n                                        ipu_value,\n                                        ipu_wef,\n                                        ipu_wet,\n                                        ipu_pol_policy_no,\n                                        ipu_pol_ren_endos_no,\n                                        ipu_pol_batch_no,\n                                        ipu_basic_premium,\n                                        ipu_nett_premium,\n                                        ipu_compulsory_excess,\n                                        ipu_add_theft_excess,\n                                        ipu_add_exp_excess,\n                                        ipu_prr_rate,\n                                        ipu_comp_retention,\n                                        ipu_pol_est_max_loss,\n                                        ipu_avail_fulc_bal,\n                                        ipu_endos_diff_amt,\n                                        ipu_prem_wef,\n                                        ipu_earth_quake_cover,\n                                        ipu_earth_quake_prem,\n                                        ipu_location,\n                                        ipu_itl,\n                                        ipu_polin_code,\n                                        ipu_sec_sect_code,\n                                        ipu_sect_sht_desc,\n                                        ipu_sec_scl_code,\n                                        ipu_ncd_status,\n                                        ipu_cert_issued,\n                                        ipu_related_ipu_code,\n                                        ipu_prorata,\n                                        ipu_bp,\n                                        ipu_gp,\n                                        ipu_fp,\n                                        ipu_fap,\n                                        ipu_prev_ipu_code,\n                                        ipu_cummulative_reins,\n                                        ipu_eml_si,\n                                        ipu_reinsured,\n                                        ipu_ct_code,\n                                        ipu_sht_desc,\n                                        ipu_quz_code,\n                                        ipp_quz_sht_desc,\n                                        ipu_quz_sht_desc,\n                                        ipu_ncl_level,\n                                        ipu_ncd_level,\n                                        ipu_id,\n                                        ipu_gross_comp_retention,\n                                        ipu_bind_code,\n                                        ipu_commission,\n                                        ipu_comm_endos_diff_amt,\n                                        ipu_facre_amount,\n                                        ipu_clp_code,\n                                        ipu_excess_rate,\n                                        ipu_excess_type,\n                                        ipu_excess_rate_type,\n                                        ipu_excess_min,\n                                        ipu_excess_max,\n                                        ipu_prereq_ipu_code,\n                                        ipu_escalation_rate,\n                                        ipu_endos_remove,\n                                        ipu_comm_rate,\n                                        ipu_prev_batch_no,\n                                        ipu_cur_code,\n                                        ipu_relr_code,\n                                        ipu_relr_sht_desc,\n                                        ipu_reinsure_amt,\n                                        ipu_prp_code,\n                                        ipu_max_exposure,\n                                        ipu_com_retention_rate,\n                                        ipu_retro_cover,\n                                        ipu_retro_wef,\n                                        ipu_eff_wef,\n                                        ipu_eff_wet,\n                                        ipu_comments,\n                                        ipu_covt_code,\n                                        ipu_covt_sht_desc,\n                                        ipu_si_diff,\n                                        ipu_terr_code,\n                                        ipu_terr_desc,\n                                        ipu_from_time,\n                                        ipu_to_time,\n                                        ipu_tot_endos_prem_dif,\n                                        ipu_tot_gp,\n                                        ipu_tot_value,\n                                        ipu_cover_days,\n                                        ipu_grp_si_risk_pct,\n                                        ipu_grp_top_loc,\n                                        ipu_grp_comp_gross_ret,\n                                        ipu_grp_comp_net_ret,\n                                        ipu_prev_prem,\n                                        ipu_ri_agnt_com_rate,\n                                        ipu_uw_yr,\n                                        ipu_status,\n                                        ipu_paid_tl,\n                                        ipu_paid_premium,\n                                        ipu_trans_count,\n                                        ipu_rate_change_comment,\n                                        ipu_prem_tax,\n                                        ipu_trans_eff_wet,\n                                        ipu_compute_max_exposure,\n                                        ipu_endose_fap_or_bc,\n                                        ipu_tot_first_loss,\n                                        ipu_accumulation_limit,\n                                        ipu_inception_uwyr,\n                                        ipu_eml_based_on,\n                                        ipu_aggregate_limits,\n                                        ipu_rc_sht_desc,\n                                        ipu_rc_code,\n                                        ipu_survey_date,\n                                        ipu_item_details,\n                                        ipu_contrad_ipu_code,\n                                        ipu_prev_tot_fap,\n                                        ipu_prev_fap,\n                                        ipu_override_ri_retention,\n                                        ipu_ri_agnt_comm_amt,\n                                        ipu_earthqke_prem_diff,\n                                        ipu_tot_fap,\n                                        ipu_coin_tl,\n                                        ipu_mktr_com_amt,\n                                        ipu_mktr_com_rate,\n                                        ipu_vat_rate,\n                                        ipu_vat_amt,\n                                        ipu_prev_status,\n                                        ipu_rs_code,\n                                        ipu_rescue_mem,\n                                        ipu_rescue_charge,\n                                        ipu_health_tax,\n                                        ipu_road_safety_tax,\n                                        ipu_certchg,\n                                        ipu_motor_levy,\n                                        ipu_maintenance_period_type,\n                                        ipu_maintenance_period,\n                                        ipu_other_client_deductibles,\n                                        ipu_coin_other_client_charges,\n                                        ipu_survey_agnt_code,\n                                        ipu_survey,\n                                        ipu_marine_type)\n                                 VALUES (\n                                            v_new_ipu_code,\n                                            cur_ipu_rec.ipu_property_id,\n                                            cur_ipu_rec.ipu_item_desc,\n                                            cur_ipu_rec.ipu_qty,\n                                            NVL (cur_ipu_rec.ipu_value, 0),\n                                            v_wef,\n                                            v_wet,\n                                            cur_pol_rec.pol_policy_no,\n                                            v_ends_no,\n                                            v_batch_no,\n                                            NVL (\n                                                cur_ipu_rec.ipu_basic_premium,\n                                                0),\n                                            NVL (\n                                                cur_ipu_rec.ipu_nett_premium,\n                                                0),\n                                            cur_ipu_rec.ipu_compulsory_excess,\n                                            cur_ipu_rec.ipu_add_theft_excess,\n                                            cur_ipu_rec.ipu_add_exp_excess,\n                                            cur_ipu_rec.ipu_prr_rate,\n                                            NVL (\n                                                cur_ipu_rec.ipu_comp_retention,\n                                                0),\n                                            cur_ipu_rec.ipu_pol_est_max_loss,\n                                            NVL (\n                                                cur_ipu_rec.ipu_avail_fulc_bal,\n                                                0),\n                                            NVL (\n                                                cur_ipu_rec.ipu_endos_diff_amt,\n                                                0),\n                                            v_wef,\n                                            cur_ipu_rec.ipu_earth_quake_cover,\n                                            cur_ipu_rec.ipu_earth_quake_prem,\n                                            cur_ipu_rec.ipu_location,\n                                            NVL (cur_ipu_rec.ipu_itl, 0),\n                                            TO_NUMBER (\n                                                   TO_CHAR (SYSDATE, 'RRRR')\n                                                || polin_code_seq.CURRVAL),\n                                            cur_ipu_rec.ipu_sec_sect_code,\n                                            cur_ipu_rec.ipu_sect_sht_desc,\n                                            cur_ipu_rec.ipu_sec_scl_code,\n                                            cur_ipu_rec.ipu_ncd_status,\n                                            cur_ipu_rec.ipu_cert_issued,\n                                            cur_ipu_rec.ipu_related_ipu_code,\n                                            cur_ipu_rec.ipu_prorata,\n                                            NVL (cur_ipu_rec.ipu_bp, 0),\n                                            NVL (cur_ipu_rec.ipu_gp, 0),\n                                            NULL,\n                                            --NVL (cur_ipu_rec.ipu_fp, 0),\n                                            NVL (cur_ipu_rec.ipu_fap, 0),\n                                            cur_ipu_rec.ipu_prev_ipu_code,\n                                            cur_ipu_rec.ipu_cummulative_reins,\n                                            cur_ipu_rec.ipu_eml_si,\n                                            1,\n                                            cur_ipu_rec.ipu_ct_code,\n                                            cur_ipu_rec.ipu_sht_desc,\n                                            cur_ipu_rec.ipu_quz_code,\n                                            cur_ipu_rec.ipp_quz_sht_desc,\n                                            cur_ipu_rec.ipu_quz_sht_desc,\n                                            cur_ipu_rec.ipu_ncl_level,\n                                            cur_ipu_rec.ipu_ncd_level,\n                                            cur_ipu_rec.ipu_id,\n                                            NVL (\n                                                cur_ipu_rec.ipu_gross_comp_retention,\n                                                0),\n                                            cur_ipu_rec.ipu_bind_code,\n                                            NVL (cur_ipu_rec.ipu_commission,\n                                                 0),\n                                            NVL (\n                                                cur_ipu_rec.ipu_comm_endos_diff_amt,\n                                                0),\n                                            NVL (\n                                                cur_ipu_rec.ipu_facre_amount,\n                                                0),\n                                            cur_ipu_rec.ipu_clp_code,\n                                            cur_ipu_rec.ipu_excess_rate,\n                                            cur_ipu_rec.ipu_excess_type,\n                                            cur_ipu_rec.ipu_excess_rate_type,\n                                            cur_ipu_rec.ipu_excess_min,\n                                            cur_ipu_rec.ipu_excess_max,\n                                            cur_ipu_rec.ipu_prereq_ipu_code,\n                                            cur_ipu_rec.ipu_escalation_rate,\n                                            cur_ipu_rec.ipu_endos_remove,\n                                            cur_ipu_rec.ipu_comm_rate,\n                                            cur_ipu_rec.ipu_prev_batch_no,\n                                            cur_ipu_rec.ipu_cur_code,\n                                            cur_ipu_rec.ipu_relr_code,\n                                            cur_ipu_rec.ipu_relr_sht_desc,\n                                            NVL (\n                                                cur_ipu_rec.ipu_reinsure_amt,\n                                                0),\n                                            cur_ipu_rec.ipu_prp_code,\n                                            NVL (\n                                                cur_ipu_rec.ipu_max_exposure,\n                                                0),\n                                            cur_ipu_rec.ipu_com_retention_rate,\n                                            cur_ipu_rec.ipu_retro_cover,\n                                            cur_ipu_rec.ipu_retro_wef,\n                                            v_wef,\n                                            v_wet,\n                                            cur_ipu_rec.ipu_comments,\n                                            cur_ipu_rec.ipu_covt_code,\n                                            cur_ipu_rec.ipu_covt_sht_desc,\n                                            NVL (cur_ipu_rec.ipu_si_diff, 0),\n                                            cur_ipu_rec.ipu_terr_code,\n                                            cur_ipu_rec.ipu_terr_desc,\n                                            cur_ipu_rec.ipu_from_time,\n                                            cur_ipu_rec.ipu_to_time,\n                                            NVL (\n                                                cur_ipu_rec.ipu_tot_endos_prem_dif,\n                                                0),\n                                            NVL (cur_ipu_rec.ipu_tot_gp, 0),\n                                            NVL (cur_ipu_rec.ipu_tot_value,\n                                                 0),\n                                            cur_ipu_rec.ipu_cover_days,\n                                            cur_ipu_rec.ipu_grp_si_risk_pct,\n                                            NVL (cur_ipu_rec.ipu_grp_top_loc,\n                                                 0),\n                                            NVL (\n                                                cur_ipu_rec.ipu_grp_comp_gross_ret,\n                                                0),\n                                            NVL (\n                                                cur_ipu_rec.ipu_grp_comp_net_ret,\n                                                0),\n                                            NVL (cur_ipu_rec.ipu_prev_prem,\n                                                 0),\n                                            cur_ipu_rec.ipu_ri_agnt_com_rate,\n                                            TO_NUMBER (\n                                                TO_CHAR (v_wef, 'RRRR')),\n                                            --- v_year,\n                                            cur_ipu_rec.ipu_status,\n                                            NVL (cur_ipu_rec.ipu_paid_tl, 0),\n                                            NVL (\n                                                cur_ipu_rec.ipu_paid_premium,\n                                                0),\n                                              NVL (\n                                                  cur_ipu_rec.ipu_trans_count,\n                                                  0)\n                                            + 1,\n                                            cur_ipu_rec.ipu_rate_change_comment,\n                                            NVL (cur_ipu_rec.ipu_prem_tax, 0),\n                                            v_wet,\n                                            cur_ipu_rec.ipu_compute_max_exposure,\n                                            cur_ipu_rec.ipu_endose_fap_or_bc,\n                                            NVL (\n                                                cur_ipu_rec.ipu_tot_first_loss,\n                                                0),\n                                            NVL (\n                                                cur_ipu_rec.ipu_accumulation_limit,\n                                                0),\n                                            cur_ipu_rec.ipu_inception_uwyr,\n                                            cur_ipu_rec.ipu_eml_based_on,\n                                            cur_ipu_rec.ipu_aggregate_limits,\n                                            cur_ipu_rec.ipu_rc_sht_desc,\n                                            cur_ipu_rec.ipu_rc_code,\n                                            cur_ipu_rec.ipu_survey_date,\n                                            cur_ipu_rec.ipu_item_details,\n                                            cur_ipu_rec.ipu_code,\n                                            NVL (\n                                                cur_ipu_rec.ipu_prev_tot_fap,\n                                                0),\n                                            NVL (cur_ipu_rec.ipu_prev_fap, 0),\n                                            cur_ipu_rec.ipu_override_ri_retention,\n                                            cur_ipu_rec.ipu_ri_agnt_comm_amt,\n                                            cur_ipu_rec.ipu_earthqke_prem_diff,\n                                            cur_ipu_rec.ipu_tot_fap,\n                                            cur_ipu_rec.ipu_coin_tl,\n                                            cur_ipu_rec.ipu_mktr_com_amt,\n                                            cur_ipu_rec.ipu_mktr_com_rate,\n                                            cur_ipu_rec.ipu_vat_rate,\n                                            cur_ipu_rec.ipu_vat_amt,\n                                            cur_ipu_rec.ipu_status,\n                                            cur_ipu_rec.ipu_rs_code,\n                                            cur_ipu_rec.ipu_rescue_mem,\n                                            cur_ipu_rec.ipu_rescue_charge,\n                                            cur_ipu_rec.ipu_health_tax,\n                                            cur_ipu_rec.ipu_road_safety_tax,\n                                            cur_ipu_rec.ipu_certchg,\n                                            cur_ipu_rec.ipu_motor_levy,\n                                            cur_ipu_rec.ipu_maintenance_period_type,\n                                            cur_ipu_rec.ipu_maintenance_period,\n                                            cur_ipu_rec.ipu_other_client_deductibles,\n                                            cur_ipu_rec.ipu_coin_other_client_charges,\n                                            cur_ipu_rec.ipu_survey_agnt_code,\n                                            cur_ipu_rec.ipu_survey,\n                                            cur_ipu_rec.ipu_marine_type);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            ROLLBACK;\n                            raise_error (\n                                ' Error creating risk contra record. Contact the system administrator...');\n                    END;\n\n                    --OPEN LIMITS\n                    FOR cur_limits_rec IN cur_limits (cur_ipu_rec.ipu_code)\n                    LOOP\n                        -- DO YOUR INSERTS INTO limits\n                        BEGIN\n                            INSERT INTO gin_policy_insured_limits (\n                                            pil_code,\n                                            pil_ipu_code,\n                                            pil_sect_code,\n                                            pil_sect_sht_desc,\n                                            pil_row_num,\n                                            pil_calc_group,\n                                            pil_limit_amt,\n                                            pil_prem_rate,\n                                            pil_prem_amt,\n                                            pil_rate_type,\n                                            pil_rate_desc,\n                                            pil_sect_type,\n                                            pil_sect_excess_detail,\n                                            pil_original_prem_rate,\n                                            pil_rate_change_remarks,\n                                            pil_change_done_by,\n                                            pil_comment,\n                                            pil_multiplier_rate,\n                                            pil_multiplier_div_factor,\n                                            pil_annual_premium,\n                                            pil_rate_div_fact,\n                                            pil_min_premium,\n                                            pil_desc,\n                                            pil_compute,\n                                            pil_used_limit,\n                                            pil_indem_prd,\n                                            pil_prd_type,\n                                            pil_indem_fstprd,\n                                            pil_indem_fstprd_pct,\n                                            pil_indem_remprd_pct,\n                                            pil_dual_basis,\n                                            pil_prem_accumulation,\n                                            pil_declaration_section,\n                                            pil_prev_limit,\n                                            pil_actual_prem,\n                                            pil_prev_prem_prorata,\n                                            pil_annual_actual_prem,\n                                            pil_eml_pct,\n                                            pil_top_loc_rate,\n                                            pil_top_loc_div_fact,\n                                            pil_limit_prd,\n                                            pil_free_limit,\n                                            pil_prev_endr_prem_rate,\n                                            pil_prev_endr_rate_div_fact,\n                                            pil_prev_endr_mult_rate,\n                                            pil_prev_endr_mult_div_fact,\n                                            pil_expired,\n                                            pil_firstloss,\n                                            pil_firstloss_amt_pcnt,\n                                            pil_firstloss_value)\n                                     VALUES (\n                                                TO_NUMBER (\n                                                       TO_CHAR (SYSDATE,\n                                                                'RRRR')\n                                                    || gin_pil_code_seq.NEXTVAL),\n                                                v_new_ipu_code,\n                                                cur_limits_rec.pil_sect_code,\n                                                cur_limits_rec.pil_sect_sht_desc,\n                                                cur_limits_rec.pil_row_num,\n                                                cur_limits_rec.pil_calc_group,\n                                                NVL (\n                                                    cur_limits_rec.pil_limit_amt,\n                                                    0),\n                                                cur_limits_rec.pil_prem_rate,\n                                                NVL (\n                                                    cur_limits_rec.pil_prem_amt,\n                                                    0),\n                                                cur_limits_rec.pil_rate_type,\n                                                cur_limits_rec.pil_rate_desc,\n                                                cur_limits_rec.pil_sect_type,\n                                                cur_limits_rec.pil_sect_excess_detail,\n                                                cur_limits_rec.pil_original_prem_rate,\n                                                cur_limits_rec.pil_rate_change_remarks,\n                                                cur_limits_rec.pil_change_done_by,\n                                                cur_limits_rec.pil_comment,\n                                                cur_limits_rec.pil_multiplier_rate,\n                                                cur_limits_rec.pil_multiplier_div_factor,\n                                                NVL (\n                                                    cur_limits_rec.pil_annual_premium,\n                                                    0),\n                                                cur_limits_rec.pil_rate_div_fact,\n                                                NVL (\n                                                    cur_limits_rec.pil_min_premium,\n                                                    0),\n                                                cur_limits_rec.pil_desc,\n                                                cur_limits_rec.pil_compute,\n                                                NVL (\n                                                    cur_limits_rec.pil_used_limit,\n                                                    0),\n                                                cur_limits_rec.pil_indem_prd,\n                                                cur_limits_rec.pil_prd_type,\n                                                cur_limits_rec.pil_indem_fstprd,\n                                                cur_limits_rec.pil_indem_fstprd_pct,\n                                                cur_limits_rec.pil_indem_remprd_pct,\n                                                cur_limits_rec.pil_dual_basis,\n                                                NVL (\n                                                    cur_limits_rec.pil_prem_accumulation,\n                                                    0),\n                                                cur_limits_rec.pil_declaration_section,\n                                                NVL (\n                                                    cur_limits_rec.pil_prev_limit,\n                                                    0),\n                                                NVL (\n                                                    cur_limits_rec.pil_actual_prem,\n                                                    0),\n                                                NVL (\n                                                    cur_limits_rec.pil_prev_prem_prorata,\n                                                    0),\n                                                NVL (\n                                                    cur_limits_rec.pil_annual_actual_prem,\n                                                    0),\n                                                cur_limits_rec.pil_eml_pct,\n                                                cur_limits_rec.pil_top_loc_rate,\n                                                cur_limits_rec.pil_top_loc_div_fact,\n                                                cur_limits_rec.pil_limit_prd,\n                                                cur_limits_rec.pil_free_limit,\n                                                cur_limits_rec.pil_prem_rate,\n                                                cur_limits_rec.pil_rate_div_fact,\n                                                cur_limits_rec.pil_multiplier_rate,\n                                                cur_limits_rec.pil_multiplier_div_factor,\n                                                cur_limits_rec.pil_expired,\n                                                cur_limits_rec.pil_firstloss,\n                                                cur_limits_rec.pil_firstloss_amt_pcnt,\n                                                cur_limits_rec.pil_firstloss_value);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    '  Error creating risk section record. Contact the system administrator...');\n                        END;\n                    END LOOP;                                 --cur_limits_rec\n\n                    --OPEN CLAUSES\n                    FOR cur_clauses_rec IN cur_clauses (cur_ipu_rec.ipu_code)\n                    LOOP\n                        -- DO YOUR INSERTS INTO clauses\n                        BEGIN\n                            INSERT INTO gin_policy_clauses (\n                                            pocl_sbcl_cls_code,\n                                            pocl_sbcl_scl_code,\n                                            pocl_cls_sht_desc,\n                                            pocl_pol_policy_no,\n                                            pocl_pol_ren_endos_no,\n                                            pocl_pol_batch_no,\n                                            pocl_ipu_code,\n                                            plcl_cls_type,\n                                            pocl_clause,\n                                            pocl_cls_editable,\n                                            pocl_new,\n                                            pocl_heading)\n                                 VALUES (cur_clauses_rec.pocl_sbcl_cls_code,\n                                         cur_clauses_rec.pocl_sbcl_scl_code,\n                                         cur_clauses_rec.pocl_cls_sht_desc,\n                                         cur_pol_rec.pol_policy_no,\n                                         v_ends_no,\n                                         v_batch_no,\n                                         v_new_ipu_code,\n                                         cur_clauses_rec.plcl_cls_type,\n                                         cur_clauses_rec.pocl_clause,\n                                         cur_clauses_rec.pocl_cls_editable,\n                                         cur_clauses_rec.pocl_new,\n                                         cur_clauses_rec.pocl_heading);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    '  Error creating risk clauses record. Contact the system administrator...');\n                        END;\n                    END LOOP;                                --cur_clauses_rec\n\n                    FOR cur_perils_rec IN perils (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_pol_sec_perils (\n                                            gpsp_per_code,\n                                            gpsp_per_sht_desc,\n                                            gpsp_sec_sect_code,\n                                            gpsp_sect_sht_desc,\n                                            gpsp_sec_scl_code,\n                                            gpsp_ipp_code,\n                                            gpsp_ipu_code,\n                                            gpsp_limit_amt,\n                                            gpsp_excess_amt)\n                                 VALUES (cur_perils_rec.gpsp_per_code,\n                                         cur_perils_rec.gpsp_per_sht_desc,\n                                         cur_perils_rec.gpsp_sec_sect_code,\n                                         cur_perils_rec.gpsp_sect_sht_desc,\n                                         cur_perils_rec.gpsp_sec_scl_code,\n                                         cur_perils_rec.gpsp_ipp_code,\n                                         v_new_ipu_code,\n                                         cur_perils_rec.gpsp_limit_amt,\n                                         cur_perils_rec.gpsp_excess_amt);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    '  Error creating risk perils record. Contact the system administrator...');\n                        END;\n                    END LOOP;                                 --Cur_perils_rec\n\n                    FOR risk_excesses_rec\n                        IN risk_excesses (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_risk_excess (re_ipu_code,\n                                                         re_excess_rate,\n                                                         re_excess_type,\n                                                         re_excess_rate_type,\n                                                         re_excess_min,\n                                                         re_excess_max,\n                                                         re_comments)\n                                     VALUES (\n                                                v_new_ipu_code,\n                                                risk_excesses_rec.re_excess_rate,\n                                                risk_excesses_rec.re_excess_type,\n                                                risk_excesses_rec.re_excess_rate_type,\n                                                risk_excesses_rec.re_excess_min,\n                                                risk_excesses_rec.re_excess_max,\n                                                risk_excesses_rec.re_comments);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    '  Error creating risk excess record. Contact the system administrator...');\n                        END;\n                    END LOOP;                              --risk_excesses_rec\n\n                    FOR schedules_rec IN schedules (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_policy_risk_schedules (\n                                            polrs_code,\n                                            polrs_ipu_code,\n                                            polrs_pol_batch_no,\n                                            polrs_schedule)\n                                     VALUES (\n                                                   TO_NUMBER (\n                                                       TO_CHAR (SYSDATE,\n                                                                'RRRR'))\n                                                || gin_polrs_code_seq.NEXTVAL,\n                                                v_new_ipu_code,\n                                                v_batch_no,\n                                                schedules_rec.polrs_schedule);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    ' Error creating risk schedules record. Contact the system administrator...');\n                        END;\n                    END LOOP;                                  --Schedules_rec\n                END LOOP;                                   --cur_insureds_rec\n            END LOOP;\n        END LOOP;                                                --cur_pol_rec\n    END;",
        "gin_policies_prc": "PROCEDURE gin_policies_prc (\n        v_pol_no           IN OUT VARCHAR2,\n        v_pol_data         IN     web_pol_tab,\n        v_agentcontact     IN     VARCHAR2,\n        v_pol_batch_no     IN OUT NUMBER,\n        v_user             IN     VARCHAR2,\n        v_del_sect         IN     VARCHAR2 DEFAULT NULL,\n        v_mar_cert_level   IN     VARCHAR2 DEFAULT NULL)\n    IS\n        v_cnt                          NUMBER;\n        v_new_polin_code               NUMBER;\n        v_exp_flag                     VARCHAR2 (2);\n        v_uw_yr                        VARCHAR2 (1);\n        v_open_cover                   VARCHAR2 (2);\n        v_pol_status                   VARCHAR2 (5);\n        v_trans_no                     NUMBER;\n        v_stp_code                     NUMBER;\n        v_wet_date                     DATE;\n        v_pol_renewal_dt               DATE;\n        v_client_pol_no                VARCHAR2 (45);\n        v_end_no                       VARCHAR2 (45);\n        v_batchno                      NUMBER;\n        v_cur_code                     NUMBER;\n        v_cur_symbol                   VARCHAR2 (15);\n        v_cur_rate                     NUMBER;\n        v_pwet_dt                      DATE;\n        v_pol_uwyr                     NUMBER;\n        v_policy_doc                   VARCHAR2 (200);\n        v_brn_code                     NUMBER;\n        v_brn_sht_desc                 VARCHAR2 (15);\n        v_endrsd_rsks_tab              gin_stp_pkg.endrsd_rsks_tab;\n        v_rsk_data                     risk_tab;\n        v_admin_fee_applicable         VARCHAR2 (1);\n        v_ren_cnt                      NUMBER;\n        v_admin_disc                   NUMBER;\n        v_pro_min_prem                 NUMBER;\n        v_uw_trans                     VARCHAR2 (1);\n        v_valid_trans                  VARCHAR2 (1);\n        v_inception_dt                 DATE;\n        v_inception_yr                 NUMBER;\n        y                              NUMBER;\n        vuser                          VARCHAR2 (35)\n            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.pvg_username');\n        v_seqno                        VARCHAR2 (35);\n        v_brn_sht_length               NUMBER;\n        v_growth_type                  VARCHAR2 (5);\n        v_pol_loaded                   VARCHAR2 (5);\n        v_policy_status                VARCHAR2 (5);\n        v_prev_tot_instlmt             NUMBER;\n        v_cvt_install_type             gin_subclass_cover_types.sclcovt_install_type%TYPE;\n        v_cvt_max_installs             gin_subclass_cover_types.sclcovt_max_installs%TYPE;\n        v_cvt_pymt_install_pcts        gin_subclass_cover_types.sclcovt_pymt_install_pcts%TYPE;\n        v_cvt_install_periods          gin_subclass_cover_types.sclcovt_install_periods%TYPE;\n        v_install_pct                  NUMBER;\n        v_pymnt_tot_instlmt            NUMBER;\n        v_ipu_wef                      DATE;\n        v_ipu_wet                      DATE;\n        v_install_period               NUMBER;\n        v_cover_days                   NUMBER;\n        v_pro_sht_desc                 gin_products.pro_sht_desc%TYPE;\n        next_ggts_trans_no             NUMBER;\n        v_old_act_code                 NUMBER;\n        v_new_act_code                 NUMBER;\n        v_pro_travel_cnt               NUMBER;\n        v_act_type_id                  VARCHAR2 (5);\n        v_ren_wef_dt                   DATE;\n        v_ren_wet_dt                   DATE;\n        v_pdl_code                     NUMBER;\n        v_agnt_agent_code              NUMBER;\n        v_tie_agent_pol_to_brn_param   VARCHAR2 (1) := 'N';\n        v_agn_brn_code                 NUMBER;\n        v_client_pin_required          VARCHAR2 (1) := 'N';\n        v_clnt_pin                     VARCHAR2 (15);\n        v_serial                       VARCHAR2 (35);\n        v_tran_ref_no                  VARCHAR2 (35);\n        v_bpn_activity_share           NUMBER;\n        v_valuationcount               NUMBER;\n        v_ex_valuation_param           VARCHAR2 (1);\n        v_binderpols_param             VARCHAR2 (1) DEFAULT 'N';\n        validatedates                  NUMBER := 0;\n        v_agn_sht_desc                 tqc_agencies.agn_sht_desc%TYPE;\n        v_comm_applicable              VARCHAR2 (1);\n\n        CURSOR rsks (v_old_batch_no IN NUMBER)\n        IS\n            SELECT ipu_code, ipu_polin_code, ipu_prp_code\n              FROM gin_insured_property_unds, gin_policy_active_risks\n             WHERE     ipu_code = polar_ipu_code\n                   AND polar_pol_batch_no = v_old_batch_no\n                   AND gin_stp_claims_pkg.claim_total_loss (ipu_code) != 'Y';\n\n        v_seq                          NUMBER;\n        v_pol_seq_type                 VARCHAR2 (100);\n\n        CURSOR cur_risk (vbatch IN NUMBER)\n        IS\n            SELECT ipu_code,\n                   ipu_sec_scl_code,\n                   ipu_covt_code,\n                   ipu_pymt_install_pcts,\n                   pro_expiry_period\n              FROM gin_insured_property_unds, gin_policies, gin_products\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND pol_pro_code = pro_code\n                   AND ipu_pol_batch_no = vbatch;\n\n        CURSOR cur_rel_officer IS\n            SELECT usr_code,\n                   usr_username,\n                   usr_name,\n                   usr_email,\n                   usr_cell_phone_no\n              FROM tq_crm.tqc_users\n             WHERE usr_username =\n                   gin_parameters_pkg.get_param_varchar (\n                       'DEFAULT_UW_REL_OFFICER');\n    BEGIN\n        --raise_error('v_mar_cert_level ' || v_mar_cert_level);\n        vuser := NVL (v_user, v_agentcontact);\n\n        IF vuser IS NULL\n        THEN\n            raise_error ('User unknown...');\n        END IF;\n\n        SELECT gin_stp_code_seq.NEXTVAL INTO v_stp_code FROM DUAL;\n\n        IF v_pol_data.COUNT = 0\n        THEN\n            raise_error ('No policy data provided..');\n        END IF;\n\n        BEGIN\n            SELECT gin_parameters_pkg.get_param_varchar (\n                       'TIE_AGENT_POLICY_TO_BRANCH')\n              INTO v_tie_agent_pol_to_brn_param\n              FROM DUAL;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_tie_agent_pol_to_brn_param := 'N';\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'ERROR GETTING TIE_AGENT_POLICY_TO_BRANCH PARAM DETAILS');\n        END;\n\n        BEGIN\n            v_binderpols_param :=\n                gin_parameters_pkg.get_param_varchar (\n                    'NORMAL_BINDER_POLS_USESAME_SEQ');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_binderpols_param := 'N';\n        END;\n\n        FOR i IN 1 .. v_pol_data.COUNT\n        LOOP\n            --RAISE_ERROR('POL_MULTI_AGENCY='||v_pol_data (i).POL_MULTI_AGENCY);\n            IF v_pol_data (i).pol_trans_type IN ('RN', 'NB')\n            THEN\n                BEGIN\n                    SELECT agn_brn_code\n                      INTO v_agn_brn_code\n                      FROM tqc_agencies\n                     WHERE agn_code = v_pol_data (i).pol_agnt_agent_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error getting intermediary details');\n                END;\n            END IF;\n\n\n            BEGIN\n                SELECT agn_sht_desc\n                  INTO v_agn_sht_desc\n                  FROM tqc_agencies\n                 WHERE agn_code = v_pol_data (i).pol_agnt_agent_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_agn_sht_desc := NULL;\n                WHEN OTHERS\n                THEN\n                    v_agn_sht_desc := NULL;\n            END;\n\n\n            IF v_pol_data (i).pol_brn_code IS NULL\n            THEN\n                SELECT brn_code, brn_sht_desc\n                  INTO v_brn_code, v_brn_sht_desc\n                  FROM tqc_organizations, tqc_branches, tqc_systems\n                 WHERE     org_web_brn_code = brn_code\n                       AND org_code = sys_org_code\n                       AND sys_code = 37;\n            ELSE\n                v_brn_code := v_pol_data (i).pol_brn_code;\n                v_brn_sht_desc := v_pol_data (i).pol_brn_sht_desc;\n            END IF;\n\n            IF v_pol_data (i).pol_trans_type NOT IN ('SP', 'NB')\n            THEN\n                --            BEGIN\n                --               SELECT pol_uw_year, pol_inception_dt, pol_inception_uwyr\n                --                 INTO v_pol_uwyr, v_inception_dt, v_inception_yr\n                --                 FROM gin_policies\n                --                WHERE pol_batch_no = v_pol_data (i).pol_batch_no;\n                --            EXCEPTION\n                --               WHEN OTHERS\n                --               THEN\n                --                  NULL;\n                --            END;\n                IF v_pol_data (i).pol_trans_type = 'ME'\n                /*****INTRODUCED ON 27/02/2019******/\n                THEN\n                    BEGIN\n                        SELECT pol_inception_dt, pol_inception_uwyr\n                          INTO v_inception_dt, v_inception_yr\n                          FROM gin_policies\n                         WHERE pol_batch_no = v_pol_data (i).pol_batch_no;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n\n                    v_pol_uwyr :=\n                        TO_NUMBER (\n                            TO_CHAR (v_pol_data (i).pol_wef_dt, 'RRRR'));\n                ELSE\n                    BEGIN\n                        SELECT pol_uw_year,\n                               pol_inception_dt,\n                               pol_inception_uwyr\n                          INTO v_pol_uwyr, v_inception_dt, v_inception_yr\n                          FROM gin_policies\n                         WHERE pol_batch_no = v_pol_data (i).pol_batch_no;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n                END IF;\n            END IF;\n\n            BEGIN\n                SELECT act_type_id\n                  INTO v_act_type_id\n                  FROM gin_policies, tqc_agencies, tqc_account_types\n                 WHERE     pol_agnt_agent_code = agn_code\n                       AND agn_act_code = act_code\n                       AND pol_batch_no = v_pol_data (i).pol_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            IF v_pol_data (i).pol_pro_code IS NOT NULL\n            THEN\n                BEGIN\n                    SELECT pro_pin_required\n                      INTO v_client_pin_required\n                      FROM gin_products\n                     WHERE pro_code = v_pol_data (i).pol_pro_code;\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        v_client_pin_required := 'N';\n                    WHEN OTHERS\n                    THEN\n                        v_client_pin_required := 'N';\n                END;\n            --            IF NVL(v_client_pin_required,'N')='Y'  THEN\n            --                SELECT clnt_pin\n            --                INTO  v_clnt_pin\n            --                FROM tqc_clients\n            --                WHERE clnt_code=v_pol_data (i).pol_prp_code;\n            --                IF v_clnt_pin IS NULL THEN\n            --                   raise_error ('You need the INSUREDs PINno to proceed..contact system admin');\n            --                END IF;\n            --END IF;\n            END IF;\n\n            v_wet_date := v_pol_data (i).pol_wet_dt;\n            v_cur_code := v_pol_data (i).pol_cur_code;\n            v_cur_rate := v_pol_data (i).pol_cur_rate;\n            v_cur_symbol := v_pol_data (i).pol_cur_symbol;\n            v_pol_renewal_dt :=\n                get_renewal_date (v_pol_data (i).pol_pro_code, v_wet_date);\n            v_uw_trans := 'Y';\n\n            IF     NVL (v_tie_agent_pol_to_brn_param, 'N') = 'Y'\n               AND v_pol_data (i).pol_trans_type IN ('NB', 'RN')\n            THEN\n                IF v_pol_data (i).pol_agnt_agent_code != 0\n                THEN\n                    IF v_agn_brn_code != v_brn_code\n                    THEN\n                        raise_error (\n                               'TRANSACTION BRANCH '\n                            || v_brn_code\n                            || ' CANNOT BE DIFFERENT \n                     FROM INTERMEDIARY BRANCH'\n                            || v_agn_brn_code);\n                    END IF;\n                END IF;\n            END IF;\n\n            IF     (   v_pol_data (i).pol_trans_type = 'RN'\n                    OR v_pol_data (i).pol_trans_type = 'RE')\n               AND NVL (v_pol_data (i).pol_loaded, 'N') = 'N'\n            THEN\n                BEGIN\n                    SELECT COUNT (*)\n                      INTO v_ren_cnt\n                      FROM gin_ren_policies\n                     WHERE pol_batch_no = v_pol_data (i).pol_batch_no;\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        v_ren_cnt := 0;\n                END;\n\n                IF NVL (v_ren_cnt, 0) > 0\n                THEN\n                    v_uw_trans := 'N';\n                ELSE\n                    BEGIN\n                        SELECT COUNT (*)\n                          INTO v_ren_cnt\n                          FROM gin_policies\n                         WHERE pol_batch_no = v_pol_data (i).pol_batch_no;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error fetching renewal policy details...');\n                    END;\n\n                    v_uw_trans := 'Y';\n                END IF;\n\n                v_pol_uwyr :=\n                    TO_NUMBER (TO_CHAR (v_pol_data (i).pol_wef_dt, 'RRRR'));\n            ELSIF    v_pol_data (i).pol_trans_type = 'NB'\n                  OR (    v_pol_data (i).pol_trans_type = 'RN'\n                      AND NVL (v_pol_data (i).pol_loaded, 'N') = 'Y')\n            THEN\n                IF v_pol_data (i).pol_pro_code IS NULL\n                THEN\n                    raise_error ('SELECT THE POLICY PRODUCT ...');\n                END IF;\n\n                IF v_pol_data (i).pol_wef_dt IS NULL\n                THEN\n                    raise_error ('PROVIDE THE COVER FROM DATE ...');\n                END IF;\n\n                DBMS_OUTPUT.put_line (21);\n\n                IF     v_wet_date IS NULL\n                   AND v_pol_data (i).pol_trans_type = 'NB'\n                THEN\n                    v_wet_date :=\n                        get_wet_date (v_pol_data (i).pol_pro_code,\n                                      v_pol_data (i).pol_wef_dt);\n                END IF;\n\n                DBMS_OUTPUT.put_line (22);\n\n                IF v_wet_date IS NULL\n                THEN\n                    raise_error ('PROVIDE THE COVER TO DATE ...');\n                END IF;\n\n                DBMS_OUTPUT.put_line (23);\n\n                -- RAISE_ERROR(v_pol_data (i).pol_binder_policy||';'||v_pol_data (i).pol_bind_code);\n                IF     NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                   AND v_pol_data (i).pol_bind_code IS NULL\n                THEN\n                    raise_error (\n                        'YOU HAVE NOT DEFINED THE BORDEREAUX CODE ..');\n                END IF;\n\n                DBMS_OUTPUT.put_line (v_pol_data (i).pol_wef_dt);\n                DBMS_OUTPUT.put_line (TO_CHAR (v_pol_data (i).pol_wef_dt));\n                DBMS_OUTPUT.put_line (\n                    TO_NUMBER (TO_CHAR (v_pol_data (i).pol_wef_dt, 'RRRR')));\n                v_pol_uwyr :=\n                    TO_NUMBER (TO_CHAR (v_pol_data (i).pol_wef_dt, 'RRRR'));\n                v_inception_dt := v_pol_data (i).pol_wef_dt;\n                v_inception_yr := v_pol_uwyr;\n                /*IF v_pol_Data(pcount).POL_UW_YEAR IS NULL OR v_pol_Data(pcount).POL_UW_YEAR = 0 THEN\n                    RAISE_ERROR('THE UNDERWRITING YEAR MUST BE A VALID YEAR...');\n                END IF;*/\n                DBMS_OUTPUT.put_line (25);\n                v_pol_renewal_dt :=\n                    get_renewal_date (v_pol_data (i).pol_pro_code,\n                                      v_wet_date);\n\n                IF v_cur_code IS NULL\n                THEN\n                    v_cur_rate := NULL;\n\n                    BEGIN\n                        SELECT org_cur_code, cur_symbol\n                          INTO v_cur_code, v_cur_symbol\n                          FROM tqc_organizations, tqc_systems, tqc_currencies\n                         WHERE     org_code = sys_org_code\n                               AND org_cur_code = cur_code\n                               AND sys_code = 37;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'UNABLE TO RETRIEVE THE BASE CURRENCY');\n                    END;\n\n                    IF v_cur_code IS NULL\n                    THEN\n                        raise_error (\n                            'THE BASE CURRENCY HAVE NOT BEEN DEDFINED. CANNOT PROCEED.');\n                    END IF;\n                ELSE\n                    SELECT cur_code, cur_symbol\n                      INTO v_cur_code, v_cur_symbol\n                      FROM tqc_currencies\n                     WHERE cur_code = v_cur_code;\n                END IF;\n\n                IF v_cur_rate IS NULL\n                THEN\n                    v_cur_rate :=\n                        get_exchange_rate (v_cur_code,\n                                           v_pol_data (i).pol_cur_code);\n                END IF;\n\n                BEGIN\n                    SELECT NVL (pro_expiry_period, 'Y'),\n                           NVL (pro_open_cover, 'N')\n                      INTO v_exp_flag, v_open_cover\n                      FROM gin_products\n                     WHERE pro_code = v_pol_data (i).pol_pro_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR SECURING OPEN COVER STATUS..');\n                END;\n\n                IF    NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                   OR NVL (v_open_cover, 'N') = 'Y'\n                THEN\n                    v_uw_yr := 'R';\n                ---to_number(to_char(:GIN_INSURED_PROPERTY_UNDS.IPU_WEF,'RRRR'));\n                ELSE\n                    v_uw_yr := 'P';\n                ---:GIN_INSURED_PROPERTY_UNDS.IPU_UW_YR :=  :GIN_POLICIES.POL_UW_YEAR;\n                END IF;\n            END IF;\n\n            DBMS_OUTPUT.put_line (\n                'TransType=' || v_pol_data (i).pol_trans_type);\n            DBMS_OUTPUT.put_line (\n                'ActionType=' || v_pol_data (i).pol_add_edit);\n\n\n            IF     v_pol_data (i).pol_add_edit = 'E'\n               AND v_pol_data (i).pol_trans_type NOT IN ('EN')\n            THEN\n                BEGIN\n                    SELECT NVL (pro_expiry_period, 'Y')\n                      INTO v_exp_flag\n                      FROM gin_products\n                     WHERE pro_code = v_pol_data (i).pol_pro_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'ERROR CHECKING PRODUCT EXPIRY PERIOD..');\n                END;\n\n                IF v_exp_flag = 'Y'\n                THEN\n                    SELECT COUNT ('X')\n                      INTO validatedates\n                      FROM gin_policies\n                     WHERE     v_pol_data (i).POL_WET_DT BETWEEN pol_wef_dt\n                                                             AND pol_wet_dt\n                           AND pol_policy_no = v_pol_no\n                           AND pol_batch_no <> v_pol_data (i).pol_batch_no\n                           AND POL_CURRENT_STATUS NOT IN ('CO', 'CN')\n                           AND pol_batch_no NOT IN\n                                   (SELECT b.pol_prev_batch_no\n                                      FROM gin_policies b\n                                     WHERE     b.pol_policy_no = v_pol_no\n                                           AND b.POL_CURRENT_STATUS IN\n                                                   ('CO', 'CN')); --WHEN REINSTATING A POLICY, THE COVER TO DATE IS REUSED TO MAINTAIN ORIGINAL PERIOD OF COVER\n                ELSE\n                    SELECT COUNT ('X')\n                      INTO validatedates\n                      FROM gin_policies\n                     WHERE     v_pol_data (i).POL_WET_DT BETWEEN pol_wef_dt\n                                                             AND   pol_wet_dt\n                                                                 - 1\n                           AND pol_policy_no = v_pol_no\n                           AND pol_batch_no <> v_pol_data (i).pol_batch_no\n                           AND POL_CURRENT_STATUS NOT IN ('CO', 'CN')\n                           AND pol_batch_no NOT IN\n                                   (SELECT b.pol_prev_batch_no\n                                      FROM gin_policies b\n                                     WHERE     b.pol_policy_no = v_pol_no\n                                           AND b.POL_CURRENT_STATUS IN\n                                                   ('CO', 'CN')); --WHEN REINSTATING A POLICY, THE COVER TO DATE IS REUSED TO MAINTAIN ORIGINAL PERIOD OF COVER\n                END IF;\n\n                IF validatedates > 0\n                THEN\n                    raise_error (\n                           'The COVER TO Date Provided already defined for this policy. Kindly check previous endorsements'\n                        || v_pol_data (i).pol_batch_no\n                        || ';'\n                        || v_exp_flag\n                        || ';'\n                        || v_pol_data (i).POL_WET_DT\n                        || 'pol_trans_type='\n                        || v_pol_data (i).pol_trans_type\n                        || '=pol_add_edit='\n                        || v_pol_data (i).pol_add_edit);\n                END IF;\n            /*      IF v_exp_flag = 'Y'\n                  THEN\n                      SELECT COUNT ('X')\n                        INTO validatedates\n                        FROM gin_policies\n                       WHERE     v_pol_data (i).POL_WEF_DT BETWEEN pol_wef_dt\n                                                               AND pol_wet_dt\n                             AND pol_policy_no = v_pol_no\n                             AND pol_batch_no <> v_pol_data (i).pol_batch_no\n                             AND POL_CURRENT_STATUS NOT IN ('CO', 'CN'); --ADDED 'CN' TO THE EXCLUSIONS. CANCELLED POLICIES SHOULD NOT BE CONSIDERED AS ACTIVE COVER PERIODS\n                  ELSE\n                      SELECT COUNT ('X')\n                        INTO validatedates\n                        FROM gin_policies\n                       WHERE     v_pol_data (i).POL_WEF_DT BETWEEN pol_wef_dt\n                                                               AND   pol_wet_dt\n                                                                   - 1\n                             AND pol_policy_no = v_pol_no\n                             AND pol_batch_no <> v_pol_data (i).pol_batch_no\n                             AND POL_CURRENT_STATUS NOT IN ('CO', 'CN'); --ADDED 'CN' TO THE EXCLUSIONS. CANCELLED POLICIES SHOULD NOT BE CONSIDERED AS ACTIVE COVER PERIODS\n                  END IF;\n\n                  IF validatedates > 0\n                  THEN\n                      raise_error (\n                             'The COVER FROM  Date Provided is already defined for this policy. Kindly check previous endorsements. Policy Batch Number: '\n                          || v_pol_data (i).pol_batch_no);\n                  END IF; */\n            END IF;\n\n            IF     v_pol_data (i).pol_trans_type = 'NB'\n               AND v_pol_data (i).pol_add_edit = 'A'\n            THEN\n                DBMS_OUTPUT.put_line (3);\n                v_pol_no := v_pol_data (i).pol_policy_no;\n                v_end_no := NULL;                --v_pol_Data(I).POL_ENDOS_NO;\n                v_batchno := NULL;          --v_pol_Data(pcount).POL_BATCH_NO;\n                DBMS_OUTPUT.put_line (31);\n                v_valid_trans :=\n                    gis_web_pkg.validate_transaction (\n                        v_pol_data (i).pol_gis_policy_no);\n\n                IF v_valid_trans = 'Y'\n                THEN\n                    raise_error (\n                        'This Policy has Another Unfinished Transaction..1..');\n                END IF;\n\n                IF NVL (v_pol_data (i).pol_short_period, 'N') = 'Y'\n                THEN\n                    v_pol_status := 'SP';\n                ELSE\n                    v_pol_status := 'NB';\n                END IF;\n\n                IF v_pol_no IS NULL OR v_end_no IS NULL OR v_batchno IS NULL\n                THEN\n                    BEGIN\n                        gen_pol_numbers (v_pol_data (i).pol_pro_code,\n                                         v_brn_code,\n                                         v_pol_uwyr,\n                                         v_pol_status,\n                                         v_pol_no,\n                                         v_end_no,\n                                         v_batchno,\n                                         v_pol_data (i).pol_serial_no,\n                                         v_pol_data (i).pol_policy_type,\n                                         v_pol_data (i).pol_coinsurance,\n                                         v_pol_data (i).pol_div_code);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'UNABLE TO GENERATE THE POLICY NUMBER...');\n                    END;\n                END IF;\n\n                BEGIN\n                    check_policy_unique (v_pol_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        BEGIN\n                            SELECT TO_NUMBER (\n                                       SUBSTR (\n                                           v_pol_no,\n                                           DECODE (\n                                               gin_parameters_pkg.get_param_varchar (\n                                                   'POL_SERIAL_AT_END'),\n                                               'N', DECODE (\n                                                        DECODE (\n                                                            v_pol_data (i).pol_policy_type,\n                                                            'N', 'P',\n                                                            'F'),\n                                                        'P', gin_parameters_pkg.get_param_varchar (\n                                                                 'POL_SERIAL_POS'),\n                                                        gin_parameters_pkg.get_param_varchar (\n                                                            'POL_FAC_SERIAL_POS')),\n                                                 LENGTH (v_pol_no)\n                                               - gin_parameters_pkg.get_param_varchar (\n                                                     'POLNOSRLENGTH')\n                                               + 1),\n                                           gin_parameters_pkg.get_param_varchar (\n                                               'POLNOSRLENGTH')))\n                              INTO v_seq\n                              FROM DUAL;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Error Selecting Used Sequence...1');\n                        END;\n\n                        BEGIN\n                            SELECT DECODE (v_pol_data (i).pol_policy_type,\n                                           'N', 'P',\n                                           'F')\n                              INTO v_pol_seq_type\n                              FROM DUAL;\n\n                            gin_sequences_pkg.update_used_sequence (\n                                v_pol_seq_type,\n                                v_pol_data (i).pol_pro_code,\n                                v_brn_code,\n                                v_pol_uwyr,\n                                v_pol_status,\n                                v_seq,\n                                v_pol_no);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                -- introduced for monarch where branch id vary from 2 charaters to 3 characters posing a challenge\n                                BEGIN\n                                    SELECT TO_NUMBER (\n                                               SUBSTR (\n                                                   v_pol_no,\n                                                   DECODE (\n                                                       gin_parameters_pkg.get_param_varchar (\n                                                           'POL_SERIAL_AT_END'),\n                                                       'N', DECODE (\n                                                                DECODE (\n                                                                    v_pol_data (\n                                                                        i).pol_policy_type,\n                                                                    'N', 'P',\n                                                                    'F'),\n                                                                'P', gin_parameters_pkg.get_param_varchar (\n                                                                         'POL_SERIAL_POS'),\n                                                                gin_parameters_pkg.get_param_varchar (\n                                                                    'POL_FAC_SERIAL_POS')),\n                                                         LENGTH (v_pol_no)\n                                                       - gin_parameters_pkg.get_param_varchar (\n                                                             'POLNOSRLENGTH')\n                                                       + 1),\n                                                   gin_parameters_pkg.get_param_varchar (\n                                                       'POLNOSRLENGTH')))\n                                      INTO v_seqno\n                                      FROM DUAL;\n                                EXCEPTION\n                                    WHEN OTHERS\n                                    THEN\n                                        raise_error (\n                                            'Error Selecting Used Sequence...2');\n                                END;\n\n                                BEGIN\n                                    SELECT LENGTH (brn_sht_desc)\n                                      INTO v_brn_sht_length\n                                      FROM tqc_branches\n                                     WHERE brn_code = v_brn_code;\n                                EXCEPTION\n                                    WHEN OTHERS\n                                    THEN\n                                        NULL;\n                                END;\n\n                                IF NVL (v_brn_sht_length, 0) = 2\n                                THEN\n                                    BEGIN\n                                        v_seq := TO_NUMBER (v_seqno);\n                                    EXCEPTION\n                                        WHEN OTHERS\n                                        THEN\n                                            NULL;\n                                    END;\n                                ELSIF NVL (v_brn_sht_length, 0) = 3\n                                THEN\n                                    BEGIN\n                                        v_seq :=\n                                            TO_NUMBER (SUBSTR (v_seqno, 2));\n                                    EXCEPTION\n                                        WHEN OTHERS\n                                        THEN\n                                            NULL;\n                                    END;\n                                ELSE\n                                    raise_error ('Error here....');\n                                END IF;\n\n                                BEGIN\n                                    SELECT DECODE (\n                                               v_pol_data (i).pol_policy_type,\n                                               'N', 'P',\n                                               'F')\n                                      INTO v_pol_seq_type\n                                      FROM DUAL;\n\n                                    gin_sequences_pkg.update_used_sequence (\n                                        v_pol_seq_type,\n                                        v_pol_data (i).pol_pro_code,\n                                        v_brn_code,\n                                        v_pol_uwyr,\n                                        v_pol_status,\n                                        v_seq,\n                                        v_pol_no);\n                                EXCEPTION\n                                    WHEN OTHERS\n                                    THEN\n                                        raise_error (\n                                            'ERROR UPDATING USED SEQUENCE...');\n                                END;\n                        --RAISE_ERROR('ERROR UPDATING USED SEQUENCE...');\n                        END;\n\n                        raise_error (\n                               'Error generating Policy number  at step 2'\n                            || v_pol_no);\n                END;\n\n                BEGIN\n                    SELECT TO_NUMBER (\n                               SUBSTR (\n                                   v_pol_no,\n                                   DECODE (\n                                       gin_parameters_pkg.get_param_varchar (\n                                           'POL_SERIAL_AT_END'),\n                                       'N', DECODE (\n                                                DECODE (\n                                                    v_pol_data (i).pol_policy_type,\n                                                    'N', 'P',\n                                                    'F'),\n                                                'P', gin_parameters_pkg.get_param_varchar (\n                                                         'POL_SERIAL_POS'),\n                                                gin_parameters_pkg.get_param_varchar (\n                                                    'POL_FAC_SERIAL_POS')),\n                                         LENGTH (v_pol_no)\n                                       - gin_parameters_pkg.get_param_varchar (\n                                             'POLNOSRLENGTH')\n                                       + 1),\n                                   gin_parameters_pkg.get_param_varchar (\n                                       'POLNOSRLENGTH')))\n                      INTO v_seq\n                      FROM DUAL;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                --RAISE_ERROR('Error Selecting Used Sequence...'||v_pol_no);\n                END;\n\n                BEGIN\n                    SELECT DECODE (v_pol_data (i).pol_policy_type,\n                                   'N', 'P',\n                                   'F')\n                      INTO v_pol_seq_type\n                      FROM DUAL;\n\n                    gin_sequences_pkg.update_used_sequence (\n                        v_pol_seq_type,\n                        v_pol_data (i).pol_pro_code,\n                        v_brn_code,\n                        v_pol_uwyr,\n                        v_pol_status,\n                        v_seq,\n                        v_pol_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        -- introduced for monarch where branch id vary from 2 charaters to 3 characters posing a challenge\n                        BEGIN\n                            SELECT (SUBSTR (\n                                        v_pol_no,\n                                        DECODE (\n                                            gin_parameters_pkg.get_param_varchar (\n                                                'POL_SERIAL_AT_END'),\n                                            'N', DECODE (\n                                                     DECODE (\n                                                         v_pol_data (i).pol_policy_type,\n                                                         'N', 'P',\n                                                         'F'),\n                                                     'P', gin_parameters_pkg.get_param_number (\n                                                              'POL_SERIAL_POS'),\n                                                     gin_parameters_pkg.get_param_number (\n                                                         'POL_FAC_SERIAL_POS')),\n                                              LENGTH (v_pol_no)\n                                            - gin_parameters_pkg.get_param_number (\n                                                  'POLNOSRLENGTH')\n                                            + 1),\n                                        gin_parameters_pkg.get_param_varchar (\n                                            'POLNOSRLENGTH')))\n                              INTO v_seqno\n                              FROM DUAL;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'ERROR SELECTING USED SEQUENCE...');\n                        END;\n\n                        BEGIN\n                            SELECT LENGTH (brn_sht_desc)\n                              INTO v_brn_sht_length\n                              FROM tqc_branches\n                             WHERE brn_code = v_brn_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        END;\n\n                        --RAISE_ERROR('HERE='||v_seqNO||';'||v_brn_sht_length||';'||v_seq);\n                        IF NVL (v_brn_sht_length, 0) = 2\n                        THEN\n                            BEGIN\n                                v_seq := TO_NUMBER (v_seqno);\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        ELSIF NVL (v_brn_sht_length, 0) = 3\n                        THEN\n                            BEGIN\n                                v_seq := TO_NUMBER (SUBSTR (v_seqno, 2));\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        ELSE\n                            raise_error ('Error here....');\n                        END IF;\n\n                        BEGIN\n                            SELECT DECODE (v_pol_data (i).pol_policy_type,\n                                           'N', 'P',\n                                           'F')\n                              INTO v_pol_seq_type\n                              FROM DUAL;\n\n                            gin_sequences_pkg.update_used_sequence (\n                                v_pol_seq_type,\n                                v_pol_data (i).pol_pro_code,\n                                v_brn_code,\n                                v_pol_uwyr,\n                                v_pol_status,\n                                v_seq,\n                                v_pol_no);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'ERROR UPDATING USED SEQUENCE...');\n                        END;\n                --RAISE_ERROR('ERROR UPDATING USED SEQUENCE...');\n                END;\n\n                IF     NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                   AND tqc_parameters_pkg.get_org_type (37) NOT IN ('INS')\n                THEN\n                    BEGIN\n                        SELECT bind_policy_no\n                          INTO v_client_pol_no\n                          FROM gin_binders\n                         WHERE bind_code = v_pol_data (i).pol_bind_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error getting the Contract policy no...');\n                    END;\n                ELSE\n                    IF     tqc_interfaces_pkg.get_org_type (37) IN ('INS')\n                       AND NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                       AND v_binderpols_param = 'Y'\n                    THEN\n                        BEGIN\n                            SELECT bind_policy_no\n                              INTO v_client_pol_no\n                              FROM gin_binders\n                             WHERE bind_code = v_pol_data (i).pol_bind_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                v_client_pol_no := v_pol_no;          --'TBA';\n                        END;\n                    ELSE\n                        v_client_pol_no := v_pol_no;\n                    END IF;\n                END IF;\n\n                DBMS_OUTPUT.put_line (4);\n                v_policy_doc := v_pol_data (i).pol_policy_doc;\n\n                -- RAISE_ERROR('v_policy_doc '||v_policy_doc);\n                IF v_policy_doc IS NULL\n                THEN\n                    BEGIN\n                        SELECT SUBSTR (pro_policy_word_doc, 1, 30),\n                               pro_min_prem\n                          INTO v_policy_doc, v_pro_min_prem\n                          FROM gin_products\n                         WHERE pro_code = v_pol_data (i).pol_pro_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error getting the default policy document..');\n                    END;\n                END IF;\n\n                IF v_pol_data (i).pol_pro_sht_desc IS NULL\n                THEN\n                    SELECT pro_sht_desc\n                      INTO v_pro_sht_desc\n                      FROM gin_products\n                     WHERE pro_code = v_pol_data (i).pol_pro_code;\n                END IF;\n\n                /*  Check the policy uniqueness again to ensure that the policy does not exist on new business   */\n                BEGIN\n                    check_policy_unique (v_pol_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (SQLERRM (SQLCODE));\n                END;\n\n                v_pol_batch_no := v_batchno;\n\n                --             raise_error('v_pol_data (i).pol_prp_code: '||v_pol_data (i).pol_prp_code);\n                IF gin_stp_pkg.determine_admin_fee (\n                       v_pol_data (i).pol_prp_code,\n                       v_pol_no,\n                       v_admin_disc)\n                THEN\n                    v_admin_fee_applicable := 'Y';\n                ELSE\n                    v_admin_fee_applicable := 'N';\n                END IF;\n\n                --RAISE_ERROR('v_pol_data (i).POL_IPF_NOF_INSTALS'||v_pol_data (i).POL_IPF_NOF_INSTALS);\n                v_growth_type :=\n                    gin_stp_uw_pkg.get_growth_type (\n                        v_pol_data (i).pol_prp_code,\n                        v_pol_status,\n                        v_pol_no,\n                        v_batchno);\n\n                --raise_error('HERE');\n                --raise_error('v_pol_data (i).pol_agnt_sht_desc: '||v_pol_data (i).pol_agnt_sht_desc);\n\n                --Introduced by Karuga. COMISSION can be APPLICABLE for introducers in direct business\n\n                v_comm_applicable :=\n                    NVL (v_pol_data (i).pol_commission_allowed, 'Y');\n\n                IF     v_pol_data (i).pol_agnt_agent_code = 0\n                   AND v_pol_data (i).pol_intro_code IS NOT NULL\n                THEN\n                    BEGIN\n                        SELECT NVL (INTRO_FEE_ALLOWED, 'N')\n                          INTO v_comm_applicable\n                          FROM gin_introducer\n                         WHERE intro_code = v_pol_data (i).pol_intro_code;\n                    EXCEPTION\n                        WHEN NO_DATA_FOUND\n                        THEN\n                            v_comm_applicable := 'N';\n                        WHEN OTHERS\n                        THEN\n                            v_comm_applicable := 'N';\n                    END;\n                END IF;\n\n                BEGIN\n                    INSERT INTO gin_policies (pol_policy_no,\n                                              pol_ren_endos_no,\n                                              pol_batch_no,\n                                              pol_agnt_agent_code,\n                                              pol_agnt_sht_desc,\n                                              pol_bind_code,\n                                              pol_wef_dt,\n                                              pol_wet_dt,\n                                              pol_uw_year,\n                                              pol_policy_status,\n                                              pol_inception_dt,\n                                              pol_cur_code,\n                                              pol_prepared_by,\n                                              pol_prepared_date,\n                                              pol_policy_type,\n                                              pol_client_policy_number,\n                                              pol_brn_code,\n                                              pol_cur_rate,\n                                              pol_coinsurance,\n                                              pol_coinsure_leader,\n                                              pol_cur_symbol,\n                                              pol_brn_sht_desc,\n                                              pol_prp_code,\n                                              pol_current_status,\n                                              pol_authosrised,\n                                              pol_post_status,\n                                              pol_inception_uwyr,\n                                              pol_pro_code,\n                                              pol_your_ref,\n                                              pol_prop_holding_co_prp_code,\n                                              pol_oth_int_parties,\n                                              pol_pro_sht_desc,\n                                              pol_prev_batch_no,\n                                              pol_uwyr_length,\n                                              pol_binder_policy,\n                                              pol_renewable,\n                                              pol_policy_cover_to,\n                                              pol_policy_cover_from,\n                                              pol_coinsurance_share,\n                                              pol_renewal_dt,\n                                              pol_trans_eff_wet,\n                                              pol_ri_agent_comm_rate,\n                                              pol_ri_agnt_sht_desc,\n                                              pol_ri_agnt_agent_code,\n                                              pol_policy_doc,\n                                              pol_commission_allowed,\n                                              pol_coin_fee,\n                                              pol_sub_agn_code,\n                                              pol_sub_agn_sht_desc,\n                                              pol_div_code,\n                                              pol_pmod_code,\n                                              pol_adm_fee_applicable,\n                                              pol_aga_code,\n                                              pol_clna_code,\n                                              pol_sub_aga_code,\n                                              pol_admin_fee_disc_rate,\n                                              pol_med_policy_type,\n                                              pol_freq_of_payment,\n                                              pol_min_prem,\n                                              pol_coin_leader_combined,\n                                              pol_declaration_type,        --,\n                                              pol_mktr_agn_code,\n                                              pol_curr_rate_type,\n                                              pol_coin_gross,\n                                              pol_past_period_endos,\n                                              pol_bussiness_growth_type,\n                                              pol_subagent,\n                                              pol_ipf_nof_instals,\n                                              pol_coagent,\n                                              pol_coagent_main_pct,\n                                              pol_agn_discounted,\n                                              pol_agn_disc_type,\n                                              pol_agn_discount,\n                                              pol_pip_pf_code,\n                                              pol_tot_instlmt,\n                                              pol_uw_period,\n                                              pol_ipf_down_pymt_type,\n                                              pol_ipf_down_pymt_amt,\n                                              pol_ipf_interest_rate,\n                                              pol_outside_system,\n                                              pol_open_cover,\n                                              pol_endors_status,\n                                              pol_open_policy,\n                                              pol_pip_code,\n                                              pol_policy_debit,\n                                              pol_scheme_policy,\n                                              pol_pro_interface_type,\n                                              pol_checkoff_agnt_sht_desc,\n                                              pol_checkoff_agnt_code,\n                                              pol_pymt_faci_agnt_code,\n                                              pol_old_policy_no,\n                                              pol_old_agent,\n                                              pol_joint,\n                                              pol_joint_prp_code,\n                                              pol_intro_code,\n                                              pol_instlmt_day,\n                                              pol_pop_taxes,\n                                              pol_bdiv_code,\n                                              pol_regional_endors,\n                                              pol_cr_note_number,\n                                              pol_cr_date_notified,\n                                              pol_exch_rate_fixed,\n                                              pol_loaded,\n                                              pol_cashback_level,\n                                              pol_cashback_rate,\n                                              pol_admin_fee_allowed,\n                                              pol_cashback_appl,\n                                              pol_uw_only,\n                                              pol_debiting_type,\n                                              pol_pymt_install_pcts,\n                                              pol_marine_cert_level,\n                                              pol_src_direct_business,\n                                              POL_COIN_FAC_CESSION,\n                                              POL_COIN_FAC_PC)\n                             VALUES (\n                                        v_pol_no,\n                                        v_end_no,\n                                        v_batchno,\n                                        v_pol_data (i).pol_agnt_agent_code,\n                                        v_agn_sht_desc, --v_pol_data (i).pol_agnt_sht_desc,\n                                        v_pol_data (i).pol_bind_code,\n                                        v_pol_data (i).pol_wef_dt,\n                                        v_wet_date,\n                                        v_pol_uwyr,\n                                        v_pol_status,\n                                        v_inception_dt,\n                                        v_cur_code,\n                                        vuser,\n                                        TRUNC (SYSDATE),\n                                        NVL (v_pol_data (i).pol_policy_type,\n                                             'N'),\n                                        NVL (\n                                            v_client_pol_no,\n                                            v_pol_data (i).pol_client_policy_number),\n                                        v_brn_code,\n                                        v_cur_rate,\n                                        v_pol_data (i).pol_coinsurance,\n                                        v_pol_data (i).pol_coinsure_leader,\n                                        v_cur_symbol,\n                                        v_brn_sht_desc,\n                                        v_pol_data (i).pol_prp_code,\n                                        'D',\n                                        'N',\n                                        'N',\n                                        v_inception_yr,\n                                        v_pol_data (i).pol_pro_code,\n                                        v_pol_data (i).pol_your_ref,\n                                        v_pol_data (i).pol_prop_holding_co_prp_code,\n                                        v_pol_data (i).pol_oth_int_parties,\n                                        NVL (v_pol_data (i).pol_pro_sht_desc,\n                                             v_pro_sht_desc),\n                                        v_batchno,\n                                        CEIL (\n                                            MONTHS_BETWEEN (\n                                                v_wet_date,\n                                                v_pol_data (i).pol_wef_dt)),\n                                        v_pol_data (i).pol_binder_policy,\n                                        NVL (v_pol_data (i).pol_renewable,\n                                             'Y'),\n                                        v_wet_date,\n                                        v_pol_data (i).pol_wef_dt,\n                                        v_pol_data (i).pol_coinsurance_share,\n                                        get_renewal_date (\n                                            v_pol_data (i).pol_pro_code,\n                                            v_wet_date),\n                                        v_wet_date,\n                                        v_pol_data (i).pol_ri_agent_comm_rate,\n                                        v_pol_data (i).pol_ri_agnt_sht_desc,\n                                        v_pol_data (i).pol_ri_agnt_agent_code,\n                                        v_policy_doc,\n                                        NVL (v_comm_applicable /*v_pol_data (i).pol_commission_allowed*/\n                                                              , 'Y'),\n                                        v_pol_data (i).pol_coin_fee,\n                                        v_pol_data (i).pol_sub_agn_code,\n                                        v_pol_data (i).pol_sub_agnt_sht_desc,\n                                        v_pol_data (i).pol_div_code,\n                                        v_pol_data (i).pol_pmod_code,\n                                        v_admin_fee_applicable,\n                                        v_pol_data (i).pol_aga_code,\n                                        v_pol_data (i).pol_clna_code,\n                                        v_pol_data (i).pol_sub_aga_code,\n                                        v_admin_disc,                      --,\n                                        v_pol_data (i).pol_med_policy_type,\n                                        NVL (\n                                            v_pol_data (i).pol_freq_of_payment,\n                                            'A'),\n                                        v_pro_min_prem,\n                                        v_pol_data (i).pol_coin_leader_combined,\n                                        v_pol_data (i).pol_declaration_type, --,\n                                        v_pol_data (i).pol_mktr_agn_code,\n                                        v_pol_data (i).pol_curr_rate_type,\n                                        v_pol_data (i).pol_coin_gross,\n                                        NVL (\n                                            v_pol_data (i).pol_past_period_endos,\n                                            'N'),\n                                        v_growth_type,\n                                        v_pol_data (i).pol_subagent,\n                                        v_pol_data (i).pol_ipf_nof_instals,\n                                        v_pol_data (i).pol_coagent,\n                                        v_pol_data (i).pol_coagent_main_pct,\n                                        v_pol_data (i).pol_agn_discounted,\n                                        v_pol_data (i).pol_agn_disc_type,\n                                        v_pol_data (i).pol_agn_discount,\n                                        v_pol_data (i).pol_pip_pf_code,\n                                        v_pol_data (i).pol_no_installment,\n                                        1,\n                                        v_pol_data (i).pol_ipf_down_pymt_type,\n                                        v_pol_data (i).pol_ipf_down_pymt_amt,\n                                        v_pol_data (i).pol_ipf_interest_rate,\n                                        v_pol_data (i).pol_outside_system,\n                                        NVL (v_pol_data (i).pol_open_cover,\n                                             'N'),\n                                        v_pol_data (i).pol_endors_status,\n                                        v_pol_data (i).pol_open_policy,\n                                        v_pol_data (i).pol_oth_int_parties,\n                                        v_pol_data (i).pol_policy_debit,\n                                        v_pol_data (i).pol_scheme_policy,\n                                        v_pol_data (i).pol_interface_type,\n                                        v_pol_data (i).pol_checkoff_agnt_sht_desc,\n                                        v_pol_data (i).pol_checkoff_agnt_code,\n                                        v_pol_data (i).pol_pymt_faci_agnt_code,\n                                        v_pol_data (i).pol_old_policy_no,\n                                        v_pol_data (i).pol_old_agent,\n                                        v_pol_data (i).pol_joint,\n                                        v_pol_data (i).pol_joint_prp_code,\n                                        v_pol_data (i).pol_intro_code,\n                                        v_pol_data (i).pol_instlmt_day,\n                                        v_pol_data (i).pol_pop_taxes,\n                                        v_pol_data (i).pol_bdiv_code,\n                                        NVL (\n                                            v_pol_data (i).pol_regional_endors,\n                                            'N'),\n                                        v_pol_data (i).pol_cr_note_number,\n                                        v_pol_data (i).pol_cr_date_notified,\n                                        v_pol_data (i).pol_curr_rate_type,\n                                        NVL (v_pol_data (i).pol_loaded, 'N'),\n                                        0,\n                                        0,\n                                        v_pol_data (i).pol_admin_fee_allowed,\n                                        v_pol_data (i).pol_cashback_appl,\n                                        v_pol_data (i).pol_uw_only,\n                                        v_pol_data (i).pol_debiting_type,\n                                        v_pol_data (i).pol_payment_plan,\n                                        v_mar_cert_level,\n                                        v_pol_data (i).pol_src_direct_business,\n                                        NVL (\n                                            v_pol_data (i).POL_COIN_FAC_CESSION,\n                                            'N'),\n                                        v_pol_data (i).POL_COIN_FAC_PC);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR CREATING POLICY RECORD..');\n                END;\n\n                /*Create user as default relationship officer.\n                   The default user has 100% share*/\n                BEGIN\n                    v_bpn_activity_share := 100;\n\n                    FOR rel_officer IN cur_rel_officer\n                    LOOP\n                        tq_gis.gis_setups_pkg.bussiness_person_proc (\n                            'A',\n                            gin_bpn_code_seq.NEXTVAL,\n                            NULL,\n                            'N/A',\n                            NVL (rel_officer.usr_cell_phone_no, 070),\n                            NVL (rel_officer.usr_cell_phone_no, 070),\n                            rel_officer.usr_email,\n                            'U',\n                            NULL,\n                            NULL,\n                            NULL,\n                            rel_officer.usr_name,\n                            NULL,\n                            NULL,\n                            NULL,\n                            NULL,\n                            v_pol_data (i).pol_prp_code,\n                            NULL,\n                            v_batchno,\n                            rel_officer.usr_code,\n                            v_bpn_activity_share);\n                    END LOOP;\n                END;\n\n                IF gin_parameters_pkg.get_param_varchar (\n                       'MULTI_AGENCY_FNC_PARAM') =\n                   'Y'\n                THEN\n                    BEGIN\n                        gin_pol_extension_pkg.post_col_non_date_val_prc (\n                            v_batchno,\n                            'POL_MULTI_AGENCY',\n                            NVL (v_pol_data (i).pol_multi_agency, 'N'),\n                            v_pol_data (i).pol_add_edit);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error Creating Policy Multi Agency Details Record..');\n                    END;\n                END IF;\n\n                BEGIN\n                    pop_sbu_dtls (v_batchno,\n                                  v_pol_data (i).pol_unit_code,\n                                  v_pol_data (i).pol_location_code,\n                                  v_pol_data (i).pol_add_edit);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Creating Policy Other Details Record..');\n                END;\n\n                BEGIN\n                    SELECT TO_NUMBER (\n                                  TO_CHAR (SYSDATE, 'RRRR')\n                               || ggt_trans_no_seq.NEXTVAL)\n                      INTO v_trans_no\n                      FROM DUAL;\n\n                    INSERT INTO gin_gis_transactions (\n                                    ggt_doc_ref,\n                                    ggt_trans_no,\n                                    ggt_pol_policy_no,\n                                    ggt_cmb_claim_no,\n                                    ggt_pro_code,\n                                    ggt_pol_batch_no,\n                                    ggt_pro_sht_desc,\n                                    ggt_btr_trans_code,\n                                    ggt_done_by,\n                                    ggt_done_date,\n                                    ggt_client_policy_number,\n                                    ggt_uw_clm_tran,\n                                    ggt_trans_date,\n                                    ggt_trans_authorised,\n                                    ggt_trans_authorised_by,\n                                    ggt_trans_authorise_date,\n                                    ggt_old_tran_no,\n                                    ggt_effective_date)\n                             VALUES (\n                                        v_pol_data (i).pol_your_ref,\n                                        v_trans_no,\n                                        v_pol_no,\n                                        NULL,\n                                        v_pol_data (i).pol_pro_code,\n                                        v_batchno,\n                                        v_pol_data (i).pol_pro_sht_desc,\n                                        'NB',\n                                        vuser,\n                                        TRUNC (SYSDATE),\n                                        v_client_pol_no,\n                                        'U',\n                                        TRUNC (SYSDATE),\n                                        'N',\n                                        NULL,\n                                        NULL,\n                                        NULL,\n                                        NVL (\n                                            v_pol_data (i).pol_endos_eff_date,\n                                            TRUNC (SYSDATE)));\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error Creating Transaction Record..');\n                END;\n\n                BEGIN\n                    v_tran_ref_no :=\n                        gin_sequences_pkg.get_number_format (\n                            'BARCODE',\n                            v_pol_data (i).pol_pro_code,\n                            v_pol_data (i).pol_brn_code,\n                            TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                            'NB',\n                            v_serial);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'unable to generate transmittal number.Contact the system administrator...');\n                END;\n\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                           || ggts_tran_no_seq.NEXTVAL\n                      INTO next_ggts_trans_no\n                      FROM DUAL;\n\n                    INSERT INTO gin_gis_transmitals (ggts_tran_no,\n                                                     ggts_pol_policy_no,\n                                                     ggts_cmb_claim_no,\n                                                     ggts_pol_batch_no,\n                                                     ggts_done_by,\n                                                     ggts_done_date,\n                                                     ggts_uw_clm_tran,\n                                                     ggts_pol_renewal_batch,\n                                                     ggts_tran_ref_no,\n                                                     ggts_ipay_alphanumeric)\n                         VALUES (next_ggts_trans_no,\n                                 v_pol_no,\n                                 NULL,\n                                 v_batchno,\n                                 v_user,\n                                 SYSDATE,\n                                 'U',\n                                 NULL,\n                                 v_tran_ref_no,\n                                 'Y');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Transmital error. Contact the system administrator...');\n                END;\n\n                --raise_error(v_pol_data (i).POL_SERIAL_NO||'='||v_pol_data (i).POL_OUTSIDE_SYSTEM);\n                IF     v_pol_data (i).pol_serial_no IS NOT NULL\n                   AND v_pol_data (i).pol_outside_system = 'Y'\n                THEN\n                    BEGIN\n                        gin_manage_exceptions.proc_certs_excepts (\n                            v_batchno,\n                            v_trans_no,\n                            TRUNC (SYSDATE),\n                            'NB',\n                            'UW');\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_when_others (\n                                'Error creating certificate exception ....');\n                    END;\n                END IF;\n\n                /*FILE MANAGEMENT CODE. THIS SECTION CREATE A FILE FOR NEW  POLICIES IN THE SYSTEM AND AUTOMATICALLY*/\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_cnt\n                      FROM gin_file_master\n                     WHERE film_file_no = v_pol_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error checking if policy file already exists..');\n                END;\n\n                IF NVL (v_cnt, 0) = 0\n                THEN\n                    BEGIN\n                        INSERT INTO gin_file_master (film_file_no,\n                                                     film_file_desc,\n                                                     film_type,\n                                                     film_open_dt,\n                                                     film_location,\n                                                     film_location_dept,\n                                                     film_home_shelf_no)\n                            SELECT DISTINCT\n                                   pol_policy_no,\n                                   clnt_name || ' ' || clnt_other_names,\n                                   'U',\n                                   NVL (pol_inception_dt, TRUNC (SYSDATE)),\n                                   'HOME',\n                                   'HOME',\n                                   NULL\n                              FROM gin_policies, tqc_clients\n                             WHERE     pol_prp_code = clnt_code\n                                   AND pol_batch_no = v_batchno;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error creating a file record for this policy..');\n                    END;\n                END IF;\n\n                IF NVL (v_pol_data (i).pol_pop_taxes, 'Y') = 'Y'\n                THEN\n                    BEGIN\n                        pop_taxes (v_pol_no,\n                                   v_end_no,\n                                   v_batchno,\n                                   v_pol_data (i).pol_pro_code,\n                                   v_pol_data (i).pol_binder_policy,\n                                   v_pol_status);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error updating taxes..');\n                    END;\n                END IF;\n\n                BEGIN\n                    pop_clauses (v_pol_no,\n                                 v_end_no,\n                                 v_batchno,\n                                 v_pol_data (i).pol_pro_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                --RAISE_eRROR('pol_oth_int_parties'||v_pol_data (i).pol_oth_int_parties);\n                IF v_pol_data (i).pol_oth_int_parties IS NOT NULL\n                THEN\n                    BEGIN\n                        pop_lien_clauses (v_pol_no,\n                                          v_end_no,\n                                          v_batchno,\n                                          v_pol_data (i).pol_pro_code);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error updating clauses..');\n                    END;\n                END IF;\n            ELSIF     (   v_pol_data (i).pol_trans_type IN ('EN',\n                                                            'NB',\n                                                            'DC',\n                                                            'EX',\n                                                            'ME')\n                       OR (    NVL (v_pol_data (i).pol_trans_type, 'NB') IN\n                                   ('RN', 'RE')\n                           AND NVL (v_uw_trans, 'N') = 'Y'))\n                  AND v_pol_data (i).pol_add_edit = 'E'\n            THEN\n                v_pol_no := v_pol_data (i).pol_gis_policy_no;\n                --            v_client_pol_no := v_pol_data (i).pol_gis_policy_no;\n                v_batchno := v_pol_data (i).pol_batch_no;\n                v_pol_batch_no := v_pol_data (i).pol_batch_no;\n\n                IF     NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                   AND tqc_parameters_pkg.get_org_type (37) NOT IN ('INS')\n                THEN\n                    BEGIN\n                        SELECT bind_policy_no\n                          INTO v_client_pol_no\n                          FROM gin_binders\n                         WHERE bind_code = v_pol_data (i).pol_bind_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error getting the Contract policy no...');\n                    END;\n                ELSE\n                    IF     tqc_interfaces_pkg.get_org_type (37) IN ('INS')\n                       AND NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                       AND v_binderpols_param = 'Y'\n                    THEN\n                        BEGIN\n                            SELECT bind_policy_no\n                              INTO v_client_pol_no\n                              FROM gin_binders\n                             WHERE bind_code = v_pol_data (i).pol_bind_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                v_client_pol_no := v_pol_no;          --'TBA';\n                        END;\n                    ELSE\n                        v_client_pol_no := v_pol_no;\n                    END IF;\n                END IF;\n\n                --   raise_error('v_agnt_agent_code'||v_agnt_agent_code||'v_pol_dataagent_code'||v_pol_data (i).pol_agnt_agent_code);\n                IF NVL (v_agnt_agent_code, -2000) !=\n                   NVL (v_pol_data (i).pol_agnt_agent_code, -2000)\n                THEN\n                    /*To take where intermediary is changed on editing policy\n                     so that correct commission rate for intermediary is\n                     populated from setup during premium computation************Masinde 15062015*/\n                    UPDATE gin_insured_property_unds\n                       SET ipu_comm_rate = NULL\n                     WHERE ipu_pol_batch_no = v_pol_batch_no;\n                END IF;\n\n                IF v_pol_data (i).pol_trans_type = 'EN'\n                THEN\n                    DECLARE\n                        v_prev_cover_to     DATE;\n                        v_prev_cover_from   DATE;\n                    BEGIN\n                        SELECT pol_policy_cover_to,\n                               pol_policy_cover_from,\n                               pol_loaded,\n                               pol_policy_status,\n                               pol_tot_instlmt\n                          INTO v_prev_cover_to,\n                               v_prev_cover_from,\n                               v_pol_loaded,\n                               v_policy_status,\n                               v_prev_tot_instlmt\n                          FROM gin_policies\n                         WHERE pol_batch_no = v_pol_batch_no;\n\n                        IF     v_pol_loaded != 'Y'\n                           AND NVL (v_policy_status, 'XX') = 'EN'\n                        THEN\n                            IF v_pol_data (i).pol_wef_dt NOT BETWEEN v_prev_cover_from\n                                                                 AND v_prev_cover_to\n                            THEN\n                                raise_error (\n                                       'Endorsement cover dates must be between the current cover period :'\n                                    || v_prev_cover_to\n                                    || ' to '\n                                    || v_prev_cover_from);\n                            ELSIF v_wet_date NOT BETWEEN v_prev_cover_from\n                                                     AND v_prev_cover_to\n                            THEN\n                                raise_error (\n                                       'Endorsement cover dates must be between the current cover period :'\n                                    || v_prev_cover_to\n                                    || ' to '\n                                    || v_prev_cover_from);\n                            END IF;\n                        END IF;\n                    END;\n                END IF;\n\n                IF     v_pol_data (i).pol_trans_type NOT IN\n                           ('NB', 'RN', 'ME')\n                   AND NVL (v_prev_tot_instlmt, 0) !=\n                       NVL (v_pol_data (i).pol_no_installment, 0)\n                THEN\n                    raise_error (\n                        'No of installments can only be changed at New Business and Renewal..');\n                END IF;\n\n                v_policy_doc := v_pol_data (i).pol_policy_doc;\n\n                --v_pol_Data(I).POL_POLICY_DOC;\n\n                --RAISE_ERROR('v_policy_doc '||v_policy_doc);\n                IF v_policy_doc IS NULL\n                THEN\n                    BEGIN\n                        SELECT SUBSTR (pro_policy_word_doc, 1, 30),\n                               pro_min_prem\n                          INTO v_policy_doc, v_pro_min_prem\n                          FROM gin_products\n                         WHERE pro_code = v_pol_data (i).pol_pro_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error getting the default policy document..');\n                    END;\n                END IF;\n\n                IF v_pol_data (i).pol_pro_sht_desc IS NULL\n                THEN\n                    SELECT pro_sht_desc\n                      INTO v_pro_sht_desc\n                      FROM gin_products\n                     WHERE pro_code = v_pol_data (i).pol_pro_code;\n                END IF;\n\n                IF NVL (v_pol_data (i).pol_pop_taxes, 'Y') = 'N'\n                THEN\n                    DELETE FROM\n                        gin_policy_taxes\n                          WHERE ptx_pol_batch_no =\n                                v_pol_data (i).pol_batch_no;\n                END IF;\n\n                BEGIN\n                    SELECT agn_act_code\n                      INTO v_old_act_code\n                      FROM tqc_agencies, gin_policies\n                     WHERE     agn_code = pol_agnt_agent_code\n                           AND pol_batch_no = v_pol_data (i).pol_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error getting policy agency details');\n                END;\n\n                BEGIN\n                    SELECT agn_act_code\n                      INTO v_new_act_code\n                      FROM tqc_agencies\n                     WHERE agn_code = v_pol_data (i).pol_agnt_agent_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error getting policy agency details');\n                END;\n\n                IF NVL (v_new_act_code, -2000) != NVL (v_old_act_code, -2000)\n                THEN\n                    UPDATE gin_insured_property_unds\n                       SET ipu_comm_rate = NULL\n                     WHERE ipu_pol_batch_no = v_pol_data (i).pol_batch_no;\n                END IF;\n\n                --Introduced by Karuga. COMISSION can be APPLICABLE for introducers in direct business\n\n                v_comm_applicable :=\n                    NVL (v_pol_data (i).pol_commission_allowed, 'Y');\n\n                IF     v_pol_data (i).pol_agnt_agent_code = 0\n                   AND v_pol_data (i).pol_intro_code IS NOT NULL\n                THEN\n                    BEGIN\n                        SELECT NVL (INTRO_FEE_ALLOWED, 'N')\n                          INTO v_comm_applicable\n                          FROM gin_introducer\n                         WHERE intro_code = v_pol_data (i).pol_intro_code;\n                    EXCEPTION\n                        WHEN NO_DATA_FOUND\n                        THEN\n                            v_comm_applicable := 'N';\n                        WHEN OTHERS\n                        THEN\n                            v_comm_applicable := 'N';\n                    END;\n                END IF;\n\n                BEGIN\n                       UPDATE gin_policies\n                          SET pol_agnt_agent_code =\n                                  v_pol_data (i).pol_agnt_agent_code,\n                              pol_agnt_sht_desc = v_agn_sht_desc, --v_pol_data (i).pol_agnt_sht_desc,\n                              pol_bind_code = v_pol_data (i).pol_bind_code,\n                              pol_wef_dt = v_pol_data (i).pol_wef_dt,\n                              pol_wet_dt = v_wet_date,\n                              pol_uw_year = v_pol_uwyr,\n                              --POL_POLICY_STATUS=v_pol_status,\n                              pol_inception_dt = v_inception_dt,\n                              pol_cur_code = v_cur_code,\n                              pol_cur_rate = v_cur_rate,\n                              pol_prepared_by = vuser,\n                              pol_pip_code = v_pol_data (i).pol_pip_code,\n                              pol_policy_type =\n                                  NVL (v_pol_data (i).pol_policy_type, 'N'),\n                              pol_brn_code = v_brn_code,\n                              pol_coinsurance = v_pol_data (i).pol_coinsurance,\n                              pol_coinsure_leader =\n                                  v_pol_data (i).pol_coinsure_leader,\n                              pol_cur_symbol = v_cur_symbol,\n                              pol_brn_sht_desc = v_brn_sht_desc,\n                              pol_prp_code = v_pol_data (i).pol_prp_code,\n                              pol_inception_uwyr = v_inception_yr,\n                              pol_pro_code = v_pol_data (i).pol_pro_code,\n                              pol_your_ref = v_pol_data (i).pol_your_ref,\n                              pol_prop_holding_co_prp_code =\n                                  v_pol_data (i).pol_prop_holding_co_prp_code,\n                              pol_oth_int_parties =\n                                  v_pol_data (i).pol_oth_int_parties,\n                              pol_pro_sht_desc =\n                                  NVL (v_pol_data (i).pol_pro_sht_desc,\n                                       v_pro_sht_desc),\n                              pol_uwyr_length =\n                                  CEIL (\n                                      MONTHS_BETWEEN (v_wet_date,\n                                                      v_pol_data (i).pol_wef_dt)),\n                              pol_binder_policy =\n                                  v_pol_data (i).pol_binder_policy,\n                              pol_renewable =\n                                  NVL (v_pol_data (i).pol_renewable, 'Y'),\n                              pol_policy_cover_to = v_wet_date,\n                              pol_policy_cover_from = v_pol_data (i).pol_wef_dt,\n                              pol_coinsurance_share =\n                                  v_pol_data (i).pol_coinsurance_share,\n                              pol_renewal_dt =\n                                  get_renewal_date (v_pol_data (i).pol_pro_code,\n                                                    v_wet_date),\n                              pol_trans_eff_wet = v_wet_date,\n                              pol_ri_agent_comm_rate =\n                                  v_pol_data (i).pol_ri_agent_comm_rate,\n                              pol_ri_agnt_sht_desc =\n                                  v_pol_data (i).pol_ri_agnt_sht_desc,\n                              pol_ri_agnt_agent_code =\n                                  v_pol_data (i).pol_ri_agnt_agent_code,\n                              pol_policy_doc = v_policy_doc,\n                              pol_commission_allowed =\n                                  NVL (v_comm_applicable /*v_pol_data (i).pol_commission_allowed*/\n                                                        , 'Y'),\n                              pol_coin_fee =\n                                  NVL (v_pol_data (i).pol_coin_fee,\n                                       pol_coin_fee),\n                              pol_client_policy_number =\n                                  NVL (\n                                      NVL (\n                                          v_client_pol_no,\n                                          v_pol_data (i).pol_client_policy_number),\n                                      pol_client_policy_number),\n                              pol_div_code =\n                                  NVL (v_pol_data (i).pol_bdiv_code,\n                                       pol_div_code),\n                              pol_bdiv_code =\n                                  NVL (v_pol_data (i).pol_bdiv_code,\n                                       pol_bdiv_code),\n                              pol_pmod_code =\n                                  NVL (v_pol_data (i).pol_pmod_code,\n                                       pol_pmod_code),\n                              pol_clna_code =\n                                  NVL (v_pol_data (i).pol_clna_code,\n                                       pol_clna_code),\n                              pol_aga_code =\n                                  NVL (v_pol_data (i).pol_aga_code,\n                                       pol_aga_code),\n                              pol_sub_aga_code =\n                                  NVL (v_pol_data (i).pol_sub_aga_code,\n                                       pol_sub_aga_code),\n                              pol_sub_agn_code = v_pol_data (i).pol_sub_agn_code,\n                              pol_sub_agn_sht_desc =\n                                  v_pol_data (i).pol_sub_agnt_sht_desc,\n                              pol_med_policy_type =\n                                  v_pol_data (i).pol_med_policy_type,\n                              pol_freq_of_payment =\n                                  NVL (v_pol_data (i).pol_freq_of_payment, 'A'),\n                              pol_coin_leader_combined =\n                                  NVL (v_pol_data (i).pol_coin_leader_combined,\n                                       pol_coin_leader_combined),\n                              pol_declaration_type =\n                                  NVL (v_pol_data (i).pol_declaration_type,\n                                       pol_declaration_type),\n                              pol_adm_fee_applicable =\n                                  NVL (v_pol_data (i).pol_fee_admissible,\n                                       pol_adm_fee_applicable),\n                              pol_mktr_agn_code =\n                                  v_pol_data (i).pol_mktr_agn_code,\n                              pol_coin_gross =\n                                  NVL (v_pol_data (i).pol_coin_gross,\n                                       pol_coin_gross),\n                              pol_exch_rate_fixed =\n                                  NVL (v_pol_data (i).pol_curr_rate_type,\n                                       pol_curr_rate_type),\n                              pol_prem_computed = 'N',\n                              pol_bussiness_growth_type =\n                                  v_pol_data (i).pol_bussiness_growth_type,\n                              pol_subagent = v_pol_data (i).pol_subagent,\n                              pol_ipf_nof_instals =\n                                  v_pol_data (i).pol_ipf_nof_instals,\n                              pol_coagent = v_pol_data (i).pol_coagent,\n                              pol_coagent_main_pct =\n                                  v_pol_data (i).pol_coagent_main_pct,\n                              pol_agn_discounted =\n                                  v_pol_data (i).pol_agn_discounted,\n                              pol_agn_disc_type =\n                                  v_pol_data (i).pol_agn_disc_type,\n                              pol_agn_discount = v_pol_data (i).pol_agn_discount,\n                              pol_pip_pf_code = v_pol_data (i).pol_pip_pf_code,\n                              pol_tot_instlmt =\n                                  v_pol_data (i).pol_no_installment,\n                              pol_ipf_down_pymt_type =\n                                  v_pol_data (i).pol_ipf_down_pymt_type,\n                              pol_ipf_down_pymt_amt =\n                                  v_pol_data (i).pol_ipf_down_pymt_amt,\n                              pol_ipf_interest_rate =\n                                  v_pol_data (i).pol_ipf_interest_rate,\n                              --  pol_outside_system =\n                              -- v_pol_data (i).pol_outside_system,\n                              pol_open_cover =\n                                  NVL (v_pol_data (i).pol_open_cover, 'N'),\n                              pol_endors_status =\n                                  v_pol_data (i).pol_endors_status,\n                              pol_open_policy =\n                                  NVL (v_pol_data (i).pol_open_policy, 'N'),\n                              pol_policy_debit = v_pol_data (i).pol_policy_debit,\n                              pol_scheme_policy =\n                                  v_pol_data (i).pol_scheme_policy,\n                              pol_pro_interface_type =\n                                  NVL (v_pol_data (i).pol_interface_type,\n                                       pol_pro_interface_type),\n                              pol_checkoff_agnt_sht_desc =\n                                  v_pol_data (i).pol_checkoff_agnt_sht_desc,\n                              pol_checkoff_agnt_code =\n                                  v_pol_data (i).pol_checkoff_agnt_code,\n                              pol_pymt_faci_agnt_code =\n                                  v_pol_data (i).pol_pymt_faci_agnt_code,\n                              pol_old_policy_no =\n                                  v_pol_data (i).pol_old_policy_no,\n                              pol_old_agent = v_pol_data (i).pol_old_agent,\n                              pol_instlmt_day = v_pol_data (i).pol_instlmt_day,\n                              pol_joint = v_pol_data (i).pol_joint,\n                              pol_joint_prp_code =\n                                  v_pol_data (i).pol_joint_prp_code,\n                              pol_intro_code = v_pol_data (i).pol_intro_code,\n                              pol_force_sf_compute =\n                                  v_pol_data (i).pol_force_sf_compute,\n                              pol_enforce_sf_param =\n                                  v_pol_data (i).pol_enforce_sf_param,\n                              --,\n                              pop_pip_code = v_pol_data (i).pol_oth_int_parties,\n                              pol_pop_taxes = v_pol_data (i).pol_pop_taxes,\n                              pol_regional_endors =\n                                  v_pol_data (i).pol_regional_endors,\n                              pol_cr_date_notified =\n                                  v_pol_data (i).pol_cr_date_notified,\n                              pol_cr_note_number =\n                                  v_pol_data (i).pol_cr_note_number,\n                              pol_admin_fee_allowed =\n                                  v_pol_data (i).pol_admin_fee_allowed,\n                              pol_cashback_appl =\n                                  v_pol_data (i).pol_cashback_appl,\n                              pol_uw_only = v_pol_data (i).pol_uw_only,\n                              pol_debiting_type =\n                                  v_pol_data (i).pol_debiting_type,\n                              pol_pymt_install_pcts =\n                                  v_pol_data (i).pol_payment_plan,\n                              pol_src_direct_business =\n                                  v_pol_data (i).pol_src_direct_business,\n                              pol_coin_fac_cession =\n                                  NVL (v_pol_data (i).pol_coin_fac_cession, 'N'),\n                              pol_coin_fac_pc = v_pol_data (i).pol_coin_fac_pc\n                        WHERE pol_batch_no = v_pol_data (i).pol_batch_no\n                    RETURNING pol_ren_endos_no\n                         INTO v_end_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error updating policy details..');\n                END;\n\n                IF gin_parameters_pkg.get_param_varchar (\n                       'MULTI_AGENCY_FNC_PARAM') =\n                   'Y'\n                THEN\n                    --            raise_error('v_pol_data (i).pol_multi_agency='||v_pol_data (i).pol_multi_agency);\n                    BEGIN\n                        gin_pol_extension_pkg.post_col_non_date_val_prc (\n                            v_batchno,\n                            'POL_MULTI_AGENCY',\n                            NVL (v_pol_data (i).pol_multi_agency, 'N'),\n                            v_pol_data (i).pol_add_edit);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error Creating Policy Multi Agency Details Record..');\n                    END;\n                END IF;\n\n                BEGIN\n                    pop_sbu_dtls (v_pol_data (i).pol_batch_no,\n                                  v_pol_data (i).pol_unit_code,\n                                  v_pol_data (i).pol_location_code,\n                                  'E');\n                --            EXCEPTION\n                --               WHEN OTHERS\n                --               THEN\n                --                  raise_error ('Error Creating Policy Other Details Record..');\n                END;\n\n                IF v_pol_data (i).pol_oth_int_parties IS NOT NULL\n                THEN\n                    BEGIN\n                        pop_lien_clauses (v_pol_no,\n                                          v_end_no,\n                                          v_batchno,\n                                          v_pol_data (i).pol_pro_code);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error updating clauses..');\n                    END;\n                END IF;\n\n                IF NVL (v_del_sect, 'N') = 'Y'\n                THEN\n                    DELETE FROM\n                        gin_policy_insured_limits\n                          WHERE pil_ipu_code IN\n                                    (SELECT ipu_code\n                                       FROM gin_insured_property_unds\n                                      WHERE ipu_pol_batch_no =\n                                            v_pol_data (i).pol_batch_no);\n                END IF;\n\n                IF     NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                   AND v_pol_data (i).pol_bind_code IS NOT NULL\n                THEN\n                    BEGIN\n                        UPDATE gin_insured_property_unds\n                           SET ipu_bind_code = v_pol_data (i).pol_bind_code\n                         WHERE ipu_pol_batch_no = v_pol_data (i).pol_batch_no;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n                END IF;\n\n                IF     v_pol_data (i).pol_trans_type IN ('NB', 'RN')\n                   AND NVL (v_prev_tot_instlmt, 0) !=\n                       NVL (v_pol_data (i).pol_no_installment, 0)\n                THEN\n                    FOR cur_risk_rec\n                        IN cur_risk (v_pol_data (i).pol_batch_no)\n                    LOOP\n                        BEGIN\n                            SELECT sclcovt_install_type,\n                                   sclcovt_pymt_install_pcts\n                              INTO v_cvt_install_type,\n                                   v_cvt_pymt_install_pcts\n                              FROM gin_subclass_cover_types\n                             WHERE     sclcovt_scl_code =\n                                       cur_risk_rec.ipu_sec_scl_code\n                                   AND sclcovt_covt_code =\n                                       cur_risk_rec.ipu_covt_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Error getting the minimum covertype premium..');\n                        END;\n\n                        IF NVL (v_cvt_install_type, 'NONE') IN\n                               ('PYMT', 'CVRP')\n                        THEN\n                            IF     NVL (v_cvt_install_type, 'NONE') = 'PYMT'\n                               AND NVL (v_pol_data (i).pol_no_installment, 0) >\n                                   1\n                            THEN\n                                v_install_pct :=\n                                    get_instalment_pct (\n                                        1,\n                                        NVL (\n                                            cur_risk_rec.ipu_pymt_install_pcts,\n                                            v_cvt_pymt_install_pcts),\n                                        v_pymnt_tot_instlmt);\n\n                                IF NVL (v_pymnt_tot_instlmt, 0) !=\n                                   NVL (v_pol_data (i).pol_no_installment, 0)\n                                THEN\n                                    NULL;\n                                -- THIS WILL BE CHECHED AT PREMIUM COMPUTATION\n                                --RAISE_ERROR('Specified installments '||NVL(v_pol_data (i).POL_NO_INSTALLMENT,0)||' do not tally with the payments percentages given '||NVL(cur_risk_rec.IPU_PYMT_INSTALL_PCTS,v_cvt_pymt_install_pcts));\n                                END IF;\n                            END IF;\n\n                            --RAISE_ERROR(NVL(v_pol_tot_instlmt,0));\n                            IF NVL (v_pol_data (i).pol_no_installment, 0) <=\n                               1\n                            THEN\n                                v_ipu_wef := v_pol_data (i).pol_wef_dt; --IPU_WEF,\n                                v_ipu_wet := v_wet_date;\n                            --     RAISE_ERROR(v_wef_date||' ='||v_wet_date);\n                            ELSIF NVL (v_pol_data (i).pol_no_installment, 0) >\n                                  NVL (v_cvt_max_installs, 12)\n                            THEN\n                                raise_error (\n                                       'Installments specified greater than allowed at cover types '\n                                    || NVL (v_cvt_max_installs, 12));\n                            ELSE\n                                v_install_period := 1;\n                                v_ipu_wef := v_pol_data (i).pol_wef_dt;\n\n                                IF NVL (v_cvt_install_periods, 'M') = 'A'\n                                THEN\n                                    v_ipu_wet := v_wet_date;\n                                ELSIF NVL (v_cvt_install_periods, 'M') = 'S'\n                                THEN\n                                    v_ipu_wet :=\n                                        ADD_MONTHS (v_ipu_wef, 6) - 1;\n                                ELSIF NVL (v_cvt_install_periods, 'M') = 'Q'\n                                THEN\n                                    v_ipu_wet :=\n                                        ADD_MONTHS (v_ipu_wef, 3) - 1;\n                                ELSE\n                                    v_ipu_wet :=\n                                        ADD_MONTHS (v_ipu_wef, 1) - 1;\n                                END IF;\n                            END IF;\n                        -- RAISE_ERROR(pol_cur_rec.POL_TOT_INSTLMT||' 222='||NVL(v_cvt_install_type,'NONE'));\n                        ELSE\n                            v_ipu_wef := v_pol_data (i).pol_wef_dt; --IPU_WEF,\n                            v_ipu_wet := v_wet_date;\n                        END IF;\n\n                        v_cover_days := TO_NUMBER (v_ipu_wet - v_ipu_wef);\n\n                        IF NVL (cur_risk_rec.pro_expiry_period, 'Y') = 'Y'\n                        THEN\n                            v_cover_days := v_cover_days + 1;\n                        END IF;\n\n                        UPDATE gin_insured_property_unds\n                           SET ipu_wef = v_ipu_wef,\n                               ipu_wet = v_ipu_wet,\n                               ipu_eff_wef = v_ipu_wef,\n                               ipu_eff_wet = v_ipu_wet,\n                               ipu_uw_yr =\n                                   TO_NUMBER (\n                                       DECODE (\n                                           NVL (v_uw_yr, 'P'),\n                                           'R', TO_NUMBER (\n                                                    TO_CHAR (v_ipu_wef /*v_wef_date*/\n                                                                      ,\n                                                             'RRRR')),\n                                           v_pol_uwyr)),\n                               ipu_install_period = v_install_period,\n                               ipu_cover_days = v_cover_days\n                         WHERE ipu_code = cur_risk_rec.ipu_code;\n                    END LOOP;\n                END IF;\n\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_pro_travel_cnt\n                      FROM gin_policies, gin_products\n                     WHERE     pol_batch_no = v_pol_data (i).pol_batch_no\n                           AND pro_code = pol_pro_code\n                           AND pro_type = 'TRAVEL';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_pro_travel_cnt := 0;\n                END;\n\n                IF NVL (v_pro_travel_cnt, 0) > 0\n                THEN\n                    BEGIN\n                        gin_travel_stp_pkg.update_travel_sect_si (\n                            v_pol_data (i).pol_batch_no);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('SI error');\n                    END;\n                END IF;\n\n                BEGIN\n                    SELECT ggt_trans_no\n                      INTO v_trans_no\n                      FROM gin_gis_transactions\n                     WHERE     ggt_uw_clm_tran = 'U'\n                           AND ggt_pol_batch_no = v_batchno;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error retrieving transaction number..');\n                END;\n            ELSIF     v_pol_data (i).pol_trans_type IN ('NB',\n                                                        'EN',\n                                                        'CO',\n                                                        'DC',\n                                                        'EX')\n                  AND v_pol_data (i).pol_add_edit = 'D'\n            THEN\n                DBMS_OUTPUT.put_line (v_pol_data (i).pol_batch_no);\n\n                BEGIN\n                    del_pol_dtls_proc (v_pol_data (i).pol_batch_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error deleting policy..');\n                END;\n            ELSIF     v_pol_data (i).pol_trans_type IN ('EN',\n                                                        'CN',\n                                                        'EX',\n                                                        'DC')\n                  AND v_pol_data (i).pol_add_edit = 'A'\n            THEN\n                --RAISE_ERROR('INOUNT');\n                --   RAISE_ERROR('in endorsement');\n                IF v_pol_data (i).pol_trans_type IN ('CN', 'EX')\n                THEN\n                    FOR rsksrec IN rsks (v_pol_data (i).pol_batch_no)\n                    LOOP\n                        y := NVL (y, 0) + 1;\n                        v_rsk_data (y).gis_ipu_code := rsksrec.ipu_code;\n                        v_rsk_data (y).polin_code := rsksrec.ipu_polin_code;\n                        v_rsk_data (y).prp_code := rsksrec.ipu_prp_code;\n                        v_rsk_data (y).ipu_status :=\n                            v_pol_data (i).pol_trans_type;\n                        v_rsk_data (y).ipu_action_type := 'A';\n\n                        IF v_pol_data (i).pol_pro_code IS NOT NULL\n                        THEN\n                            BEGIN\n                                SELECT pro_pin_required\n                                  INTO v_client_pin_required\n                                  FROM gin_products\n                                 WHERE pro_code = v_pol_data (i).pol_pro_code;\n                            EXCEPTION\n                                WHEN NO_DATA_FOUND\n                                THEN\n                                    v_client_pin_required := 'N';\n                                WHEN OTHERS\n                                THEN\n                                    v_client_pin_required := 'N';\n                            END;\n\n                            IF NVL (v_client_pin_required, 'N') = 'Y'\n                            THEN\n                                SELECT clnt_pin\n                                  INTO v_clnt_pin\n                                  FROM tqc_clients\n                                 WHERE clnt_code = rsksrec.ipu_prp_code;\n\n                                IF v_clnt_pin IS NULL\n                                THEN\n                                    raise_error (\n                                        'You need the clients PINno to proceed..contact system admin');\n                                END IF;\n                            END IF;\n                        END IF;\n                    END LOOP;\n                END IF;\n\n                IF v_pol_data (i).pol_trans_type IN ('CN')\n                THEN\n                    IF gin_parameters_pkg.get_param_varchar (\n                           'ALLOW_FUTURE_CANC_TRANS') =\n                       'N'\n                    THEN\n                        IF v_pol_data (i).pol_endos_eff_date >\n                           TRUNC (SYSDATE)\n                        THEN\n                            raise_error (\n                                'Cannot create cancellation when the date is in future.');\n                        END IF;\n                    END IF;\n                END IF;\n\n                IF v_pol_data (i).pol_trans_type IN ('EX')\n                THEN\n                    BEGIN\n                        BEGIN\n                            v_ex_valuation_param :=\n                                gin_parameters_pkg.get_param_varchar (\n                                    'RESTRICT_EXTENSION_WITHOUT_VALUATION');\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                v_ex_valuation_param := 'N';\n                        END;\n\n                        SELECT COUNT ('X')\n                          INTO v_valuationcount\n                          FROM gin_valuation_info\n                         WHERE vlt_pol_batch_no = v_pol_data (i).pol_batch_no;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error Checking Policy valuation');\n                    END;\n\n                    IF v_ex_valuation_param = 'Y' AND v_valuationcount = 0\n                    THEN\n                        raise_error (\n                            'POLICY NEED TO BE VALUED BEFORE DOING AN EXTENSION');\n                    END IF;\n                END IF;\n\n                --RAISE_ERROR('IN'|| v_pol_data (i).pol_trans_type||'v_pol_data (i).pol_add_edit'||v_pol_data (i).pol_add_edit);\n                BEGIN\n                    --            RAISE_ERROR('v_pol_data (i).endorse_type:'||v_pol_data (i).end_type);\n                    populate_endos_details (\n                        v_pol_data (i).pol_gis_policy_no,\n                        v_pol_data (i).pol_batch_no,\n                        v_pol_data (i).pol_trans_type,\n                        v_pol_data (i).pol_endos_eff_date,\n                        v_pol_data (i).pol_extend_to_date,\n                        v_rsk_data,\n                        vuser,\n                        v_endrsd_rsks_tab,\n                        v_batchno,\n                        v_end_no,\n                        v_pol_data (i).pol_past_period_endos,\n                        v_pol_data (i).pol_endorse_comm_allowed,\n                        v_pol_data (i).pol_cancelled_by,\n                        v_pol_data (i).pol_endors_status,\n                        v_pol_data (i).pol_regional_endors);\n                --            EXCEPTION\n                --               WHEN OTHERS\n                --               THEN\n                --                  raise_error ('Error creating endorsement transaction..');\n                END;\n\n                DBMS_OUTPUT.put_line ('after endorsement');\n                v_pol_no := v_pol_data (i).pol_gis_policy_no;\n                v_pol_batch_no := v_batchno;\n\n                BEGIN\n                    SELECT TO_NUMBER (\n                                  TO_CHAR (SYSDATE, 'RRRR')\n                               || ggt_trans_no_seq.NEXTVAL)\n                      INTO v_trans_no\n                      FROM DUAL;\n\n                    INSERT INTO gin_gis_transactions (\n                                    ggt_doc_ref,\n                                    ggt_trans_no,\n                                    ggt_pol_policy_no,\n                                    ggt_cmb_claim_no,\n                                    ggt_pro_code,\n                                    ggt_pol_batch_no,\n                                    ggt_pro_sht_desc,\n                                    ggt_btr_trans_code,\n                                    ggt_done_by,\n                                    ggt_done_date,\n                                    ggt_client_policy_number,\n                                    ggt_uw_clm_tran,\n                                    ggt_trans_date,\n                                    ggt_trans_authorised,\n                                    ggt_trans_authorised_by,\n                                    ggt_trans_authorise_date,\n                                    ggt_old_tran_no,\n                                    ggt_effective_date)\n                         VALUES (v_pol_data (i).pol_your_ref,\n                                 v_trans_no,\n                                 v_pol_no,\n                                 NULL,\n                                 v_pol_data (i).pol_pro_code,\n                                 v_batchno,\n                                 v_pol_data (i).pol_pro_sht_desc,\n                                 v_pol_data (i).pol_trans_type,\n                                 vuser,\n                                 TRUNC (SYSDATE),\n                                 v_pol_no,\n                                 'U',\n                                 TRUNC (SYSDATE),\n                                 'N',\n                                 NULL,\n                                 NULL,\n                                 NULL,\n                                 TRUNC (SYSDATE));\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR CREATING TRANSACTION RECORD..');\n                END;\n\n                BEGIN\n                    v_tran_ref_no :=\n                        gin_sequences_pkg.get_number_format (\n                            'BARCODE',\n                            v_pol_data (i).pol_pro_code,\n                            v_pol_data (i).pol_brn_code,\n                            TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                            'NB',\n                            v_serial);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'unable to generate transmittal number.Contact the system administrator...');\n                END;\n\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                           || ggts_tran_no_seq.NEXTVAL\n                      INTO next_ggts_trans_no\n                      FROM DUAL;\n\n                    INSERT INTO gin_gis_transmitals (ggts_tran_no,\n                                                     ggts_pol_policy_no,\n                                                     ggts_cmb_claim_no,\n                                                     ggts_pol_batch_no,\n                                                     ggts_done_by,\n                                                     ggts_done_date,\n                                                     ggts_uw_clm_tran,\n                                                     ggts_pol_renewal_batch,\n                                                     ggts_tran_ref_no,\n                                                     ggts_ipay_alphanumeric)\n                         VALUES (next_ggts_trans_no,\n                                 v_pol_no,\n                                 NULL,\n                                 v_batchno,\n                                 v_user,\n                                 SYSDATE,\n                                 'U',\n                                 NULL,\n                                 v_tran_ref_no,\n                                 'Y');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Transmital error. Contact the system administrator...');\n                END;\n\n                --RAISE_ERROR('Batch No '|| v_batchno);\n                FOR r IN rsks (v_pol_data (i).pol_batch_no)\n                LOOP\n                    BEGIN\n                        SELECT COUNT (1)\n                          INTO v_cnt\n                          FROM gin_policy_insureds\n                         WHERE     polin_pol_batch_no = v_batchno\n                               AND polin_prp_code = r.ipu_prp_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error checking if insured already exists');\n                    END;\n                --               IF NVL (v_cnt, 0) = 0\n                --               THEN\n                --                  BEGIN\n                --                     SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                --                            || polin_code_seq.NEXTVAL\n                --                       INTO v_new_polin_code\n                --                       FROM DUAL;\n\n                --                     INSERT INTO gin_policy_insureds\n                --                                 (polin_code, polin_pol_policy_no,\n                --                                  polin_pol_ren_endos_no, polin_pol_batch_no,\n                --                                  polin_prp_code, polin_new_insured\n                --                                 )\n                --                          VALUES (v_new_polin_code, v_pol_no,\n                --                                  v_end_no, v_batchno,\n                --                                  r.ipu_prp_code, 'Y'\n                --                                 );\n                --                  EXCEPTION\n                --                     WHEN OTHERS\n                --                     THEN\n                --                        raise_error ('ERROR SAVING INSURED DETAILS..');\n                --                  END;\n                ----            ELSE\n                ----               BEGIN\n                ----                  SELECT polin_code\n                ----                    INTO v_new_polin_code\n                ----                    FROM gin_policy_insureds\n                ----                   WHERE polin_pol_batch_no = v_pol_data (i).pol_batch_no\n                ----                     AND polin_prp_code = r.ipu_prp_code;\n                ----               EXCEPTION\n                ----                  WHEN OTHERS\n                ----                  THEN\n                ----                     raise_error ('Error checking if insured already exists');\n                ----               END;\n                --               END IF;\n                END LOOP;                    --v_batchno:= v_new_pol_batch_no;\n            ELSIF     v_pol_data (i).pol_trans_type = 'CO'\n                  AND v_pol_data (i).pol_add_edit = 'A'\n            THEN\n                raise_error (\n                    'take care of old trans number in gin_gis_transactions..');\n                /* ONCE ABOVE PROBLEM RESOLVED ENABLE THIS CODE\n                validate_contra_trans(v_old_tran_no IN NUMBER)\n                */\n                v_valid_trans :=\n                    gis_web_pkg.validate_transaction (\n                        v_pol_data (i).pol_gis_policy_no);\n\n                IF v_valid_trans = 'Y'\n                THEN\n                    raise_error (\n                        'This Policy has Another Unfinished Transaction..2..');\n                END IF;\n\n                SELECT TO_NUMBER (\n                              TO_CHAR (SYSDATE, 'RRRR')\n                           || ggt_trans_no_seq.NEXTVAL)\n                  INTO v_trans_no\n                  FROM DUAL;\n\n                BEGIN\n                    create_contra_trans (v_pol_data (i).pol_batch_no,\n                                         v_trans_no,\n                                         v_batchno,\n                                         vuser);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error creating contra transaction.');\n                END;\n\n                v_pol_no := v_pol_data (i).pol_gis_policy_no;\n                v_pol_batch_no := v_batchno;\n\n                BEGIN\n                    INSERT INTO gin_gis_transactions (\n                                    ggt_doc_ref,\n                                    ggt_trans_no,\n                                    ggt_pol_policy_no,\n                                    ggt_cmb_claim_no,\n                                    ggt_pro_code,\n                                    ggt_pol_batch_no,\n                                    ggt_pro_sht_desc,\n                                    ggt_btr_trans_code,\n                                    ggt_done_by,\n                                    ggt_done_date,\n                                    ggt_client_policy_number,\n                                    ggt_uw_clm_tran,\n                                    ggt_trans_date,\n                                    ggt_trans_authorised,\n                                    ggt_trans_authorised_by,\n                                    ggt_trans_authorise_date,\n                                    ggt_old_tran_no,\n                                    ggt_effective_date)\n                         VALUES (v_pol_data (i).pol_your_ref,\n                                 v_trans_no,\n                                 v_pol_no,\n                                 NULL,\n                                 v_pol_data (i).pol_pro_code,\n                                 v_batchno,\n                                 v_pol_data (i).pol_pro_sht_desc,\n                                 'CO',\n                                 vuser,\n                                 TRUNC (SYSDATE),\n                                 v_pol_no,\n                                 'U',\n                                 TRUNC (SYSDATE),\n                                 'N',\n                                 NULL,\n                                 NULL,\n                                 NULL,\n                                 TRUNC (SYSDATE));\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error Creating Transaction Record..');\n                END;\n\n                BEGIN\n                    v_tran_ref_no :=\n                        gin_sequences_pkg.get_number_format (\n                            'BARCODE',\n                            v_pol_data (i).pol_pro_code,\n                            v_pol_data (i).pol_brn_code,\n                            TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                            'NB',\n                            v_serial);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'unable to generate transmittal number.Contact the system administrator...');\n                END;\n\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                           || ggts_tran_no_seq.NEXTVAL\n                      INTO next_ggts_trans_no\n                      FROM DUAL;\n\n                    INSERT INTO gin_gis_transmitals (ggts_tran_no,\n                                                     ggts_pol_policy_no,\n                                                     ggts_cmb_claim_no,\n                                                     ggts_pol_batch_no,\n                                                     ggts_done_by,\n                                                     ggts_done_date,\n                                                     ggts_uw_clm_tran,\n                                                     ggts_pol_renewal_batch,\n                                                     ggts_tran_ref_no,\n                                                     ggts_ipay_alphanumeric)\n                         VALUES (next_ggts_trans_no,\n                                 v_pol_no,\n                                 NULL,\n                                 v_batchno,\n                                 v_user,\n                                 SYSDATE,\n                                 'U',\n                                 NULL,\n                                 v_tran_ref_no,\n                                 'Y');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error unable to creaete a transaction record. Contact the system administrator...');\n                END;\n            ELSIF     v_pol_data (i).pol_trans_type = 'CO'\n                  AND v_pol_data (i).pol_add_edit = 'E'\n            THEN\n                v_pol_no := v_pol_data (i).pol_gis_policy_no;\n                v_batchno := v_pol_data (i).pol_batch_no;\n                v_pol_batch_no := v_batchno;\n            ELSIF     v_pol_data (i).pol_trans_type = 'RN'\n                  AND NVL (v_pol_data (i).pol_loaded, 'N') = 'Y'\n                  AND v_pol_data (i).pol_add_edit = 'A'\n            THEN\n                DBMS_OUTPUT.put_line (3);\n                v_pol_no := v_pol_data (i).pol_policy_no;\n                v_end_no := NULL;                --v_pol_Data(I).POL_ENDOS_NO;\n                v_batchno := NULL;          --v_pol_Data(pcount).POL_BATCH_NO;\n                DBMS_OUTPUT.put_line (31);\n                v_valid_trans :=\n                    gis_web_pkg.validate_transaction (\n                        v_pol_data (i).pol_gis_policy_no);\n\n                IF v_valid_trans = 'Y'\n                THEN\n                    raise_error (\n                        'This Policy has Another Unfinished Transaction..3..');\n                END IF;\n\n                IF NVL (v_pol_data (i).pol_short_period, 'N') = 'Y'\n                THEN\n                    v_pol_status := 'SP';\n                ELSE\n                    v_pol_status := 'NB';\n                END IF;\n\n                IF v_pol_no IS NULL OR v_end_no IS NULL OR v_batchno IS NULL\n                THEN\n                    BEGIN\n                        gen_pol_numbers (v_pol_data (i).pol_pro_code,\n                                         v_brn_code,\n                                         v_pol_uwyr,\n                                         v_pol_status,\n                                         v_pol_no,\n                                         v_end_no,\n                                         v_batchno,\n                                         v_pol_data (i).pol_serial_no,\n                                         v_pol_data (i).pol_policy_type,\n                                         v_pol_data (i).pol_coinsurance,\n                                         v_act_type_id);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'UNABLE TO GENERATE THE POLICY NUMBER...');\n                    END;\n                END IF;\n\n                BEGIN\n                    check_policy_unique (v_pol_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        BEGIN\n                            SELECT TO_NUMBER (\n                                       SUBSTR (\n                                           v_pol_no,\n                                           DECODE (\n                                               gin_parameters_pkg.get_param_varchar (\n                                                   'POL_SERIAL_AT_END'),\n                                               'N', DECODE (\n                                                        DECODE (\n                                                            v_pol_data (i).pol_policy_type,\n                                                            'N', 'P',\n                                                            'F'),\n                                                        'P', gin_parameters_pkg.get_param_varchar (\n                                                                 'POL_SERIAL_POS'),\n                                                        gin_parameters_pkg.get_param_varchar (\n                                                            'POL_FAC_SERIAL_POS')),\n                                                 LENGTH (v_pol_no)\n                                               - gin_parameters_pkg.get_param_varchar (\n                                                     'POLNOSRLENGTH')\n                                               + 1),\n                                           gin_parameters_pkg.get_param_varchar (\n                                               'POLNOSRLENGTH')))\n                              INTO v_seq\n                              FROM DUAL;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Error Selecting Used Sequence...1');\n                        END;\n\n                        BEGIN\n                            SELECT DECODE (v_pol_data (i).pol_policy_type,\n                                           'N', 'P',\n                                           'F')\n                              INTO v_pol_seq_type\n                              FROM DUAL;\n\n                            gin_sequences_pkg.update_used_sequence (\n                                v_pol_seq_type,\n                                v_pol_data (i).pol_pro_code,\n                                v_brn_code,\n                                v_pol_uwyr,\n                                v_pol_status,\n                                v_seq,\n                                v_pol_no);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                -- introduced for monarch where branch id vary from 2 charaters to 3 characters posing a challenge\n                                BEGIN\n                                    SELECT TO_NUMBER (\n                                               SUBSTR (\n                                                   v_pol_no,\n                                                   DECODE (\n                                                       gin_parameters_pkg.get_param_varchar (\n                                                           'POL_SERIAL_AT_END'),\n                                                       'N', DECODE (\n                                                                DECODE (\n                                                                    v_pol_data (\n                                                                        i).pol_policy_type,\n                                                                    'N', 'P',\n                                                                    'F'),\n                                                                'P', gin_parameters_pkg.get_param_varchar (\n                                                                         'POL_SERIAL_POS'),\n                                                                gin_parameters_pkg.get_param_varchar (\n                                                                    'POL_FAC_SERIAL_POS')),\n                                                         LENGTH (v_pol_no)\n                                                       - gin_parameters_pkg.get_param_varchar (\n                                                             'POLNOSRLENGTH')\n                                                       + 1),\n                                                   gin_parameters_pkg.get_param_varchar (\n                                                       'POLNOSRLENGTH')))\n                                      INTO v_seqno\n                                      FROM DUAL;\n                                EXCEPTION\n                                    WHEN OTHERS\n                                    THEN\n                                        raise_error (\n                                            'Error Selecting Used Sequence...2');\n                                END;\n\n                                BEGIN\n                                    SELECT LENGTH (brn_sht_desc)\n                                      INTO v_brn_sht_length\n                                      FROM tqc_branches\n                                     WHERE brn_code = v_brn_code;\n                                EXCEPTION\n                                    WHEN OTHERS\n                                    THEN\n                                        NULL;\n                                END;\n\n                                IF NVL (v_brn_sht_length, 0) = 2\n                                THEN\n                                    BEGIN\n                                        v_seq := TO_NUMBER (v_seqno);\n                                    EXCEPTION\n                                        WHEN OTHERS\n                                        THEN\n                                            NULL;\n                                    END;\n                                ELSIF NVL (v_brn_sht_length, 0) = 3\n                                THEN\n                                    BEGIN\n                                        v_seq :=\n                                            TO_NUMBER (SUBSTR (v_seqno, 2));\n                                    EXCEPTION\n                                        WHEN OTHERS\n                                        THEN\n                                            NULL;\n                                    END;\n                                ELSE\n                                    raise_error ('Error here....');\n                                END IF;\n\n                                BEGIN\n                                    SELECT DECODE (\n                                               v_pol_data (i).pol_policy_type,\n                                               'N', 'P',\n                                               'F')\n                                      INTO v_pol_seq_type\n                                      FROM DUAL;\n\n                                    gin_sequences_pkg.update_used_sequence (\n                                        v_pol_seq_type,\n                                        v_pol_data (i).pol_pro_code,\n                                        v_brn_code,\n                                        v_pol_uwyr,\n                                        v_pol_status,\n                                        v_seq,\n                                        v_pol_no);\n                                EXCEPTION\n                                    WHEN OTHERS\n                                    THEN\n                                        raise_error (\n                                            'ERROR UPDATING USED SEQUENCE...');\n                                END;\n                        --RAISE_ERROR('ERROR UPDATING USED SEQUENCE...');\n                        END;\n\n                        raise_error (\n                               'Error generating Policy number  at step 2'\n                            || v_pol_no);\n                END;\n\n                BEGIN\n                    SELECT TO_NUMBER (\n                               SUBSTR (\n                                   v_pol_no,\n                                   DECODE (\n                                       gin_parameters_pkg.get_param_varchar (\n                                           'POL_SERIAL_AT_END'),\n                                       'N', DECODE (\n                                                DECODE (\n                                                    v_pol_data (i).pol_policy_type,\n                                                    'N', 'P',\n                                                    'F'),\n                                                'P', gin_parameters_pkg.get_param_varchar (\n                                                         'POL_SERIAL_POS'),\n                                                gin_parameters_pkg.get_param_varchar (\n                                                    'POL_FAC_SERIAL_POS')),\n                                         LENGTH (v_pol_no)\n                                       - gin_parameters_pkg.get_param_varchar (\n                                             'POLNOSRLENGTH')\n                                       + 1),\n                                   gin_parameters_pkg.get_param_varchar (\n                                       'POLNOSRLENGTH')))\n                      INTO v_seq\n                      FROM DUAL;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                --RAISE_ERROR('Error Selecting Used Sequence...'||v_pol_no);\n                END;\n\n                BEGIN\n                    SELECT DECODE (v_pol_data (i).pol_policy_type,\n                                   'N', 'P',\n                                   'F')\n                      INTO v_pol_seq_type\n                      FROM DUAL;\n\n                    gin_sequences_pkg.update_used_sequence (\n                        v_pol_seq_type,\n                        v_pol_data (i).pol_pro_code,\n                        v_brn_code,\n                        v_pol_uwyr,\n                        v_pol_status,\n                        v_seq,\n                        v_pol_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        -- introduced for monarch where branch id vary from 2 charaters to 3 characters posing a challenge\n                        BEGIN\n                            SELECT (SUBSTR (\n                                        v_pol_no,\n                                        DECODE (\n                                            gin_parameters_pkg.get_param_varchar (\n                                                'POL_SERIAL_AT_END'),\n                                            'N', DECODE (\n                                                     DECODE (\n                                                         v_pol_data (i).pol_policy_type,\n                                                         'N', 'P',\n                                                         'F'),\n                                                     'P', gin_parameters_pkg.get_param_number (\n                                                              'POL_SERIAL_POS'),\n                                                     gin_parameters_pkg.get_param_number (\n                                                         'POL_FAC_SERIAL_POS')),\n                                              LENGTH (v_pol_no)\n                                            - gin_parameters_pkg.get_param_number (\n                                                  'POLNOSRLENGTH')\n                                            + 1),\n                                        gin_parameters_pkg.get_param_varchar (\n                                            'POLNOSRLENGTH')))\n                              INTO v_seqno\n                              FROM DUAL;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'ERROR SELECTING USED SEQUENCE...');\n                        END;\n\n                        BEGIN\n                            SELECT LENGTH (brn_sht_desc)\n                              INTO v_brn_sht_length\n                              FROM tqc_branches\n                             WHERE brn_code = v_brn_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        END;\n\n                        --RAISE_ERROR('HERE='||v_seqNO||';'||v_brn_sht_length||';'||v_seq);\n                        IF NVL (v_brn_sht_length, 0) = 2\n                        THEN\n                            BEGIN\n                                v_seq := TO_NUMBER (v_seqno);\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        ELSIF NVL (v_brn_sht_length, 0) = 3\n                        THEN\n                            BEGIN\n                                v_seq := TO_NUMBER (SUBSTR (v_seqno, 2));\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        ELSE\n                            raise_error ('Error here....');\n                        END IF;\n\n                        BEGIN\n                            SELECT DECODE (v_pol_data (i).pol_policy_type,\n                                           'N', 'P',\n                                           'F')\n                              INTO v_pol_seq_type\n                              FROM DUAL;\n\n                            gin_sequences_pkg.update_used_sequence (\n                                v_pol_seq_type,\n                                v_pol_data (i).pol_pro_code,\n                                v_brn_code,\n                                v_pol_uwyr,\n                                v_pol_status,\n                                v_seq,\n                                v_pol_no);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'ERROR UPDATING USED SEQUENCE...');\n                        END;\n                --RAISE_ERROR('ERROR UPDATING USED SEQUENCE...');\n                END;\n\n                IF     NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                   AND tqc_parameters_pkg.get_org_type (37) NOT IN ('INS')\n                THEN\n                    BEGIN\n                        SELECT bind_policy_no\n                          INTO v_client_pol_no\n                          FROM gin_binders\n                         WHERE bind_code = v_pol_data (i).pol_bind_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error getting the Contract policy no...');\n                    END;\n                ELSE\n                    IF     tqc_interfaces_pkg.get_org_type (37) IN ('INS')\n                       AND NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                       AND v_binderpols_param = 'Y'\n                    THEN\n                        BEGIN\n                            SELECT bind_policy_no\n                              INTO v_client_pol_no\n                              FROM gin_binders\n                             WHERE bind_code = v_pol_data (i).pol_bind_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                v_client_pol_no := v_pol_no;          --'TBA';\n                        END;\n                    ELSE\n                        v_client_pol_no := v_pol_no;\n                    END IF;\n                END IF;\n\n                DBMS_OUTPUT.put_line (4);\n                v_policy_doc := NULL;          --v_pol_Data(I).POL_POLICY_DOC;\n\n                IF v_policy_doc IS NULL\n                THEN\n                    BEGIN\n                        SELECT SUBSTR (pro_policy_word_doc, 1, 30),\n                               pro_min_prem\n                          INTO v_policy_doc, v_pro_min_prem\n                          FROM gin_products\n                         WHERE pro_code = v_pol_data (i).pol_pro_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error getting the default policy document..');\n                    END;\n                END IF;\n\n                v_pol_batch_no := v_batchno;\n\n                IF gin_stp_pkg.determine_admin_fee (\n                       v_pol_data (i).pol_prp_code,\n                       v_pol_no,\n                       v_admin_disc)\n                THEN\n                    v_admin_fee_applicable := 'Y';\n                ELSE\n                    v_admin_fee_applicable := 'N';\n                END IF;\n\n                IF v_pol_data (i).pol_pro_sht_desc IS NULL\n                THEN\n                    SELECT pro_sht_desc\n                      INTO v_pro_sht_desc\n                      FROM gin_products\n                     WHERE pro_code = v_pol_data (i).pol_pro_code;\n                END IF;\n\n                BEGIN\n                    INSERT INTO gin_policies (pol_policy_no,\n                                              pol_ren_endos_no,\n                                              pol_batch_no,\n                                              pol_agnt_agent_code,\n                                              pol_agnt_sht_desc,\n                                              pol_bind_code,\n                                              pol_wef_dt,\n                                              pol_wet_dt,\n                                              pol_uw_year,\n                                              pol_policy_status,\n                                              pol_inception_dt,\n                                              pol_cur_code,\n                                              pol_prepared_by,\n                                              pol_prepared_date,\n                                              pol_policy_type,\n                                              pol_client_policy_number,\n                                              pol_brn_code,\n                                              pol_cur_rate,\n                                              pol_coinsurance,\n                                              pol_coinsure_leader,\n                                              pol_cur_symbol,\n                                              pol_brn_sht_desc,\n                                              pol_prp_code,\n                                              pol_current_status,\n                                              pol_authosrised,\n                                              pol_post_status,\n                                              pol_inception_uwyr,\n                                              pol_pro_code,\n                                              pol_your_ref,\n                                              pol_prop_holding_co_prp_code,\n                                              pol_oth_int_parties,\n                                              pol_pro_sht_desc,\n                                              pol_prev_batch_no,\n                                              pol_uwyr_length,\n                                              pol_binder_policy,\n                                              pol_renewable,\n                                              pol_policy_cover_to,\n                                              pol_policy_cover_from,\n                                              pol_coinsurance_share,\n                                              pol_renewal_dt,\n                                              pol_trans_eff_wet,\n                                              pol_ri_agent_comm_rate,\n                                              pol_ri_agnt_sht_desc,\n                                              pol_ri_agnt_agent_code,\n                                              pol_policy_doc,\n                                              pol_commission_allowed,\n                                              pol_coin_fee,\n                                              pol_sub_agn_code,\n                                              pol_sub_agn_sht_desc,\n                                              pol_div_code,\n                                              -- pol_bdiv_code, NO LONGER USING THE BRANCH DIVISION INSTEAD WE ARE USING THE DIVISIONS\n                                              pol_pmod_code,\n                                              pol_adm_fee_applicable,\n                                              pol_aga_code,\n                                              pol_clna_code,\n                                              pol_sub_aga_code,\n                                              pol_admin_fee_disc_rate,\n                                              pol_med_policy_type,\n                                              pol_freq_of_payment,\n                                              pol_min_prem,\n                                              pol_coin_leader_combined,\n                                              pol_declaration_type,\n                                              pol_pop_taxes,\n                                              pol_exch_rate_fixed,         --,\n                                              --,\n                                              --POL_POLICY_DOC\n                                              pol_loaded,\n                                              pol_reinsured,\n                                              pol_tot_instlmt,\n                                              pol_ipf_down_pymt_type,\n                                              pol_ipf_down_pymt_amt,\n                                              pol_ipf_interest_rate,\n                                              pol_open_cover,\n                                              pol_endors_status,\n                                              pol_scheme_policy,\n                                              pol_pro_interface_type,\n                                              pol_checkoff_agnt_sht_desc,\n                                              pol_checkoff_agnt_code,\n                                              pol_pymt_faci_agnt_code,\n                                              pol_old_policy_no,\n                                              pol_old_agent,\n                                              pol_instlmt_day,\n                                              pol_bdiv_code,\n                                              pol_cr_date_notified,\n                                              pol_cr_note_number,\n                                              pol_admin_fee_allowed,\n                                              pol_cashback_appl,\n                                              pol_uw_only,\n                                              pol_debiting_type,\n                                              pol_pymt_install_pcts,\n                                              pol_coin_fac_cession,\n                                              pol_coin_fac_pc)\n                             VALUES (\n                                        v_pol_no,\n                                        v_end_no,\n                                        v_batchno,\n                                        v_pol_data (i).pol_agnt_agent_code,\n                                        v_pol_data (i).pol_agnt_sht_desc,\n                                        v_pol_data (i).pol_bind_code,\n                                        v_pol_data (i).pol_wef_dt,\n                                        v_wet_date,\n                                        v_pol_uwyr,\n                                        'RN',\n                                        v_inception_dt,\n                                        v_cur_code,\n                                        v_user,\n                                        TRUNC (SYSDATE),\n                                        NVL (v_pol_data (i).pol_policy_type,\n                                             'N'),\n                                        NVL (\n                                            v_client_pol_no,\n                                            v_pol_data (i).pol_client_policy_number),\n                                        v_brn_code,\n                                        v_cur_rate,\n                                        v_pol_data (i).pol_coinsurance,\n                                        v_pol_data (i).pol_coinsure_leader,\n                                        v_cur_symbol,\n                                        v_brn_sht_desc,\n                                        v_pol_data (i).pol_prp_code,\n                                        'A',\n                                        'A',\n                                        'N',\n                                        v_inception_yr,\n                                        v_pol_data (i).pol_pro_code,\n                                        v_pol_data (i).pol_your_ref,\n                                        NULL,\n                                        NULL,\n                                        NVL (v_pol_data (i).pol_pro_sht_desc,\n                                             v_pro_sht_desc),\n                                        v_batchno,\n                                        CEIL (\n                                            MONTHS_BETWEEN (\n                                                v_wet_date,\n                                                v_pol_data (i).pol_wef_dt)),\n                                        v_pol_data (i).pol_binder_policy,\n                                        NVL (v_pol_data (i).pol_renewable,\n                                             'Y'),\n                                        v_wet_date,\n                                        v_pol_data (i).pol_wef_dt,\n                                        v_pol_data (i).pol_coinsurance_share,\n                                        get_renewal_date (\n                                            v_pol_data (i).pol_pro_code,\n                                            v_wet_date),\n                                        v_wet_date,\n                                        v_pol_data (i).pol_ri_agent_comm_rate,\n                                        v_pol_data (i).pol_ri_agnt_sht_desc,\n                                        v_pol_data (i).pol_ri_agnt_agent_code,\n                                        v_policy_doc,\n                                        NVL (\n                                            v_pol_data (i).pol_commission_allowed,\n                                            'Y'),\n                                        v_pol_data (i).pol_coin_fee,\n                                        v_pol_data (i).pol_sub_agn_code,\n                                        v_pol_data (i).pol_sub_agnt_sht_desc,\n                                        v_pol_data (i).pol_div_code,\n                                        v_pol_data (i).pol_pmod_code,\n                                        v_admin_fee_applicable,\n                                        v_pol_data (i).pol_aga_code,\n                                        v_pol_data (i).pol_clna_code,\n                                        v_pol_data (i).pol_sub_aga_code,\n                                        v_admin_disc,                      --,\n                                        v_pol_data (i).pol_med_policy_type,\n                                        NVL (\n                                            v_pol_data (i).pol_freq_of_payment,\n                                            'A'),\n                                        v_pro_min_prem,\n                                        v_pol_data (i).pol_coin_leader_combined,\n                                        v_pol_data (i).pol_declaration_type,\n                                        v_pol_data (i).pol_pop_taxes,\n                                        v_pol_data (i).pol_curr_rate_type, --,\n                                        --,\n                                        --v_pol_Data(I).POL_POLICY_DOC\n                                        'Y',\n                                        DECODE (\n                                            NVL (v_pol_data (i).pol_loaded,\n                                                 'N'),\n                                            'Y', 'Y',\n                                            'N'),\n                                        v_pol_data (i).pol_no_installment,\n                                        v_pol_data (i).pol_ipf_down_pymt_type,\n                                        v_pol_data (i).pol_ipf_down_pymt_amt,\n                                        v_pol_data (i).pol_ipf_interest_rate,\n                                        NVL (v_pol_data (i).pol_open_cover,\n                                             'N'),\n                                        v_pol_data (i).pol_endors_status,\n                                        v_pol_data (i).pol_scheme_policy,\n                                        v_pol_data (i).pol_interface_type,\n                                        v_pol_data (i).pol_checkoff_agnt_sht_desc,\n                                        v_pol_data (i).pol_checkoff_agnt_code,\n                                        v_pol_data (i).pol_pymt_faci_agnt_code,\n                                        v_pol_data (i).pol_old_policy_no,\n                                        v_pol_data (i).pol_old_agent,\n                                        v_pol_data (i).pol_instlmt_day,\n                                        v_pol_data (i).pol_bdiv_code,\n                                        v_pol_data (i).pol_cr_date_notified,\n                                        v_pol_data (i).pol_cr_note_number,\n                                        v_pol_data (i).pol_admin_fee_allowed,\n                                        v_pol_data (i).pol_cashback_appl,\n                                        v_pol_data (i).pol_uw_only,\n                                        v_pol_data (i).pol_debiting_type,\n                                        v_pol_data (i).pol_payment_plan,\n                                        NVL (\n                                            v_pol_data (i).POL_COIN_FAC_CESSION,\n                                            'N'),\n                                        v_pol_data (i).POL_COIN_FAC_PC);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR CREATING POLICY RECORD..');\n                END;\n\n                BEGIN\n                    pop_sbu_dtls (v_batchno,\n                                  v_pol_data (i).pol_unit_code,\n                                  v_pol_data (i).pol_location_code,\n                                  'A');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Creating Policy Other Details Record..');\n                END;\n\n                BEGIN\n                    SELECT TO_NUMBER (\n                                  TO_CHAR (SYSDATE, 'YYYY')\n                               || ggt_trans_no_seq.NEXTVAL)\n                      INTO v_trans_no\n                      FROM DUAL;\n\n                    INSERT INTO gin_gis_transactions (\n                                    ggt_doc_ref,\n                                    ggt_trans_no,\n                                    ggt_pol_policy_no,\n                                    ggt_cmb_claim_no,\n                                    ggt_pro_code,\n                                    ggt_pol_batch_no,\n                                    ggt_pro_sht_desc,\n                                    ggt_btr_trans_code,\n                                    ggt_done_by,\n                                    ggt_done_date,\n                                    ggt_client_policy_number,\n                                    ggt_uw_clm_tran,\n                                    ggt_trans_date,\n                                    ggt_trans_authorised,\n                                    ggt_trans_authorised_by,\n                                    ggt_trans_authorise_date,\n                                    ggt_old_tran_no,\n                                    ggt_effective_date)\n                             VALUES (\n                                        v_pol_data (i).pol_your_ref,\n                                        v_trans_no,\n                                        v_pol_no,\n                                        NULL,\n                                        v_pol_data (i).pol_pro_code,\n                                        v_batchno,\n                                        v_pol_data (i).pol_pro_sht_desc,\n                                        'RN',\n                                        v_user,\n                                        TRUNC (SYSDATE),\n                                        v_client_pol_no,\n                                        'U',\n                                        TRUNC (SYSDATE),\n                                        'Y',\n                                        NULL,\n                                        NULL,\n                                        NULL,\n                                        NVL (\n                                            v_pol_data (i).pol_endos_eff_date,\n                                            TRUNC (SYSDATE)));\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error Creating Transaction Record..');\n                END;\n\n                BEGIN\n                    v_tran_ref_no :=\n                        gin_sequences_pkg.get_number_format (\n                            'BARCODE',\n                            v_pol_data (i).pol_pro_code,\n                            v_pol_data (i).pol_brn_code,\n                            TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                            'NB',\n                            v_serial);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'unable to generate transmittal number.Contact the system administrator...');\n                END;\n\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                           || ggts_tran_no_seq.NEXTVAL\n                      INTO next_ggts_trans_no\n                      FROM DUAL;\n\n                    INSERT INTO gin_gis_transmitals (ggts_tran_no,\n                                                     ggts_pol_policy_no,\n                                                     ggts_cmb_claim_no,\n                                                     ggts_pol_batch_no,\n                                                     ggts_done_by,\n                                                     ggts_done_date,\n                                                     ggts_uw_clm_tran,\n                                                     ggts_pol_renewal_batch,\n                                                     ggts_tran_ref_no,\n                                                     ggts_ipay_alphanumeric)\n                         VALUES (next_ggts_trans_no,\n                                 v_pol_no,\n                                 NULL,\n                                 v_batchno,\n                                 v_user,\n                                 SYSDATE,\n                                 'U',\n                                 NULL,\n                                 v_tran_ref_no,\n                                 'Y');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error unable to creaete a transaction record. Contact the system administrator...');\n                END;\n\n                BEGIN\n                    IF NVL (v_pol_data (i).pol_pop_taxes, 'Y') = 'Y'\n                    THEN\n                        pop_taxes (v_pol_no,\n                                   v_end_no,\n                                   v_batchno,\n                                   v_pol_data (i).pol_pro_code,\n                                   v_pol_data (i).pol_binder_policy,\n                                   v_pol_status);\n                    END IF;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n            ELSIF     v_pol_data (i).pol_trans_type IN ('RN', 'RE')\n                  AND NVL (v_uw_trans, 'N') != 'Y'\n                  AND v_pol_data (i).pol_add_edit = 'E'\n            THEN\n                v_pol_no := v_pol_data (i).pol_gis_policy_no;\n                v_batchno := v_pol_data (i).pol_batch_no;\n                v_pol_batch_no := v_batchno;\n\n                IF v_pol_data (i).pol_trans_type IN ('RE')\n                THEN\n                    BEGIN\n                        SELECT pol_wet_dt\n                          INTO v_pwet_dt\n                          FROM gin_policies\n                         WHERE     pol_prev_batch_no =\n                                   v_pol_data (i).pol_batch_no\n                               AND pol_policy_status IN ('CN');\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n\n                    IF v_pol_data (i).pol_wef_dt < v_pwet_dt\n                    THEN\n                        raise_error (\n                               'Policy Wef Date Cannot be before previous cancellation Date...'\n                            || v_pwet_dt);\n                    END IF;\n                END IF;\n\n                BEGIN\n                    SELECT pol_wef_dt, pol_wet_dt\n                      INTO v_ren_wef_dt, v_ren_wet_dt\n                      FROM gin_ren_policies\n                     WHERE pol_prev_batch_no = v_pol_data (i).pol_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                BEGIN\n                       UPDATE gin_ren_policies\n                          SET pol_agnt_agent_code =\n                                  v_pol_data (i).pol_agnt_agent_code,\n                              pol_agnt_sht_desc =\n                                  v_pol_data (i).pol_agnt_sht_desc,\n                              pol_bind_code = v_pol_data (i).pol_bind_code,\n                              pol_wef_dt = v_pol_data (i).pol_wef_dt,\n                              pol_wet_dt = v_wet_date,\n                              pol_uw_year = v_pol_uwyr,\n                              pol_inception_dt = v_pol_data (i).pol_wef_dt,\n                              pol_cur_code = v_cur_code,\n                              pol_cur_rate = v_cur_rate,\n                              pol_prepared_by = vuser,\n                              pol_policy_type =\n                                  NVL (v_pol_data (i).pol_policy_type, 'N'),\n                              pol_brn_code = v_brn_code,\n                              pol_coinsurance = v_pol_data (i).pol_coinsurance,\n                              pol_coinsure_leader =\n                                  v_pol_data (i).pol_coinsure_leader,\n                              pol_cur_symbol = v_cur_symbol,\n                              pol_brn_sht_desc = v_brn_sht_desc,\n                              pol_prp_code = v_pol_data (i).pol_prp_code,\n                              pol_inception_uwyr = v_pol_uwyr,\n                              pol_pro_code = v_pol_data (i).pol_pro_code,\n                              pol_your_ref = v_pol_data (i).pol_your_ref,\n                              pol_prop_holding_co_prp_code = NULL,\n                              pol_oth_int_parties = NULL,\n                              pol_pro_sht_desc = v_pol_data (i).pol_pro_sht_desc,\n                              pol_uwyr_length =\n                                  CEIL (\n                                      MONTHS_BETWEEN (v_wet_date,\n                                                      v_pol_data (i).pol_wef_dt)),\n                              pol_binder_policy =\n                                  v_pol_data (i).pol_binder_policy,\n                              pol_renewable = v_pol_data (i).pol_renewable,\n                              pol_policy_cover_to = v_wet_date,\n                              pol_policy_cover_from = v_pol_data (i).pol_wef_dt,\n                              pol_coinsurance_share =\n                                  v_pol_data (i).pol_coinsurance_share,\n                              pol_renewal_dt =\n                                  get_renewal_date (v_pol_data (i).pol_pro_code,\n                                                    v_wet_date),\n                              pol_trans_eff_wet = v_wet_date,\n                              pol_ri_agent_comm_rate =\n                                  v_pol_data (i).pol_ri_agent_comm_rate,\n                              pol_ri_agnt_sht_desc =\n                                  v_pol_data (i).pol_ri_agnt_sht_desc,\n                              pol_ri_agnt_agent_code =\n                                  v_pol_data (i).pol_ri_agnt_agent_code,\n                              pol_policy_doc = v_policy_doc,\n                              pol_commission_allowed =\n                                  NVL (v_pol_data (i).pol_commission_allowed,\n                                       'Y'),\n                              pol_aga_code =\n                                  NVL (v_pol_data (i).pol_aga_code,\n                                       pol_aga_code),\n                              pol_clna_code =\n                                  NVL (v_pol_data (i).pol_clna_code,\n                                       pol_clna_code),\n                              pol_sub_aga_code =\n                                  NVL (v_pol_data (i).pol_sub_aga_code,\n                                       pol_sub_aga_code),\n                              pol_med_policy_type =\n                                  v_pol_data (i).pol_med_policy_type,\n                              pol_freq_of_payment =\n                                  NVL (v_pol_data (i).pol_freq_of_payment, 'A'),\n                              pol_adm_fee_applicable =\n                                  NVL (v_pol_data (i).pol_fee_admissible,\n                                       pol_adm_fee_applicable),\n                              pol_mktr_agn_code =\n                                  NVL (v_pol_data (i).pol_mktr_agn_code,\n                                       pol_mktr_agn_code),\n                              pol_curr_rate_type =\n                                  NVL (v_pol_data (i).pol_curr_rate_type,\n                                       pol_curr_rate_type),\n                              pol_bussiness_growth_type =\n                                  v_pol_data (i).pol_bussiness_growth_type,\n                              pol_subagent = v_pol_data (i).pol_subagent,\n                              pol_ipf_nof_instals =\n                                  v_pol_data (i).pol_ipf_nof_instals,\n                              pol_coagent = v_pol_data (i).pol_coagent,\n                              pol_coagent_main_pct =\n                                  v_pol_data (i).pol_coagent_main_pct,\n                              pol_agn_discounted =\n                                  v_pol_data (i).pol_agn_discounted,\n                              pol_agn_disc_type =\n                                  v_pol_data (i).pol_agn_disc_type,\n                              pol_agn_discount = v_pol_data (i).pol_agn_discount,\n                              pol_tot_instlmt =\n                                  v_pol_data (i).pol_no_installment,\n                              pol_ipf_down_pymt_type =\n                                  v_pol_data (i).pol_ipf_down_pymt_type,\n                              pol_ipf_down_pymt_amt =\n                                  v_pol_data (i).pol_ipf_down_pymt_amt,\n                              pol_ipf_interest_rate =\n                                  v_pol_data (i).pol_ipf_interest_rate,\n                              pol_open_policy = v_pol_data (i).pol_open_policy,\n                              pol_intro_code = v_pol_data (i).pol_intro_code,\n                              pol_force_sf_compute =\n                                  v_pol_data (i).pol_force_sf_compute,\n                              pol_enforce_sf_param =\n                                  v_pol_data (i).pol_enforce_sf_param,\n                              pol_exch_rate_fixed =\n                                  v_pol_data (i).pol_curr_rate_type,\n                              pol_prem_computed = 'N',\n                              pol_cr_date_notified =\n                                  v_pol_data (i).pol_cr_date_notified,\n                              pol_cr_note_number =\n                                  v_pol_data (i).pol_cr_note_number,\n                              pol_div_code =\n                                  NVL (v_pol_data (i).pol_bdiv_code,\n                                       pol_div_code),\n                              pol_bdiv_code =\n                                  NVL (v_pol_data (i).pol_bdiv_code,\n                                       pol_bdiv_code),\n                              pol_admin_fee_allowed =\n                                  v_pol_data (i).pol_admin_fee_allowed,\n                              pol_cashback_appl =\n                                  v_pol_data (i).pol_cashback_appl,\n                              pol_uw_only = v_pol_data (i).pol_uw_only,\n                              pol_debiting_type =\n                                  v_pol_data (i).pol_debiting_type,\n                              pol_pymt_install_pcts =\n                                  v_pol_data (i).pol_payment_plan,\n                              pol_coin_fac_cession =\n                                  NVL (v_pol_data (i).pol_coin_fac_cession, 'N'),\n                              pol_coin_fac_pc = v_pol_data (i).pol_coin_fac_pc\n                        --POP_PIP_CODE = v_pol_Data(I).POP_PIP_CODE,\n                        --POL_PIP_PF_CODE = v_pol_Data(I).POL_PIP_PF_CODE\n                        WHERE pol_batch_no = v_pol_data (i).pol_batch_no\n                    RETURNING pol_ren_endos_no\n                         INTO v_end_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error updating policy details..');\n                END;\n\n                BEGIN\n                    v_cnt := 0;\n\n                    SELECT COUNT (pdl_code)\n                      INTO v_cnt\n                      FROM gin_renwl_sbudtls\n                     WHERE pdl_pol_batch_no = v_pol_data (i).pol_batch_no;\n\n                    IF NVL (v_cnt, 0) = 0\n                    THEN\n                        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))\n                               || gin_pdl_code_seq.NEXTVAL\n                          INTO v_pdl_code\n                          FROM DUAL;\n\n                        INSERT INTO gin_renwl_sbudtls (pdl_code,\n                                                       pdl_pol_batch_no,\n                                                       pdl_unit_code,\n                                                       pdl_location_code,\n                                                       pdl_prepared_date)\n                             VALUES (v_pdl_code,\n                                     v_pol_data (i).pol_batch_no,\n                                     v_pol_data (i).pol_unit_code,\n                                     v_pol_data (i).pol_location_code,\n                                     TRUNC (SYSDATE));\n                    ELSE\n                        UPDATE gin_renwl_sbudtls\n                           SET pdl_unit_code =\n                                   NVL (v_pol_data (i).pol_unit_code,\n                                        pdl_unit_code),\n                               pdl_location_code =\n                                   NVL (v_pol_data (i).pol_location_code,\n                                        pdl_location_code)\n                         WHERE pdl_pol_batch_no = v_pol_data (i).pol_batch_no;\n                    END IF;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error updating policy details..');\n                END;\n\n                IF     NVL (v_pol_data (i).pol_binder_policy, 'N') = 'Y'\n                   AND v_pol_data (i).pol_bind_code IS NOT NULL\n                THEN\n                    BEGIN\n                        UPDATE gin_ren_insured_property_unds\n                           SET ipu_bind_code = v_pol_data (i).pol_bind_code\n                         WHERE ipu_pol_batch_no = v_pol_data (i).pol_batch_no;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n                END IF;\n\n                IF v_ren_wef_dt != v_pol_data (i).pol_wef_dt\n                THEN\n                    UPDATE gin_ren_insured_property_unds\n                       SET ipu_wef = v_pol_data (i).pol_wef_dt,\n                           ipu_eff_wef = v_pol_data (i).pol_wef_dt,\n                           ipu_uw_yr = v_pol_uwyr\n                     WHERE ipu_pol_batch_no = v_pol_data (i).pol_batch_no;\n                END IF;\n\n                IF v_ren_wet_dt != v_wet_date\n                THEN\n                    UPDATE gin_ren_insured_property_unds\n                       SET ipu_wet = v_wet_date,\n                           ipu_eff_wet = v_wet_date,\n                           ipu_trans_eff_wet = v_wet_date\n                     WHERE ipu_pol_batch_no = v_pol_data (i).pol_batch_no;\n                END IF;\n\n                BEGIN\n                    SELECT ggt_trans_no\n                      INTO v_trans_no\n                      FROM gin_gis_transactions\n                     WHERE     ggt_uw_clm_tran = 'U'\n                           AND ggt_pol_batch_no = v_batchno;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error retrieving transaction number..');\n                END;\n            ELSIF     v_pol_data (i).pol_trans_type IN ('RN', 'RE')\n                  AND NVL (v_uw_trans, 'N') != 'Y'\n                  AND v_pol_data (i).pol_add_edit = 'D'\n            THEN\n                BEGIN\n                    del_ren_pol_proc (v_pol_data (i).pol_batch_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error deleting policy..');\n                END;\n\n                v_pol_batch_no := NULL;\n            ELSIF     v_pol_data (i).pol_trans_type IN ('CT')\n                  AND NVL (v_uw_trans, 'N') = 'Y'\n                  AND v_pol_data (i).pol_add_edit = 'A'\n            THEN\n                create_midterm_trans (v_pol_data (i).pol_batch_no,\n                                      v_pol_batch_no,\n                                      vuser,\n                                      v_pol_data (i).pol_endos_eff_date);\n            ELSE\n                raise_error (\n                       'Transaction type '\n                    || v_pol_data (i).pol_trans_type\n                    || ' and Action type '\n                    || v_pol_data (i).pol_add_edit\n                    || ' not catered for.. ');\n            END IF;\n        -- raise_error('v_pol_data (i).pol_trans_type '||v_pol_data (i).pol_trans_type||' v_uw_trans '||v_uw_trans);\n        --RAISE_ERROR('v_pol_no'||v_pol_no||'v_pol_batch_no'||v_pol_batch_no);\n        END LOOP;\n    END;",
        "gin_coinsurers_prc": "PROCEDURE gin_coinsurers_prc (v_batch_no        IN NUMBER,\n                                  v_pol_coins_tab   IN web_pol_coins_tab)\n    IS\n        CURSOR pol_cur IS\n            SELECT *\n              FROM gin_policies\n             WHERE pol_batch_no = v_batch_no;\n\n        v_coin_perc          NUMBER;\n        v_default_serv_fee   VARCHAR2 (1);\n        v_def_serv           VARCHAR2 (1);\n        v_trans_type         VARCHAR2 (5);\n    BEGIN\n        FOR pol_rec IN pol_cur\n        LOOP\n            IF NVL (pol_rec.pol_coinsurance, 'N') = 'Y'\n            THEN\n                FOR x IN 1 .. v_pol_coins_tab.COUNT\n                LOOP                                      -- IN pol_coins LOOP\n                    BEGIN\n                        BEGIN\n                            v_default_serv_fee :=\n                                gin_parameters_pkg.get_param_varchar (\n                                    'DEFAULT_COMPUTE_SERV_FEE');\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                v_default_serv_fee := 'N';\n                        END;\n\n                        IF NVL (v_default_serv_fee, 'N') = 'Y'\n                        THEN\n                            IF pol_rec.pol_policy_status IN ('SP',\n                                                             'EX',\n                                                             'NB',\n                                                             'RN')\n                            THEN\n                                v_def_serv := 'Y';\n                            ELSE\n                                v_def_serv := 'N';\n                            END IF;\n                        END IF;\n\n                        --raise_Error(  v_pol_coins_tab (x).coin_optional_comm||'= ' ||\n                        --                         v_pol_coins_tab (x).coin_comm_rate);\n                        INSERT INTO gin_coinsurers (coin_agnt_agent_code,\n                                                    coin_agnt_sht_desc,\n                                                    coin_gl_code,\n                                                    coin_lead,\n                                                    coin_perct,\n                                                    coin_prem,\n                                                    coin_alp_proposal_no,\n                                                    coin_pol_policy_no,\n                                                    coin_pol_ren_endos_no,\n                                                    coin_pol_batch_no,\n                                                    coin_fee_rate,\n                                                    coin_fee_amt,\n                                                    coin_prem_tax,\n                                                    coin_duties,\n                                                    coin_si,\n                                                    coin_annual_prem,\n                                                    coin_coinsurers_polno,\n                                                    coin_force_sf_compute,\n                                                    coin_fee_type,\n                                                    coin_commission,\n                                                    coin_whtx,\n                                                    coin_aga_code,\n                                                    coin_aga_sht_desc,\n                                                    coin_optional_comm,\n                                                    coin_comm_rate,\n                                                    coin_comm_type,\n                                                    COIN_FAC_CESSION,\n                                                    COIN_FAC_PC)\n                                 VALUES (\n                                            v_pol_coins_tab (x).coin_agnt_agent_code,\n                                            v_pol_coins_tab (x).coin_agnt_sht_desc,\n                                            v_pol_coins_tab (x).coin_gl_code,\n                                            v_pol_coins_tab (x).coin_lead,\n                                            v_pol_coins_tab (x).coin_perct,\n                                            v_pol_coins_tab (x).coin_prem,\n                                            v_pol_coins_tab (x).coin_alp_proposal_no,\n                                            pol_rec.pol_policy_no,\n                                            pol_rec.pol_ren_endos_no,\n                                            v_batch_no,\n                                            v_pol_coins_tab (x).coin_fee_rate,\n                                            v_pol_coins_tab (x).coin_fee_amt,\n                                            v_pol_coins_tab (x).coin_prem_tax,\n                                            v_pol_coins_tab (x).coin_duties,\n                                            v_pol_coins_tab (x).coin_si,\n                                            v_pol_coins_tab (x).coin_annual_prem,\n                                            v_pol_coins_tab (x).coin_coinsurers_polno,\n                                            v_pol_coins_tab (x).coin_force_sf_compute,\n                                            --v_pol_coins_tab (x).coin_force_sf_compute, THIS SHOULD ALWAYS PICK THE DEFAULT VALUE WHICH IS 'D'\n                                            v_pol_coins_tab (x).coin_fee_type,\n                                            v_pol_coins_tab (x).coin_commission,\n                                            v_pol_coins_tab (x).coin_whtx,\n                                            v_pol_coins_tab (x).coin_aga_code,\n                                            v_pol_coins_tab (x).coin_aga_sht_desc,\n                                            v_pol_coins_tab (x).coin_optional_comm,\n                                            v_pol_coins_tab (x).coin_comm_rate,\n                                            v_pol_coins_tab (x).coin_comm_type,\n                                            v_pol_coins_tab (x).COIN_FAC_CESSION,\n                                            v_pol_coins_tab (x).COIN_FAC_PC);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error inserting coinsurance records..');\n                    END;\n                END LOOP;\n\n                BEGIN\n                    SELECT SUM (NVL (coin_perct, 0))\n                      INTO v_coin_perc\n                      FROM gin_coinsurers\n                     WHERE coin_pol_batch_no = v_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error determining coinsurance total percentage....');\n                END;\n\n                IF   NVL (v_coin_perc, 0)\n                   + NVL (pol_rec.pol_coinsurance_share, 0) >\n                   100\n                THEN\n                    raise_error (\n                        'Error:- Coinsurance percentages cannot greater than 100%... ');\n                END IF;\n\n                BEGIN\n                    UPDATE gin_policies\n                       SET pol_prem_computed = 'N'\n                     WHERE pol_batch_no = v_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error updating policy premium status to changed');\n                END;\n            END IF;\n        END LOOP;\n    END;",
        "gin_ren_coinsurers_prc": "PROCEDURE gin_ren_coinsurers_prc (v_batch_no        IN NUMBER,\n                                      v_pol_coins_tab   IN web_pol_coins_tab)\n    IS\n        CURSOR pol_cur IS\n            SELECT *\n              FROM gin_policies\n             WHERE pol_batch_no = v_batch_no;\n\n        v_coin_perc   NUMBER;\n    BEGIN\n        FOR pol_rec IN pol_cur\n        LOOP\n            IF NVL (pol_rec.pol_coinsurance, 'N') = 'Y'\n            THEN\n                FOR x IN 1 .. v_pol_coins_tab.COUNT\n                LOOP                                      -- IN pol_coins LOOP\n                    BEGIN\n                        INSERT INTO gin_ren_coinsurers (\n                                        coin_agnt_agent_code,\n                                        coin_agnt_sht_desc,\n                                        coin_gl_code,\n                                        coin_lead,\n                                        coin_perct,\n                                        coin_prem,\n                                        coin_alp_proposal_no,\n                                        coin_pol_policy_no,\n                                        coin_pol_ren_endos_no,\n                                        coin_pol_batch_no,\n                                        coin_fee_rate,\n                                        coin_fee_amt,\n                                        coin_prem_tax,\n                                        coin_duties,\n                                        coin_si,\n                                        coin_annual_prem,\n                                        coin_coinsurers_polno,\n                                        coin_force_sf_compute,\n                                        coin_fee_type,\n                                        coin_commission,\n                                        coin_whtx,\n                                        coin_aga_code,\n                                        coin_aga_sht_desc,\n                                        coin_comm_type,\n                                        COIN_FAC_CESSION,\n                                        COIN_FAC_PC)\n                                 VALUES (\n                                            v_pol_coins_tab (x).coin_agnt_agent_code,\n                                            v_pol_coins_tab (x).coin_agnt_sht_desc,\n                                            v_pol_coins_tab (x).coin_gl_code,\n                                            v_pol_coins_tab (x).coin_lead,\n                                            v_pol_coins_tab (x).coin_perct,\n                                            v_pol_coins_tab (x).coin_prem,\n                                            v_pol_coins_tab (x).coin_alp_proposal_no,\n                                            pol_rec.pol_policy_no,\n                                            pol_rec.pol_ren_endos_no,\n                                            v_batch_no,\n                                            v_pol_coins_tab (x).coin_fee_rate,\n                                            v_pol_coins_tab (x).coin_fee_amt,\n                                            v_pol_coins_tab (x).coin_prem_tax,\n                                            v_pol_coins_tab (x).coin_duties,\n                                            v_pol_coins_tab (x).coin_si,\n                                            v_pol_coins_tab (x).coin_annual_prem,\n                                            v_pol_coins_tab (x).coin_coinsurers_polno,\n                                            'D',\n                                            --v_pol_coins_tab (x).coin_force_sf_compute,\n                                            v_pol_coins_tab (x).coin_fee_type,\n                                            v_pol_coins_tab (x).coin_commission,\n                                            v_pol_coins_tab (x).coin_whtx,\n                                            v_pol_coins_tab (x).coin_aga_code,\n                                            v_pol_coins_tab (x).coin_aga_sht_desc,\n                                            v_pol_coins_tab (x).coin_comm_type,\n                                            v_pol_coins_tab (x).COIN_FAC_CESSION,\n                                            v_pol_coins_tab (x).COIN_FAC_PC);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error inserting coinsurance records..');\n                    END;\n                END LOOP;\n\n                BEGIN\n                    SELECT SUM (NVL (coin_perct, 0))\n                      INTO v_coin_perc\n                      FROM gin_ren_coinsurers\n                     WHERE coin_pol_batch_no = v_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error determining coinsurance total percentage....');\n                END;\n\n                IF   NVL (v_coin_perc, 0)\n                   + NVL (pol_rec.pol_coinsurance_share, 0) >\n                   100\n                THEN\n                    raise_error (\n                             'Error:- Coinsurance percentages cannot sum upto '\n                          || NVL (v_coin_perc, 0)\n                        + NVL (pol_rec.pol_coinsurance_share, 0));\n                END IF;\n            END IF;\n        END LOOP;\n    END;",
        "update_pol_coinsurers": "PROCEDURE update_pol_coinsurers (\n        v_batch_no             IN NUMBER,\n        v_agent_code           IN NUMBER,\n        v_leader                  VARCHAR2,\n        v_perc                 IN NUMBER,\n        v_fee_rate             IN NUMBER,\n        v_aga_code             IN NUMBER,\n        v_policy_no            IN VARCHAR2,\n        v_force_compute        IN VARCHAR2,\n        v_coin_optional_comm   IN VARCHAR2,\n        --to take care of optional_comm either Y OR N for a coinsurer\n        v_comm_rate            IN NUMBER DEFAULT NULL,\n        --enable overridding commission at coinsurance level for inhouse agents\n        v_comm_type            IN VARCHAR2 DEFAULT 'R',\n        v_COIN_FAC_CESSION     IN VARCHAR2 DEFAULT 'N',\n        v_COIN_FAC_PC          IN NUMBER DEFAULT NULL)\n    IS\n        v_pol_leader     VARCHAR2 (1);\n        v_pol_coin_pct   NUMBER;\n        v_coin_perct     NUMBER;\n        v_cnt            NUMBER;\n        v_aga_sht_desc   VARCHAR2 (15);\n    BEGIN\n        BEGIN\n            SELECT pol_coinsure_leader, pol_coinsure_pct\n              INTO v_pol_leader, v_pol_coin_pct\n              FROM gin_policies\n             WHERE pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error determining if the policy is for a leader....');\n        END;\n\n        IF NVL (v_leader, 'N') = 'Y'\n        THEN\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_cnt\n                  FROM gin_coinsurers\n                 WHERE     coin_pol_batch_no = v_batch_no\n                       AND NVL (coin_lead, 'N') = 'Y';\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_cnt := 0;\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error fetching the existing coinsurers...');\n            END;\n\n            IF NVL (v_cnt, 0) > 0\n            THEN\n                BEGIN\n                    UPDATE gin_coinsurers\n                       SET coin_lead = 'N'\n                     WHERE     NVL (coin_lead, 'N') = 'Y'\n                           AND coin_pol_batch_no = v_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error updating the previous coinsurance leader details....');\n                END;\n            --RAISE_ERROR('Error:- A coinsurance leader already exists. Please check....');\n            END IF;\n\n            IF NVL (v_pol_leader, 'N') = 'Y'\n            THEN\n                raise_error (\n                    'Error:- The policy belongs to the leader already. Please check....');\n            END IF;\n        ELSE\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_cnt\n                  FROM gin_coinsurers\n                 WHERE     coin_pol_batch_no = v_batch_no\n                       AND NVL (coin_lead, 'N') = 'Y';\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_cnt := 0;\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error fetching the existing coinsurers...');\n            END;\n\n            IF NVL (v_cnt, 0) > 1\n            THEN\n                raise_error (\n                    'You cannot have more than one coinsurance leader on a transaction...');\n            END IF;\n        END IF;\n\n        IF v_aga_code IS NOT NULL\n        THEN\n            SELECT aga_sht_desc\n              INTO v_aga_sht_desc\n              FROM tqc_agency_accounts\n             WHERE aga_code = v_aga_code;\n        END IF;\n\n        BEGIN\n            UPDATE gin_coinsurers\n               SET coin_lead = NVL (v_leader, coin_lead),\n                   coin_perct = v_perc,              --NVL(v_perc,COIN_PERCT),\n                   coin_fee_rate = v_fee_rate, --NVL(v_fee_rate,COIN_FEE_RATE)\n                   coin_aga_code = v_aga_code,\n                   coin_aga_sht_desc = v_aga_sht_desc,\n                   coin_coinsurers_polno = v_policy_no,\n                   coin_force_sf_compute = v_force_compute,\n                   coin_optional_comm = v_coin_optional_comm,\n                   coin_comm_rate = v_comm_rate,\n                   coin_comm_type = v_comm_type,\n                   COIN_FAC_CESSION = v_COIN_FAC_CESSION,\n                   COIN_FAC_PC = v_COIN_FAC_PC\n             WHERE     coin_agnt_agent_code = v_agent_code\n                   AND coin_pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error updating coinsurance details....');\n        END;\n\n        BEGIN\n            UPDATE gin_policies\n               SET pol_prem_computed = 'N'\n             WHERE pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error updating policy premium status to changed');\n        END;\n\n        BEGIN\n            SELECT SUM (NVL (coin_perct, 0))\n              INTO v_coin_perct\n              FROM gin_coinsurers\n             WHERE coin_pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error determinig the total coinsurance percentage....');\n        END;\n\n        IF NVL (v_coin_perct, 0) + NVL (v_pol_coin_pct, 0) > 100\n        THEN\n            raise_error (\n                'Error:- Coinaurance percentages should not be more than 100....');\n        END IF;\n    END;",
        "update_ren_pol_coinsurers": "PROCEDURE update_ren_pol_coinsurers (\n        v_batch_no             IN NUMBER,\n        v_agent_code           IN NUMBER,\n        v_leader                  VARCHAR2,\n        v_perc                 IN NUMBER,\n        v_fee_rate             IN NUMBER,\n        v_policy_no            IN VARCHAR2,\n        v_pol_coin_policy_no   IN VARCHAR2 DEFAULT NULL,\n        v_force_compute        IN VARCHAR2,\n        v_comm_type            IN VARCHAR2 DEFAULT 'R',\n        v_COIN_FAC_CESSION     IN VARCHAR2 DEFAULT 'N',\n        v_COIN_FAC_PC          IN NUMBER DEFAULT NULL)\n    IS\n        v_pol_leader     VARCHAR2 (1);\n        v_pol_coin_pct   NUMBER;\n        v_coin_perct     NUMBER;\n        v_cnt            NUMBER;\n    BEGIN\n        BEGIN\n            SELECT pol_coinsure_leader, pol_coinsure_pct\n              INTO v_pol_leader, v_pol_coin_pct\n              FROM gin_ren_policies\n             WHERE pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error determining if the policy is for a leader....');\n        END;\n\n        IF NVL (v_leader, 'N') = 'Y'\n        THEN\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_cnt\n                  FROM gin_ren_coinsurers\n                 WHERE     coin_pol_batch_no = v_batch_no\n                       AND NVL (coin_lead, 'N') = 'Y';\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_cnt := 0;\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error fetching the existing coinsurers...');\n            END;\n\n            IF NVL (v_cnt, 0) > 0\n            THEN\n                BEGIN\n                    UPDATE gin_ren_coinsurers\n                       SET coin_lead = 'N'\n                     WHERE     NVL (coin_lead, 'N') = 'Y'\n                           AND coin_pol_batch_no = v_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error updating the previous coinsurance leader details....');\n                END;\n            --RAISE_ERROR('Error:- A coinsurance leader already exists. Please check....');\n            END IF;\n\n            IF NVL (v_pol_leader, 'N') = 'Y'\n            THEN\n                raise_error (\n                    'Error:- The policy belongs to the leader already. Please check....');\n            END IF;\n        END IF;\n\n        BEGIN\n            UPDATE gin_ren_coinsurers\n               SET coin_lead = NVL (v_leader, coin_lead),\n                   coin_perct = NVL (v_perc, coin_perct),\n                   coin_fee_rate = NVL (v_fee_rate, coin_fee_rate),\n                   coin_coinsurers_polno = v_policy_no,\n                   coin_force_sf_compute = v_force_compute,\n                   coin_comm_type = v_comm_type,\n                   COIN_FAC_CESSION = v_COIN_FAC_CESSION,\n                   COIN_FAC_PC = v_COIN_FAC_PC\n             WHERE     coin_agnt_agent_code = v_agent_code\n                   AND coin_pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error updating coinsurance details....');\n        END;\n\n        BEGIN\n            SELECT SUM (NVL (coin_perct, 0))\n              INTO v_coin_perct\n              FROM gin_ren_coinsurers\n             WHERE coin_pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error determinig the total coinsurance percentage....');\n        END;\n\n        IF NVL (v_coin_perct, 0) + NVL (v_pol_coin_pct, 0) > 100\n        THEN\n            raise_error (\n                'Error:- Coinaurance percentages should not be more than 100....');\n        END IF;\n    END;",
        "validate_coinsurers_dtls": "PROCEDURE validate_coinsurers_dtls (v_pol_batch_no IN NUMBER)\n    IS\n        v_pol_coin_share   NUMBER;\n        v_coin_perc        NUMBER;\n        v_coinsurance      VARCHAR2 (2);\n        v_pol_leader       VARCHAR2 (2);\n        v_leader_count     NUMBER;\n        v_sum              NUMBER;\n    BEGIN\n        BEGIN\n            SELECT pol_coinsurance_share,\n                   pol_coinsurance,\n                   pol_coinsure_leader\n              INTO v_pol_coin_share, v_coinsurance, v_pol_leader\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error fetching policy details...');\n        END;\n\n        IF NVL (v_coinsurance, 'N') = 'Y'\n        THEN\n            BEGIN\n                SELECT SUM (NVL (coin_perct, 0))\n                  INTO v_coin_perc\n                  FROM gin_coinsurers\n                 WHERE coin_pol_batch_no = v_pol_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error determining coinsurance total percentage....');\n            END;\n\n            IF NVL (v_pol_leader, 'N') = 'Y'\n            THEN\n                BEGIN\n                    SELECT COUNT (*)\n                      INTO v_leader_count\n                      FROM gin_coinsurers\n                     WHERE     coin_pol_batch_no = v_pol_batch_no\n                           AND NVL (coin_lead, 'N') = 'Y';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error determining coinsurance total percentage....');\n                END;\n\n                IF NVL (v_leader_count, 0) >= 1\n                THEN\n                    raise_error (\n                        'You cannot have more than one leader on a coinsurance policy. Please check...');\n                END IF;\n            ELSIF NVL (v_pol_leader, 'N') = 'N'\n            THEN\n                BEGIN\n                    SELECT COUNT (*)\n                      INTO v_leader_count\n                      FROM gin_coinsurers\n                     WHERE     coin_pol_batch_no = v_pol_batch_no\n                           AND NVL (coin_lead, 'N') = 'Y';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error determining coinsurance total percentage....');\n                END;\n\n                IF NVL (v_leader_count, 0) = 0\n                THEN\n                    raise_error (\n                        'No leader specified for this coinsurance policy. Please check...');\n                ELSIF NVL (v_leader_count, 0) > 1\n                THEN\n                    raise_error (\n                        'You cannot have more than one leader on a coinsurance policy. Please check...');\n                END IF;\n            END IF;\n\n            IF NVL (v_coin_perc, 0) + NVL (v_pol_coin_share, 0) > 100\n            THEN\n                v_sum := NVL (v_coin_perc, 0) + NVL (v_pol_coin_share, 0);\n                raise_error (\n                       'Error:- Coinsurance percentages cannot be greater than 100%=== '\n                    || v_sum);\n            ELSIF NVL (v_coin_perc, 0) + NVL (v_pol_coin_share, 0) < 100\n            THEN\n                raise_error (\n                    'Error:- Coinsurance percentages cannot be less than 100%... ');\n            END IF;\n        END IF;\n    END;\n\n    --",
        "update_mandatory_sections": "PROCEDURE update_mandatory_sections (\n        v_new_ipu_code    IN NUMBER,\n        v_scl_code        IN NUMBER,\n        v_bind_code       IN NUMBER,\n        v_covt_code       IN NUMBER,\n        v_limit           IN NUMBER,\n        v_cashback_only   IN VARCHAR2 DEFAULT 'N',\n        v_module          IN VARCHAR2 DEFAULT 'P')\n    IS\n        CURSOR mandatory_sections IS\n            SELECT DISTINCT sect_code, scvts_order, scvts_calc_group\n              FROM gin_premium_rates,\n                   gin_sections,\n                   gin_subcl_sections,\n                   gin_subcl_covt_sections\n             WHERE     prr_sect_code = sect_code\n                   AND sec_sect_code = prr_sect_code\n                   AND sec_scl_code = prr_scl_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND scvts_scl_code = v_scl_code\n                   AND scvts_covt_code = v_covt_code\n                   AND sect_code = scvts_sect_code\n                   AND NVL (scvts_mandatory, 'N') = 'Y';\n\n        CURSOR cashback_sections IS\n            SELECT DISTINCT sect_code\n              FROM gin_premium_rates,\n                   gin_sections,\n                   gin_subcl_sections,\n                   gin_subcl_covt_sections\n             WHERE     prr_sect_code = sect_code\n                   AND sec_sect_code = prr_sect_code\n                   AND sec_scl_code = prr_scl_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND scvts_scl_code = v_scl_code\n                   AND scvts_covt_code = v_covt_code\n                   AND sect_code = scvts_sect_code\n                   AND NVL (sect_type, 'SI') = 'CB';\n\n        v_ipu_cashback_appl    VARCHAR2 (5) := 'N';\n        v_ipu_cashback_level   NUMBER := 0;\n        v_row                  NUMBER;\n    BEGIN\n        BEGIN\n            SELECT NVL (ipu_cashback_appl, 'N'), NVL (ipu_cashback_level, 0)\n              INTO v_ipu_cashback_appl, v_ipu_cashback_level\n              FROM gin_insured_property_unds\n             WHERE ipu_code = v_new_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                NULL;\n        END;\n\n        BEGIN\n            SELECT COUNT (0) + 1\n              INTO v_row\n              FROM gin_policy_insured_limits\n             WHERE pil_ipu_code = v_new_ipu_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_row := 1;\n        END;\n\n\n        IF v_cashback_only = 'N'\n        THEN\n            FOR s IN mandatory_sections\n            LOOP\n                --                RAISE_ERROR (\n                --                       'v_new_ipu_code==='\n                --                    || v_new_ipu_code\n                --                    || '=v_scl_code='\n                --                    || v_scl_code\n                --                    || ' =v_bind_code='\n                --                    || v_bind_code\n                --                    || '=sect_code='\n                --                    || s.sect_code\n                --                    || '=v_covt_code='\n                --                    || v_covt_code\n                --                    || '=scvts_order='\n                --                    || s.scvts_order\n                --                    ||'=v_module='\n                --                    ||v_module);\n                gin_rsk_limits_stp (v_new_ipu_code,\n                                    v_scl_code,\n                                    v_bind_code,\n                                    s.sect_code,\n                                    v_covt_code,\n                                    s.scvts_order,\n                                    s.scvts_calc_group,\n                                    'A',\n                                    'UW',\n                                    NULL,\n                                    v_limit,\n                                    v_module);\n            END LOOP;\n        ELSE\n            IF v_ipu_cashback_appl = 'Y' AND v_ipu_cashback_level != 0\n            THEN\n                FOR s IN cashback_sections\n                LOOP\n                    gin_rsk_limits_stp (v_new_ipu_code,\n                                        v_scl_code,\n                                        v_bind_code,\n                                        s.sect_code,\n                                        v_covt_code,\n                                        v_row,\n                                        NULL,\n                                        'A',\n                                        'UW',\n                                        NULL,\n                                        v_limit,\n                                        v_module);\n                END LOOP;\n            END IF;\n        END IF;\n    END;",
        "pop_risk_sect_perils": "PROCEDURE pop_risk_sect_perils (v_ipu_code    IN NUMBER,\n                                    v_pil_code    IN NUMBER,\n                                    v_sect_code   IN NUMBER)\n    IS\n        v_bind_type   VARCHAR2 (1);\n        v_scl_code    NUMBER;\n        v_bind_code   NUMBER;\n        v_cvt_code    NUMBER;\n        v_batch_no    NUMBER;\n    BEGIN\n        BEGIN\n            SELECT ipu_sec_scl_code,\n                   ipu_bind_code,\n                   ipu_covt_code,\n                   ipu_pol_batch_no\n              INTO v_scl_code,\n                   v_bind_code,\n                   v_cvt_code,\n                   v_batch_no\n              FROM gin_insured_property_unds\n             WHERE ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error at risk dtls selection');\n        END;\n\n        INSERT INTO gin_pol_risk_section_perils (prspr_code,\n                                                 prspr_pol_batch_no,\n                                                 prspr_ipu_code,\n                                                 prspr_scl_code,\n                                                 prspr_sect_code,\n                                                 prspr_sect_sht_desc,\n                                                 prspr_per_code,\n                                                 prspr_per_sht_desc,\n                                                 prspr_mandatory,\n                                                 prspr_peril_limit,\n                                                 prspr_peril_type,\n                                                 prspr_si_or_limit,\n                                                 prspr_sec_code,\n                                                 prspr_excess_type,\n                                                 prspr_excess,\n                                                 prspr_excess_min,\n                                                 prspr_excess_max,\n                                                 prspr_expire_on_claim,\n                                                 prspr_bind_code,\n                                                 prspr_person_limit,\n                                                 prspr_claim_limit,\n                                                 prspr_desc,\n                                                 prspr_bind_type,\n                                                 prspr_sspr_code,\n                                                 prspr_depreciation_pct,\n                                                 prspr_salvage_pct,\n                                                 prspr_claim_excess_type,\n                                                 prspr_tl_excess_type,\n                                                 prspr_tl_excess,\n                                                 prspr_tl_excess_min,\n                                                 prspr_tl_excess_max,\n                                                 prspr_pl_excess_type,\n                                                 prspr_pl_excess,\n                                                 prspr_pl_excess_min,\n                                                 prspr_pl_excess_max,\n                                                 prspr_claim_excess_min,\n                                                 prspr_claim_excess_max,\n                                                 prspr_depend_loss_type,\n                                                 prspr_ttd_ben_pcts,\n                                                 prspr_ssprm_code,\n                                                 prspr_pil_code)\n            SELECT gin_pspr_code_seq.NEXTVAL,\n                   v_batch_no,\n                   v_ipu_code,\n                   ssprm_scl_code,\n                   ssprm_sect_code,\n                   ssprm_sect_sht_desc,\n                   ssprm_per_code,\n                   ssprm_per_sht_desc,\n                   sspr_mandatory,\n                   sspr_peril_limit,\n                   sspr_peril_type,\n                   sspr_si_or_limit,\n                   ssprm_sec_code,\n                   NVL (sspr_excess_type, 'P'),\n                   sspr_excess,\n                   sspr_excess_min,\n                   sspr_excess_max,\n                   sspr_expire_on_claim,\n                   ssprm_bind_code,\n                   sspr_person_limit,\n                   sspr_claim_limit,\n                   sspr_desc,\n                   ssprm_bind_type,\n                   sspr_code,\n                   NULL,\n                   sspr_salvage_pct,\n                   sspr_claim_excess_type,\n                   sspr_tl_excess_type,\n                   sspr_tl_excess,\n                   sspr_tl_excess_min,\n                   sspr_tl_excess_max,\n                   sspr_pl_excess_type,\n                   sspr_pl_excess,\n                   sspr_pl_excess_min,\n                   sspr_pl_excess_min,\n                   sspr_claim_excess_min,\n                   sspr_claim_excess_max,\n                   sspr_depend_loss_type,\n                   sspr_ttd_ben_pcts,\n                   ssprm_code,\n                   pil_code\n              FROM gin_subcl_sction_perils,\n                   gin_sections,\n                   gin_subcl_sction_perils_map,\n                   gin_subcl_covt_sections,\n                   gin_policy_insured_limits\n             WHERE     ssprm_per_type = 'S'\n                   AND sspr_code = ssprm_sspr_code\n                   AND sect_code = ssprm_sect_code\n                   AND scvts_scl_code = ssprm_scl_code\n                   AND scvts_covt_code = v_cvt_code\n                   AND sect_code = scvts_sect_code\n                   AND sect_code = v_sect_code\n                   AND ssprm_bind_code = v_bind_code\n                   AND pil_code = v_pil_code\n                   AND pil_sect_code = sect_code\n                   AND ssprm_code NOT IN (SELECT prspr_ssprm_code\n                                            FROM gin_pol_risk_section_perils\n                                           WHERE prspr_ipu_code = v_ipu_code);\n    END;",
        "pop_ren_risk_sect_perils": "PROCEDURE pop_ren_risk_sect_perils (v_ipu_code    IN NUMBER,\n                                        v_pil_code    IN NUMBER,\n                                        v_sect_code   IN NUMBER)\n    IS\n        v_bind_type   VARCHAR2 (1);\n        v_scl_code    NUMBER;\n        v_bind_code   NUMBER;\n        v_cvt_code    NUMBER;\n        v_batch_no    NUMBER;\n    BEGIN\n        BEGIN\n            SELECT ipu_sec_scl_code,\n                   ipu_bind_code,\n                   ipu_covt_code,\n                   ipu_pol_batch_no\n              INTO v_scl_code,\n                   v_bind_code,\n                   v_cvt_code,\n                   v_batch_no\n              FROM gin_ren_insured_property_unds\n             WHERE ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error at risk dtls selection');\n        END;\n\n        INSERT INTO gin_pol_ren_rsk_section_perils (prspr_code,\n                                                    prspr_pol_batch_no,\n                                                    prspr_ipu_code,\n                                                    prspr_scl_code,\n                                                    prspr_sect_code,\n                                                    prspr_sect_sht_desc,\n                                                    prspr_per_code,\n                                                    prspr_per_sht_desc,\n                                                    prspr_mandatory,\n                                                    prspr_peril_limit,\n                                                    prspr_peril_type,\n                                                    prspr_si_or_limit,\n                                                    prspr_sec_code,\n                                                    prspr_excess_type,\n                                                    prspr_excess,\n                                                    prspr_excess_min,\n                                                    prspr_excess_max,\n                                                    prspr_expire_on_claim,\n                                                    prspr_bind_code,\n                                                    prspr_person_limit,\n                                                    prspr_claim_limit,\n                                                    prspr_desc,\n                                                    prspr_bind_type,\n                                                    prspr_sspr_code,\n                                                    prspr_depreciation_pct,\n                                                    prspr_salvage_pct,\n                                                    prspr_claim_excess_type,\n                                                    prspr_tl_excess_type,\n                                                    prspr_tl_excess,\n                                                    prspr_tl_excess_min,\n                                                    prspr_tl_excess_max,\n                                                    prspr_pl_excess_type,\n                                                    prspr_pl_excess,\n                                                    prspr_pl_excess_min,\n                                                    prspr_pl_excess_max,\n                                                    prspr_claim_excess_min,\n                                                    prspr_claim_excess_max,\n                                                    prspr_depend_loss_type,\n                                                    prspr_ttd_ben_pcts,\n                                                    prspr_ssprm_code,\n                                                    prspr_pil_code)\n            SELECT gin_pspr_code_seq.NEXTVAL,\n                   v_batch_no,\n                   v_ipu_code,\n                   ssprm_scl_code,\n                   ssprm_sect_code,\n                   ssprm_sect_sht_desc,\n                   ssprm_per_code,\n                   ssprm_per_sht_desc,\n                   sspr_mandatory,\n                   sspr_peril_limit,\n                   sspr_peril_type,\n                   sspr_si_or_limit,\n                   ssprm_sec_code,\n                   NVL (sspr_excess_type, 'P'),\n                   sspr_excess,\n                   sspr_excess_min,\n                   sspr_excess_max,\n                   sspr_expire_on_claim,\n                   ssprm_bind_code,\n                   sspr_person_limit,\n                   sspr_claim_limit,\n                   sspr_desc,\n                   ssprm_bind_type,\n                   sspr_code,\n                   NULL,\n                   sspr_salvage_pct,\n                   sspr_claim_excess_type,\n                   sspr_tl_excess_type,\n                   sspr_tl_excess,\n                   sspr_tl_excess_min,\n                   sspr_tl_excess_max,\n                   sspr_pl_excess_type,\n                   sspr_pl_excess,\n                   sspr_pl_excess_min,\n                   sspr_pl_excess_min,\n                   sspr_claim_excess_min,\n                   sspr_claim_excess_max,\n                   sspr_depend_loss_type,\n                   sspr_ttd_ben_pcts,\n                   ssprm_code,\n                   pil_code\n              FROM gin_subcl_sction_perils,\n                   gin_sections,\n                   gin_subcl_sction_perils_map,\n                   gin_subcl_covt_sections,\n                   gin_ren_policy_insured_limits\n             WHERE     ssprm_per_type = 'S'\n                   AND sspr_code = ssprm_sspr_code\n                   AND sect_code = ssprm_sect_code\n                   AND scvts_scl_code = ssprm_scl_code\n                   AND scvts_covt_code = v_cvt_code\n                   AND sect_code = scvts_sect_code\n                   AND sect_code = v_sect_code\n                   AND ssprm_bind_code = v_bind_code\n                   AND pil_code = v_pil_code\n                   AND pil_ipu_code = v_ipu_code\n                   AND pil_sect_code = sect_code\n                   AND ssprm_code NOT IN\n                           (SELECT prspr_ssprm_code\n                              FROM gin_pol_ren_rsk_section_perils\n                             WHERE     prspr_ipu_code = v_ipu_code\n                                   AND prspr_pol_batch_no = v_batch_no);\n    --COMMIT;\n    END;",
        "gin_ipu_prc": "PROCEDURE gin_ipu_prc (v_batch_no          IN     NUMBER,\n                           v_trans_type        IN     VARCHAR2,\n                           v_pol_add_edit      IN     VARCHAR2,\n                           v_ipu_data          IN     web_risk_tab,\n                           v_user              IN     VARCHAR2,\n                           v_new_ipu_code         OUT NUMBER,\n                           v_renewal_area      IN     VARCHAR2,\n                           v_loaded            IN     VARCHAR2 DEFAULT 'N',\n                           v_ipu_ncd_cert_no   IN     VARCHAR2 DEFAULT NULL,\n                           v_del_sect          IN     VARCHAR2 DEFAULT NULL)\n    IS\n        v_cnt                       NUMBER;\n        v_new_polin_code            NUMBER;\n        v_uw_yr                     VARCHAR2 (1);\n        v_stp_code                  NUMBER;\n        v_wef_date                  DATE;\n        v_wet_date                  DATE;\n        v_cover_days                NUMBER;\n        v_bind_code                 NUMBER;\n        v_bind_name                 VARCHAR2 (100);\n        v_cert_no                   VARCHAR2 (35);\n        v_quz_sht_desc              VARCHAR2 (35);\n        --v_count                                NUMBER;\n        v_uw_trans                  VARCHAR2 (1);\n        v_ren_cnt                   NUMBER;\n        v_ipu_prev_status           VARCHAR2 (35);\n        v_ipu_prorata               VARCHAR2 (2);\n        v_cvt_install_type          gin_subclass_cover_types.sclcovt_install_type%TYPE;\n        v_cvt_max_installs          gin_subclass_cover_types.sclcovt_max_installs%TYPE;\n        v_cvt_pymt_install_pcts     gin_subclass_cover_types.sclcovt_pymt_install_pcts%TYPE;\n        v_cvt_install_periods       gin_subclass_cover_types.sclcovt_install_periods%TYPE;\n        v_pol_tot_instlmt           NUMBER;\n        v_pymnt_tot_instlmt         NUMBER;\n        v_install_pct               NUMBER;\n        v_ipu_id                    NUMBER;\n        v_cer_cnt                   NUMBER;\n        v_ct_code                   NUMBER;\n        v_error                     VARCHAR2 (200);\n        v_cer_cnt                   NUMBER;\n        v_ipu_id                    NUMBER;\n        v_install_period            NUMBER;\n        v_polc_code                 NUMBER;\n        v_risk_pymt_install_pcts    VARCHAR2 (50);\n        v_susp_reinst_type          VARCHAR2 (5);\n        v_suspend_wef               DATE;\n        v_suspend_wet               DATE;\n        v_new_pol_wet               DATE;\n        v_rsk_trans_type            VARCHAR2 (3);\n        v_pol_instal_wet            DATE;\n        v_wef                       DATE;\n        v_prev_install_period       NUMBER;\n        v_increment_by              NUMBER;\n        v_increment                 VARCHAR2 (2);\n        v_interface_type            VARCHAR2 (50);\n        v_cnt1                      NUMBER;\n        v_risk_id_format            VARCHAR2 (50);\n        v_risk_id_format_param      VARCHAR2 (50);\n        v_id_reg_no                 VARCHAR2 (50);\n        v_clnt_pin_no               VARCHAR2 (50);\n        v_ipu_covt_code             NUMBER;\n        v_clnt_passport_no          VARCHAR2 (50);\n        v_agent_code                NUMBER;\n        v_agn_pin                   VARCHAR2 (50);\n        v_max_exposure              NUMBER;\n        v_pol_status                VARCHAR2 (10);\n        v_enforce_covt_prem         VARCHAR2 (1);\n        v_covt_code                 NUMBER;\n        v_cvt_desc                  VARCHAR2 (4000);\n        v_cert_autogen              VARCHAR2 (1);\n        v_autopopltsections_param   VARCHAR2 (1);\n        v_agnt_agent_code           NUMBER;\n        v_franch_agn_code           NUMBER;\n        v_franch_act_code           NUMBER;\n        v_loaded_cert               NUMBER;\n        v_scl_motor_verify          VARCHAR2 (1);\n        v_driver_name               VARCHAR2 (100);\n        v_auto_populate_limits      VARCHAR2 (2);\n        v_error_msg                 VARCHAR2 (200);\n        v_quake_mandatory           VARCHAR2 (1);\n        v_claim_cnt                 NUMBER;\n        \n        CURSOR pol_cur IS\n            SELECT gin_policies.*,\n                   NVL (pro_expiry_period, 'Y')     pro_expiry_period,\n                   --NVL (pro_open_cover, 'N') pro_open_cover\n                   NVL (pol_open_cover, 'N')        pro_open_cover,\n                   NVL (pro_earthquake, 'N')        pro_earthquake,\n                   NVL (pro_moto_verfy, 'N')        pro_moto_verfy,\n                   NVL (pro_stp, 'N')               pro_stp,\n                   a.agn_act_code,\n                   b.agn_act_code                   mkt\n              FROM gin_policies,\n                   gin_products,\n                   tqc_agencies  a,\n                   tqc_agencies  b\n             WHERE     pro_code = pol_pro_code\n                   AND a.agn_code(+) = pol_agnt_agent_code\n                   AND pol_mktr_agn_code = b.agn_code(+)\n                   AND pol_batch_no = v_batch_no;\n\n        CURSOR pol_ren_cur IS\n            SELECT gin_ren_policies.*,\n                   NVL (pro_expiry_period, 'Y')     pro_expiry_period,\n                   NVL (pol_open_cover, 'N')        pro_open_cover,\n                   NVL (pro_moto_verfy, 'N')        pro_moto_verfy,\n                   NVL (pro_stp, 'N')               pro_stp\n              FROM gin_ren_policies, gin_products\n             WHERE pro_code = pol_pro_code AND pol_batch_no = v_batch_no;\n\n        CURSOR comm (v_scl_code        NUMBER,\n                     v_act_code        NUMBER,\n                     v_bind_code       NUMBER,\n                     v_lta_app         VARCHAR2,\n                     v_franch_agn_cd   NUMBER)\n        IS\n            SELECT trans_code,\n                   comm_act_code,\n                   trnt_code,\n                   DECODE (\n                       DECODE (trnt_code,\n                               'LTA-U', bind_lta_type,\n                               bind_comm_type),\n                       'B', 1,\n                       2)    order_type\n              FROM gin_trans_type,\n                   gin_transaction_types,\n                   gin_commissions,\n                   gin_binders\n             WHERE     trans_code = trnt_trans_code\n                   AND comm_trnt_code = trnt_code\n                   AND comm_trans_code = trans_code\n                   AND comm_bind_code = bind_code\n                   AND trnt_code NOT IN\n                           DECODE (NVL (v_lta_app, 'N'),\n                                   'N', 'LTA-U',\n                                   'Y', 'ALL')\n                   AND comm_trnt_code IN\n                           DECODE (NVL (v_franch_agn_cd, 0),\n                                   0, 'UC-U',\n                                   comm_trnt_code)\n                   AND comm_trnt_code NOT IN\n                           DECODE (NVL (v_franch_agn_cd, 0),\n                                   0, 'UNDIFINED',\n                                   'UC-U')\n                   AND comm_trnt_code NOT IN\n                           DECODE (NVL (v_franch_agn_cd, 0),\n                                   0, 'UNDIFINED',\n                                   'LTA-U')\n                   AND comm_scl_code = v_scl_code\n                   AND comm_act_code = v_act_code\n                   AND comm_bind_code = v_bind_code\n            UNION ALL\n            SELECT trans_code,\n                   comm_act_code,\n                   trnt_code,\n                   DECODE (\n                       DECODE (trnt_code,\n                               'LTA-U', bind_lta_type,\n                               bind_comm_type),\n                       'B', 1,\n                       2)    order_type\n              FROM gin_trans_type,\n                   gin_transaction_types,\n                   gin_commissions,\n                   gin_binders\n             WHERE     trans_code = trnt_trans_code\n                   AND comm_trnt_code = trnt_code\n                   AND comm_trans_code = trans_code\n                   AND comm_bind_code = bind_code\n                   AND trnt_code IN\n                           DECODE (NVL (v_lta_app, 'N'),\n                                   'N', 'LTA-U',\n                                   'Y', 'ALL')\n                   AND comm_trnt_code NOT IN\n                           DECODE (NVL (v_franch_agn_cd, 0),\n                                   0, 'UC-U',\n                                   comm_trnt_code)\n                   AND comm_trnt_code NOT IN\n                           DECODE (NVL (v_franch_agn_cd, 0),\n                                   0, 'UNDIFINED',\n                                   'UC-U')\n                   AND comm_trnt_code NOT IN\n                           DECODE (NVL (v_franch_agn_cd, 0),\n                                   0, 'UNDIFINED',\n                                   'LTA-U')\n                   AND comm_scl_code = v_scl_code\n                   AND comm_act_code = v_act_code\n                   AND comm_bind_code = v_bind_code;\n    BEGIN\n        SELECT gin_stp_code_seq.NEXTVAL INTO v_stp_code FROM DUAL;\n\n        IF v_ipu_data.COUNT = 0\n        THEN\n            raise_error ('No Risk data provided..');\n        END IF;\n\n        BEGIN\n            SELECT param_value\n              INTO v_autopopltsections_param\n              FROM gin_parameters\n             WHERE param_name = 'AUTO_POPLT_MAND_SECTIONS';\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_autopopltsections_param := 'Y';\n            WHEN OTHERS\n            THEN\n                v_autopopltsections_param := 'Y';\n        END;\n\n        BEGIN\n            SELECT param_value\n              INTO v_auto_populate_limits\n              FROM gin_parameters\n             WHERE param_name = 'AUTO_POPLT_LIMITS_OF_LIABILITY';\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_auto_populate_limits := 'Y';\n            WHEN OTHERS\n            THEN\n                v_auto_populate_limits := 'Y';\n        END;\n\n        IF v_trans_type != 'CO' AND NVL (v_pol_add_edit, 'N') != 'D'\n        THEN\n            FOR i IN 1 .. v_ipu_data.COUNT\n            LOOP\n                BEGIN\n                    SELECT scl_quake_region_required\n                      INTO v_quake_mandatory\n                      FROM gin_sub_classes\n                     WHERE scl_code = v_ipu_data (i).ipu_scl_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error checking if earth quake is mandatory for the subclass');\n                END;\n\n                IF     v_quake_mandatory = 'Y'\n                   AND v_ipu_data (i).ipu_quz_code IS NULL\n                THEN\n                    raise_error (\n                        'Quake/ Flood Zone is mandatory for this sub class. Please add the quake zone or check the setup!');\n                END IF;\n\n                IF v_ipu_data (i).ipu_quz_code IS NOT NULL\n                THEN\n                    BEGIN\n                        SELECT quz_sht_desc\n                          INTO v_quz_sht_desc\n                          FROM gin_quake_zones\n                         WHERE quz_code = v_ipu_data (i).ipu_quz_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error getting quake_zone');\n                    END;\n                END IF;\n\n                IF v_ipu_data (i).ipu_scl_code IS NOT NULL\n                THEN\n                    BEGIN\n                        SELECT scl_cert_autogen\n                          INTO v_cert_autogen\n                          FROM gin_sub_classes\n                         WHERE scl_code = v_ipu_data (i).ipu_scl_code;\n                    EXCEPTION\n                        WHEN NO_DATA_FOUND\n                        THEN\n                            v_cert_autogen := 'N';\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error getting autogen cert');\n                    END;\n                END IF;\n\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_loaded_cert\n                      FROM gin_returned_certificates\n                     WHERE     NVL (gnr_allocated, 'N') != 'Y'\n                           AND gnr_risk_id = v_ipu_data (i).ipu_property_id\n                           AND gnr_risk_note = v_ipu_data (i).ipu_risk_note\n                           AND NVL (gnr_processed, 'N') = 'Y';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_loaded_cert := 0;\n                END;\n\n                BEGIN\n                    SELECT pol_agnt_agent_code\n                      INTO v_agent_code\n                      FROM gin_policies\n                     WHERE pol_batch_no = v_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                               'Error Getting Agent Details .. '\n                            || v_batch_no\n                            || ' .. v_agent_code == '\n                            || v_agent_code);\n                END;\n\n                IF (v_agent_code IS NOT NULL OR NVL (v_agent_code, 0) != 0)\n                THEN\n                    BEGIN\n                        SELECT agn_pin\n                          INTO v_agn_pin\n                          FROM tqc_agencies\n                         WHERE agn_code = v_agent_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error Getting Agent Details');\n                    END;\n                END IF;\n\n                IF v_ipu_data (i).prp_code IS NOT NULL\n                THEN\n                    BEGIN\n                        SELECT clnt_id_reg_no, clnt_pin, clnt_passport_no\n                          INTO v_id_reg_no, v_clnt_pin_no, v_clnt_passport_no\n                          FROM tqc_clients\n                         WHERE clnt_code = v_ipu_data (i).prp_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error Getting Client Details');\n                    END;\n                END IF;\n\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_cnt1\n                      FROM gin_blacklist_item\n                     WHERE     (   bi_desc = v_ipu_data (i).ipu_property_id\n                                OR bi_desc = v_id_reg_no\n                                OR bi_desc = v_clnt_pin_no\n                                OR bi_desc = v_clnt_passport_no\n                                OR bi_desc = v_agn_pin)\n                           AND SYSDATE BETWEEN blt_wef\n                                           AND NVL (blt_wet, SYSDATE);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_cnt1 := 0;\n                END;\n\n                IF NVL (v_cnt1, 0) > 0\n                THEN\n                    raise_error ('Error Item Black Listed..');\n                END IF;\n\n                v_bind_code := v_ipu_data (i).ipu_bind_code;\n                v_bind_name := v_ipu_data (i).ipu_bind_desc;\n\n                IF v_trans_type = 'RN'\n                THEN\n                    BEGIN\n                        SELECT COUNT (*)\n                          INTO v_ren_cnt\n                          FROM gin_ren_policies\n                         WHERE pol_batch_no = v_batch_no;\n                    EXCEPTION\n                        WHEN NO_DATA_FOUND\n                        THEN\n                            v_ren_cnt := 0;\n                    END;\n\n                    IF NVL (v_ren_cnt, 0) > 0\n                    THEN\n                        v_uw_trans := 'N';\n                    ELSE\n                        BEGIN\n                            SELECT COUNT (*)\n                              INTO v_ren_cnt\n                              FROM gin_policies\n                             WHERE pol_batch_no = v_batch_no;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Error fetching renewal policy details...');\n                        END;\n\n                        v_uw_trans := 'Y';\n                    END IF;\n                END IF;\n\n                BEGIN\n                    SELECT scl_motor_verify\n                      INTO v_scl_motor_verify\n                      FROM gin_sub_classes\n                     WHERE scl_code = v_ipu_data (i).ipu_scl_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_scl_motor_verify := 'N';\n                END;\n\n                IF     NVL (v_ipu_data (i).ipu_add_edit, 'A') = 'A'\n                   AND NVL (v_renewal_area, 'N') = 'N'\n                THEN\n                    IF NVL (v_ipu_data (i).ipu_compute_max_exposure, 'N') =\n                       'N'\n                    THEN\n                        v_max_exposure := v_ipu_data (i).ipu_max_exposure;\n                    ELSE\n                        v_max_exposure := 0;\n                    END IF;\n\n                    SELECT pol_policy_status\n                      INTO v_pol_status\n                      FROM gin_policies\n                     WHERE pol_batch_no = v_batch_no;\n\n                    IF v_pol_status = 'NB'\n                    THEN\n                        v_enforce_covt_prem := 'Y';\n                    END IF;\n\n                    FOR pol_cur_rec IN pol_cur\n                    LOOP\n                        IF    NVL (pol_cur_rec.pol_binder_policy, 'N') = 'Y'\n                           OR NVL (pol_cur_rec.pro_open_cover, 'N') = 'Y'\n                        THEN\n                            v_uw_yr := 'R';\n                        ELSE\n                            v_uw_yr := 'P';\n                        END IF;\n\n                        v_risk_pymt_install_pcts :=\n                            NVL (v_ipu_data (i).ipu_pymt_install_pcts,\n                                 v_cvt_pymt_install_pcts);\n                        v_wef_date :=\n                            NVL (v_ipu_data (i).ipu_wef,\n                                 pol_cur_rec.pol_wef_dt);\n                        v_wet_date :=\n                            NVL (v_ipu_data (i).ipu_wet,\n                                 pol_cur_rec.pol_wet_dt);\n\n                        SELECT pro_interface_type\n                          INTO v_interface_type\n                          FROM gin_policies, gin_products\n                         WHERE     pol_pro_code = pro_code\n                               AND pol_batch_no = v_batch_no;\n\n                        IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'\n                        THEN\n                            v_install_period :=\n                                get_current_instal_period (\n                                    v_wef_date,\n                                    pol_cur_rec.pol_policy_cover_from,\n                                    pol_cur_rec.pol_policy_cover_to,\n                                    NVL (pol_cur_rec.pol_tot_instlmt, 0),\n                                    v_wef_date,\n                                    v_wet_date);\n                        END IF;\n\n                        v_pol_instal_wet :=\n                            NVL (pol_cur_rec.pol_paid_to_date, v_wet_date);\n                        get_risk_dates (\n                            v_ipu_data (i).ipu_scl_code,\n                            v_ipu_data (i).ipu_cvt_code,\n                            NVL (pol_cur_rec.pol_tot_instlmt, 0),\n                            NVL (pol_cur_rec.pro_expiry_period, 'Y'),\n                            pol_cur_rec.pol_policy_cover_from,\n                            pol_cur_rec.pol_policy_cover_to,\n                            'N',\n                            NULL,\n                            'N',\n                            v_susp_reinst_type,\n                            v_risk_pymt_install_pcts,\n                            v_wef_date,\n                            v_wet_date,\n                            v_install_period,\n                            v_cover_days,\n                            v_suspend_wef,\n                            v_suspend_wet,\n                            v_new_pol_wet,\n                            v_pol_instal_wet);\n\n                        v_wef := v_wef_date;\n\n                        IF     v_ipu_data (i).ipu_install_period IS NOT NULL\n                           AND v_install_period !=\n                               v_ipu_data (i).ipu_install_period\n                        THEN\n                            IF     v_install_period + 1 !=\n                                   v_ipu_data (i).ipu_install_period\n                               AND NVL (pol_cur_rec.pol_loaded, 'N') != 'Y'\n                            THEN\n                                raise_error (\n                                       'Value entered '\n                                    || v_ipu_data (i).ipu_install_period\n                                    || ' not allowed. Can only increment the current installment '\n                                    || v_install_period\n                                    || ' by one..');\n                            ELSE\n                                get_risk_dates (\n                                    v_ipu_data (i).ipu_scl_code,\n                                    v_ipu_data (i).ipu_cvt_code,\n                                    NVL (pol_cur_rec.pol_tot_instlmt, 0),\n                                    NVL (pol_cur_rec.pro_expiry_period, 'Y'),\n                                    pol_cur_rec.pol_policy_cover_from,\n                                    pol_cur_rec.pol_policy_cover_to,\n                                    'Y',\n                                    1,\n                                    'N',\n                                    v_susp_reinst_type,\n                                    v_risk_pymt_install_pcts,\n                                    v_wef_date,\n                                    v_wet_date,\n                                    v_install_period,\n                                    v_cover_days,\n                                    v_suspend_wef,\n                                    v_suspend_wet,\n                                    v_new_pol_wet,\n                                    v_pol_instal_wet);\n\n                                v_wef_date := v_wef;\n                            END IF;\n                        END IF;\n\n                        BEGIN\n                            IF v_pol_instal_wet !=\n                               pol_cur_rec.pol_paid_to_date\n                            THEN\n                                UPDATE gin_policies\n                                   SET pol_paid_to_date = v_pol_instal_wet\n                                 WHERE pol_batch_no = v_batch_no;\n                            END IF;\n                        END;\n\n                        BEGIN\n                            SELECT COUNT (1)\n                              INTO v_cnt\n                              FROM gin_policy_insureds\n                             WHERE     polin_pol_batch_no = v_batch_no\n                                   AND polin_prp_code =\n                                       v_ipu_data (i).prp_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Error checking if insured already exists');\n                        END;\n\n                        IF NVL (v_cnt, 0) = 0\n                        THEN\n                            BEGIN\n                                SELECT    TO_NUMBER (\n                                              TO_CHAR (SYSDATE, 'RRRR'))\n                                       || polin_code_seq.NEXTVAL\n                                  INTO v_new_polin_code\n                                  FROM DUAL;\n\n                                INSERT INTO gin_policy_insureds (\n                                                polin_code,\n                                                polin_pol_policy_no,\n                                                polin_pol_ren_endos_no,\n                                                polin_pol_batch_no,\n                                                polin_prp_code,\n                                                polin_new_insured)\n                                     VALUES (v_new_polin_code,\n                                             pol_cur_rec.pol_policy_no,\n                                             pol_cur_rec.pol_ren_endos_no,\n                                             v_batch_no,\n                                             v_ipu_data (i).prp_code,\n                                             'Y');\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    raise_error (\n                                        'ERROR SAVING INSURED DETAILS..');\n                            END;\n                        ELSE\n                            BEGIN\n                                SELECT polin_code\n                                  INTO v_new_polin_code\n                                  FROM gin_policy_insureds\n                                 WHERE     polin_pol_batch_no = v_batch_no\n                                       AND polin_prp_code =\n                                           v_ipu_data (i).prp_code;\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    raise_error (\n                                        'Error checking if insured already exists');\n                            END;\n                        END IF;\n\n                        IF pol_cur_rec.pol_policy_status = 'SP'\n                        THEN\n                            v_ipu_prorata := 'S';\n                        ELSE\n                            v_ipu_prorata :=\n                                NVL (v_ipu_data (i).ipu_prorata, 'P');\n                        END IF;\n\n                        IF v_wef_date NOT BETWEEN pol_cur_rec.pol_policy_cover_from\n                                              AND pol_cur_rec.pol_policy_cover_to\n                        THEN\n                            raise_error (\n                                   'The Risk cover dates provided must be within the policy cover periods. '\n                                || pol_cur_rec.pol_policy_cover_from\n                                || ' TO '\n                                || pol_cur_rec.pol_policy_cover_to);\n                        END IF;\n\n                        IF v_wet_date NOT BETWEEN pol_cur_rec.pol_policy_cover_from\n                                              AND pol_cur_rec.pol_policy_cover_to\n                        THEN\n                            raise_error (\n                                   'The Risk cover dates provided must be within the policy cover periods. '\n                                || pol_cur_rec.pol_policy_cover_from\n                                || ' TO '\n                                || pol_cur_rec.pol_policy_cover_to);\n                        END IF;\n\n                        IF v_ipu_data (i).ipu_suspend_wef != NULL\n                        THEN\n                            IF v_ipu_data (i).ipu_suspend_wef NOT BETWEEN v_wef_date\n                                                                      AND v_wet_date\n                            THEN\n                                raise_error (\n                                    'Risk Suspend Wef Date must be between Risk Dates..');\n                            END IF;\n                        END IF;\n\n                        IF v_ipu_data (i).ipu_suspend_wet != NULL\n                        THEN\n                            IF v_ipu_data (i).ipu_suspend_wet NOT BETWEEN v_wef_date\n                                                                      AND v_wet_date\n                            THEN\n                                raise_error (\n                                    'Risk Suspend Wet Date must be between Risk Dates..');\n                            END IF;\n                        END IF;\n\n                        IF v_ipu_data (i).ipu_suspend_wet <\n                           v_ipu_data (i).ipu_suspend_wef\n                        THEN\n                            raise_error (\n                                'Risk Suspend Wet Date Cannot be less than Risk Suspend Wef Date..');\n                        END IF;\n\n                        BEGIN\n                            SELECT COUNT (1)\n                              INTO v_cnt1\n                              FROM gin_blacklist_item\n                             WHERE bi_desc = v_ipu_data (i).ipu_property_id;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                v_cnt1 := 0;\n                        END;\n\n                        IF NVL (v_cnt1, 0) > 0\n                        THEN\n                            raise_error (\n                                   'Error.. Risk '\n                                || v_ipu_data (i).ipu_property_id\n                                || ' is Black Listed..');\n                        END IF;\n\n                        BEGIN\n                            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                                   || gin_ipu_code_seq.NEXTVAL\n                              INTO v_new_ipu_code\n                              FROM DUAL;\n\n                            INSERT INTO gin_schedule_mapping\n                                     VALUES (v_new_ipu_code,\n                                             -(v_ipu_data (i).gis_ipu_code),\n                                             v_batch_no);\n\n                            BEGIN\n                                SELECT pol_policy_status\n                                  INTO v_ipu_prev_status\n                                  FROM gin_policies\n                                 WHERE pol_batch_no =\n                                       pol_cur_rec.pol_prev_batch_no;\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    v_ipu_prev_status := 'NB';\n                            END;\n\n                            INSERT INTO gin_insured_property_unds (\n                                            ipu_code,\n                                            ipu_property_id,\n                                            ipu_item_desc,\n                                            ipu_qty,\n                                            ipu_value,\n                                            ipu_wef,\n                                            ipu_wet,\n                                            ipu_pol_policy_no,\n                                            ipu_pol_ren_endos_no,\n                                            ipu_pol_batch_no,\n                                            ipu_earth_quake_cover,\n                                            ipu_earth_quake_prem,\n                                            ipu_location,\n                                            ipu_polin_code,\n                                            ipu_sec_scl_code,\n                                            ipu_ncd_status,\n                                            ipu_related_ipu_code,\n                                            ipu_prorata,\n                                            ipu_gp,\n                                            ipu_fap,\n                                            ipu_prev_ipu_code,\n                                            ipu_ncd_level,\n                                            ipu_quz_code,\n                                            ipu_quz_sht_desc,\n                                            ipu_sht_desc,\n                                            ipu_id,\n                                            ipu_bind_code,\n                                            ipu_excess_rate,\n                                            ipu_excess_type,\n                                            ipu_excess_rate_type,\n                                            ipu_excess_min,\n                                            ipu_excess_max,\n                                            ipu_prereq_ipu_code,\n                                            ipu_escalation_rate,\n                                            ipu_comm_rate,\n                                            ipu_prev_batch_no,\n                                            ipu_cur_code,\n                                            ipu_relr_code,\n                                            ipu_relr_sht_desc,\n                                            ipu_pol_est_max_loss,\n                                            ipu_eff_wef,\n                                            ipu_eff_wet,\n                                            ipu_retro_cover,\n                                            ipu_retro_wef,\n                                            ipu_covt_code,\n                                            ipu_covt_sht_desc,\n                                            ipu_si_diff,\n                                            ipu_terr_code,\n                                            ipu_terr_desc,\n                                            ipu_from_time,\n                                            ipu_to_time,\n                                            ipu_mar_cert_no,\n                                            ipu_comp_retention,\n                                            ipu_gross_comp_retention,\n                                            ipu_com_retention_rate,\n                                            ipu_prp_code,\n                                            ipu_tot_endos_prem_dif,\n                                            ipu_tot_gp,\n                                            ipu_tot_value,\n                                            ipu_ri_agnt_com_rate,\n                                            ipu_cover_days,\n                                            ipu_bp,\n                                            ipu_prev_prem,\n                                            ipu_ri_agnt_comm_amt,\n                                            ipu_tot_fap,\n                                            ipu_max_exposure,\n                                            ipu_status,\n                                            ipu_uw_yr,\n                                            ipu_tot_first_loss,\n                                            ipu_accumulation_limit,\n                                            ipu_compute_max_exposure,\n                                            ipu_reinsure_amt,\n                                            ipu_paid_premium,\n                                            ipu_trans_count,\n                                            ipu_paid_tl,\n                                            ipu_inception_uwyr,\n                                            ipu_trans_eff_wet,\n                                            ipu_eml_based_on,\n                                            ipu_aggregate_limits,\n                                            ipu_rc_sht_desc,\n                                            ipu_rc_code,\n                                            ipu_survey_date,\n                                            ipu_item_details,\n                                            ipu_prev_tot_fap,\n                                            ipu_prev_fap,\n                                            ipu_prev_reinsure_amt,\n                                            ipu_free_limit,\n                                            ipu_fp,\n                                            ipu_conveyance_type,\n                                            ipu_endose_fap_or_bc,\n                                            ipu_mktr_com_rate,\n                                            ipu_prev_status,\n                                            ipu_ncd_cert_no,\n                                            ipu_install_period,\n                                            ipu_pymt_install_pcts,\n                                            ipu_susp_reinstmt_type,\n                                            ipu_cover_suspended,\n                                            ipu_suspend_wef,\n                                            ipu_suspend_wet,\n                                            ipu_post_retro_wet,\n                                            ipu_post_retro_cover,\n                                            ipu_previous_insurer,\n                                            ipu_enforce_cvt_min_prem,\n                                            ipu_eml_si,\n                                            ipu_cashback_appl,\n                                            ipu_cashback_level,\n                                            ipu_vehicle_model,\n                                            ipu_vehicle_make,\n                                            ipu_vehicle_model_code,\n                                            ipu_vehicle_make_code,\n                                            ipu_loc_town,\n                                            ipu_prop_address,\n                                            ipu_risk_note,\n                                            ipu_model_yr,\n                                            ipu_insured_driver,\n                                            ipu_validate_ucr,\n                                            ipu_ucr_code,\n                                            ipu_pip_code,\n                                            ipu_pip_pf_code,\n                                            ipu_survey_agnt_code,\n                                            ipu_maintenance_period_type,\n                                            ipu_maintenance_period,\n                                            ipu_marine_type)\n                                     VALUES (\n                                                TO_NUMBER (v_new_ipu_code), --IPU_CODE,\n                                                v_ipu_data (i).ipu_property_id,\n                                                --IPU_PROPERTY_ID,\n                                                v_ipu_data (i).ipu_desc, --IPU_ITEM_DESC,\n                                                NULL,               --IPU_QTY,\n                                                NULL,\n                                                --IPU_VALUE,\n                                                v_wef_date,         --IPU_WEF,\n                                                v_wet_date,         --IPU_WET,\n                                                pol_cur_rec.pol_policy_no,\n                                                --IPU_POL_POLICY_NO,\n                                                pol_cur_rec.pol_ren_endos_no,\n                                                --IPU_POL_REN_ENDOS_NO,\n                                                v_batch_no,\n                                                --IPU_POL_BATCH_NO,\n                                                NULL, --IPU_EARTH_QUAKE_COVER,\n                                                NULL,  --IPU_EARTH_QUAKE_PREM,\n                                                v_ipu_data (i).ipu_location,\n                                                --IPU_LOCATION,\n                                                v_new_polin_code,\n                                                --IPU_POLIN_CODE,\n                                                v_ipu_data (i).ipu_scl_code,\n                                                --IPU_SEC_SCL_CODE,\n                                                v_ipu_data (i).ipu_ncd_status,\n                                                --IPU_NCD_STATUS,\n                                                NULL,\n                                                --IPU_RELATED_IPU_CODE,\n                                                v_ipu_prorata,\n                                                --IPU_PRORATA,\n                                                NULL,                --IPU_GP,\n                                                NULL,               --IPU_FAP,\n                                                TO_NUMBER (v_new_ipu_code),\n                                                --ipu_prev_ipu_code,\n                                                v_ipu_data (i).ipu_ncd_lvl, --IPU_NCD_LEVEL,\n                                                v_ipu_data (i).ipu_quz_code, --IPU_QUZ_CODE,\n                                                v_quz_sht_desc,\n                                                --IPU_QUZ_SHT_DESC,\n                                                NULL,          --IPU_SHT_DESC,\n                                                   TO_NUMBER (\n                                                       TO_CHAR (SYSDATE,\n                                                                'RRRR'))\n                                                || gin_ipu_id_seq.NEXTVAL, --IPU_ID,\n                                                v_bind_code,\n                                                -- THIS IS ONLY APPLICABLE FOR BINDER POLICIES. CHECK THE BINDER LOV ON UND_QUERY TO ADD",
        "update_rsk_limits": "PROCEDURE update_rsk_limits (\n        v_new_ipu_code                IN NUMBER,\n        v_scl_code                    IN NUMBER,\n        v_bind_code                   IN NUMBER,\n        v_sect_code                   IN NUMBER,\n        v_limit                       IN NUMBER,\n        v_row                         IN NUMBER,\n        v_add_edit                    IN VARCHAR2,\n        v_rsk_sect_data               IN web_sect_tab,\n        v_pil_multiplier_rate         IN NUMBER DEFAULT NULL,\n        v_pil_multiplier_div_factor   IN NUMBER DEFAULT NULL,\n        v_trans_type                  IN VARCHAR2 DEFAULT NULL)\n    IS\n    BEGIN\n        --raise_error('v_trans_type '||v_trans_type);\n        IF v_trans_type = 'RN'\n        THEN\n            IF NVL (v_add_edit, 'A') = 'E'\n            THEN\n                BEGIN\n                    -- RAISE_ERROR('SUCCESS'||v_new_ipu_code);\n                    -- RAISE_ERROR('FREE LIMIT '||v_new_ipu_code||';'||v_rsk_sect_data (1).pil_code||';'||v_rsk_sect_data (1).pil_prem_rate);\n                    UPDATE gin_ren_policy_insured_limits\n                       SET --PIL_SECT_CODE=v_sect_code, PIL_SECT_SHT_DESC=v_sect_sht_desc,\n                           pil_limit_amt = v_rsk_sect_data (1).pil_limit_amt,\n                           pil_prem_rate = v_rsk_sect_data (1).pil_prem_rate,\n                           --                PIL_SECT_TYPE=v_sect_type,\n                           --                PIL_MIN_PREMIUM=NVL(v_rsk_sect_data(1).PIL_MIN_PREMIUM,v_prr_prem_minimum_amt),\n                           --                PIL_RATE_TYPE=v_prr_rate_type,\n                           --                PIL_RATE_DESC=v_prr_rate_desc,\n                           --                PIL_RATE_DIV_FACT=NVL(v_rsk_sect_data(1).PIL_RATE_DIV_FACT,v_prr_division_factor),\n                           --                PIL_MULTIPLIER_RATE=NVL(v_rsk_sect_data(1).PIL_MULTIPLIER_RATE,v_prr_multiplier_rate),\n                           --                PIL_MULTIPLIER_DIV_FACTOR=NVL(v_rsk_sect_data(1).PIL_MULTIPLIER_DIV_FACTOR,v_prr_multplier_div_fact),\n                           pil_row_num = v_rsk_sect_data (1).pil_row_num,\n                           --                PIL_COMPUTE =NVL(v_rsk_sect_data(1).PIL_COMPUTE,'Y'),\n                           --                PIL_DESC=NVL(v_rsk_sect_data(1).PIL_DESC, v_sect_desc),\n                           --                PIL_DUAL_BASIS=NVL(v_rsk_sect_data(1).PIL_DUAL_BASIS,'N'),\n                           pil_calc_group =\n                               v_rsk_sect_data (1).pil_calc_group,\n                           pil_multiplier_rate = v_pil_multiplier_rate,\n                           pil_multiplier_div_factor =\n                               v_pil_multiplier_div_factor\n                     --                PIL_PREM_AMT = (v_rsk_sect_data(1).PIL_PREM_AMT),\n                     --                PIL_COMMENT = v_rsk_sect_data(1).PIL_COMMENT,\n                     --                PIL_DECLARATION_SECTION=NVL(v_rsk_sect_data(1).PIL_DECLARATION_SECTION,'N'),\n                     --                PIL_FREE_LIMIT_AMT=v_rsk_sect_data(1).PIL_FREE_LIMIT_AMT,\n                     --                PIL_LIMIT_PRD=v_rsk_sect_data(1).PIL_LIMIT_PRD,\n                     --                PIL_PRORATA_FULL = NVL(v_rsk_sect_data(1).PIL_PRORATA_FULL, PIL_PRORATA_FULL),\n                     --                PIL_SI_LIMIT_TYPE =NVL(v_rsk_sect_data(1).PIL_SI_LIMIT_TYPE, PIL_SI_LIMIT_TYPE),\n                     --                PIL_SI_RATE  =NVL(v_rsk_sect_data(1).PIL_SI_RATE, PIL_SI_RATE),\n                     --                PIL_COVER_TYPE =NVL(v_rsk_sect_data(1).PIL_COVER_TYPE, PIL_COVER_TYPE)\n                     WHERE     pil_ipu_code = v_new_ipu_code\n                           AND pil_code = v_rsk_sect_data (1).pil_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error updating risk sections..');\n                END;\n            END IF;\n        ELSE\n            IF NVL (v_add_edit, 'A') = 'E'\n            THEN\n                BEGIN\n                    -- RAISE_ERROR('SUCCESS'||v_new_ipu_code);\n                    -- RAISE_ERROR('FREE LIMIT '||v_new_ipu_code||';'||v_rsk_sect_data (1).pil_code||';'||v_rsk_sect_data (1).pil_prem_rate);\n                    --  IF v_rsk_sect_data (1).PIL_SECT_TYPE='VA' THEN\n                    --               RAISE_ERROR('CHECK THIS='||v_rsk_sect_data (1).pil_calc_group||'SECT TYPE='||v_rsk_sect_data (1).PIL_SECT_TYPE);\n                    --END IF;\n                    UPDATE gin_policy_insured_limits\n                       SET --PIL_SECT_CODE=v_sect_code, PIL_SECT_SHT_DESC=v_sect_sht_desc,\n                           pil_limit_amt = v_rsk_sect_data (1).pil_limit_amt,\n                           pil_prem_rate = v_rsk_sect_data (1).pil_prem_rate,\n                           --                PIL_SECT_TYPE=v_sect_type,\n                           --                PIL_MIN_PREMIUM=NVL(v_rsk_sect_data(1).PIL_MIN_PREMIUM,v_prr_prem_minimum_amt),\n                           --                PIL_RATE_TYPE=v_prr_rate_type,\n                           --                PIL_RATE_DESC=v_prr_rate_desc,\n                           --                PIL_RATE_DIV_FACT=NVL(v_rsk_sect_data(1).PIL_RATE_DIV_FACT,v_prr_division_factor),\n                           --                PIL_MULTIPLIER_RATE=NVL(v_rsk_sect_data(1).PIL_MULTIPLIER_RATE,v_prr_multiplier_rate),\n                           --                PIL_MULTIPLIER_DIV_FACTOR=NVL(v_rsk_sect_data(1).PIL_MULTIPLIER_DIV_FACTOR,v_prr_multplier_div_fact),\n                           pil_row_num = v_rsk_sect_data (1).pil_row_num,\n                           --                PIL_COMPUTE =NVL(v_rsk_sect_data(1).PIL_COMPUTE,'Y'),\n                           --                PIL_DESC=NVL(v_rsk_sect_data(1).PIL_DESC, v_sect_desc),\n                           --                PIL_DUAL_BASIS=NVL(v_rsk_sect_data(1).PIL_DUAL_BASIS,'N'),\n                           pil_calc_group =\n                               v_rsk_sect_data (1).pil_calc_group,\n                           pil_multiplier_rate = v_pil_multiplier_rate,\n                           pil_multiplier_div_factor =\n                               v_pil_multiplier_div_factor\n                     --                PIL_PREM_AMT = (v_rsk_sect_data(1).PIL_PREM_AMT),\n                     --                PIL_COMMENT = v_rsk_sect_data(1).PIL_COMMENT,\n                     --                PIL_DECLARATION_SECTION=NVL(v_rsk_sect_data(1).PIL_DECLARATION_SECTION,'N'),\n                     --                PIL_FREE_LIMIT_AMT=v_rsk_sect_data(1).PIL_FREE_LIMIT_AMT,\n                     --                PIL_LIMIT_PRD=v_rsk_sect_data(1).PIL_LIMIT_PRD,\n                     --                PIL_PRORATA_FULL = NVL(v_rsk_sect_data(1).PIL_PRORATA_FULL, PIL_PRORATA_FULL),\n                     --                PIL_SI_LIMIT_TYPE =NVL(v_rsk_sect_data(1).PIL_SI_LIMIT_TYPE, PIL_SI_LIMIT_TYPE),\n                     --                PIL_SI_RATE  =NVL(v_rsk_sect_data(1).PIL_SI_RATE, PIL_SI_RATE),\n                     --                PIL_COVER_TYPE =NVL(v_rsk_sect_data(1).PIL_COVER_TYPE, PIL_COVER_TYPE)\n                     WHERE     pil_ipu_code = v_new_ipu_code\n                           AND pil_code = v_rsk_sect_data (1).pil_code;\n                --            EXCEPTION\n                --               WHEN OTHERS\n                --               THEN\n                --                  raise_error ('Error updating risk sections..');\n                END;\n\n                BEGIN\n                    UPDATE gin_policies\n                       SET pol_prem_computed = 'N'\n                     WHERE pol_batch_no = (SELECT ipu_pol_batch_no\n                                             FROM gin_insured_property_unds\n                                            WHERE ipu_code = v_new_ipu_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error updating policy premium status to changed');\n                END;\n            END IF;\n        END IF;\n    END;\n\n    --",
        "gin_rsk_limits_stp": "PROCEDURE gin_rsk_limits_stp (v_new_ipu_code   IN NUMBER,\n                                  v_scl_code       IN NUMBER,\n                                  v_bind_code      IN NUMBER,\n                                  v_sect_code      IN NUMBER,\n                                  v_covt_code      IN NUMBER,\n                                  v_row            IN NUMBER,\n                                  v_group          IN NUMBER,\n                                  v_add_edit       IN VARCHAR2,\n                                  v_renewal        IN VARCHAR2,\n                                  v_ncd_level      IN NUMBER,\n                                  v_limit          IN NUMBER DEFAULT NULL,\n                                  v_module         IN VARCHAR2 DEFAULT 'P')\n    IS\n        v_rsk_sect_data            web_sect_tab;\n        sect_cursor                SYS_REFCURSOR;\n        v_sect_sht_desc            gin_sections.sect_sht_desc%TYPE;\n        v_sec_code                 gin_sections.sect_code%TYPE;\n        v_sect_desc                gin_sections.sect_desc%TYPE;\n        v_sect_type                gin_sections.sect_type%TYPE;\n        v_type_desc                VARCHAR2 (100);\n        v_prr_rate_type            gin_premium_rates.prr_rate_type%TYPE;\n        v_prr_rate                 gin_premium_rates.prr_rate%TYPE;\n        v_terr_description         VARCHAR2 (100);\n        v_prr_prem_minimum_amt     gin_premium_rates.prr_prem_minimum_amt%TYPE;\n        v_prr_multiplier_rate      gin_premium_rates.prr_multiplier_rate%TYPE;\n        v_prr_division_factor      gin_premium_rates.prr_division_factor%TYPE;\n        v_prr_multplier_div_fact   gin_premium_rates.prr_multplier_div_fact%TYPE;\n        v_prr_rate_desc            gin_premium_rates.prr_rate_desc%TYPE;\n        v_prr_free_limit           gin_premium_rates.prr_free_limit%TYPE;\n        v_sec_declaration          gin_subcl_sections.sec_declaration%TYPE;\n        v_scvts_order              gin_subcl_covt_sections.scvts_order%TYPE;\n        v_prr_prorated_full        gin_premium_rates.prr_prorated_full%TYPE;\n        v_prr_si_limit_type        gin_premium_rates.prr_si_limit_type%TYPE;\n        v_prr_si_rate              gin_premium_rates.prr_si_rate%TYPE;\n        v_scvts_calc_group         gin_subcl_covt_sections.scvts_calc_group%TYPE;\n    BEGIN\n        --   RAISE_ERROR(v_scl_code||';;v_sect_code'||v_sect_code||'v_covt_code'||v_covt_code||'v_bind_code'||v_bind_code||'v_new_ipu_code'||v_new_ipu_code);\n        sect_cursor :=\n            gis_web_pkg.get_sections (v_scl_code,\n                                      v_covt_code,\n                                      v_bind_code,\n                                      v_sect_code,\n                                      v_new_ipu_code,\n                                      v_ncd_level);\n\n        LOOP\n            EXIT WHEN sect_cursor%NOTFOUND;\n\n            FETCH sect_cursor\n                INTO v_sect_sht_desc,\n                     v_sec_code,\n                     v_sect_desc,\n                     v_sect_type,\n                     v_type_desc,\n                     v_prr_rate_type,\n                     v_prr_rate,\n                     v_terr_description,\n                     v_prr_prem_minimum_amt,\n                     v_prr_multiplier_rate,\n                     v_prr_division_factor,\n                     v_prr_multplier_div_fact,\n                     v_prr_rate_desc,\n                     v_prr_free_limit,\n                     v_sec_declaration,\n                     v_scvts_order,\n                     v_prr_prorated_full,\n                     v_prr_si_limit_type,\n                     v_prr_si_rate,\n                     v_scvts_calc_group;\n\n            --RAISE_ERROR('v_sect_sht_desc ==== '||v_sect_sht_desc);\n            v_rsk_sect_data := web_sect_tab ();\n            v_rsk_sect_data.EXTEND (1);\n            v_rsk_sect_data (1) :=\n                web_sect_rec (NULL,\n                              v_new_ipu_code,\n                              v_sect_code,\n                              v_sect_sht_desc,\n                              v_scvts_calc_group,\n                              v_limit,                                 --NULL,\n                              v_prr_rate,\n                              NULL,\n                              v_prr_rate_type,\n                              v_sect_type,\n                              v_prr_prem_minimum_amt,\n                              NULL,\n                              v_prr_multiplier_rate,\n                              v_prr_multplier_div_fact,\n                              NULL,\n                              v_prr_division_factor,\n                              'Y',\n                              'N',\n                              0,\n                              v_sec_declaration,\n                              v_prr_free_limit,\n                              NULL,\n                              NULL,\n                              v_prr_prorated_full,\n                              NULL,\n                              v_sect_desc,\n                              v_prr_si_limit_type,\n                              v_prr_si_rate,\n                              NULL,\n                              NULL,\n                              NULL,\n                              NULL,\n                              NULL,\n                              NULL,\n                              NULL,\n                              NULL,\n                              NULL,\n                              'N',\n                              'A',\n                              NULL,\n                              NULL,\n                              NULL);\n        --RAISE_ERROR(v_rsk_sect_data.COUNT);\n        END LOOP;\n\n        IF NVL (v_module, 'P') = 'P'\n        THEN\n            IF v_renewal = 'RN'\n            THEN\n                gin_ren_rsk_limits (v_new_ipu_code,\n                                    v_scl_code,\n                                    v_bind_code,\n                                    v_sect_code,\n                                    NULL,\n                                    v_row,\n                                    'A',\n                                    v_rsk_sect_data);\n            ELSE\n                gin_rsk_limits (v_new_ipu_code,\n                                v_scl_code,\n                                v_bind_code,\n                                v_sect_code,\n                                NULL,\n                                v_row,\n                                'A',\n                                v_rsk_sect_data);\n            END IF;\n        ELSE\n            gin_quote_rsk_limits (v_new_ipu_code,\n                                  v_scl_code,\n                                  v_bind_code,\n                                  v_sect_code,\n                                  NULL,\n                                  v_row,\n                                  'A',\n                                  v_rsk_sect_data);\n        END IF;\n    END;",
        "gin_rsk_limits": "PROCEDURE gin_rsk_limits (v_new_ipu_code    IN NUMBER,\n                              v_scl_code        IN NUMBER,\n                              v_bind_code       IN NUMBER,\n                              v_sect_code       IN NUMBER,\n                              v_limit           IN NUMBER,\n                              v_row             IN NUMBER,\n                              v_add_edit        IN VARCHAR2,\n                              v_rsk_sect_data   IN web_sect_tab)\n    IS\n        v_sect_sht_desc            VARCHAR2 (30);\n        v_sect_desc                VARCHAR2 (80);\n        v_sect_type                VARCHAR2 (30);\n        v_type_desc                VARCHAR2 (30);\n        v_prr_rate_type            VARCHAR2 (10);\n        v_prr_rate                 NUMBER;\n        v_terr_description         VARCHAR2 (30);\n        v_prr_prem_minimum_amt     NUMBER;\n        v_prr_multiplier_rate      NUMBER;\n        v_prr_division_factor      NUMBER;\n        v_prr_multplier_div_fact   NUMBER;\n        v_prr_rate_desc            VARCHAR2 (30);\n        v_cnt                      NUMBER;\n        v_cover_days               NUMBER;\n        v_prrd_max_rate            NUMBER;\n        v_prrd_min_rate            NUMBER;\n        v_age                      NUMBER;\n        v_cur_code                 NUMBER;\n        v_rsk_travel_sect_data     gin_travel_stp_pkg.rsk_sect_tab;\n        v_batch_no                 NUMBER;\n        v_count                    NUMBER := 0;\n        v_dec_section              VARCHAR2 (5);\n        v_calc_group               NUMBER := 1;\n        v_calc_row                 NUMBER := 1;\n\n        CURSOR pil_cur (vsectcode       IN NUMBER,\n                        vbindcode       IN NUMBER,\n                        vsclcode        IN NUMBER,\n                        vrange          IN NUMBER,\n                        vfreg           IN VARCHAR2,\n                        v_cashbck_lvl   IN NUMBER)\n        IS\n            SELECT sect_sht_desc,\n                   sect_desc,\n                   sect_type,\n                   type_desc,\n                   prr_rate_type,\n                   prr_rate,\n                   terr_description,\n                   prr_prem_minimum_amt,\n                   prr_multiplier_rate,\n                   prr_division_factor,\n                   prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM (SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type NOT IN ('ND', 'CB')\n                           AND prr_rate_type IN ('FXD', 'RT')\n                           AND prr_type = 'N'\n                           AND NVL (prr_rate_freq_type, 'A') = vfreg\n                           AND NVL (vrange, 0) BETWEEN NVL (prr_range_from,\n                                                            0)\n                                                   AND NVL (prr_range_to, 0)\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND prr_type = 'N'\n                           AND sect_type NOT IN ('ND', 'CB')\n                           AND prr_rate_type IN ('SRG', 'RCU')\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_type = 'N'\n                           AND prr_scl_code = vsclcode\n                           AND sect_type NOT IN ('ND', 'CB')\n                           AND prr_rate_type = 'ARG'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'ND', 'NCD')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND prr_type = 'N'\n                           AND sect_type = 'ND'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'CB', 'CASHBACK')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND prr_type = 'N'\n                           AND NVL (prr_cashback_level, 0) = v_cashbck_lvl\n                           AND NVL (prr_cashback_appl, 'N') = 'Y'\n                           AND sect_type = 'CB');\n\n        v_freq                     VARCHAR2 (2);\n        v_range                    NUMBER;\n        v_alb_required             VARCHAR2 (2);\n        v_pol_status               VARCHAR2 (10);\n        v_cashback_lvl             NUMBER;\n        v_pil_code                 NUMBER;\n    BEGIN\n        BEGIN\n            SELECT DECODE (scl_alb_required,\n                           'Y', NVL (pol_freq_of_payment, 'A'),\n                           'A'),\n                   DECODE (\n                       scl_alb_required,\n                       'Y', gin_travel_stp_pkg.get_alb (TRUNC (SYSDATE),\n                                                        clnt_dob),\n                       DECODE (NVL (scl_use_cover_period_range, 'N'),\n                               'Y', (ipu_wet - ipu_wef),\n                               0)),\n                   scl_alb_required,\n                   pol_policy_status,\n                   DECODE (NVL (ipu_cashback_appl, 'N'),\n                           'Y', NVL (ipu_cashback_level, 0),\n                           0)\n              INTO v_freq,\n                   v_range,\n                   v_alb_required,\n                   v_pol_status,\n                   v_cashback_lvl\n              FROM gin_policies,\n                   gin_insured_property_unds,\n                   gin_sub_classes,\n                   tqc_clients\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND ipu_code = v_new_ipu_code\n                   AND clnt_code = ipu_prp_code\n                   AND ipu_sec_scl_code = scl_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_freq := 'A';\n            WHEN OTHERS\n            THEN\n                v_freq := 'A'; --RAISE_ERROR('Error fetching policy freq....');\n        END;\n\n        IF NVL (v_alb_required, 'N') = 'Y' AND NVL (v_range, 0) = 0\n        THEN\n            raise_error (\n                'Insured age is required for this subclass. Please define the insured age first....');\n        END IF;\n\n        BEGIN\n            --      RAISE_ERROR('sect code '||v_sect_code||'bind code '||v_bind_code||'scl code '||v_scl_code||';'||v_cashback_lvl);\n            OPEN pil_cur (v_sect_code,\n                          v_bind_code,\n                          v_scl_code,\n                          v_range,\n                          v_freq,\n                          v_cashback_lvl);\n\n            LOOP\n                EXIT WHEN pil_cur%NOTFOUND;\n\n                FETCH pil_cur\n                    INTO v_sect_sht_desc,\n                         v_sect_desc,\n                         v_sect_type,\n                         v_type_desc,\n                         v_prr_rate_type,\n                         v_prr_rate,\n                         v_terr_description,\n                         v_prr_prem_minimum_amt,\n                         v_prr_multiplier_rate,\n                         v_prr_division_factor,\n                         v_prr_multplier_div_fact,\n                         v_prr_rate_desc,\n                         v_prrd_max_rate,\n                         v_prrd_min_rate;\n            END LOOP;\n\n            --RAISE_ERROR('v_prrd_min_rate ==== '||v_prrd_min_rate);\n            CLOSE pil_cur;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                       'Error getting the premium rates for 1st section..'\n                    || v_sect_code\n                    || '-'\n                    || v_bind_code\n                    || '-'\n                    || v_scl_code);\n        END;\n\n        --raise_error('v_sect_sht_desc '||v_sect_code||' v_bind_code '||v_bind_code||' v_scl_code '||v_scl_code);\n        IF NVL (v_add_edit, 'A') = 'A'\n        THEN\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_cnt\n                  FROM gin_products,\n                       gin_product_sub_classes,\n                       gin_product_groups\n                 WHERE     pro_prg_code = prg_code\n                       AND pro_code = clp_pro_code\n                       AND prg_type = 'TRAVEL'\n                       AND clp_scl_code = v_scl_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            IF NVL (v_cnt, 0) = 0\n            THEN\n                BEGIN\n                    IF v_prr_rate_type IS NULL\n                    THEN\n                        raise_error (\n                            'Error getting Rate Type...Please specify rate type..0..');\n                    END IF;\n\n                    IF v_pol_status = 'DC'\n                    THEN\n                        raise_error (\n                            'You cannot add a section to a declaration...');\n                    END IF;\n\n\n                    BEGIN\n                        SELECT DISTINCT SCVTS_ORDER, SCVTS_CALC_GROUP\n                          INTO v_calc_row, v_calc_group\n                          FROM GIN_SUBCL_COVT_SECTIONS\n                         WHERE     SCVTS_SECT_CODE = v_sect_code\n                               AND SCVTS_SCL_CODE = v_scl_code\n                               AND SCVTS_COVT_CODE IN\n                                       (SELECT IPU_COVT_CODE\n                                          FROM GIN_INSURED_PROPERTY_UNDS\n                                         WHERE IPU_CODE = v_new_ipu_code);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            v_calc_group := 1;\n                            v_calc_row := 1;\n                    END;\n\n                    --raise_error ('v_new_ipu_code='||v_new_ipu_code);\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                           || gin_pil_code_seq.NEXTVAL\n                      INTO v_pil_code\n                      FROM DUAL;\n\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_comment,\n                                    pil_free_limit,\n                                    pil_limit_prd,\n                                    pil_prorata_full,\n                                    pil_si_limit_type,\n                                    pil_si_rate,\n                                    pil_cover_type,\n                                    pil_min_premium,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate,\n                                    pil_indem_prd,\n                                    pil_indem_fstprd,\n                                    pil_indem_fstprd_pct,\n                                    pil_indem_remprd_pct,\n                                    pil_eml_pct,\n                                    pil_top_loc_rate,\n                                    pil_top_loc_div_fact,\n                                    pil_firstloss,\n                                    pil_firstloss_amt_pcnt,\n                                    pil_firstloss_value)\n                             VALUES (\n                                        v_pil_code,\n                                        v_new_ipu_code,\n                                        v_sect_code,\n                                        v_sect_sht_desc,\n                                        NVL (v_rsk_sect_data (1).pil_desc,\n                                             v_sect_desc),\n                                        NVL (NVL (v_calc_row, v_row), 1),\n                                        NVL (\n                                            NVL (\n                                                v_calc_group,\n                                                v_rsk_sect_data (1).pil_calc_group),\n                                            1),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_limit_amt,\n                                            v_limit),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_prem_rate,\n                                            v_prr_rate),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_prem_amt,\n                                            0),\n                                        v_prr_rate_type,\n                                        v_prr_rate_desc,\n                                        v_sect_type,\n                                        v_prr_rate,\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_multiplier_rate,\n                                            v_prr_multiplier_rate),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_multiplier_div_factor,\n                                            v_prr_multplier_div_fact),\n                                        0,\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_rate_div_fact,\n                                            v_prr_division_factor),\n                                        --v_type_desc,\n                                        NVL (v_rsk_sect_data (1).pil_compute,\n                                             'Y'),\n                                        v_rsk_sect_data (1).pil_prd_type,\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_dual_basis,\n                                            'N'),\n                                        0,\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_declaration_section,\n                                            'N'),\n                                        0,\n                                        v_rsk_sect_data (1).pil_comment,\n                                        v_rsk_sect_data (1).pil_free_limit_amt,\n                                        v_rsk_sect_data (1).pil_limit_prd,\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_prorata_full,\n                                            'F'),\n                                        v_rsk_sect_data (1).pil_si_limit_type,\n                                        v_rsk_sect_data (1).pil_si_rate,\n                                        v_rsk_sect_data (1).pil_cover_type,\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_min_premium,\n                                            v_prr_prem_minimum_amt),\n                                        v_prrd_max_rate,\n                                        v_prrd_min_rate,\n                                        v_rsk_sect_data (1).pil_indem_prd,\n                                        v_rsk_sect_data (1).pil_indem_fstprd,\n                                        v_rsk_sect_data (1).pil_indem_fstprd_pct,\n                                        v_rsk_sect_data (1).pil_indem_remprd_pct,\n                                        v_rsk_sect_data (1).pil_eml_pct,\n                                        v_rsk_sect_data (1).pil_top_loc_rate,\n                                        v_rsk_sect_data (1).pil_top_loc_div_fact,\n                                        v_rsk_sect_data (1).pil_firstloss,\n                                        v_rsk_sect_data (1).pil_firstloss_amt_pcnt,\n                                        v_rsk_sect_data (1).pil_firstloss_value);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                               'Error inserting risk sections..'\n                            || v_sect_sht_desc);\n                END;\n\n                BEGIN\n                    pop_risk_sect_perils (v_new_ipu_code,\n                                          v_pil_code,\n                                          v_sect_code);\n                END;\n            ELSE\n                BEGIN\n                    SELECT pol_cur_code,\n                           NVL (\n                               ipu_cover_days,\n                               TO_NUMBER (\n                                     TO_DATE (ipu_wet, 'DD/MM/RRRR')\n                                   - TO_DATE (pol_policy_cover_from,\n                                              'DD/MM/RRRR')\n                                   + DECODE (NVL (pro_expiry_period, 'Y'),\n                                             'Y', 1,\n                                             0))),\n                           gin_travel_stp_pkg.get_alb (TRUNC (SYSDATE),\n                                                       clnt_dob),\n                           pol_batch_no\n                      INTO v_cur_code,\n                           v_cover_days,\n                           v_age,\n                           v_batch_no\n                      FROM gin_insured_property_unds,\n                           gin_policies,\n                           tqc_clients,\n                           gin_products\n                     WHERE     ipu_pol_batch_no = pol_batch_no\n                           AND pol_prp_code = clnt_code\n                           AND pro_code = pol_pro_code\n                           AND ipu_code = v_new_ipu_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                               'Error fetching risk details for '\n                            || v_new_ipu_code);\n                END;\n\n                v_rsk_travel_sect_data (1).pil_calc_group :=\n                    v_rsk_sect_data (1).pil_calc_group;\n                v_rsk_travel_sect_data (1).pil_limit_amt :=\n                    v_rsk_sect_data (1).pil_limit_amt;\n                v_rsk_travel_sect_data (1).pil_prem_rate :=\n                    v_rsk_sect_data (1).pil_prem_rate;\n                v_rsk_travel_sect_data (1).pil_prem_amt :=\n                    v_rsk_sect_data (1).pil_prem_amt;\n                v_rsk_travel_sect_data (1).pil_comment :=\n                    v_rsk_sect_data (1).pil_comment;\n                v_rsk_travel_sect_data (1).pil_multiplier_rate :=\n                    v_rsk_sect_data (1).pil_multiplier_rate;\n                v_rsk_travel_sect_data (1).pil_multiplier_div_factor :=\n                    v_rsk_sect_data (1).pil_multiplier_div_factor;\n                v_rsk_travel_sect_data (1).pil_rate_div_fact :=\n                    v_rsk_sect_data (1).pil_rate_div_fact;\n                v_rsk_travel_sect_data (1).pil_compute :=\n                    v_rsk_sect_data (1).pil_compute;\n                v_rsk_travel_sect_data (1).pil_dual_basis :=\n                    v_rsk_sect_data (1).pil_dual_basis;\n                v_rsk_travel_sect_data (1).pil_declaration_section :=\n                    v_rsk_sect_data (1).pil_declaration_section;\n                v_rsk_travel_sect_data (1).pil_free_limit_amt :=\n                    v_rsk_sect_data (1).pil_free_limit_amt;\n                v_rsk_travel_sect_data (1).pil_limit_prd :=\n                    v_rsk_sect_data (1).pil_limit_prd;\n                v_rsk_travel_sect_data (1).pil_sect_sht_desc :=\n                    v_rsk_sect_data (1).pil_sect_sht_desc;\n\n                --RAISE_ERROR(v_rsk_travel_sect_data (1).PIL_SECT_SHT_DESC);\n                BEGIN\n                    gin_travel_stp_pkg.process_stp_rsk_limits (\n                        v_new_ipu_code,\n                        v_scl_code,\n                        v_bind_code,\n                        v_sect_code,\n                        v_limit,\n                        NVL (v_row, 1),\n                        'A',\n                        v_cover_days,\n                        v_age,\n                        v_cur_code,\n                        v_rsk_travel_sect_data);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error Updating Risk Sections...');\n                END;\n\n                BEGIN\n                    gin_travel_stp_pkg.update_travel_sect_si (v_batch_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n            END IF;\n        ELSE\n            BEGIN\n                IF v_pol_status = 'DC'\n                THEN\n                    SELECT pil_declaration_section\n                      INTO v_dec_section\n                      FROM gin_policy_insured_limits\n                     WHERE pil_code = v_rsk_sect_data (1).pil_code;\n\n                    IF v_dec_section <> 'Y'\n                    THEN\n                        raise_error (\n                            'You cannot edit a non declaration section...');\n                    END IF;\n                END IF;\n\n                --RAISE_ERROR('RATE TYPE '||v_prr_rate_type||' NEW IPU CODE '||v_new_ipu_code||' PIL CODE'||v_rsk_sect_data (1).pil_code);\n                --RAISE_ERROR('FREE LIMIT '||v_new_ipu_code||';'||v_rsk_sect_data (1).pil_prem_rate||';'||v_prr_rate);\n                UPDATE gin_policy_insured_limits\n                   SET --PIL_SECT_CODE=v_sect_code, PIL_SECT_SHT_DESC=v_sect_sht_desc,\n                       pil_limit_amt =\n                           NVL (v_rsk_sect_data (1).pil_limit_amt, v_limit),\n                       pil_prem_rate =\n                           NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                v_prr_rate),\n                       pil_sect_type =\n                           NVL (v_rsk_sect_data (1).pil_sect_type,\n                                pil_sect_type),\n                       pil_min_premium =\n                           NVL (v_rsk_sect_data (1).pil_min_premium,\n                                v_prr_prem_minimum_amt),\n                       pil_rate_type =\n                           NVL (v_rsk_sect_data (1).pil_rate_type,\n                                pil_rate_type),\n                       pil_rate_desc = v_prr_rate_desc,\n                       pil_rate_div_fact =\n                           NVL (v_rsk_sect_data (1).pil_rate_div_fact,\n                                v_prr_division_factor),\n                       pil_multiplier_rate =\n                           NVL (v_rsk_sect_data (1).pil_multiplier_rate,\n                                v_prr_multiplier_rate),\n                       pil_multiplier_div_factor =\n                           NVL (\n                               v_rsk_sect_data (1).pil_multiplier_div_factor,\n                               v_prr_multplier_div_fact),\n                       pil_row_num = NVL (v_row, pil_row_num),\n                       pil_compute =\n                           NVL (v_rsk_sect_data (1).pil_compute, 'Y'),\n                       pil_desc =\n                           NVL (v_rsk_sect_data (1).pil_desc, v_sect_desc),\n                       pil_dual_basis =\n                           NVL (v_rsk_sect_data (1).pil_dual_basis, 'N'),\n                       pil_calc_group =\n                           NVL (v_rsk_sect_data (1).pil_calc_group, 1),\n                       pil_prem_amt = (v_rsk_sect_data (1).pil_prem_amt),\n                       pil_comment = v_rsk_sect_data (1).pil_comment,\n                       pil_declaration_section =\n                           NVL (v_rsk_sect_data (1).pil_declaration_section,\n                                'N'),\n                       pil_free_limit_amt =\n                           v_rsk_sect_data (1).pil_free_limit_amt,\n                       pil_free_limit =\n                           v_rsk_sect_data (1).pil_free_limit_amt,\n                       pil_limit_prd = v_rsk_sect_data (1).pil_limit_prd,\n                       pil_prorata_full =\n                           NVL (v_rsk_sect_data (1).pil_prorata_full,\n                                pil_prorata_full),\n                       pil_si_limit_type =\n                           NVL (v_rsk_sect_data (1).pil_si_limit_type,\n                                pil_si_limit_type),\n                       pil_si_rate =\n                           NVL (v_rsk_sect_data (1).pil_si_rate, pil_si_rate),\n                       pil_cover_type =\n                           NVL (v_rsk_sect_data (1).pil_cover_type,\n                                pil_cover_type),\n                       pil_prd_type = v_rsk_sect_data (1).pil_prd_type,\n                       pil_indem_prd = v_rsk_sect_data (1).pil_indem_prd,\n                       pil_indem_fstprd =\n                           v_rsk_sect_data (1).pil_indem_fstprd,\n                       pil_indem_fstprd_pct =\n                           v_rsk_sect_data (1).pil_indem_fstprd_pct,\n                       pil_indem_remprd_pct =\n                           v_rsk_sect_data (1).pil_indem_remprd_pct,\n                       pil_eml_pct = v_rsk_sect_data (1).pil_eml_pct,\n                       pil_top_loc_rate =\n                           v_rsk_sect_data (1).pil_top_loc_rate,\n                       pil_top_loc_div_fact =\n                           v_rsk_sect_data (1).pil_top_loc_div_fact,\n                       pil_firstloss = v_rsk_sect_data (1).pil_firstloss,\n                       pil_firstloss_amt_pcnt =\n                           v_rsk_sect_data (1).pil_firstloss_amt_pcnt,\n                       pil_firstloss_value =\n                           v_rsk_sect_data (1).pil_firstloss_value\n                 WHERE     pil_ipu_code = v_new_ipu_code\n                       AND pil_code = v_rsk_sect_data (1).pil_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error updating risk sections..');\n            END;\n        END IF;\n\n        BEGIN\n            UPDATE gin_policies\n               SET pol_prem_computed = 'N'\n             WHERE pol_batch_no = (SELECT ipu_pol_batch_no\n                                     FROM gin_insured_property_unds\n                                    WHERE ipu_code = v_new_ipu_code);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error updating policy premium status to changed');\n        END;\n    END;",
        "gin_ren_rsk_limits": "PROCEDURE gin_ren_rsk_limits (v_new_ipu_code    IN NUMBER,\n                                  v_scl_code        IN NUMBER,\n                                  v_bind_code       IN NUMBER,\n                                  v_sect_code       IN NUMBER,\n                                  v_limit           IN NUMBER,\n                                  v_row             IN NUMBER,\n                                  v_add_edit        IN VARCHAR2,\n                                  v_rsk_sect_data   IN web_sect_tab)\n    IS\n        v_sect_sht_desc            VARCHAR2 (30);\n        v_sect_desc                VARCHAR2 (80);\n        v_sect_type                VARCHAR2 (30);\n        v_type_desc                VARCHAR2 (30);\n        v_prr_rate_type            VARCHAR2 (10);\n        v_prr_rate                 NUMBER;\n        v_terr_description         VARCHAR2 (30);\n        v_prr_prem_minimum_amt     NUMBER;\n        v_prr_multiplier_rate      NUMBER;\n        v_prr_division_factor      NUMBER;\n        v_prr_multplier_div_fact   NUMBER;\n        v_prr_rate_desc            VARCHAR2 (30);\n\n        --       v_calc_group  NUMBER:=1;\n        --      v_calc_row  NUMBER:=1;\n\n        CURSOR pil_cur (vsectcode   IN NUMBER,\n                        vbindcode   IN NUMBER,\n                        vsclcode    IN NUMBER)\n        IS\n            SELECT sect_sht_desc,\n                   sect_desc,\n                   sect_type,\n                   type_desc,\n                   prr_rate_type,\n                   prr_rate,\n                   terr_description,\n                   prr_prem_minimum_amt,\n                   prr_multiplier_rate,\n                   prr_division_factor,\n                   prr_multplier_div_fact,\n                   prr_rate_desc\n              FROM (SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc                      sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')    type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate                       rate,\n                           '0'                            terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type = 'FXD'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type IN ('SRG', 'RCU')\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type != 'ND'\n                           AND prr_rate_type = 'ARG'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'ND', 'NCD')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type = 'ND');\n    BEGIN\n        BEGIN\n            OPEN pil_cur (v_sect_code, v_bind_code, v_scl_code);\n\n            LOOP\n                EXIT WHEN pil_cur%NOTFOUND;\n\n                FETCH pil_cur\n                    INTO v_sect_sht_desc,\n                         v_sect_desc,\n                         v_sect_type,\n                         v_type_desc,\n                         v_prr_rate_type,\n                         v_prr_rate,\n                         v_terr_description,\n                         v_prr_prem_minimum_amt,\n                         v_prr_multiplier_rate,\n                         v_prr_division_factor,\n                         v_prr_multplier_div_fact,\n                         v_prr_rate_desc;\n            END LOOP;\n\n            CLOSE pil_cur;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                       'Error getting the premium rates for 1st section..'\n                    || v_sect_code\n                    || '-'\n                    || v_bind_code\n                    || '-'\n                    || v_scl_code);\n        END;\n\n        IF NVL (v_add_edit, 'A') = 'A'\n        THEN\n            BEGIN\n                --           begin\n                --               select DISTINCT SCVTS_ORDER,SCVTS_CALC_GROUP\n                --\n                --                INTO v_calc_row,v_calc_group\n                --\n                --                from GIN_SUBCL_COVT_SECTIONS\n                --                where SCVTS_SECT_CODE=v_sect_code\n                --                and SCVTS_SCL_CODE=v_scl_code\n                --                AND SCVTS_COVT_CODE IN (\n                --                  SELECT  IPU_COVT_CODE\n                --                  FROM GIN_INSURED_PROPERTY_UNDS\n                --                  WHERE  IPU_CODE=v_new_ipu_code\n                --\n                --                );\n                --               EXCEPTION WHEN OTHERS THEN\n                --               v_calc_group :=1;\n                --               v_calc_row :=1;\n                --               end;\n\n                INSERT INTO gin_ren_policy_insured_limits (\n                                pil_code,\n                                pil_ipu_code,\n                                pil_sect_code,\n                                pil_sect_sht_desc,\n                                pil_desc,\n                                pil_row_num,\n                                pil_calc_group,\n                                pil_limit_amt,\n                                pil_prem_rate,\n                                pil_prem_amt,\n                                pil_rate_type,\n                                pil_rate_desc,\n                                pil_sect_type,\n                                pil_original_prem_rate,\n                                pil_multiplier_rate,\n                                pil_multiplier_div_factor,\n                                pil_annual_premium,\n                                pil_rate_div_fact,\n                                --PIL_DESC,\n                                pil_compute,\n                                pil_prd_type,\n                                pil_dual_basis,\n                                pil_prem_accumulation,\n                                pil_declaration_section,\n                                pil_annual_actual_prem,\n                                pil_comment,\n                                pil_free_limit,\n                                pil_limit_prd,\n                                pil_prorata_full,\n                                pil_si_limit_type,\n                                pil_si_rate,\n                                pil_cover_type,\n                                pil_min_premium,\n                                pil_firstloss,\n                                pil_firstloss_amt_pcnt,\n                                pil_firstloss_value)\n                         VALUES (\n                                       TO_CHAR (SYSDATE, 'RRRR')\n                                    || gin_pil_code_seq.NEXTVAL,\n                                    v_new_ipu_code,\n                                    v_sect_code,\n                                    v_sect_sht_desc,\n                                    NVL (v_rsk_sect_data (1).pil_desc,\n                                         v_sect_desc),\n                                    NVL (v_row, 1),\n                                    NVL (v_rsk_sect_data (1).pil_calc_group,\n                                         1),\n                                    --                          NVL (nvl(v_calc_row,v_row), 1),\n                                    --                           NVL (NVL(v_calc_group,v_rsk_sect_data (1).pil_calc_group), 1),\n                                    NVL (v_rsk_sect_data (1).pil_limit_amt,\n                                         v_limit),\n                                    NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                         v_prr_rate),\n                                    NVL (v_rsk_sect_data (1).pil_prem_amt, 0),\n                                    v_prr_rate_type,\n                                    v_prr_rate_desc,\n                                    v_sect_type,\n                                    v_prr_rate,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_multiplier_rate,\n                                        v_prr_multiplier_rate),\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_multiplier_div_factor,\n                                        v_prr_multplier_div_fact),\n                                    0,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_rate_div_fact,\n                                        v_prr_division_factor),\n                                    --v_type_desc,\n                                    NVL (v_rsk_sect_data (1).pil_compute,\n                                         'Y'),\n                                    NULL,\n                                    NVL (v_rsk_sect_data (1).pil_dual_basis,\n                                         'N'),\n                                    0,\n                                    NVL (\n                                        v_rsk_sect_data (1).pil_declaration_section,\n                                        'N'),\n                                    0,\n                                    v_rsk_sect_data (1).pil_comment,\n                                    v_rsk_sect_data (1).pil_free_limit_amt,\n                                    v_rsk_sect_data (1).pil_limit_prd,\n                                    v_rsk_sect_data (1).pil_prorata_full,\n                                    v_rsk_sect_data (1).pil_si_limit_type,\n                                    v_rsk_sect_data (1).pil_si_rate,\n                                    v_rsk_sect_data (1).pil_cover_type,\n                                    NVL (v_rsk_sect_data (1).pil_min_premium,\n                                         v_prr_prem_minimum_amt),\n                                    v_rsk_sect_data (1).pil_firstloss,\n                                    v_rsk_sect_data (1).pil_firstloss_amt_pcnt,\n                                    v_rsk_sect_data (1).pil_firstloss_value);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error inserting risk sections..');\n            END;\n        ELSE\n            BEGIN\n                UPDATE gin_ren_policy_insured_limits\n                   SET --PIL_SECT_CODE=v_sect_code, PIL_SECT_SHT_DESC=v_sect_sht_desc,\n                       pil_limit_amt =\n                           NVL (v_rsk_sect_data (1).pil_limit_amt, v_limit),\n                       pil_prem_rate =\n                           NVL (v_rsk_sect_data (1).pil_prem_rate,\n                                v_prr_rate),\n                       pil_sect_type = v_sect_type,\n                       pil_min_premium = v_prr_prem_minimum_amt,\n                       pil_rate_type = v_prr_rate_type,\n                       pil_rate_desc = v_prr_rate_desc,\n                       pil_rate_div_fact =\n                           NVL (v_rsk_sect_data (1).pil_rate_div_fact,\n                                v_prr_division_factor),\n                       pil_multiplier_rate =\n                           NVL (v_rsk_sect_data (1).pil_multiplier_rate,\n                                v_prr_multiplier_rate),\n                       pil_multiplier_div_factor =\n                           NVL (\n                               v_rsk_sect_data (1).pil_multiplier_div_factor,\n                               v_prr_multplier_div_fact),\n                       pil_row_num = NVL (v_row, pil_row_num),\n                       pil_compute =\n                           NVL (v_rsk_sect_data (1).pil_compute, 'Y'),\n                       pil_desc =\n                           NVL (v_rsk_sect_data (1).pil_desc, v_sect_desc),\n                       pil_dual_basis =\n                           NVL (v_rsk_sect_data (1).pil_dual_basis, 'N'),\n                       pil_calc_group =\n                           NVL (v_rsk_sect_data (1).pil_calc_group, 1),\n                       pil_prem_amt =\n                           NVL (v_rsk_sect_data (1).pil_prem_amt, 0),\n                       pil_comment = v_rsk_sect_data (1).pil_comment,\n                       pil_declaration_section =\n                           NVL (v_rsk_sect_data (1).pil_declaration_section,\n                                'N'),\n                       pil_free_limit_amt =\n                           v_rsk_sect_data (1).pil_free_limit_amt,\n                       pil_limit_prd = v_rsk_sect_data (1).pil_limit_prd,\n                       pil_prorata_full =\n                           NVL (v_rsk_sect_data (1).pil_prorata_full,\n                                pil_prorata_full),\n                       pil_firstloss = v_rsk_sect_data (1).pil_firstloss,\n                       pil_firstloss_amt_pcnt =\n                           v_rsk_sect_data (1).pil_firstloss_amt_pcnt,\n                       pil_firstloss_value =\n                           v_rsk_sect_data (1).pil_firstloss_value\n                 WHERE     pil_ipu_code = v_new_ipu_code\n                       AND pil_code = v_rsk_sect_data (1).pil_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error updating risk sections..');\n            END;\n        END IF;\n\n        BEGIN\n            UPDATE gin_ren_policies\n               SET pol_prem_computed = 'N'\n             WHERE pol_batch_no = (SELECT ipu_pol_batch_no\n                                     FROM gin_insured_property_unds\n                                    WHERE ipu_code = v_new_ipu_code);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error updating policy premium status to changed');\n        END;\n    END;",
        "import_data": "PROCEDURE import_data (v_brn_code        IN     NUMBER,\n                           v_brn_sht_desc    IN     VARCHAR2,\n                           v_fxd_exch_rate   IN     VARCHAR2,\n                           v_psd_code        IN     NUMBER DEFAULT NULL,\n                           v_tot_rec            OUT NUMBER,\n                           v_success            OUT NUMBER)\n    IS\n        v_cnt             NUMBER;\n        v_prp_code        NUMBER;\n        v_sect_code       NUMBER;\n        v_sect_desc       VARCHAR2 (35);\n        v_pol_tab         gin_stp_pkg.policy_tab;\n        v_rsk_tab         gin_stp_pkg.risk_tab;\n        v_cur_code        NUMBER;\n        v_cur_symbol      VARCHAR2 (35);\n        v_agent_code      NUMBER;\n        v_agnt_sht_desc   VARCHAR2 (35);\n        v_errmsg          VARCHAR2 (400);\n        v_pol_batch_no    NUMBER;\n\n        --v_user        VARCHAR2(35):=Pkg_Global_Vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');\n        CURSOR cur_recs IS\n            SELECT *\n              FROM gin_pol_stp_data\n             WHERE     NVL (psd_transfered, 'N') != 'Y'\n                   AND psd_code =\n                       DECODE (NVL (v_psd_code, 0),\n                               0, psd_code,\n                               NVL (v_psd_code, 0));\n    --CURSOR cur_clnts(vpsd_agnt_client_id IN NUMBER) IS SELECT * FROM GIN_POL_STP_CLNT_DATA WHERE PSC_AGNT_CLNT_ID = vpsd_agnt_client_id;\n    BEGIN\n        v_tot_rec := 0;\n        v_success := 0;\n\n        FOR crecs IN cur_recs\n        LOOP\n            v_tot_rec := NVL (v_tot_rec, 0) + 1;\n\n            BEGIN\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_cnt\n                      FROM gin_pol_stp_clnt_data\n                     WHERE psc_agnt_clnt_id = crecs.psd_agnt_client_id;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_errmsg :=\n                            'Error retrieving insured details..' || SQLERRM;\n                        raise_application_error (-20001, v_errmsg);\n                END;\n\n                IF NVL (v_cnt, 0) = 0\n                THEN\n                    IF crecs.psd_gis_clnt_code IS NOT NULL\n                    THEN\n                        v_prp_code := crecs.psd_gis_clnt_code;\n                    ELSE\n                        v_errmsg := 'Client data not provided..';\n                        raise_application_error (-20001, v_errmsg);\n                    END IF;\n                ELSIF NVL (v_cnt, 0) = 1\n                THEN\n                    IF crecs.psd_gis_clnt_code IS NOT NULL\n                    THEN\n                        v_prp_code := crecs.psd_gis_clnt_code;\n                    ELSE\n                        BEGIN\n                            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YY'))\n                                   || tqc_clnt_code_seq.NEXTVAL\n                              INTO v_prp_code\n                              FROM DUAL;\n\n                            INSERT INTO tqc_clients (clnt_code,\n                                                     clnt_pin,\n                                                     clnt_sht_desc,\n                                                     clnt_postal_addrs,\n                                                     --PRP_COUNTRY,\n                                                     clnt_other_names,\n                                                     clnt_surname,\n                                                     clnt_id_reg_no,\n                                                     clnt_wef,\n                                                     -- PRP_DONE_BY,\n\n                                                     --PRP_TOWN,\n                                                     clnt_zip_code,\n                                                     clnt_tel,\n                                                     clnt_tel2,\n                                                     clnt_fax)\n                                SELECT v_prp_code,\n                                       NULL,\n                                       psc_sht_desc,\n                                       psc_post_add,\n                                       --    NVL(PSC_COUNTRY,'KENYA'),\n                                       psc_other_names,\n                                       psc_surname,\n                                       NULL,\n                                       TRUNC (SYSDATE),              --v_user,\n                                       --PSC_TOWN,\n                                       psc_postal_code,\n                                       psc_tel1,\n                                       psc_tel2,\n                                       psc_fax\n                                  FROM gin_pol_stp_clnt_data\n                                 WHERE psc_agnt_clnt_id =\n                                       crecs.psd_agnt_client_id;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                v_errmsg :=\n                                    'Error creating the client..' || SQLERRM;\n                                raise_application_error (-20001, v_errmsg);\n                        END;\n                    END IF;\n                ELSIF NVL (v_cnt, 0) > 1\n                THEN\n                    v_errmsg := 'More than one record for Client provided..';\n                    raise_application_error (-20001, v_errmsg);\n                END IF;\n\n                BEGIN\n                    SELECT agn_code, agn_sht_desc\n                      INTO v_agent_code, v_agnt_sht_desc\n                      FROM tqc_agencies\n                     WHERE agn_code = 0;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_errmsg :=\n                               'Error getting Direct Business defaults.'\n                            || SQLERRM;\n                        raise_application_error (-20001, v_errmsg);\n                END;\n\n                BEGIN\n                    SELECT cur_code, cur_symbol\n                      INTO v_cur_code, v_cur_symbol\n                      FROM tqc_currencies\n                     WHERE cur_symbol = crecs.psd_currency;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_errmsg :=\n                            'Error determining currency defined.' || SQLERRM;\n                        raise_application_error (-20001, v_errmsg);\n                END;\n\n                BEGIN\n                    v_pol_tab (1).pol_policy_no := crecs.psd_agnt_policy_id;\n                    v_pol_tab (1).pol_endos_no := NULL;\n                    v_pol_tab (1).pol_batch_no := NULL;\n                    v_pol_tab (1).pol_agnt_agent_code := v_agent_code;\n                    v_pol_tab (1).pol_agnt_sht_desc := v_agnt_sht_desc;\n                    v_pol_tab (1).pol_bind_code := NULL;\n                    v_pol_tab (1).pol_wef_dt :=\n                        TO_DATE (crecs.psd_wef, 'DD/MM/RRRR');\n                    --crecs.PSD_WEF;\n                    v_pol_tab (1).pol_wet_dt :=\n                        TO_DATE (crecs.psd_wet, 'DD/MM/RRRR');\n                    --crecs.PSD_WET;\n                    v_pol_tab (1).pol_status := 'NB';\n                    v_pol_tab (1).pol_cur_code := v_cur_code;\n                    v_pol_tab (1).pol_policy_type := 'N';\n                    v_pol_tab (1).pol_brn_code := v_brn_code;\n                    v_pol_tab (1).pol_cur_rate := crecs.psd_exch_rate;\n                    v_pol_tab (1).pol_coinsurance := 'N';\n                    v_pol_tab (1).pol_coinsure_leader := NULL;\n                    v_pol_tab (1).pol_cur_symbol := v_cur_symbol;\n                    v_pol_tab (1).pol_brn_sht_desc := v_brn_sht_desc;\n                    v_pol_tab (1).pol_prp_code := v_prp_code;\n                    v_pol_tab (1).pol_pro_code := crecs.psd_pro_code;\n                    v_pol_tab (1).pol_your_ref := 'Web data';\n                    v_pol_tab (1).pol_prop_holding_co_prp_code := NULL;\n                    v_pol_tab (1).pol_oth_int_parties := NULL;\n                    v_pol_tab (1).pol_pro_sht_desc := crecs.psd_product;\n                    v_pol_tab (1).pol_binder_policy := 'N';\n                    v_pol_tab (1).pol_coinsurance_share := NULL;\n                    v_pol_tab (1).pol_ri_agent_comm_rate := NULL;\n                    v_pol_tab (1).pol_ri_agnt_sht_desc := NULL;\n                    v_pol_tab (1).pol_ri_agnt_agent_code := NULL;\n                    v_pol_tab (1).pol_policy_doc := NULL;\n                    v_pol_tab (1).pol_commission_allowed := 'N';\n                    --v_pol_tab(1).POL_INTRO_CODE := NULL;\n                    v_pol_tab (1).pol_renewable := 'Y';\n                    v_pol_tab (1).pol_short_period := 'N';\n                --v_pol_tab(1).POL_EXCH_RATE_FIXED := v_fxd_exch_rate;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_errmsg :=\n                            'Error assigning data imported' || SQLERRM;\n                        raise_application_error (-20001, v_errmsg);\n                END;\n\n                BEGIN\n                    SELECT bets_sect_code, sect_sht_desc\n                      INTO v_sect_code, v_sect_desc\n                      FROM gin_bndr_excl_temp_sects,\n                           gin_sections,\n                           gin_subcl_sections\n                     WHERE     bets_sect_code = sect_code\n                           AND sec_sect_code = sect_code\n                           AND sec_scl_code = crecs.psd_scl_code\n                           AND bets_scl_code = crecs.psd_scl_code\n                           AND bets_covt_code = crecs.psd_cvt_code\n                           AND bets_bind_code = crecs.psd_bind_code\n                           AND bets_excl_tmp_col = 1;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_errmsg :=\n                               'Section mapping not defined for this subclass..'\n                            || SQLERRM;\n                        raise_application_error (-20001, v_errmsg);\n                END;\n\n                BEGIN\n                    v_rsk_tab (1).ipu_property_id := crecs.psd_property_id;\n                    v_rsk_tab (1).ipu_desc := crecs.psd_risk_desc;\n                    v_rsk_tab (1).ipu_scl_code := crecs.psd_scl_code;\n                    v_rsk_tab (1).ipu_scl_desc := crecs.psd_class;\n                    v_rsk_tab (1).ipu_cvt_code := crecs.psd_cvt_code;\n                    v_rsk_tab (1).ipu_cvt_desc := crecs.psd_cvt_sht_desc;\n                    v_rsk_tab (1).ipu_bind_code := crecs.psd_bind_code;\n                    v_rsk_tab (1).ipu_bind_desc := crecs.psd_binder;\n                    v_rsk_tab (1).ipu_sect_code := v_sect_code;\n                    v_rsk_tab (1).ipu_sect_desc := v_sect_desc;\n                    v_rsk_tab (1).ipu_limit := crecs.psd_si;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_errmsg :=\n                            'Error assigning data imported' || SQLERRM;\n                        raise_application_error (-20001, v_errmsg);\n                END;\n\n                v_success := NVL (v_success, 0) + 1;\n\n                UPDATE gin_pol_stp_data\n                   SET psd_transfered = 'Y',\n                       psd_not_trnsf_reason = NULL,\n                       psd_pol_batch_no = v_pol_batch_no\n                 WHERE psd_code = crecs.psd_code;\n            --COMMIT;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_errmsg := v_errmsg;\n                    ROLLBACK;\n\n                    UPDATE gin_pol_stp_data\n                       SET psd_transfered = 'N',\n                           psd_not_trnsf_reason = v_errmsg\n                     WHERE psd_code = crecs.psd_code;\n            -- COMMIT;\n            END;\n        END LOOP;\n    END;",
        "del_ren_risk_details": "PROCEDURE del_ren_risk_details (v_pol_batch_no   IN     NUMBER,\n                                    v_ipu_code       IN     NUMBER,\n                                    v_pro_code              NUMBER,\n                                    v_error             OUT VARCHAR2)\n    IS\n        v_successful   NUMBER;\n    BEGIN\n        --RAISE_ERROR('v_pol_batch_no '||v_pol_batch_no);\n        --v_err_pos := 'Specific Details';\n        v_error := 'Error deleting schedule details';\n\n        BEGIN\n            del_spec_details (v_pro_code, v_ipu_code);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        --v_err_pos := 'Risk Level tables';\n        v_error := 'Error deleting risk details';\n\n        BEGIN\n            DELETE FROM gin_policy_ren_risk_services\n                  WHERE prs_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        v_error := 'Error deleting policy clauses';\n\n        BEGIN\n            DELETE FROM gin_ren_policy_clauses\n                  WHERE pocl_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        v_error := 'Error deleting policy premium items';\n\n        BEGIN\n            DELETE FROM gin_ren_policy_insured_limits\n                  WHERE pil_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        v_error := 'Error deleting policy perils';\n\n        BEGIN\n            DELETE FROM gin_ren_pol_sec_perils\n                  WHERE gpsp_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        v_error := 'Error deleting risk excess';\n\n        BEGIN\n            DELETE FROM gin_ren_risk_excess\n                  WHERE re_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        v_error := 'Error deleting risk limits';\n\n        BEGIN\n            DELETE FROM gin_ren_policy_risk_schedules\n                  WHERE polrs_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        v_error := 'Error deleting risk section perils';\n\n        BEGIN\n            DELETE FROM gin_pol_ren_rsk_section_perils\n                  WHERE prspr_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        v_error := 'Error deleting risk services';\n\n        BEGIN\n            DELETE FROM gin_policy_ren_risk_services\n                  WHERE prs_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n\n        --    v_err_pos := 'Deleting Risk';\n        v_error := 'Error deleting risk services';\n\n        BEGIN\n            DELETE FROM gin_ren_insured_property_unds\n                  WHERE ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                RETURN;\n        END;\n    END;",
        "del_ren_pol_proc": "PROCEDURE del_ren_pol_proc (v_pol_batch_no IN NUMBER)\n    IS\n        CURSOR all_pols IS\n            SELECT pol_batch_no\n              FROM gin_ren_policies\n             WHERE pol_policy_no = (SELECT pol_policy_no\n                                      FROM gin_ren_policies\n                                     WHERE pol_batch_no = v_pol_batch_no);\n\n        CURSOR all_risks_cur (vpolbatch_no IN NUMBER)\n        IS\n            SELECT ipu_code, pol_pro_code\n              FROM gin_ren_insured_property_unds, gin_ren_policies\n             WHERE     ipu_pol_batch_no = pol_batch_no\n                   AND ipu_pol_batch_no = vpolbatch_no;\n\n        v_err_msg   VARCHAR2 (200);\n    BEGIN\n        FOR p IN all_pols\n        LOOP\n            FOR all_risks_rec IN all_risks_cur (p.pol_batch_no)\n            LOOP\n                del_ren_risk_details (v_pol_batch_no,\n                                      all_risks_rec.ipu_code,\n                                      all_risks_rec.pol_pro_code,\n                                      v_err_msg);\n            END LOOP;\n\n            -- Delete The Policy Details\n            DELETE FROM gin_ren_policy_diary\n                  WHERE pd_pol_batch_no = p.pol_batch_no;\n\n            DELETE FROM gin_ren_policy_lvl_clauses\n                  WHERE plcl_pol_batch_no = p.pol_batch_no;\n\n            DELETE FROM gin_ren_policy_taxes\n                  WHERE ptx_pol_batch_no = p.pol_batch_no;\n\n            DELETE FROM gin_ren_coinsurers\n                  WHERE coin_pol_batch_no = p.pol_batch_no;\n\n            DELETE FROM gin_ren_policy_insureds\n                  WHERE polin_pol_batch_no = p.pol_batch_no;\n\n            DELETE FROM gin_renwl_sbudtls\n                  WHERE pdl_pol_batch_no = p.pol_batch_no;\n\n            --Delete the Policy\n            DELETE FROM gin_ren_policies\n                  WHERE pol_batch_no = p.pol_batch_no;\n        -- gis_utilities.close_tickets ('P', p.pol_batch_no);\n        END LOOP;\n    END;",
        "del_risk_details": "PROCEDURE del_risk_details (v_pol_batch_no   IN     NUMBER,\n                                v_ipu_code       IN     NUMBER,\n                                v_pro_code              NUMBER,\n                                v_error             OUT VARCHAR2)\n    IS\n        --v_successful NUMBER;\n        --v_authorised VARCHAR2(2);\n        v_auths           VARCHAR2 (2);\n        v_err_pos         VARCHAR2 (75);\n        v_errmsg          VARCHAR2 (600);\n        v_cert_ipu_code   NUMBER;\n        v_cnt             NUMBER;\n        v_polin_code      NUMBER;\n        v_property_id     VARCHAR2 (100);\n        v_claim_cnt       NUMBER;\n    BEGIN\n        BEGIN\n            SELECT pol_authosrised, ipu_polin_code, ipu_property_id\n              INTO v_auths, v_polin_code, v_property_id\n              FROM gin_policies, gin_insured_property_unds\n             WHERE     ipu_pol_batch_no = pol_batch_no\n                   AND pol_batch_no = v_pol_batch_no\n                   AND ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_error := 'THE TRANSACTION COULD NOT BE FOUND.....';\n                RETURN;\n        /*raise_application_error\n                              (-20001,\n                               'THE TRANSACTION COULD NOT BE FOUND.....'\n                              );*/\n        END;\n\n        --IF v_auths != 'A' then\n        v_err_pos := 'SPECIFIC DETAILS';\n        del_spec_details (v_pro_code, v_ipu_code);\n        v_err_pos := 'RISK LEVEL TABLES';\n\n        v_err_pos := 'ERROR DELETING RISK COMMISSIONS';\n\n        DELETE FROM gin_policy_risk_commissions\n              WHERE prc_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING RISK SERVICES';\n\n        DELETE FROM gin_policy_risk_services\n              WHERE prs_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING POLICY CLAUSES';\n\n        DELETE FROM gin_policy_clauses\n              WHERE pocl_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING PREMIUM ITEMS';\n\n        DELETE FROM gin_policy_insured_limits\n              WHERE pil_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING POLICY PERILS';\n\n        DELETE FROM gin_pol_sec_perils\n              WHERE gpsp_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING RISK EXCESSES';\n\n        DELETE FROM gin_risk_excess\n              WHERE re_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING RISK LIMITS OF LIABILITY';\n\n        DELETE FROM gin_policy_risk_schedules\n              WHERE polrs_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING RISK PARTICIPATIONS';\n\n        DELETE FROM gin_participations\n              WHERE part_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING RISK REINSURANCE POOL DETAILS';\n\n        DELETE FROM GIN_POL_REIN_POOL_RISK_DETAILS\n              WHERE PRPRD_IPU_CODE = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING RISK REINSURANCE DETAILS';\n\n        DELETE FROM gin_policy_rein_risk_details\n              WHERE ptotr_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING FACRE CESSIONS';\n\n        DELETE FROM gin_facre_cessions\n              WHERE fc_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING RISK RI DETAILS';\n\n        DELETE FROM gin_policy_risk_ri_dtls\n              WHERE prrd_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING POLICY EXCEPTIONS';\n\n        DELETE FROM gin_policy_exceptions\n              WHERE gpe_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING POLICY ACTIVE RISK DETAILS';\n\n        --RAISE_ERROR(v_pol_batch_no||';'||v_ipu_code); ;\n        DELETE FROM\n            gin_policy_active_risks\n              WHERE     polar_pol_batch_no = v_pol_batch_no\n                    AND polar_ipu_code = v_ipu_code;\n\n        v_err_pos := 'ERROR DELETING RISK SECTION PERILS';\n\n        DELETE FROM\n            gin_pol_risk_section_perils\n              WHERE     prspr_ipu_code = v_ipu_code\n                    AND prspr_pol_batch_no = v_pol_batch_no;\n\n        --COMMIT;\n        v_err_pos := 'CERTIFICATES VALIDATION';\n\n        BEGIN\n            SELECT SUM (NVL (cnt, 0))\n              INTO v_cnt\n              FROM (SELECT COUNT (1)     cnt\n                      FROM gin_policy_certs\n                     WHERE polc_ipu_code = v_ipu_code\n                    UNION\n                    SELECT COUNT (1)     cnt\n                      FROM gin_aki_policy_cert_dtls\n                     WHERE     apcd_ipu_code = v_ipu_code\n                           AND apcd_cer_cert_no IS NOT NULL);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_err_pos := 'ERROR CHECKING RISK CERTIFICATES.';\n        /*raise_application_error (-20001,\n                                 'ERROR CHECKING RISK CERTIFICATES..'\n                                );*/\n        END;\n\n        --RAISE_ERROR(v_cnt||' <<< '||v_ipu_code);\n\n        IF NVL (v_cnt, 0) > 0\n        THEN\n            RAISE_ERROR (\n                'YOU CAN NOT DELETE A RISK WITH AN ISSUED CERTIFICATE');\n        END IF;\n\n\n        /*      IF NVL (v_cnt, 0) > 0\n               THEN\n                   BEGIN\n                       v_cert_ipu_code := NULL;\n\n                       SELECT MAX (ipu_code)\n                         INTO v_cert_ipu_code\n                         FROM gin_insured_property_unds, gin_policies\n                        WHERE     pol_batch_no = ipu_pol_batch_no\n                              AND ipu_id = (SELECT ipu_id\n                                              FROM gin_insured_property_unds\n                                             WHERE ipu_code = v_ipu_code)\n                              AND pol_authosrised = 'A'\n                              AND ipu_code != v_ipu_code;\n                   EXCEPTION\n                       WHEN OTHERS\n                       THEN\n                           v_err_pos :=\n                               'ERROR SELECTING RISK TO TRANSFER CERTIFICATES TO..';\n       --            raise_application_error\n       --                     (-20001,\n       --                      'ERROR SELECTING RISK TO TRANSFER CERTIFICATES TO..'\n       --                     );\n                   END;\n\n                   IF     v_cert_ipu_code IS NOT NULL\n                      AND NVL (gin_parameters_pkg.get_param_varchar ('UW_CERTS'),\n                               'N') =\n                          'N'\n                   THEN\n                       UPDATE gin_policy_certs\n                          SET (polc_pol_ren_endos_no,\n                               polc_pol_batch_no,\n                               polc_ipu_code) =\n                                  (SELECT ipu_pol_ren_endos_no,\n                                          ipu_pol_batch_no,\n                                          ipu_code\n                                     FROM gin_insured_property_unds\n                                    WHERE     ipu_code = v_cert_ipu_code\n                                          AND ipu_code = polc_ipu_code)\n                        WHERE polc_ipu_code = v_ipu_code;\n\n                       UPDATE gin_print_cert_queue\n                          SET (pcq_pol_ren_endos_no, pcq_pol_batch_no, pcq_ipu_code) =\n                                  (SELECT ipu_pol_ren_endos_no,\n                                          ipu_pol_batch_no,\n                                          ipu_code\n                                     FROM gin_insured_property_unds\n                                    WHERE ipu_code = v_cert_ipu_code)\n                        WHERE pcq_ipu_code = v_ipu_code;\n                   ELSE\n       --                INSERT INTO  GIN_POLICY_CERTS_TRANSF\n       --                (SELECT * FROM GIN_POLICY_CERTS WHERE POLC_IPU_CODE = v_ipu_code);\n       --                INSERT INTO GIN_PRINT_CERT_QUEUE_TRANSF\n       --                (SELECT * FROM  GIN_PRINT_CERT_QUEUE WHERE PCQ_IPU_CODE = v_ipu_code);\n                       DELETE FROM gin_print_cert_queue\n                             WHERE pcq_ipu_code = v_ipu_code;\n\n                       DELETE FROM gin_policy_certs\n                             WHERE polc_ipu_code = v_ipu_code;\n                   --RAISE_APPLICATION_ERROR(-20001,'DELETION CANCELLED. THERE IS NO OTHER RISK RECORD TO TRANSFER CERTIFICATES TO..');\n                   END IF;\n               END IF;\n       */\n\n        BEGIN\n            SELECT COUNT (1)\n              INTO v_claim_cnt\n              FROM gin_claim_master_bookings\n             WHERE cmb_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_error := 'ERROR CHECKING RISK CLAIMS..';\n                RETURN;\n        END;\n\n        IF NVL (v_claim_cnt, 0) > 0\n        THEN\n            v_error :=\n                'RISK ' || v_property_id || ' HAS A CLAIM ATTACHED TO IT';\n            RETURN;\n        END IF;\n\n        v_err_pos := 'DELETING LOADED RISK';\n\n        DELETE FROM GIN_RISKS_LOADING\n              WHERE GRL_IPU_CODE = v_ipu_code;\n\n        v_err_pos := 'DELETING RISK';\n\n        DELETE FROM gin_insured_property_unds\n              WHERE ipu_code = v_ipu_code;\n\n        v_cnt := 0;\n\n        BEGIN\n            SELECT COUNT (1)\n              INTO v_cnt\n              FROM gin_insured_property_unds\n             WHERE     ipu_polin_code = v_polin_code\n                   AND ipu_pol_batch_no = v_pol_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                NULL;\n        END;\n\n        IF NVL (v_cnt, 0) = 0\n        THEN\n            DELETE gin_policy_insureds\n             WHERE polin_code = v_polin_code;\n        END IF;\n    -- COMMIT;\n\n    --:System.Message_Level := '0';\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            IF SQLCODE = -100501\n            THEN\n                v_errmsg :=\n                       'THE RISK COULD NOT BE DELETED AT '\n                    || v_err_pos\n                    || '.....';\n            ELSE\n                v_errmsg :=\n                       'THE RISK COULD NOT BE DELETED AT '\n                    || v_err_pos\n                    || ',ERROR :-'\n                    || SQLERRM (SQLCODE);\n            END IF;\n\n            v_error := v_errmsg;\n            RETURN;\n    /*raise_error (v_errmsg);*/\n    END;",
        "del_pol_dtls_proc": "PROCEDURE del_pol_dtls_proc (v_pol_batch_no IN NUMBER)\n    IS\n        --v_successful NUMBER;\n        v_status      VARCHAR2 (10);\n        v_auths       VARCHAR2 (2);\n        v_err_pos     VARCHAR2 (75);\n        v_errmsg      VARCHAR2 (600);\n        v_error_msg   VARCHAR2 (600);\n\n        --v_cert_ipu_code NUMBER;\n        --v_cnt NUMBER;\n        CURSOR all_risks_cur IS\n            SELECT ipu_code,\n                   pol_pro_code,\n                   ipu_id,\n                   ipu_property_id\n              FROM gin_insured_property_unds, gin_policies\n             WHERE     ipu_pol_batch_no = pol_batch_no\n                   AND ipu_pol_batch_no = v_pol_batch_no;\n    BEGIN\n        BEGIN\n            SELECT pol_authosrised, pol_policy_status\n              INTO v_auths, v_status\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_application_error (\n                    -20001,\n                    'THE TRANSACTION COULD NOT FOUND.....');\n        END;\n\n        DBMS_OUTPUT.put_line (v_auths);\n\n        IF v_auths = 'A'\n        THEN\n            raise_error ('Cannot delete an authorised transactions..');\n        END IF;\n\n        DBMS_OUTPUT.put_line (1111111);\n\n        FOR all_risks_rec IN all_risks_cur\n        LOOP\n            del_risk_details (v_pol_batch_no,\n                              all_risks_rec.ipu_code,\n                              all_risks_rec.pol_pro_code,\n                              v_error_msg);\n        END LOOP;\n\n        -- Delete The Policy Details\n        v_err_pos := 'POLICY LEVEL TABLES';\n\n        DELETE FROM gin_policy_active_risks\n              WHERE polar_pol_batch_no = v_pol_batch_no;\n\n        DELETE FROM gin_policy_diary\n              WHERE pd_pol_batch_no = v_pol_batch_no;\n\n        DELETE FROM gin_policy_lvl_clauses\n              WHERE plcl_pol_batch_no = v_pol_batch_no;\n\n        DELETE FROM gin_policy_taxes\n              WHERE ptx_pol_batch_no = v_pol_batch_no;\n\n        DELETE FROM gin_coinsurers\n              WHERE coin_pol_batch_no = v_pol_batch_no;\n\n        DELETE FROM gin_policy_insureds\n              WHERE polin_pol_batch_no = v_pol_batch_no;\n\n        DELETE FROM gin_facre_in_dtls\n              WHERE fid_pol_batch_no = v_pol_batch_no;\n\n        ----COMMIT;\n        DELETE gin_gis_transactions\n         WHERE ggt_pol_batch_no = v_pol_batch_no AND ggt_uw_clm_tran = 'U';\n\n        DELETE FROM gin_policy_sbu_dtls\n              WHERE pdl_pol_batch_no = v_pol_batch_no;\n\n        v_err_pos := 'POLICY';\n\n        DELETE FROM gin_policies\n              WHERE pol_batch_no = v_pol_batch_no;\n\n        tqc_web_pkg.inactivate_tickets (v_pol_batch_no);\n        --COMMIT;\n        DBMS_OUTPUT.put_line (22222);\n    --:System.Message_Level := '0';\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            IF SQLCODE = -100501\n            THEN\n                v_errmsg :=\n                       'THE TRANSACTION COULD NOT BE DELETED AT '\n                    || v_err_pos\n                    || '.....'\n                    || v_error_msg;\n            ELSE\n                v_errmsg :=\n                       'THE TRANSACTION COULD NOT BE DELETED AT '\n                    || v_err_pos\n                    || ',ERROR :-'\n                    || SQLERRM (SQLCODE)\n                    || v_error_msg;\n            END IF;\n\n            v_error_msg := v_errmsg;\n            RETURN;\n    /*raise_error (v_errmsg);*/\n    END;",
        "populate_renewals": "PROCEDURE populate_renewals (v_trans_id IN NUMBER, v_user VARCHAR2)\n    IS\n        v_pol_wet_date                 DATE;\n        v_ren_polin_code               NUMBER;\n        v_pol_wef                      DATE;\n        --v_ren_param VARCHAR2(5);\n        v_new_ipu_code                 NUMBER;\n        --v_del_err NUMBER;\n        v_ren_date                     DATE;\n        v_cnt                          NUMBER;\n        v_msg                          VARCHAR2 (200);\n        v_ncd_status                   NUMBER := 0;\n        v_ncd_level                    NUMBER := 0;\n        v_max_ncd_level                NUMBER := 0;\n        v_prr_rate                     NUMBER := 0;\n        v_prr_multiplier_rate          NUMBER := 0;\n        v_prr_division_factor          NUMBER := 0;\n        v_prr_multplier_div_fact       NUMBER := 0;\n        v_sect_desc                    VARCHAR2 (30);\n        v_ncd_rate                     NUMBER := 0;\n        v_process_ncd                  VARCHAR (1);\n        v_old_risk                     VARCHAR (1);\n        v_ncd_created                  BOOLEAN := TRUE;\n        v_sect_type                    VARCHAR2 (10);\n        v_sect_sht_desc                VARCHAR2 (30);\n        v_check_max                    BOOLEAN := FALSE;\n        v_new_sect_code                NUMBER;\n        v_cnt_ncd                      NUMBER := 0;\n        v_new_rate                     VARCHAR2 (1);\n        v_count                        NUMBER;\n        v_load_sect_code               VARCHAR2 (30);\n        v_decload_created              BOOLEAN := TRUE;\n        v_new_prr_rate_desc            VARCHAR2 (30);\n        v_new_prr_rate_type            VARCHAR2 (30);\n        v_new_prr_rate                 NUMBER;\n        v_new_prr_multiplier_rate      NUMBER;\n        v_new_prr_division_factor      NUMBER;\n        v_new_prr_multplier_div_fact   NUMBER;\n        v_new_sect_type                VARCHAR2 (30);\n        v_new_sect_desc                VARCHAR2 (30);\n        v_serial                       VARCHAR2 (30);\n        v_tran_ref_no                  VARCHAR2 (30);\n        next_ggts_trans_no             NUMBER;\n        v_pdl_code                     NUMBER;\n        v_clms_cnt                     NUMBER;\n        v_risk_cnt                     NUMBER;\n        -- v_ncd_status                   NUMBER         := 0;\n        v_cashback_level               NUMBER := 0;\n        v_max_cashback_level           NUMBER := 0;\n        v_renewal_param                VARCHAR2 (1) := 'N';\n\n        v_prr_prem_minimum_amt         gin_premium_rates.prr_prem_minimum_amt%TYPE;\n        v_prr_rate_desc                gin_premium_rates.prr_rate_desc%TYPE;\n        v_prr_free_limit               gin_premium_rates.prr_free_limit%TYPE;\n        v_sec_declaration              gin_subcl_sections.sec_declaration%TYPE;\n        v_scvts_order                  gin_subcl_covt_sections.scvts_order%TYPE;\n        v_prr_prorated_full            gin_premium_rates.prr_prorated_full%TYPE;\n        v_prr_si_limit_type            gin_premium_rates.prr_si_limit_type%TYPE;\n        v_prr_si_rate                  gin_premium_rates.prr_si_rate%TYPE;\n        v_sc_range                     NUMBER;\n        v_scvts_order1                 NUMBER;\n        v_scvts_calc_group             NUMBER;\n        sect_cursor                    SYS_REFCURSOR;\n        v_motor_prd                    VARCHAR2 (1);\n        v_sec_code                     gin_sections.sect_code%TYPE;\n        -- v_sect_type                gin_sections.sect_type%TYPE;\n        v_type_desc                    VARCHAR2 (25);\n        v_prr_rate_type                gin_premium_rates.prr_rate_type%TYPE;\n        --v_prr_rate                 gin_premium_rates.prr_rate%TYPE;\n        v_terr_description             VARCHAR2 (5);\n        v_butcharge_fap                VARCHAR2 (5);\n\n        CURSOR cur_taxes (v_batch NUMBER, vprocode NUMBER)\n        IS\n            SELECT ptx_trac_scl_code,\n                   ptx_trac_trnt_code,\n                   ptx_pol_policy_no,\n                   ptx_pol_ren_endos_no,\n                   ptx_pol_batch_no,\n                   ptx_rate,\n                   ptx_amount,\n                   ptx_tl_lvl_code,\n                   ptx_rate_type,\n                   ptx_rate_desc,\n                   ptx_endos_diff_amt,\n                   ptx_tax_type,\n                   ptx_coin_other_client_chrgs,\n                   ptx_override,\n                   ptx_override_amt\n              FROM gin_policy_taxes, gin_transaction_types\n             WHERE     ptx_trac_trnt_code = trnt_code\n                   AND ptx_pol_batch_no = v_batch\n                   AND NVL (trnt_apply_rn, 'Y') = 'Y'\n                   AND trnt_code NOT IN (SELECT petx_trnt_code\n                                           FROM gin_product_excluded_taxes\n                                          WHERE petx_pro_code = vprocode);\n\n        CURSOR renewals IS\n            SELECT *\n              FROM gin_web_renewals, gin_policies\n             WHERE     webr_pol_batch_no = pol_batch_no\n                   AND webr_trans_id = v_trans_id;\n\n        CURSOR cur_coinsurer (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_coinsurers\n             WHERE coin_pol_batch_no = v_batch;\n\n        CURSOR cur_facre_dtls (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_facre_in_dtls\n             WHERE fid_pol_batch_no = v_batch;\n\n        CURSOR cur_conditions (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_lvl_clauses\n             WHERE plcl_pol_batch_no = v_batch;\n\n        CURSOR cur_subclass_conditions (v_btch NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_subclass_clauses\n             WHERE poscl_pol_batch_no = v_btch;\n\n        CURSOR cur_schedule_values (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_pol_schedule_values\n             WHERE schpv_pol_batch_no = v_batch;\n\n        CURSOR cur_pol_perils (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_section_perils\n             WHERE pspr_pol_batch_no = v_batch;\n\n        CURSOR cur_insureds (v_batch NUMBER)\n        IS\n            SELECT DISTINCT polin_prp_code\n              FROM gin_policy_insureds\n             WHERE EXISTS\n                       (SELECT ipu_polin_code\n                          FROM gin_insured_property_unds\n                         WHERE     ipu_polin_code = polin_code\n                               AND EXISTS\n                                       (SELECT polar_ipu_code\n                                          FROM gin_policy_active_risks\n                                         WHERE     polar_ipu_code = ipu_code\n                                               AND polar_pol_batch_no =\n                                                   v_batch));\n\n        CURSOR cur_ipu (v_batch      NUMBER,\n                        vv_pol_wet   DATE,\n                        v_prp_code   NUMBER,\n                        v_loaded     VARCHAR2)\n        IS\n            SELECT *\n              FROM gin_insured_property_unds,\n                   gin_policy_insureds,\n                   gin_sub_classes\n             WHERE     ipu_code IN (SELECT polar_ipu_code\n                                      FROM gin_policy_active_risks\n                                     WHERE polar_pol_batch_no = v_batch)\n                   --AND ipu_eff_wet = vv_pol_wet\n                   AND ipu_eff_wet =\n                       DECODE (v_loaded, 'N', vv_pol_wet, ipu_eff_wet)\n                   AND polin_code = ipu_polin_code\n                   AND polin_prp_code = v_prp_code\n                   AND NVL (ipu_endos_remove, 'N') = 'N'\n                   AND gin_stp_claims_pkg.claim_total_loss (ipu_id) != 'Y'\n                   AND ipu_sec_scl_code = scl_code;\n\n        CURSOR cur_limits (v_ipu NUMBER)\n        IS\n              SELECT *\n                FROM gin_policy_insured_limits\n               WHERE pil_ipu_code = v_ipu\n            ORDER BY pil_code;\n\n        CURSOR new_cur_limits (v_new_ipu_code   NUMBER,\n                               v_scl_code       NUMBER,\n                               v_bind_code      NUMBER,\n                               v_cvt_code       NUMBER,\n                               v_sect_code      NUMBER)\n        IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc || ' ' || prr_ncd_level\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD ' || prr_ncd_level,\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = v_sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND prr_ncd_level = 0\n                   AND sect_type = 'ND'\n                   AND sect_code IN\n                           (SELECT scvts_sect_code\n                              FROM gin_subcl_covt_sections\n                             WHERE     scvts_scl_code = v_scl_code\n                                   AND scvts_covt_code = v_cvt_code)\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_ren_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n\n        CURSOR cur_clauses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_clauses\n             WHERE pocl_ipu_code = v_ipu;\n\n        CURSOR cur_rsk_perils (v_ipu VARCHAR2)\n        IS\n            SELECT *\n              FROM gin_pol_risk_section_perils\n             WHERE prspr_ipu_code = v_ipu;\n\n        CURSOR perils (v_ipu NUMBER)\n        IS\n            SELECT gpsp_per_code,\n                   gpsp_per_sht_desc,\n                   gpsp_sec_sect_code,\n                   gpsp_sect_sht_desc,\n                   gpsp_sec_scl_code,\n                   gpsp_ipp_code,\n                   gpsp_ipu_code,\n                   gpsp_limit_amt,\n                   gpsp_excess_amt\n              FROM gin_pol_sec_perils\n             WHERE gpsp_ipu_code = v_ipu;\n\n        CURSOR risk_excesses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_risk_excess\n             WHERE re_ipu_code = v_ipu;\n\n        CURSOR schedules (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_risk_schedules\n             WHERE polrs_ipu_code = v_ipu;\n\n        CURSOR cur_pol_dtls (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_sbu_dtls\n             WHERE pdl_pol_batch_no = v_batch;\n\n        CURSOR risk_services (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_risk_services\n             WHERE prs_ipu_code = v_ipu;\n    /*CURSOR cur_superintendent\n        IS SELECT *\n          FROM GIN_POL_SUPERINTENDENT\n          WHERE PSURT_POL_BATCH_NO=v_batch;*/\n    /*CURSOR cur_ncd_sec(v_scl_code NUMBER,v_bind_code NUMBER, v_level NUMBER)\n                        IS SELECT DISTINCT PRR_RATE,\n                        PRR_MULTIPLIER_RATE,PRR_DIVISION_FACTOR,\n                        PRR_MULTPLIER_DIV_FACT\n                        FROM GIN_PREMIUM_RATES,GIN_SECTIONS\n                        WHERE  PRR_SECT_CODE = SECT_CODE\n                        AND PRR_SCL_CODE = v_scl_code\n                        AND PRR_BIND_CODE = v_bind_code\n                        AND SECT_TYPE ='ND'\n                        AND PRR_NCD_LEVEL =v_level;*/\n    BEGIN\n        --       raise_error ('User not defined.');\n        IF v_user IS NULL\n        THEN\n            raise_error ('User not defined.');\n        END IF;\n\n        BEGIN\n            v_renewal_param :=\n                GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR (\n                    'RENEWAL_BASED_ON_SETUP');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_renewal_param := 'N';\n        END;\n\n        BEGIN\n            SELECT param_value\n              INTO v_butcharge_fap\n              FROM gin_parameters\n             WHERE param_name = 'BUT_CHARGE_FAP' AND param_status = 'ACTIVE';\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_butcharge_fap := 'N';\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error fetching the BUT_CHARGE_FAP parameter,Check parameter setup...');\n        END;\n\n\n        FOR pr IN renewals\n        LOOP\n            BEGIN\n                del_ren_pol_proc (pr.pol_batch_no);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                        'Unable to execute",
        "populate_renewals250814": "PROCEDURE populate_renewals250814 (v_trans_id IN NUMBER, v_user VARCHAR2)\n    IS\n        v_pol_wet_date                 DATE;\n        v_ren_polin_code               NUMBER;\n        v_pol_wef                      DATE;\n        --v_ren_param VARCHAR2(5);\n        v_new_ipu_code                 NUMBER;\n        --v_del_err NUMBER;\n        v_ren_date                     DATE;\n        v_cnt                          NUMBER;\n        v_msg                          VARCHAR2 (200);\n        v_ncd_status                   NUMBER := 0;\n        v_ncd_level                    NUMBER := 0;\n        v_max_ncd_level                NUMBER := 0;\n        v_prr_rate                     NUMBER := 0;\n        v_prr_multiplier_rate          NUMBER := 0;\n        v_prr_division_factor          NUMBER := 0;\n        v_prr_multplier_div_fact       NUMBER := 0;\n        v_sect_desc                    VARCHAR2 (30);\n        v_ncd_rate                     NUMBER := 0;\n        v_process_ncd                  VARCHAR (1);\n        v_old_risk                     VARCHAR (1);\n        v_ncd_created                  BOOLEAN := TRUE;\n        v_sect_type                    VARCHAR2 (10);\n        v_sect_sht_desc                VARCHAR2 (30);\n        v_check_max                    BOOLEAN := FALSE;\n        v_new_sect_code                NUMBER;\n        v_cnt_ncd                      NUMBER := 0;\n        v_new_rate                     VARCHAR2 (1);\n        v_count                        NUMBER;\n        v_load_sect_code               VARCHAR2 (30);\n        v_decload_created              BOOLEAN := TRUE;\n        v_new_prr_rate_desc            VARCHAR2 (30);\n        v_new_prr_rate_type            VARCHAR2 (30);\n        v_new_prr_rate                 NUMBER;\n        v_new_prr_multiplier_rate      NUMBER;\n        v_new_prr_division_factor      NUMBER;\n        v_new_prr_multplier_div_fact   NUMBER;\n        v_new_sect_type                VARCHAR2 (30);\n        v_new_sect_desc                VARCHAR2 (30);\n\n        CURSOR cur_taxes (v_batch NUMBER, vprocode NUMBER)\n        IS\n            SELECT ptx_trac_scl_code,\n                   ptx_trac_trnt_code,\n                   ptx_pol_policy_no,\n                   ptx_pol_ren_endos_no,\n                   ptx_pol_batch_no,\n                   ptx_rate,\n                   ptx_amount,\n                   ptx_tl_lvl_code,\n                   ptx_rate_type,\n                   ptx_rate_desc,\n                   ptx_endos_diff_amt,\n                   ptx_tax_type\n              FROM gin_policy_taxes, gin_transaction_types\n             WHERE     ptx_trac_trnt_code = trnt_code\n                   AND ptx_pol_batch_no = v_batch\n                   AND NVL (trnt_apply_rn, 'Y') = 'Y'\n                   AND trnt_code NOT IN (SELECT petx_trnt_code\n                                           FROM gin_product_excluded_taxes\n                                          WHERE petx_pro_code = vprocode);\n\n        CURSOR renewals IS\n            SELECT *\n              FROM gin_web_renewals, gin_policies\n             WHERE     webr_pol_batch_no = pol_batch_no\n                   AND webr_trans_id = v_trans_id;\n\n        CURSOR cur_coinsurer (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_coinsurers\n             WHERE coin_pol_batch_no = v_batch;\n\n        CURSOR cur_facre_dtls (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_facre_in_dtls\n             WHERE fid_pol_batch_no = v_batch;\n\n        CURSOR cur_conditions (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_lvl_clauses\n             WHERE plcl_pol_batch_no = v_batch;\n\n        CURSOR cur_schedule_values (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_pol_schedule_values\n             WHERE schpv_pol_batch_no = v_batch;\n\n        CURSOR cur_pol_perils (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_section_perils\n             WHERE pspr_pol_batch_no = v_batch;\n\n        CURSOR cur_insureds (v_batch NUMBER)\n        IS\n            SELECT DISTINCT polin_prp_code\n              FROM gin_policy_insureds\n             WHERE EXISTS\n                       (SELECT ipu_polin_code\n                          FROM gin_insured_property_unds\n                         WHERE     ipu_polin_code = polin_code\n                               AND EXISTS\n                                       (SELECT polar_ipu_code\n                                          FROM gin_policy_active_risks\n                                         WHERE     polar_ipu_code = ipu_code\n                                               AND polar_pol_batch_no =\n                                                   v_batch));\n\n        CURSOR cur_ipu (v_batch      NUMBER,\n                        vv_pol_wet   DATE,\n                        v_prp_code   NUMBER,\n                        v_loaded     VARCHAR2)\n        IS\n            SELECT *\n              FROM gin_insured_property_unds,\n                   gin_policy_insureds,\n                   gin_sub_classes\n             WHERE     ipu_code IN (SELECT polar_ipu_code\n                                      FROM gin_policy_active_risks\n                                     WHERE polar_pol_batch_no = v_batch)\n                   --AND ipu_eff_wet = vv_pol_wet\n                   AND ipu_eff_wet =\n                       DECODE (v_loaded, 'N', vv_pol_wet, ipu_eff_wet)\n                   AND polin_code = ipu_polin_code\n                   AND polin_prp_code = v_prp_code\n                   AND NVL (ipu_endos_remove, 'N') = 'N'\n                   AND gin_stp_claims_pkg.claim_total_loss (ipu_id) != 'Y'\n                   AND ipu_sec_scl_code = scl_code;\n\n        CURSOR cur_limits (v_ipu NUMBER)\n        IS\n              SELECT *\n                FROM gin_policy_insured_limits\n               WHERE pil_ipu_code = v_ipu\n            ORDER BY pil_code;\n\n        CURSOR new_cur_limits (v_new_ipu_code   NUMBER,\n                               v_scl_code       NUMBER,\n                               v_bind_code      NUMBER,\n                               v_cvt_code       NUMBER,\n                               v_sect_code      NUMBER)\n        IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc || ' ' || prr_ncd_level\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD ' || prr_ncd_level,\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = v_sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND prr_ncd_level = 0\n                   AND sect_type = 'ND'\n                   AND sect_code IN\n                           (SELECT scvts_sect_code\n                              FROM gin_subcl_covt_sections\n                             WHERE     scvts_scl_code = v_scl_code\n                                   AND scvts_covt_code = v_cvt_code)\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_ren_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n\n        CURSOR cur_clauses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_clauses\n             WHERE pocl_ipu_code = v_ipu;\n\n        CURSOR perils (v_ipu NUMBER)\n        IS\n            SELECT gpsp_per_code,\n                   gpsp_per_sht_desc,\n                   gpsp_sec_sect_code,\n                   gpsp_sect_sht_desc,\n                   gpsp_sec_scl_code,\n                   gpsp_ipp_code,\n                   gpsp_ipu_code,\n                   gpsp_limit_amt,\n                   gpsp_excess_amt\n              FROM gin_pol_sec_perils\n             WHERE gpsp_ipu_code = v_ipu;\n\n        CURSOR risk_excesses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_risk_excess\n             WHERE re_ipu_code = v_ipu;\n\n        CURSOR schedules (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_risk_schedules\n             WHERE polrs_ipu_code = v_ipu;\n    /*CURSOR cur_superintendent\n        IS SELECT *\n          FROM GIN_POL_SUPERINTENDENT\n          WHERE PSURT_POL_BATCH_NO=v_batch;*/\n    /*CURSOR cur_ncd_sec(v_scl_code NUMBER,v_bind_code NUMBER, v_level NUMBER)\n                        IS SELECT DISTINCT PRR_RATE,\n                        PRR_MULTIPLIER_RATE,PRR_DIVISION_FACTOR,\n                        PRR_MULTPLIER_DIV_FACT\n                        FROM GIN_PREMIUM_RATES,GIN_SECTIONS\n                        WHERE  PRR_SECT_CODE = SECT_CODE\n                        AND PRR_SCL_CODE = v_scl_code\n                        AND PRR_BIND_CODE = v_bind_code\n                        AND SECT_TYPE ='ND'\n                        AND PRR_NCD_LEVEL =v_level;*/\n    BEGIN\n        -- raise_error ('User not defined.');\n        IF v_user IS NULL\n        THEN\n            raise_error ('User not defined.');\n        END IF;\n\n        FOR pr IN renewals\n        LOOP\n            BEGIN\n                del_ren_pol_proc (pr.pol_batch_no);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                        'Unable to execute",
        "populate_endos_details": "PROCEDURE populate_endos_details (\n        v_pol_no             IN     VARCHAR2,\n        v_old_pol_batch_no   IN     NUMBER,\n        v_trans_type         IN     VARCHAR2,\n        v_trans_eff_date     IN     DATE,\n        v_extend_to_date     IN     DATE,\n        v_rsks_tab           IN     risk_tab,\n        v_agentcontact       IN     VARCHAR2,\n        v_endrsd_rsks_tab       OUT endrsd_rsks_tab,\n        v_new_batch_no          OUT NUMBER,\n        v_end_no                OUT VARCHAR2,\n        v_past_period        IN     VARCHAR2,\n        v_end_comm_allowed   IN     VARCHAR2,\n        v_cancelled_by       IN     VARCHAR2,\n        v_endors_status      IN     VARCHAR2,\n        v_regional_endors    IN     VARCHAR2)\n    IS\n        --ncd_final_val   NUMBER(5) := 0;\n        --v_prp_code    NUMBER ;\n        cnt                      NUMBER := 0;\n        --cnt2 NUMBER :=0;\n        v_ipu_wet                DATE;\n        v_ipu_wef                DATE;\n        v_ipu_eff_wef            DATE;\n        v_dup_rec                EXCEPTION;\n        v_user                   VARCHAR2 (35)\n            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');\n        v_new_ipu_code           NUMBER;\n        v_risk_uw_yr             NUMBER (4);\n        v_pil_prem_amt           NUMBER := 0;\n        v_compute                VARCHAR2 (1) := 'Y';\n        v_ipu_prev_prem          NUMBER := 0;\n        v_pil_prev_limit         NUMBER := 0;\n        v_pil_code               NUMBER (20);\n        v_ipu_prev_ri_amt        NUMBER;\n        v_session_id             NUMBER;\n        v_new_pol_batch_no       NUMBER;\n        v_pol_status             VARCHAR2 (5);\n        v_pol_wef                DATE;\n        v_pol_wet                DATE;\n        v_pol_uw_yr              NUMBER;\n        v_pol_cover_from         DATE;\n        v_pol_cover_to           DATE;\n        v_pol_uwyr_length        NUMBER;\n        v_cancel_date            DATE;\n        v_endors_min_prem        NUMBER;\n        v_cnt                    NUMBER;\n        v_pdl_code               NUMBER;\n        v_cnt2                   NUMBER;\n        v_pol_renewal_dt         DATE;\n        vipuwef                  DATE;\n        vipueffwef               DATE;\n        vipuwet                  DATE;\n        vipueffwet               DATE;\n        vprevipucode             NUMBER;\n        vprevprem                NUMBER;\n        vipupaidprem             NUMBER;\n        vipupaidtl               NUMBER;\n        viputranstype            VARCHAR2 (10);\n        v_endos_wht_prev_rein    VARCHAR2 (1) := 'N';\n        v_val_pol                VARCHAR2 (1);\n        v_shortp_pol             VARCHAR2 (1);\n        v_balance                NUMBER := 0;\n        v_sp_cnt                 NUMBER;\n        v_sp_cnt_param           NUMBER;\n        v_ipu_covt_sht_desc      VARCHAR2 (100);\n        v_count                  NUMBER;\n        v_covt_code              NUMBER;\n        v_allow_cert_bal         VARCHAR2 (1);\n        v_sch_status             VARCHAR2 (1);\n        v_prorata                VARCHAR2 (1);\n        v_allow_ext_with_bal     VARCHAR2 (1) := 'Y';\n        v_policy_debit           VARCHAR2 (1);\n        v_cur_reg_endors         VARCHAR2 (1) := 'N';\n        v_cert_autogen           VARCHAR2 (1);\n        v_rs_cnt                 NUMBER;\n        v_com_allowed            VARCHAR2 (1);\n        v_valuationcount         NUMBER;\n        v_ex_valuation_param     VARCHAR2 (1);\n        v_auto_populate_limits   VARCHAR2 (1);\n        v_param_ext              VARCHAR2 (1) := 'N';\n\n        --GIS-11824 To take care of normal endorsement done after regional endorsement is COMESA\n        CURSOR cur_coinsurer (v_btch NUMBER)\n        IS\n            SELECT *\n              FROM gin_coinsurers\n             WHERE coin_pol_batch_no = v_btch;\n\n        CURSOR cur_active_risks (v_polcy_no VARCHAR2, v_new_btch NUMBER)\n        IS\n            SELECT DISTINCT polar_ipu_code          ipu_code,\n                            polar_prev_batch_no     ipu_prev_batch_no,\n                            polar_ipu_id            ipu_id,\n                            ipu_pol_policy_no,\n                            ipu_prp_code\n              FROM gin_policy_active_risks,\n                   gin_insured_property_unds,\n                   gin_policies\n             WHERE     polar_ipu_code = ipu_code\n                   AND ipu_pol_batch_no = pol_batch_no\n                   AND pol_current_status = 'A'\n                   AND polar_pol_policy_no = v_polcy_no\n                   --cur_endors_pol_rec.POL_POLICY_NO\n                   AND ipu_id NOT IN (SELECT polar_ipu_id\n                                        FROM gin_policy_active_risks\n                                       WHERE polar_pol_batch_no = v_new_btch);\n\n        CURSOR cur_conditions (v_btch NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_lvl_clauses\n             WHERE plcl_pol_batch_no = v_btch;\n\n        CURSOR cur_subclass_conditions (v_btch NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_subclass_clauses\n             WHERE poscl_pol_batch_no = v_btch;\n\n        CURSOR cur_schedule_values (v_btch NUMBER)\n        IS\n            SELECT *\n              FROM gin_pol_schedule_values\n             WHERE schpv_pol_batch_no = v_btch;\n\n        CURSOR cur_taxes (v_btch_no NUMBER, vprocode IN NUMBER)\n        IS\n            SELECT ptx_trac_scl_code,\n                   ptx_trac_trnt_code,\n                   ptx_pol_policy_no,\n                   ptx_pol_ren_endos_no,\n                   ptx_pol_batch_no,\n                   ptx_rate,\n                   ptx_amount,\n                   ptx_tl_lvl_code,\n                   ptx_rate_type,\n                   ptx_rate_desc,\n                   ptx_endos_diff_amt,\n                   ptx_tax_type,\n                   ptx_risk_pol_level,\n                   ptx_override,\n                   ptx_override_amt\n              FROM gin_policy_taxes, gin_transaction_types\n             WHERE     ptx_trac_trnt_code = trnt_code\n                   AND ptx_pol_batch_no = v_btch_no\n                   AND NVL (\n                           DECODE (v_trans_type,\n                                   'NB', trnt_apply_nb,\n                                   'SP', trnt_apply_sp,\n                                   'RN', trnt_apply_rn,\n                                   'EN', trnt_apply_en,\n                                   'CN', trnt_apply_cn,\n                                   'EX', trnt_apply_ex,\n                                   'DC', trnt_apply_dc,\n                                   'RE', trnt_apply_re),\n                           'N') =\n                       'Y'\n                   AND trnt_code NOT IN (SELECT petx_trnt_code\n                                           FROM gin_product_excluded_taxes\n                                          WHERE petx_pro_code = vprocode);\n\n        -- TRNT_RENEWAL_ENDOS != 'N';\n        CURSOR cur_pol_perils (v_btch_no NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_section_perils\n             WHERE pspr_pol_batch_no = v_btch_no;\n\n        CURSOR cur_facre_dtls (v_btch_no NUMBER)\n        IS\n            SELECT *\n              FROM gin_facre_in_dtls\n             WHERE fid_pol_batch_no = v_btch_no;\n\n        CURSOR cur_insureds IS\n            SELECT DISTINCT prp_code\n              FROM gin_temp_trans\n             WHERE pol_batch_no = v_new_pol_batch_no;\n\n        CURSOR cur_ipu (v_prp NUMBER)\n        IS\n            SELECT DISTINCT a.ipu_code,\n                            b.ipu_status,\n                            ipu_property_id,\n                            ipu_item_desc,\n                            ipu_qty,\n                            ipu_value,\n                            ipu_wef,\n                            ipu_wet,\n                            ipu_pol_policy_no,\n                            ipu_pol_ren_endos_no,\n                            ipu_pol_batch_no,\n                            ipu_earth_quake_cover,\n                            ipu_earth_quake_prem,\n                            ipu_location,\n                            ipu_polin_code,\n                            ipu_sec_scl_code,\n                            ipu_ncd_status,\n                            ipu_related_ipu_code,\n                            ipu_prorata,\n                            ipu_gp,\n                            ipu_fap,\n                            ipu_prev_ipu_code,\n                            ipu_ncd_level,\n                            ipu_quz_code,\n                            ipu_quz_sht_desc,\n                            ipu_sht_desc,\n                            ipu_id,\n                            ipu_bind_code,\n                            ipu_excess_rate,\n                            ipu_excess_type,\n                            ipu_excess_rate_type,\n                            ipu_excess_min,\n                            ipu_excess_max,\n                            ipu_prereq_ipu_code,\n                            ipu_escalation_rate,\n                            ipu_comm_rate,\n                            ipu_prev_batch_no,\n                            ipu_cur_code,\n                            ipu_relr_code,\n                            ipu_relr_sht_desc,\n                            ipu_pol_est_max_loss,\n                            ipu_eff_wef,\n                            ipu_eff_wet,\n                            ipu_retro_cover,\n                            ipu_retro_wef,\n                            ipu_covt_code,\n                            ipu_covt_sht_desc,\n                            ipu_si_diff,\n                            ipu_terr_code,\n                            ipu_terr_desc,\n                            ipu_from_time,\n                            ipu_to_time,\n                            ipu_mar_cert_no,\n                            ipu_comp_retention,\n                            ipu_bp,\n                            ipu_fp,\n                            ipu_gross_comp_retention,\n                            ipu_prev_prem,\n                            ipu_com_retention_rate,\n                            ipu_prp_code,\n                            ipu_tot_endos_prem_dif,\n                            ipu_tot_gp,\n                            ipu_tot_value,\n                            ipu_ri_agnt_com_rate,\n                            ipu_cover_days,\n                            ipu_ri_agnt_comm_amt,\n                            ipu_tot_fap,\n                            ipu_max_exposure,\n                            ipu_uw_yr,\n                            ipu_tot_first_loss,\n                            ipu_accumulation_limit,\n                            ipu_reinsure_amt,\n                            ipu_compute_max_exposure,\n                            ipu_paid_premium,\n                            ipu_trans_count,\n                            ipu_paid_tl,\n                            ipu_inception_uwyr,\n                            ipu_endos_remove,\n                            ipu_eml_based_on,\n                            ipu_aggregate_limits,\n                            ipu_rc_sht_desc,\n                            ipu_rc_code,\n                            ipu_survey_date,\n                            ipu_item_details,\n                            ipu_override_ri_retention,\n                            ipu_action_type,\n                            ipu_risk_oth_int_parties,\n                            ipu_conveyance_type,\n                            ipu_prorata_sect_prem,\n                            ipu_nonprorata_sect_prem,\n                            ipu_prev_prorata_sect_prem,\n                            ipu_prev_nonprorata_sect_prem,\n                            ipu_tot_prorata_sect_prem,\n                            ipu_tot_nonprorata_sect_prem,\n                            ipu_prev_tot_prorata_s_prem,\n                            ipu_prev_tot_nonprorata_s_prem,\n                            ipu_install_period,\n                            ipu_rescue_charge,\n                            ipu_rescue_mem,\n                            ipu_rs_code,\n                            ipu_motor_levy,\n                            ipu_health_tax,\n                            ipu_road_safety_tax,\n                            ipu_certchg,\n                            ipu_cashback_appl,\n                            ipu_cashback_level,\n                            ipu_vehicle_model_code,\n                            ipu_vehicle_make_code,\n                            ipu_vehicle_model,\n                            ipu_vehicle_make,\n                            ipu_model_yr,\n                            a.ipu_cert_no,\n                            ipu_maintenance_period_type,\n                            ipu_maintenance_period,\n                            ipu_other_client_deductibles,\n                            ipu_coin_other_client_charges,\n                            ipu_survey_agnt_code,\n                            ipu_survey\n              FROM gin_insured_property_unds a, gin_temp_trans b\n             WHERE     a.ipu_code = b.ipu_code\n                   AND session_id = v_session_id\n                   AND prp_code = v_prp;\n\n        CURSOR cur_limits (v_ipu VARCHAR2)\n        IS\n              SELECT *\n                FROM gin_policy_insured_limits\n               WHERE pil_ipu_code = v_ipu\n            ORDER BY pil_code;\n\n        CURSOR cur_clauses (v_ipu VARCHAR2)\n        IS\n            SELECT *\n              FROM gin_policy_clauses\n             WHERE pocl_ipu_code = v_ipu;\n\n        CURSOR cur_rsk_perils (v_ipu VARCHAR2)\n        IS\n            SELECT *\n              FROM gin_pol_risk_section_perils\n             WHERE prspr_ipu_code = v_ipu;\n\n        CURSOR cur_perils (v_ipu IN NUMBER)\n        IS\n            SELECT *\n              FROM gin_pol_sec_perils\n             WHERE gpsp_ipu_code = v_ipu;\n\n        CURSOR cur_endors_pol IS\n            SELECT *\n              FROM gin_policies\n             WHERE pol_batch_no = v_old_pol_batch_no;\n\n        CURSOR cur_all_active_risks IS\n            SELECT ipu_pol_batch_no,\n                   ipu_code,\n                   ipu_prev_batch_no,\n                   ipu_id,\n                   ipu_pol_policy_no,\n                   ipu_prp_code     ipu_prp_code\n              FROM gin_insured_property_unds, gin_policy_active_risks\n             WHERE     ipu_code = polar_ipu_code\n                   AND polar_pol_batch_no = v_old_pol_batch_no\n                   AND ipu_code NOT IN (SELECT b.ipu_code\n                                          FROM gin_temp_trans b\n                                         WHERE b.session_id = v_session_id);\n\n        CURSOR cur_fam_dtls (v_ipu IN NUMBER)\n        IS\n            SELECT *\n              FROM gin_pol_med_cat_family_details\n             WHERE pmcfd_ipu_code = v_ipu;\n\n        CURSOR cur_fam_limit_dtls (v_ipu IN NUMBER)\n        IS\n            SELECT *\n              FROM gin_pol_med_fam_insured_limits\n             WHERE pmfil_ipu_code = v_ipu;\n\n        CURSOR cur_sbu_dtls IS\n            SELECT *\n              FROM gin_policy_sbu_dtls\n             WHERE pdl_pol_batch_no = v_old_pol_batch_no;\n\n        CURSOR risk_services (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_risk_services\n             WHERE prs_ipu_code = v_ipu;\n\n        CURSOR driver_details (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_clm_drv_dtls\n             WHERE cdr_ipu_code = v_ipu AND cdr_module = 'U';\n    BEGIN\n        v_user := NVL (v_agentcontact, v_user);\n\n        --    raise_error ('v_trans_type='||v_trans_type||'= '||v_regional_endors);\n        BEGIN\n            SELECT gin_parameters_pkg.get_param_varchar (\n                       'ENDOS_WHT_PREV_REIN')\n              INTO v_endos_wht_prev_rein\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_endos_wht_prev_rein := 'N';\n        END;\n\n        BEGIN\n            SELECT gin_parameters_pkg.get_param_varchar (\n                       'ALLOW_EXTENSION_WITH_BAL')\n              INTO v_allow_ext_with_bal\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_allow_ext_with_bal := 'Y';\n        END;\n\n        BEGIN\n            SELECT gin_parameters_pkg.get_param_varchar (\n                       'ALLOW_CERTIFICATE_BALANCES')\n              INTO v_allow_cert_bal\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_allow_cert_bal := 'Y';\n        END;\n\n        BEGIN\n            SELECT gin_parameters_pkg.get_param_varchar (\n                       'SHORT_PERIOD_NO_OF_ENDORS')\n              INTO v_sp_cnt_param\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_sp_cnt_param := 0;\n        END;\n\n        BEGIN\n            SELECT param_value\n              INTO v_auto_populate_limits\n              FROM gin_parameters\n             WHERE param_name = 'AUTO_POPLT_LIMITS_OF_LIABILITY';\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_auto_populate_limits := 'Y';\n            WHEN OTHERS\n            THEN\n                v_auto_populate_limits := 'Y';\n        END;\n\n        BEGIN\n            SELECT gin_parameters_pkg.get_param_varchar (\n                       'EX_TO_PICK_CURRENT_UWYR')\n              INTO v_param_ext\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_param_ext := 'N';\n        END;\n\n        FOR cur_endors_pol_rec IN cur_endors_pol\n        LOOP\n            ---CHECK THE AGENT STATUS IF INACTIVE OR ACTIVE\n            checkagentstatus (cur_endors_pol_rec.pol_agnt_agent_code,\n                              v_trans_type);\n\n            IF     NVL (cur_endors_pol_rec.pol_reinsured, 'N') != 'Y'\n               AND NVL (cur_endors_pol_rec.pol_loaded, 'N') = 'N'\n               AND tqc_interfaces_pkg.get_org_type (37) = 'INS'\n            THEN\n                IF v_endos_wht_prev_rein = 'N'\n                THEN\n                    raise_error (\n                        'Reinsurance for the previous transaction on this policy has not been performed/Authorised. Cannot continue..');\n                ELSE\n                    NULL;\n                END IF;\n            END IF;\n\n            --RAISE_eRROR(v_trans_type||' = '||v_sp_cnt_param);\n            IF NVL (v_trans_type, 'NB') = 'EX'\n            THEN\n                IF NVL (v_sp_cnt_param, 0) > 0\n                THEN\n                    v_shortp_pol :=\n                        gis_web_pkg.validate_shortperiod_ext (\n                            cur_endors_pol_rec.pol_batch_no,\n                            v_sp_cnt_param);\n\n                    IF v_shortp_pol = 'Y'\n                    THEN\n                        raise_error (\n                               'This Policy has < '\n                            || v_sp_cnt_param\n                            || ' > Extension(s) which is the maximum number of extensions..');\n                    END IF;\n                END IF;\n\n                -- RAISE_eRROR(' v_trans_type= '||v_trans_type||' = '||v_sp_cnt_param||' = '||v_allow_ext_with_bal);\n                IF NVL (v_allow_ext_with_bal, 'N') != 'Y'\n                THEN\n                    v_balance :=\n                        gis_accounts_utilities.getpaidprem (\n                            cur_endors_pol_rec.pol_prev_batch_no,\n                            cur_endors_pol_rec.pol_agnt_agent_code,\n                            cur_endors_pol_rec.pol_prp_code,\n                            'B');\n\n                    IF v_balance != 0\n                    THEN\n                        raise_error (\n                               'Previous transaction on Policy '\n                            || cur_endors_pol_rec.pol_policy_no\n                            || ' is not Fully Settled Cannot continue wiht extension');\n                    END IF;\n\n                    v_balance := 0;\n                END IF;\n            END IF;\n\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM gin_policies\n                 WHERE     pol_policy_no = cur_endors_pol_rec.pol_policy_no\n                       AND NVL (pol_current_status, 'D') = 'A';\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error checking policy duplicates..');\n            END;\n\n            IF NVL (v_cnt, 0) > 1\n            THEN\n                raise_error (\n                       'The current policy has '\n                    || v_cnt\n                    || ' active endorsement. Only One active endorsement allowed.');\n            END IF;\n\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM gin_policies\n                 WHERE     pol_policy_no = cur_endors_pol_rec.pol_policy_no\n                       AND pol_current_status = 'D';\n\n                SELECT COUNT (1)\n                  INTO v_cnt2\n                  FROM gin_gis_transactions\n                 WHERE     ggt_pol_policy_no =\n                           cur_endors_pol_rec.pol_policy_no\n                       AND ggt_uw_clm_tran = 'U'\n                       AND NVL (ggt_trans_authorised, 'N') != 'Y';\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error checking un authorised transaction on this policy..');\n            END;\n\n            IF v_trans_type IN ('EN')\n            THEN\n                IF     cur_endors_pol_rec.pol_binder_policy = 'Y'\n                   AND NVL (cur_endors_pol_rec.pol_policy_debit, 'Y') = 'Y'\n                THEN\n                    v_policy_debit := 'N';\n                END IF;\n            END IF;\n\n            --         IF NVL (v_cnt, 0) != 0 OR NVL (v_cnt2, 0) != 0\n            --         THEN\n            --            raise_error ('This Policy has Another Unfinished Transaction..4..');\n            --         END IF;\n            v_val_pol :=\n                gis_web_pkg.validate_transaction (\n                    cur_endors_pol_rec.pol_policy_no);\n\n            --         IF v_val_pol = 'Y'\n            --         THEN\n            --            raise_error\n            --               ('This Policy has Another Unfinished Transaction in the renewal working area....'\n            --               );\n            --         END IF;\n            IF v_trans_type NOT IN ('CN', 'CO')\n            THEN\n                BEGIN\n                    SELECT ggt_sch_status\n                      INTO v_sch_status\n                      FROM gin_gis_transactions\n                     WHERE     ggt_pol_batch_no = v_old_pol_batch_no\n                           AND ggt_uw_clm_tran = 'U';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error getting schedule status for policy....');\n                END;\n\n                IF NVL (v_sch_status, 'O') != 'A'\n                THEN\n                    raise_error (\n                        'Authorise schedule for previous endorsement to continue....');\n                END IF;\n            END IF;\n\n            IF v_trans_type = 'RN'\n            THEN\n                v_pol_status := 'RN';\n                v_pol_wef := v_trans_eff_date;\n                v_pol_wet := ADD_MONTHS (cur_endors_pol_rec.pol_wef_dt, 12);\n                v_pol_uw_yr := TO_NUMBER (TO_CHAR (v_pol_wef, 'RRRR'));\n                v_pol_cover_from := v_pol_wef;\n                v_pol_cover_to := v_pol_wet;\n                v_pol_uwyr_length :=\n                    CEIL (MONTHS_BETWEEN (v_pol_cover_to, v_pol_cover_from));\n            ELSIF v_trans_type = 'EN'\n            THEN\n                v_pol_status := 'EN';\n                v_pol_wef :=\n                    NVL (v_trans_eff_date,\n                         cur_endors_pol_rec.pol_policy_cover_from);\n                v_pol_wet := cur_endors_pol_rec.pol_wet_dt;\n                v_pol_uw_yr := cur_endors_pol_rec.pol_uw_year;\n                v_pol_cover_from := cur_endors_pol_rec.pol_policy_cover_from;\n                v_pol_cover_to := cur_endors_pol_rec.pol_policy_cover_to;\n                v_pol_uwyr_length := cur_endors_pol_rec.pol_uwyr_length;\n            ELSIF v_trans_type = 'EX'\n            THEN\n                v_pol_status := 'EX';\n                v_pol_wef := v_trans_eff_date;\n                v_pol_wet := v_extend_to_date;\n\n                IF NVL (v_param_ext, 'N') = 'Y'\n                THEN\n                    v_pol_uw_yr := TO_NUMBER (TO_CHAR (v_pol_wef, 'RRRR'));\n                ELSE\n                    v_pol_uw_yr := cur_endors_pol_rec.pol_uw_year;\n                END IF;\n\n                v_pol_cover_from := v_pol_wef;\n                v_pol_cover_to := v_pol_wet;\n                v_pol_uwyr_length :=\n                    CEIL (MONTHS_BETWEEN (v_pol_cover_to, v_pol_cover_from));\n            ELSIF v_trans_type = 'RE'\n            THEN\n                v_pol_status := 'RE';\n                v_pol_wef := cur_endors_pol_rec.pol_policy_cover_to;\n                v_pol_wet :=\n                    get_wet_date (cur_endors_pol_rec.pol_pro_code,\n                                  cur_endors_pol_rec.pol_wef_dt);\n                v_pol_uw_yr :=\n                    TO_NUMBER (\n                        TO_CHAR (cur_endors_pol_rec.pol_policy_cover_from,\n                                 'RRRR'));\n                v_pol_cover_from := v_pol_wef;\n                v_pol_cover_to := v_pol_wet;\n                v_pol_uwyr_length :=\n                    CEIL (MONTHS_BETWEEN (v_pol_cover_to, v_pol_cover_from));\n            ELSIF v_trans_type = 'CN'\n            THEN\n                v_pol_status := 'CN';\n\n                IF v_trans_eff_date NOT BETWEEN cur_endors_pol_rec.pol_policy_cover_from\n                                            AND cur_endors_pol_rec.pol_policy_cover_to\n                THEN\n                    raise_error (\n                        'The cancellation effective date must be between policy cover period..');\n                END IF;\n\n                v_pol_wef := v_trans_eff_date;\n                v_pol_wet := v_trans_eff_date;\n                v_pol_uw_yr := cur_endors_pol_rec.pol_uw_year;\n                v_pol_cover_from := cur_endors_pol_rec.pol_policy_cover_from;\n                v_pol_cover_to := v_trans_eff_date;\n                v_pol_uwyr_length := cur_endors_pol_rec.pol_uwyr_length;\n                v_cancel_date := TRUNC (SYSDATE);\n\n                IF v_pol_wef > v_pol_cover_to\n                THEN\n                    raise_error (\n                        'The cancellation effective from date cannot be greater that the policy cover to date...');\n                END IF;\n\n                IF v_pol_wet > v_pol_cover_to\n                THEN\n                    raise_error (\n                        'The cancellation effective to date cannot be greater that the policy cover to date...');\n                END IF;\n            ELSIF v_trans_type = 'DC'\n            THEN\n                v_pol_status := 'DC';\n                v_pol_wef := cur_endors_pol_rec.pol_policy_cover_from;\n                v_pol_wet := cur_endors_pol_rec.pol_wet_dt;\n                v_pol_uw_yr := cur_endors_pol_rec.pol_uw_year;\n                v_pol_cover_from := cur_endors_pol_rec.pol_policy_cover_from;\n                v_pol_cover_to := cur_endors_pol_rec.pol_policy_cover_to;\n                v_pol_uwyr_length := cur_endors_pol_rec.pol_uwyr_length;\n                v_cancel_date := NULL;\n            ELSIF v_trans_type IN ('NB', 'SP')\n            THEN\n                raise_error (\n                       'Transaction type '\n                    || v_trans_type\n                    || ' not catered for..');\n            END IF;\n\n            v_pol_renewal_dt :=\n                get_renewal_date (cur_endors_pol_rec.pol_pro_code, v_pol_wet);\n\n            IF v_trans_type = 'RN'\n            THEN\n                IF v_pol_wef < cur_endors_pol_rec.pol_policy_cover_to\n                THEN\n                    raise_error (\n                        'The Policy Renewal Cover From Date Cannot Be Less Than The Previous Policy Cover To Date...');\n                END IF;\n            ELSIF v_trans_type IN ('EN', 'SP', 'DC')\n            THEN\n                IF v_pol_wef NOT BETWEEN v_pol_cover_from AND v_pol_cover_to\n                THEN\n                    raise_error (\n                           'The Policy endorsement cover from date '\n                        || v_pol_wef\n                        || ' must be between the policies cover from  '\n                        || v_pol_cover_from\n                        || ' and cover to dates  '\n                        || v_pol_cover_to\n                        || '...'\n                        || v_old_pol_batch_no\n                        || '');\n                ELSIF v_pol_wet NOT BETWEEN v_pol_cover_from\n                                        AND v_pol_cover_to\n                THEN\n                    raise_error (\n                           'The Policy endorsement cover to date  '\n                        || v_pol_wet\n                        || ' must be between the policies cover from  '\n                        || v_pol_cover_from\n                        || ' and cover to dates  '\n                        || v_pol_cover_to\n                        || '...');\n                END IF;\n            ELSIF v_trans_type = 'EX'\n            THEN\n                IF v_pol_wef < cur_endors_pol_rec.pol_policy_cover_to\n                THEN\n                    raise_error (\n                           'The Policy extension cover from date '\n                        || v_pol_wef\n                        || ' must be greater or equal to the previous policies cover to dates.'\n                        || cur_endors_pol_rec.pol_policy_cover_to\n                        || '..');\n                ELSIF v_pol_wet <= v_pol_wef\n                THEN\n                    raise_error (\n                           'The Policy extension cover to date '\n                        || v_pol_wet\n                        || ' must be greater than the policies cover from dates '\n                        || v_pol_wef\n                        || '...');\n                END IF;\n            END IF;\n\n            BEGIN\n                SELECT NVL (pro_endos_min_prem, 0)\n                  INTO v_endors_min_prem --:GIN_POLICIES_RENEWAL.POL_END_MIN_PREM\n                  FROM gin_products\n                 WHERE pro_code = cur_endors_pol_rec.pol_pro_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_endors_min_prem := 0;\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error :- Unable to retrieve the policy endorsement minimum premium...');\n            END;\n\n            IF cur_endors_pol_rec.pol_policy_type = 'N'\n            THEN\n                -- RAISE_ERROR('IN');\n                v_end_no :=\n                    gin_sequences_pkg.get_number_format (\n                        'E',\n                        cur_endors_pol_rec.pol_pro_code,\n                        cur_endors_pol_rec.pol_brn_code,\n                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                        v_trans_type,\n                        NULL,\n                        'N',\n                        cur_endors_pol_rec.pol_policy_no);\n            ELSE\n                v_end_no :=\n                    gin_sequences_pkg.get_number_format (\n                        'ER',\n                        cur_endors_pol_rec.pol_pro_code,\n                        cur_endors_pol_rec.pol_brn_code,\n                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                        v_trans_type,\n                        NULL,\n                        'N',\n                        cur_endors_pol_rec.pol_policy_no);\n            END IF;\n\n            IF NVL (v_regional_endors, 'N') = 'Y'\n            THEN\n                v_com_allowed := 'N';\n            ELSE\n                v_com_allowed := 'Y';\n            END IF;\n\n            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                   || gin_pol_batch_no_seq.NEXTVAL\n              INTO v_new_pol_batch_no\n              FROM DUAL;\n\n            v_new_batch_no := v_new_pol_batch_no;\n\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM gin_policies\n                 WHERE     pol_policy_no = cur_endors_pol_rec.pol_policy_no\n                       AND pol_ren_endos_no = v_end_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            IF NVL (v_cnt, 0) > 0\n            THEN\n                v_end_no := v_end_no || '-' || v_cnt;\n            END IF;\n\n            --raise_error(v_end_comm_allowed||'='||v_regional_endors);\n            BEGIN\n                INSERT INTO gin_policies (pol_policy_no,\n                                          pol_client_policy_number,\n                                          pol_ren_endos_no,\n                                          pol_batch_no,\n                                          pol_coin_fee,\n                                          pol_renewable,\n                                          pol_prev_batch_no,\n                                          pol_authosrised,\n                                          pol_current_status,\n                                          pol_post_status,\n                                          pol_renewal_dt,\n                                          pol_comm_rate,\n                                          pol_pro_code,\n                                          pol_pro_sht_desc,\n                                          pol_policy_type,\n                                          pol_binder_policy,\n                                          pol_bind_pro_code,\n                                          pol_bind_pro_sht_desc,\n                                          pol_coinsurance_share,\n                                          pol_quot_no,\n                                          pol_comm_amt,\n                                          pol_cur_code,\n                                          pol_cur_symbol,\n                                          pol_agnt_agent_code,\n                                          pol_bind_code,\n                                          pol_pmod_code,\n                                          pol_agnt_sht_desc,\n                                          pol_brn_code,\n                                          pol_brn_sht_desc,\n                                          pol_prp_code,\n                                          pol_total_sum_insured,\n                                          pol_basic_premium,\n                                          pol_nett_premium,\n                                          pol_comm_endos_diff_amt,\n                                          pol_total_fap,\n                                          pol_total_gp,\n                                          pol_tot_endos_diff_amt,\n                                          pol_coinsurance,\n                                          pol_coinsure_leader,\n                                          pol_coinsure_pct,\n                                          pol_inception_dt,\n                                          pol_ri_agnt_agent_code,\n                                          pol_ri_agnt_sht_desc,\n                                          pol_ri_agent_comm_rate,\n                                          pol_coin_tot_prem,\n                                          pol_coin_endos_prem,\n                                          pol_coin_tot_si,\n                                          pol_prepared_by,\n                                          pol_prepared_date,\n                                          pol_pip_code,\n                                          pol_oth_int_parties,\n                                          pol_policy_status,\n                                          pol_wef_dt,\n                                          pol_wet_dt,\n                                          pol_uw_year,\n                                          pol_policy_cover_to,\n                                          pol_policy_cover_from,\n                                          pol_uwyr_length,\n                                          pol_trans_eff_wet,\n                                          pol_old_policy_no,\n                                          pol_commission_allowed,\n                                          pol_inception_uwyr,\n                                          pol_aga_code,\n                                          pol_clna_code,\n                                          pol_sub_aga_code,\n                                          pol_admin_fee_disc_rate,\n                                          pol_admin_fee_disc_amt,\n                                          pol_coin_leader_combined,\n                                          pol_coin_fee_trans,\n                                          pol_lta_comm_disc_amt,\n                                          pol_med_policy_type,\n                                          pol_paid_up_date,\n                                          pol_os_prem_bal_amt,\n                                          pol_maturity_date,\n                                          pol_paid_instlmt_no,\n                                          pol_freq_of_payment,\n                                          pol_instlmt_amt,\n                                          pol_os_instlmt_no,\n                                          pol_instlmt_prem,\n                                          pol_paid_to_date,\n                                          pol_tot_instlmt,\n                                          pol_last_prem_due_date,\n                                          pol_instlmt_day,\n                                          pol_policy_doc,\n                                          pol_past_period_endos,\n                                          pol_endorse_comm_allowed,\n                                          pol_coin_gross,\n                                          pol_uw_period,\n                                          pol_cancelled_by,\n                                          pol_open_cover,\n                                          pol_policy_debit,\n                                          pol_scheme_policy,\n                                          pol_pro_interface_type,\n                                          pol_joint_prp_code,\n                                          pol_joint,\n                                          pol_intro_code,\n                                          pol_force_sf_compute,\n                                          pol_enforce_sf_param,\n                                          pol_open_policy,\n                                          pol_old_agent,\n                                          pol_pymt_faci_agnt_code,\n                                          pol_old_policy_number,\n                                          pol_div_code,\n                                          pol_bdiv_code,\n                                          pol_regional_endors,\n                                          pol_endors_status,\n                                          pol_cr_date_notified,\n                                          pol_cr_note_number,\n                                          pol_pop_taxes,\n                                          pol_admin_fee_allowed,\n                                          pol_cashback_appl,\n                                          pol_uw_only,\n                                          pol_debiting_type,\n                                          pol_debt_owner,\n                                          pol_credit_limit,\n                                          pol_promise_date,\n                                          pol_src_direct_business)\n                         VALUES (\n                                    cur_endors_pol_rec.pol_policy_no,\n                                    cur_endors_pol_rec.pol_client_policy_number,\n                                    v_end_no,\n                                    v_new_pol_batch_no,\n                                    cur_endors_pol_rec.pol_coin_fee,\n                                    cur_endors_pol_rec.pol_renewable,\n                                    v_old_pol_batch_no,\n                                    'N',\n                                    'D',\n                                    'N',\n                                    v_pol_renewal_dt,\n                                    0,\n                                    cur_endors_pol_rec.pol_pro_code,\n                                    cur_endors_pol_rec.pol_pro_sht_desc,\n                                    cur_endors_pol_rec.pol_policy_type,\n                                    cur_endors_pol_rec.pol_binder_policy,\n                                    cur_endors_pol_rec.pol_bind_pro_code,\n                                    cur_endors_pol_rec.pol_bind_pro_sht_desc,\n                                    cur_endors_pol_rec.pol_coinsurance_share,\n                                    cur_endors_pol_rec.pol_quot_no,\n                                    0,\n                                    cur_endors_pol_rec.pol_cur_code,\n                                    cur_endors_pol_rec.pol_cur_symbol,\n                                    cur_endors_pol_rec.pol_agnt_agent_code,\n                                    cur_endors_pol_rec.pol_bind_code,\n                                    cur_endors_pol_rec.pol_pmod_code,\n                                    cur_endors_pol_rec.pol_agnt_sht_desc,\n                                    cur_endors_pol_rec.pol_brn_code,\n                                    cur_endors_pol_rec.pol_brn_sht_desc,\n                                    cur_endors_pol_rec.pol_prp_code,\n                                    cur_endors_pol_rec.pol_total_sum_insured,\n                                    cur_endors_pol_rec.pol_basic_premium,\n                                    cur_endors_pol_rec.pol_nett_premium,\n                                    cur_endors_pol_rec.pol_comm_endos_diff_amt,\n                                    cur_endors_pol_rec.pol_total_fap,\n                                    cur_endors_pol_rec.pol_total_gp,\n                                    cur_endors_pol_rec.pol_tot_endos_diff_amt,\n                                    cur_endors_pol_rec.pol_coinsurance,\n                                    cur_endors_pol_rec.pol_coinsure_leader,\n                                    cur_endors_pol_rec.pol_coinsure_pct,\n                                    cur_endors_pol_rec.pol_inception_dt,\n                                    cur_endors_pol_rec.pol_ri_agnt_agent_code,\n                                    cur_endors_pol_rec.pol_ri_agnt_sht_desc,\n                                    cur_endors_pol_rec.pol_ri_agent_comm_rate,\n                                    cur_endors_pol_rec.pol_coin_tot_prem,\n                                    cur_endors_pol_rec.pol_coin_endos_prem,\n                                    cur_endors_pol_rec.pol_coin_tot_si,\n                                    v_user,\n                                    TRUNC (SYSDATE),\n                                    cur_endors_pol_rec.pol_pip_code,\n                                    cur_endors_pol_rec.pol_oth_int_parties,\n                                    v_pol_status,\n                                    v_pol_wef,\n                                    v_pol_wet,\n                                    v_pol_uw_yr,\n                                    v_pol_cover_to,\n                                    v_pol_cover_from,\n                                    v_pol_uwyr_length,\n                                    v_pol_wet,\n                                    cur_endors_pol_rec.pol_old_policy_no,\n                                    DECODE (\n                                        v_end_comm_allowed,\n                                        'Y', 'N',\n                                        --GIS-11824 To take care of normal endorsement done after regional endorsement is COMESA\n                                        NVL (\n                                            v_com_allowed,\n                                            cur_endors_pol_rec.pol_commission_allowed)),\n                                    cur_endors_pol_rec.pol_inception_uwyr,\n                                    cur_endors_pol_rec.pol_aga_code,\n                                    cur_endors_pol_rec.pol_clna_code,\n                                    cur_endors_pol_rec.pol_sub_aga_code,\n                                    cur_endors_pol_rec.pol_admin_fee_disc_rate,\n                                    cur_endors_pol_rec.pol_admin_fee_disc_amt,\n                                    cur_endors_pol_rec.pol_coin_leader_combined,\n                                    cur_endors_pol_rec.pol_coin_fee_trans,\n                                    cur_endors_pol_rec.pol_lta_comm_disc_amt,\n                                    cur_endors_pol_rec.pol_med_policy_type,\n                                    cur_endors_pol_rec.pol_paid_up_date,\n                                    cur_endors_pol_rec.pol_os_prem_bal_amt,\n                                    cur_endors_pol_rec.pol_maturity_date,\n                                    cur_endors_pol_rec.pol_paid_instlmt_no,\n                                    cur_endors_pol_rec.pol_freq_of_payment,\n                                    cur_endors_pol_rec.pol_instlmt_amt,\n                                    cur_endors_pol_rec.pol_os_instlmt_no,\n                                    cur_endors_pol_rec.pol_instlmt_prem,\n                                    cur_endors_pol_rec.pol_paid_to_date,\n                                    cur_endors_pol_rec.pol_tot_instlmt,\n                                    cur_endors_pol_rec.pol_last_prem_due_date,\n                                    cur_endors_pol_rec.pol_instlmt_day,\n                                    cur_endors_pol_rec.pol_policy_doc,\n                                    NVL (v_past_period, 'N'),\n                                    DECODE (v_end_comm_allowed,\n                                            'Y', 'N',\n                                            'Y'),\n                                    cur_endors_pol_rec.pol_coin_gross,\n                                    cur_endors_pol_rec.pol_uw_period,\n                                    v_cancelled_by,\n                                    cur_endors_pol_rec.pol_open_cover,\n                                    NVL (v_policy_debit,\n                                         cur_endors_pol_rec.pol_policy_debit),\n                                    cur_endors_pol_rec.pol_scheme_policy,\n                                    cur_endors_pol_rec.pol_pro_interface_type,\n                                    cur_endors_pol_rec.pol_joint_prp_code,\n                                    cur_endors_pol_rec.pol_joint,\n                                    cur_endors_pol_rec.pol_intro_code,\n                                    cur_endors_pol_rec.pol_force_sf_compute,\n                                    cur_endors_pol_rec.pol_enforce_sf_param,\n                                    cur_endors_pol_rec.pol_open_policy,\n                                    cur_endors_pol_rec.pol_old_agent,\n                                    cur_endors_pol_rec.pol_pymt_faci_agnt_code,\n                                    cur_endors_pol_rec.pol_old_policy_number,\n                                    cur_endors_pol_rec.pol_div_code,\n                                    cur_endors_pol_rec.pol_bdiv_code,\n                                    NVL (\n                                        v_regional_endors,\n                                        cur_endors_pol_rec.pol_regional_endors),\n                                    v_endors_status,\n                                    cur_endors_pol_rec.pol_cr_date_notified,\n                                    cur_endors_pol_rec.pol_cr_note_number,\n                                    cur_endors_pol_rec.pol_pop_taxes,\n                                    cur_endors_pol_rec.pol_admin_fee_allowed,\n                                    cur_endors_pol_rec.pol_cashback_appl,\n                                    cur_endors_pol_rec.pol_uw_only,\n                                    cur_endors_pol_rec.pol_debiting_type,\n                                    cur_endors_pol_rec.pol_debt_owner,\n                                    cur_endors_pol_rec.pol_credit_limit,\n                                    cur_endors_pol_rec.pol_promise_date,\n                                    cur_endors_pol_rec.pol_src_direct_business);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error inserting policy record..');\n            END;\n\n            SELECT TO_NUMBER (\n                          TO_CHAR (SYSDATE, 'RRRR')\n                       || gin_session_id_seq.NEXTVAL)\n              INTO v_session_id\n              FROM DUAL;\n\n            BEGIN\n                DELETE gin_temp_trans\n                 WHERE pol_batch_no = v_new_pol_batch_no;\n            EXCEPTION\n                WHEN v_dup_rec\n                THEN\n                    raise_error ('Unable to refresh transaction...');\n            END;\n\n            BEGIN\n                UPDATE gin_policy_subclass_clauses\n                   SET poscl_new = 'N'\n                 WHERE poscl_pol_policy_no = v_pol_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Unable to update subclass clauses');\n            END;\n\n            FOR x IN 1 .. v_rsks_tab.COUNT\n            LOOP\n                BEGIN\n                    INSERT INTO gin_temp_trans (session_id,\n                                                ipu_code,\n                                                polin_code,\n                                                prp_code,\n                                                pol_batch_no,\n                                                ipu_status,\n                                                ipu_action_type)\n                         VALUES (v_session_id,\n                                 v_rsks_tab (x).gis_ipu_code,\n                                 v_rsks_tab (x).polin_code,\n                                 v_rsks_tab (x).prp_code,\n                                 v_new_pol_batch_no,\n                                 v_rsks_tab (x).ipu_status,\n                                 v_rsks_tab (x).ipu_action_type);\n                EXCEPTION\n                    WHEN v_dup_rec\n                    THEN\n                        raise_error (\n                               'The Risk code '\n                            || v_rsks_tab (x).gis_ipu_code\n                            || ' does not have a defined insured...');\n                END;\n            END LOOP;\n\n            /*-----------------------------------------------------------------------------\n            COMMENTED OUT BY JIM 29April2010 to stop creation of Active Risks for endorsement at this Point.\n            They will be created at Populate_endors_rsk_dtls s\n            Subsequently uncommented by Kizito on 251010 for it was meant to be there in the first place.\n            -------------------------------------------------------------------------------*/\n            IF v_trans_type != 'RN'\n            THEN\n                FOR cur_all_active_risks_rec IN cur_all_active_risks\n                LOOP\n                    BEGIN\n                        INSERT INTO gin_policy_active_risks (\n                                        polar_pol_batch_no,\n                                        polar_ipu_code,\n                                        polar_prev_batch_no,\n                                        polar_ipu_id,\n                                        polar_pol_policy_no,\n                                        polar_prp_code)\n                                 VALUES (\n                                            v_new_pol_batch_no,\n                                            cur_all_active_risks_rec.ipu_code,\n                                            cur_all_active_risks_rec.ipu_prev_batch_no,\n                                            cur_all_active_risks_rec.ipu_id,\n                                            cur_all_active_risks_rec.ipu_pol_policy_no,\n                                            cur_all_active_risks_rec.ipu_prp_code);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Unable to insert active risks details, ...');\n                    END;\n                END LOOP;\n            END IF;\n\n            --         Raise_error(' cur_endors_pol_rec.pol_binder_policy'|| cur_endors_pol_rec.pol_binder_policy||'v_old_pol_batch_no'||v_old_pol_batch_no);\n            --                         BEGIN\n            --                   IF cur_endors_pol_rec.pol_policy_no = '100504011000077'\n            --                   THEN\n            --                      raise_error (   'v_trans_type'\n            --                                   || v_trans_type\n            --                                   || 'cur_endors_pol_rec.pol_binder_policy'\n            --                                   || cur_endors_pol_rec.pol_binder_policy\n            --                                   ||'v_new_pol_batch_no'\n            --                                   ||v_new_pol_batch_no\n            --\n            --                                  );\n            --                   END IF;\n            --                END;\n            IF v_trans_type != 'RN'\n            THEN\n                IF cur_endors_pol_rec.pol_binder_policy = 'Y'\n                THEN\n                    FOR cur_all_active_risks_rec\n                        IN cur_active_risks (\n                               cur_endors_pol_rec.pol_policy_no,\n                               v_old_pol_batch_no)\n                    LOOP\n                        BEGIN\n                            SELECT COUNT (1)\n                              INTO v_rs_cnt\n                              FROM gin_policy_active_risks\n                             WHERE     polar_pol_batch_no =\n                                       v_new_pol_batch_no\n                                   AND polar_ipu_id =\n                                       cur_all_active_risks_rec.ipu_id;\n\n                            IF NVL (v_rs_cnt, 0) < 1\n                            THEN\n                                INSERT INTO gin_policy_active_risks (\n                                                polar_pol_batch_no,\n                                                polar_ipu_code,\n                                                polar_prev_batch_no,\n                                                polar_ipu_id,\n                                                polar_pol_policy_no,\n                                                polar_prp_code)\n                                         VALUES (\n                                                    v_new_pol_batch_no,\n                                                    cur_all_active_risks_rec.ipu_code,\n                                                    cur_all_active_risks_rec.ipu_prev_batch_no,\n                                                    cur_all_active_risks_rec.ipu_id,\n                                                    cur_all_active_risks_rec.ipu_pol_policy_no,\n                                                    cur_all_active_risks_rec.ipu_prp_code);\n                            END IF;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        --                  THEN\n                        --                     raise_error\n                        --                                ('Unable to insert active risks details, ...'||cur_all_active_risks_rec.ipu_id||';'||v_old_pol_batch_no);\n                        END;\n                    END LOOP;\n                END IF;\n            END IF;\n\n            FOR cur_sbu_dtls_rec IN cur_sbu_dtls\n            LOOP\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))\n                           || gin_pdl_code_seq.NEXTVAL\n                      INTO v_pdl_code\n                      FROM DUAL;\n\n                    INSERT INTO gin_policy_sbu_dtls (pdl_code,\n                                                     pdl_pol_batch_no,\n                                                     pdl_unit_code,\n                                                     pdl_location_code,\n                                                     pdl_prepared_date)\n                         VALUES (v_pdl_code,\n                                 v_new_pol_batch_no,\n                                 cur_sbu_dtls_rec.pdl_unit_code,\n                                 cur_sbu_dtls_rec.pdl_location_code,\n                                 TRUNC (SYSDATE));\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        NULL;\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Creating Policy Other Details Record..');\n                END;\n            END LOOP;\n\n            FOR cur_facre_dtls_rec IN cur_facre_dtls (v_old_pol_batch_no)\n            LOOP\n                INSERT INTO gin_facre_in_dtls (fid_pol_policy_no,\n                                               fid_pol_ren_endos_no,\n                                               fid_pol_batch_no,\n                                               fid_agnt_agent_code,\n                                               fid_agnt_sht_desc,\n                                               fid_prp_code,\n                                               fid_sum_insured,\n                                               fid_gross_rate,\n                                               fid_cede_comp_first_prem,\n                                               fid_cede_comp_terms,\n                                               fid_rein_terms,\n                                               fid_cede_comp_gross_ret,\n                                               fid_cede_comp_rein_amt,\n                                               fid_amt_perc_sum_insured,\n                                               fid_wef,\n                                               fid_wet,\n                                               fid_code,\n                                               fid_cede_comp_policy_no,\n                                               fid_cede_comp_term_frm,\n                                               fid_cede_comp_term_to,\n                                               fid_cede_company_ren_prem,\n                                               fid_reins_term_to,\n                                               fid_cede_sign_dt)\n                         VALUES (\n                                    cur_facre_dtls_rec.fid_pol_policy_no,\n                                    v_end_no,\n                                    v_new_pol_batch_no,\n                                    cur_facre_dtls_rec.fid_agnt_agent_code,\n                                    cur_facre_dtls_rec.fid_agnt_sht_desc,\n                                    cur_facre_dtls_rec.fid_prp_code,\n                                    cur_facre_dtls_rec.fid_sum_insured,\n                                    cur_facre_dtls_rec.fid_gross_rate,\n                                    cur_facre_dtls_rec.fid_cede_comp_first_prem,\n                                    cur_facre_dtls_rec.fid_cede_comp_terms,\n                                    cur_facre_dtls_rec.fid_rein_terms,\n                                    cur_facre_dtls_rec.fid_cede_comp_gross_ret,\n                                    cur_facre_dtls_rec.fid_cede_comp_rein_amt,\n                                    cur_facre_dtls_rec.fid_amt_perc_sum_insured,\n                                    cur_facre_dtls_rec.fid_wef,\n                                    cur_facre_dtls_rec.fid_wet,\n                                       TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                                    || gin_fid_code_seq.NEXTVAL,\n                                    cur_facre_dtls_rec.fid_cede_comp_policy_no,\n                                    cur_facre_dtls_rec.fid_cede_comp_term_frm,\n                                    cur_facre_dtls_rec.fid_cede_comp_term_to,\n                                    cur_facre_dtls_rec.fid_cede_company_ren_prem,\n                                    cur_facre_dtls_rec.fid_reins_term_to,\n                                    cur_facre_dtls_rec.fid_cede_sign_dt);\n            END LOOP;\n\n            FOR cur_coinsurer_rec IN cur_coinsurer (v_old_pol_batch_no)\n            LOOP\n                --INSERT INTO GIN_REN_COINSURERS\n                BEGIN\n                    INSERT INTO gin_coinsurers (coin_agnt_agent_code,\n                                                coin_agnt_sht_desc,\n                                                coin_gl_code,\n                                                coin_lead,\n                                                coin_perct,\n                                                coin_prem,\n                                                coin_pol_policy_no,\n                                                coin_pol_ren_endos_no,\n                                                coin_pol_batch_no,\n                                                coin_fee_rate,\n                                                coin_fee_amt,\n                                                coin_duties,\n                                                coin_si,\n                                                coin_optional_comm,\n                                                coin_comm_rate,\n                                                coin_comm_type)\n                         VALUES (cur_coinsurer_rec.coin_agnt_agent_code,\n                                 cur_coinsurer_rec.coin_agnt_sht_desc,\n                                 cur_coinsurer_rec.coin_gl_code,\n                                 cur_coinsurer_rec.coin_lead,\n                                 cur_coinsurer_rec.coin_perct,\n                                 cur_coinsurer_rec.coin_prem,\n                                 cur_coinsurer_rec.coin_pol_policy_no,\n                                 v_end_no,\n                                 v_new_pol_batch_no,\n                                 cur_coinsurer_rec.coin_fee_rate,\n                                 0,\n                                 cur_coinsurer_rec.coin_duties,\n                                 cur_coinsurer_rec.coin_si,\n                                 cur_coinsurer_rec.coin_optional_comm,\n                                 cur_coinsurer_rec.coin_comm_rate,\n                                 cur_coinsurer_rec.coin_comm_type);\n                EXCEPTION\n                    WHEN DUP_VAL_ON_INDEX\n                    THEN\n                        raise_error (\n                               'System attempted to illegaly duplicate '\n                            || cur_coinsurer_rec.coin_agnt_sht_desc\n                            || ' coinsurer record. Please contact System Administrator for support...');\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to insert coinsurance details, ...');\n                END;\n            END LOOP;\n\n            FOR cur_conditions_rec IN cur_conditions (v_old_pol_batch_no)\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_lvl_clauses (\n                                    plcl_sbcl_cls_code,\n                                    plcl_sbcl_scl_code,\n                                    plcl_pro_sht_desc,\n                                    plcl_pro_code,\n                                    plcl_pol_policy_no,\n                                    plcl_pol_ren_endos_no,\n                                    plcl_pol_batch_no,\n                                    plcl_sbcl_cls_sht_desc,\n                                    plcl_cls_type,\n                                    plcl_clause,\n                                    plcl_cls_editable,\n                                    plcl_new,\n                                    plcl_header,\n                                    plcl_heading)\n                         VALUES (cur_conditions_rec.plcl_sbcl_cls_code,\n                                 cur_conditions_rec.plcl_sbcl_scl_code,\n                                 cur_conditions_rec.plcl_pro_sht_desc,\n                                 cur_conditions_rec.plcl_pro_code,\n                                 cur_conditions_rec.plcl_pol_policy_no,\n                                 v_end_no,\n                                 v_new_pol_batch_no,\n                                 cur_conditions_rec.plcl_sbcl_cls_sht_desc,\n                                 cur_conditions_rec.plcl_cls_type,\n                                 cur_conditions_rec.plcl_clause,\n                                 cur_conditions_rec.plcl_cls_editable,\n                                 'N',\n                                 cur_conditions_rec.plcl_header,\n                                 cur_conditions_rec.plcl_heading);\n                EXCEPTION\n                    WHEN DUP_VAL_ON_INDEX\n                    THEN\n                        raise_error (\n                               'System attempted to illegaly duplicate '\n                            || cur_conditions_rec.plcl_sbcl_cls_sht_desc\n                            || ' clause record. Please contact Turnkey Africa for support...');\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to insert policy level clauses details, ...');\n                END;\n            END LOOP;\n\n            FOR cur_subclass_conditions_rec\n                IN cur_subclass_conditions (v_old_pol_batch_no)\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_subclass_clauses (\n                                    poscl_cls_code,\n                                    poscl_sht_desc,\n                                    poscl_heading,\n                                    poscl_scl_code,\n                                    poscl_pol_policy_no,\n                                    poscl_cls_type,\n                                    poscl_clause,\n                                    poscl_cls_editable,\n                                    poscl_new,\n                                    poscl_pol_batch_no,\n                                    poscl_code)\n                             VALUES (\n                                        cur_subclass_conditions_rec.poscl_cls_code,\n                                        cur_subclass_conditions_rec.poscl_sht_desc,\n                                        cur_subclass_conditions_rec.poscl_heading,\n                                        cur_subclass_conditions_rec.poscl_scl_code,\n                                        cur_subclass_conditions_rec.poscl_pol_policy_no,\n                                        cur_subclass_conditions_rec.poscl_cls_type,\n                                        cur_subclass_conditions_rec.poscl_clause,\n                                        cur_subclass_conditions_rec.poscl_cls_editable,\n                                        cur_subclass_conditions_rec.poscl_new,\n                                        v_new_pol_batch_no,\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_poscl_code_seq.NEXTVAL);\n                EXCEPTION\n                    WHEN DUP_VAL_ON_INDEX\n                    THEN\n                        raise_error (\n                               'System attempted to illegaly duplicate '\n                            || cur_subclass_conditions_rec.poscl_sht_desc\n                            || ' clause record. Please contact Turnkey Africa for support...');\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to insert policy level sub class clauses details, ...');\n                END;\n            END LOOP;\n\n            FOR cur_schedule_values_rec\n                IN cur_schedule_values (v_old_pol_batch_no)\n            LOOP\n                --RAISE_ERROR('v_old_pol_batch_no'||v_old_pol_batch_no);\n                BEGIN\n                    INSERT INTO gin_pol_schedule_values (schpv_code,\n                                                         schpv_schv_code,\n                                                         schpv_pol_batch_no,\n                                                         schpv_value,\n                                                         schpv_narration)\n                         VALUES (gin_schpv_code_seq.NEXTVAL,\n                                 cur_schedule_values_rec.schpv_schv_code,\n                                 v_new_pol_batch_no,\n                                 cur_schedule_values_rec.schpv_value,\n                                 cur_schedule_values_rec.schpv_narration);\n                EXCEPTION\n                    WHEN DUP_VAL_ON_INDEX\n                    THEN\n                        raise_error (\n                               'System attempted to illegaly duplicate '\n                            || cur_schedule_values_rec.schpv_schv_code\n                            || ' clause record. Please contact Turnkey Africa for support...');\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to insert policy level clauses details, ...');\n                END;\n            END LOOP;\n\n            BEGIN\n                UPDATE gin_policy_subclass_clauses\n                   SET poscl_new = 'N'\n                 WHERE poscl_pol_policy_no = v_pol_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Unable to update subclass clause status');\n            END;\n\n            FOR cur_pol_perils_rec IN cur_pol_perils (v_old_pol_batch_no)\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_section_perils (\n                                    pspr_code,\n                                    pspr_scl_code,\n                                    pspr_sect_code,\n                                    pspr_sect_sht_desc,\n                                    pspr_per_code,\n                                    pspr_per_sht_desc,\n                                    pspr_mandatory,\n                                    pspr_peril_limit,\n                                    pspr_peril_type,\n                                    pspr_si_or_limit,\n                                    pspr_sec_code,\n                                    pspr_excess_type,\n                                    pspr_excess,\n                                    pspr_excess_min,\n                                    pspr_excess_max,\n                                    pspr_expire_on_claim,\n                                    pspr_bind_code,\n                                    pspr_person_limit,\n                                    pspr_claim_limit,\n                                    pspr_desc,\n                                    pspr_bind_type,\n                                    pspr_pol_batch_no,\n                                    pspr_sspr_code,\n                                    pspr_depreciation_pct,\n                                    pspr_tl_excess_type,\n                                    pspr_tl_excess,\n                                    pspr_tl_excess_min,\n                                    pspr_tl_excess_max,\n                                    pspr_pl_excess_type,\n                                    pspr_pl_excess,\n                                    pspr_pl_excess_min,\n                                    pspr_pl_excess_max,\n                                    pspr_claim_excess_min,\n                                    pspr_claim_excess_max,\n                                    pspr_depend_loss_type,\n                                    pspr_claim_excess_type,\n                                    pspr_ttd_ben_pcts)\n                         VALUES (gin_pspr_code_seq.NEXTVAL,\n                                 cur_pol_perils_rec.pspr_scl_code,\n                                 cur_pol_perils_rec.pspr_sect_code,\n                                 cur_pol_perils_rec.pspr_sect_sht_desc,\n                                 cur_pol_perils_rec.pspr_per_code,\n                                 cur_pol_perils_rec.pspr_per_sht_desc,\n                                 cur_pol_perils_rec.pspr_mandatory,\n                                 cur_pol_perils_rec.pspr_peril_limit,\n                                 cur_pol_perils_rec.pspr_peril_type,\n                                 cur_pol_perils_rec.pspr_si_or_limit,\n                                 cur_pol_perils_rec.pspr_sec_code,\n                                 cur_pol_perils_rec.pspr_excess_type,\n                                 cur_pol_perils_rec.pspr_excess,\n                                 cur_pol_perils_rec.pspr_excess_min,\n                                 cur_pol_perils_rec.pspr_excess_max,\n                                 cur_pol_perils_rec.pspr_expire_on_claim,\n                                 cur_pol_perils_rec.pspr_bind_code,\n                                 cur_pol_perils_rec.pspr_person_limit,\n                                 cur_pol_perils_rec.pspr_claim_limit,\n                                 cur_pol_perils_rec.pspr_desc,\n                                 cur_pol_perils_rec.pspr_bind_type,\n                                 v_new_pol_batch_no,\n                                 cur_pol_perils_rec.pspr_sspr_code,\n                                 cur_pol_perils_rec.pspr_depreciation_pct,\n                                 cur_pol_perils_rec.pspr_tl_excess_type,\n                                 cur_pol_perils_rec.pspr_tl_excess,\n                                 cur_pol_perils_rec.pspr_tl_excess_min,\n                                 cur_pol_perils_rec.pspr_tl_excess_max,\n                                 cur_pol_perils_rec.pspr_pl_excess_type,\n                                 cur_pol_perils_rec.pspr_pl_excess,\n                                 cur_pol_perils_rec.pspr_pl_excess_min,\n                                 cur_pol_perils_rec.pspr_pl_excess_max,\n                                 cur_pol_perils_rec.pspr_claim_excess_min,\n                                 cur_pol_perils_rec.pspr_claim_excess_max,\n                                 cur_pol_perils_rec.pspr_depend_loss_type,\n                                 cur_pol_perils_rec.pspr_claim_excess_type,\n                                 cur_pol_perils_rec.pspr_ttd_ben_pcts);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error updating policy perils..');\n                END;\n            END LOOP;\n\n            FOR cur_taxes_rec\n                IN cur_taxes (v_old_pol_batch_no,\n                              cur_endors_pol_rec.pol_pro_code)\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_taxes (ptx_trac_scl_code,\n                                                  ptx_trac_trnt_code,\n                                                  ptx_pol_policy_no,\n                                                  ptx_pol_ren_endos_no,\n                                                  ptx_pol_batch_no,\n                                                  ptx_rate,\n                                                  ptx_amount,\n                                                  ptx_tl_lvl_code,\n                                                  ptx_rate_type,\n                                                  ptx_rate_desc,\n                                                  ptx_endos_diff_amt,\n                                                  ptx_tax_type,\n                                                  ptx_risk_pol_level,\n                                                  ptx_override,\n                                                  ptx_override_amt)\n                         VALUES (cur_taxes_rec.ptx_trac_scl_code,\n                                 cur_taxes_rec.ptx_trac_trnt_code,\n                                 v_pol_no,\n                                 v_end_no,\n                                 v_new_pol_batch_no --, cur_taxes_rec.PTX_POL_POLICY_NO\n                                                   --, cur_taxes_rec.PTX_POL_REN_ENDOS_NO\n                                                   --, cur_taxes_rec.PTX_POL_BATCH_NO\n                                                   ,\n                                 cur_taxes_rec.ptx_rate,\n                                 cur_taxes_rec.ptx_amount,\n                                 cur_taxes_rec.ptx_tl_lvl_code,\n                                 cur_taxes_rec.ptx_rate_type,\n                                 cur_taxes_rec.ptx_rate_desc,\n                                 cur_taxes_rec.ptx_endos_diff_amt,\n                                 cur_taxes_rec.ptx_tax_type,\n                                 cur_taxes_rec.ptx_risk_pol_level,\n                                 cur_taxes_rec.ptx_override,\n                                 cur_taxes_rec.ptx_override_amt);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Unable to populate taxes...');\n                END;\n            END LOOP;\n\n            BEGIN\n                insert_policy_spec_details (cur_endors_pol_rec.pol_pro_code,\n                                            v_old_pol_batch_no,\n                                            v_new_pol_batch_no,\n                                            'U');\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Unable to populate policy specific details');\n            END;\n\n            FOR cur_insureds_rec IN cur_insureds\n            LOOP\n                cnt := cnt + 1;\n\n                BEGIN\n                    INSERT INTO gin_policy_insureds (polin_code,\n                                                     polin_pol_policy_no,\n                                                     polin_pol_ren_endos_no,\n                                                     polin_pol_batch_no,\n                                                     polin_prp_code,\n                                                     polin_new_insured)\n                         VALUES (polin_code_seq.NEXTVAL,\n                                 cur_endors_pol_rec.pol_policy_no,\n                                 v_end_no,\n                                 v_new_pol_batch_no,\n                                 cur_insureds_rec.prp_code,\n                                 'N');\n                EXCEPTION\n                    WHEN v_dup_rec\n                    THEN\n                        raise_error (\n                            'Error :- Attempted to create a duplicate record of the insureds....');\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to insert insureds details, ...');\n                END;\n\n                FOR cur_ipu_rec IN cur_ipu (cur_insureds_rec.prp_code)\n                LOOP\n                    SELECT scl_cert_autogen\n                      INTO v_cert_autogen\n                      FROM gin_sub_classes\n                     WHERE scl_code = cur_ipu_rec.ipu_sec_scl_code;\n\n                    v_ipu_wet := NULL;\n\n                    IF v_trans_type = 'EX'\n                    THEN\n                        v_ipu_wet := v_pol_wet;\n                        v_ipu_wef := v_pol_wef;\n                        v_ipu_eff_wef := v_ipu_wef; -- cur_ipu_rec.ipu_eff_wef;\n                    ELSIF v_trans_type = 'CN'\n                    THEN\n                        v_ipu_wet := v_pol_wet;\n                        v_ipu_wef := v_pol_wef;\n                        v_ipu_eff_wef := v_pol_wef;\n\n                        IF v_cancelled_by = 'C'\n                        THEN\n                            v_prorata := 'S';\n                        END IF;\n                    ELSIF v_trans_type = 'DC'\n                    THEN\n                        v_ipu_wet := cur_ipu_rec.ipu_eff_wet;\n                        v_ipu_wef := cur_ipu_rec.ipu_eff_wef;\n                        v_ipu_eff_wef := cur_ipu_rec.ipu_eff_wef;\n                    ELSE\n                        IF NVL (cur_ipu_rec.ipu_action_type, 'A') != 'D'\n                        THEN\n                            v_ipu_wet := cur_ipu_rec.ipu_eff_wet;\n                            v_ipu_wef := v_pol_wef;\n                            v_ipu_eff_wef := cur_ipu_rec.ipu_eff_wef;\n                        ELSE\n                            v_ipu_wet := v_trans_eff_date;\n                            v_ipu_wef := v_pol_wef;\n                            v_ipu_eff_wef := cur_ipu_rec.ipu_eff_wef;\n                        END IF;\n                    END IF;\n\n                    v_risk_uw_yr := NULL;\n                    v_ipu_prev_prem := cur_ipu_rec.ipu_prev_prem;\n\n                    IF     NVL (cur_endors_pol_rec.pol_binder_policy, 'N') =\n                           'Y'\n                       AND cur_ipu_rec.ipu_status = 'RN'\n                    THEN\n                        v_ipu_eff_wef :=\n                            get_renewal_date (\n                                cur_endors_pol_rec.pol_pro_code,\n                                cur_ipu_rec.ipu_eff_wet);\n                        v_ipu_wef := v_ipu_eff_wef;\n                        v_ipu_wet :=\n                            get_wet_date (cur_endors_pol_rec.pol_pro_code,\n                                          v_ipu_eff_wef);\n                        v_ipu_prev_prem := 0;\n                        v_risk_uw_yr :=\n                            TO_NUMBER (TO_CHAR (v_ipu_eff_wef, 'RRRR'));\n                    ELSE\n                        IF     NVL (v_trans_type, 'NB') = 'EX'\n                           AND v_param_ext = 'Y'\n                        THEN\n                            v_risk_uw_yr :=\n                                TO_NUMBER (TO_CHAR (v_ipu_eff_wef, 'RRRR'));\n                        ELSE\n                            v_risk_uw_yr := cur_ipu_rec.ipu_uw_yr;\n                        END IF;\n                    END IF;\n\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                           || gin_ipu_code_seq.NEXTVAL\n                      INTO v_new_ipu_code\n                      FROM DUAL;\n\n                    BEGIN\n                        v_ipu_prev_ri_amt := 0;\n\n                        IF NVL (cur_endors_pol_rec.pol_binder_policy, 'N') !=\n                           'Y'\n                        THEN\n                            IF cur_endors_pol_rec.pol_policy_status IN\n                                   ('NB', 'RN', 'SP')\n                            THEN\n                                v_ipu_prev_ri_amt :=\n                                    cur_ipu_rec.ipu_reinsure_amt;\n                            ELSE\n                                v_ipu_prev_ri_amt := 0;\n                            --cur_ipu_rec.IPU_REINSURE_AMT;\n                            END IF;\n                        ELSE\n                            IF cur_ipu_rec.ipu_status IN ('NB', 'RN', 'SP')\n                            THEN\n                                v_ipu_prev_ri_amt :=\n                                    cur_ipu_rec.ipu_reinsure_amt;\n                            ELSE\n                                v_ipu_prev_ri_amt := 0;\n                            --cur_ipu_rec.IPU_REINSURE_AMT;\n                            END IF;\n                        END IF;\n\n                        IF    v_trans_type = 'DC'\n                           OR NVL (cur_ipu_rec.ipu_endos_remove, 'N') = 'N'\n                        THEN\n                            vipuwef := v_ipu_wef;\n                            vipueffwef := v_ipu_eff_wef;\n                            vipuwet := v_ipu_wet;\n                            vipueffwet := v_ipu_wet;\n                            vprevipucode := cur_ipu_rec.ipu_code;\n                            vprevprem := v_ipu_prev_prem;\n                            vipupaidprem := cur_ipu_rec.ipu_paid_premium;\n                            vipupaidtl := cur_ipu_rec.ipu_paid_tl;\n                        ELSE\n                            vipuwef := cur_ipu_rec.ipu_eff_wet + 1;\n                            vipueffwef := cur_ipu_rec.ipu_eff_wet + 1;\n                            vipuwet := cur_ipu_rec.ipu_eff_wet + 1;\n                            vipueffwet := cur_ipu_rec.ipu_eff_wet + 1;\n                            vprevipucode := v_new_ipu_code;\n                            vprevprem := 0;\n                            vipupaidprem := 0;\n                            vipupaidtl := 0;\n                        END IF;\n\n                        IF v_trans_type = 'DC'\n                        THEN\n                            viputranstype := 'DC';\n                        ELSIF NVL (cur_endors_pol_rec.pol_binder_policy, 'N') =\n                              'N'\n                        THEN\n                            IF NVL (cur_ipu_rec.ipu_endos_remove, 'N') = 'N'\n                            THEN\n                                viputranstype := 'EN';\n                            ELSE\n                                --viputranstype := 'NB';\n                                viputranstype := 'EN';\n                            END IF;\n                        ELSE\n                            viputranstype := cur_ipu_rec.ipu_status;\n                        END IF;\n\n                        v_covt_code := cur_ipu_rec.ipu_covt_code;\n                        v_ipu_covt_sht_desc := cur_ipu_rec.ipu_covt_sht_desc;\n\n                        --      raise_error('pol_cancelled_by='||v_cancelled_by||'='||v_prorata);\n                        INSERT INTO gin_insured_property_unds (\n                                        ipu_code,\n                                        ipu_property_id,\n                                        ipu_item_desc,\n                                        ipu_qty,\n                                        ipu_value,\n                                        ipu_wef,\n                                        ipu_wet,\n                                        ipu_pol_policy_no,\n                                        ipu_pol_ren_endos_no,\n                                        ipu_pol_batch_no,\n                                        ipu_earth_quake_cover,\n                                        ipu_earth_quake_prem,\n                                        ipu_location,\n                                        ipu_polin_code,\n                                        ipu_sec_scl_code,\n                                        ipu_ncd_status,\n                                        ipu_related_ipu_code,\n                                        ipu_prorata,\n                                        ipu_gp,\n                                        ipu_fap,\n                                        ipu_prev_ipu_code,\n                                        ipu_ncd_level,\n                                        ipu_quz_code,\n                                        ipu_quz_sht_desc,\n                                        ipu_sht_desc,\n                                        ipu_id,\n                                        ipu_bind_code,\n                                        ipu_excess_rate,\n                                        ipu_excess_type,\n                                        ipu_excess_rate_type,\n                                        ipu_excess_min,\n                                        ipu_excess_max,\n                                        ipu_prereq_ipu_code,\n                                        ipu_escalation_rate,\n                                        ipu_comm_rate,\n                                        ipu_prev_batch_no,\n                                        ipu_cur_code,\n                                        ipu_relr_code,\n                                        ipu_relr_sht_desc,\n                                        ipu_pol_est_max_loss,\n                                        ipu_eff_wef,\n                                        ipu_eff_wet,\n                                        ipu_retro_cover,\n                                        ipu_retro_wef,\n                                        ipu_covt_code,\n                                        ipu_covt_sht_desc,\n                                        ipu_si_diff,\n                                        ipu_terr_code,\n                                        ipu_terr_desc,\n                                        ipu_from_time,\n                                        ipu_to_time,\n                                        ipu_mar_cert_no,\n                                        ipu_comp_retention,\n                                        ipu_gross_comp_retention,\n                                        ipu_com_retention_rate,\n                                        ipu_prp_code,\n                                        ipu_tot_endos_prem_dif,\n                                        ipu_tot_gp,\n                                        ipu_tot_value,\n                                        ipu_ri_agnt_com_rate,\n                                        ipu_cover_days,\n                                        ipu_bp,\n                                        ipu_prev_prem,\n                                        ipu_ri_agnt_comm_amt,\n                                        ipu_tot_fap,\n                                        ipu_max_exposure,\n                                        ipu_status,\n                                        ipu_uw_yr,\n                                        ipu_tot_first_loss,\n                                        ipu_accumulation_limit,\n                                        ipu_compute_max_exposure,\n                                        ipu_reinsure_amt,\n                                        ipu_paid_premium,\n                                        ipu_trans_count,\n                                        ipu_paid_tl,\n                                        ipu_inception_uwyr,\n                                        ipu_trans_eff_wet,\n                                        ipu_eml_based_on,\n                                        ipu_aggregate_limits,\n                                        ipu_rc_sht_desc,\n                                        ipu_rc_code,\n                                        ipu_survey_date,\n                                        ipu_item_details,\n                                        ipu_prev_tot_fap,\n                                        ipu_prev_fap,\n                                        ipu_override_ri_retention,\n                                        ipu_prev_reinsure_amt,\n                                        ipu_risk_oth_int_parties,\n                                        ipu_conveyance_type,\n                                        ipu_prev_prorata_sect_prem,\n                                        ipu_prorata_sect_prem,\n                                        ipu_nonprorata_sect_prem,\n                                        ipu_prev_nonprorata_sect_prem,\n                                        ipu_tot_prorata_sect_prem,\n                                        ipu_tot_nonprorata_sect_prem,\n                                        ipu_prev_tot_prorata_s_prem,\n                                        ipu_prev_tot_nonprorata_s_prem,\n                                        ipu_prev_status,\n                                        ipu_install_period,\n                                        ipu_rs_code,\n                                        ipu_rescue_mem,\n                                        ipu_rescue_charge,\n                                        ipu_health_tax,\n                                        ipu_road_safety_tax,\n                                        ipu_certchg,\n                                        ipu_motor_levy,\n                                        ipu_cashback_appl,\n                                        ipu_cashback_level,\n                                        ipu_vehicle_model_code,\n                                        ipu_vehicle_make_code,\n                                        ipu_vehicle_model,\n                                        ipu_vehicle_make,\n                                        ipu_model_yr,\n                                        ipu_cert_no,\n                                        ipu_maintenance_period_type,\n                                        ipu_maintenance_period,\n                                        ipu_other_client_deductibles,\n                                        ipu_coin_other_client_charges,\n                                        ipu_survey_agnt_code,\n                                        ipu_survey)\n                                 VALUES (\n                                            v_new_ipu_code,\n                                            cur_ipu_rec.ipu_property_id,\n                                            cur_ipu_rec.ipu_item_desc,\n                                            cur_ipu_rec.ipu_qty,\n                                            cur_ipu_rec.ipu_value,\n                                            --DECODE(:GIN_POLICIES_RENEWAL.POL_POLICY_STATUS,'DC',v_ipu_wef,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'CN',v_ipu_wef,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',v_ipu_wef,cur_ipu_rec.IPU_EFF_WET + 1)),\n                                            --DECODE(:GIN_POLICIES_RENEWAL.POL_POLICY_STATUS,'DC',v_ipu_wet,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'CN',v_ipu_wef,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',v_ipu_wet,cur_ipu_rec.IPU_EFF_WET+ 1)),\n                                            vipuwef,\n                                            --DECODE(v_trans_type,'DC',v_ipu_wef,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',v_ipu_wef,cur_ipu_rec.IPU_EFF_WET + 1)),\n                                            vipuwet,\n                                            --DECODE(v_trans_type,'DC',v_ipu_wet,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',v_ipu_wet,cur_ipu_rec.IPU_EFF_WET+ 1)),\n                                            cur_ipu_rec.ipu_pol_policy_no,\n                                            v_end_no,\n                                            v_new_pol_batch_no,\n                                            cur_ipu_rec.ipu_earth_quake_cover,\n                                            cur_ipu_rec.ipu_earth_quake_prem,\n                                            cur_ipu_rec.ipu_location,\n                                            polin_code_seq.CURRVAL,\n                                            cur_ipu_rec.ipu_sec_scl_code,\n                                            cur_ipu_rec.ipu_ncd_status,\n                                            cur_ipu_rec.ipu_related_ipu_code,\n                                            DECODE (\n                                                v_trans_type,\n                                                'CN', DECODE (\n                                                          v_cancelled_by,\n                                                          'C', v_prorata,\n                                                          cur_ipu_rec.ipu_prorata),\n                                                cur_ipu_rec.ipu_prorata),\n                                            cur_ipu_rec.ipu_gp,\n                                            cur_ipu_rec.ipu_fap,\n                                            vprevipucode,\n                                            --DECODE(v_trans_type,'DC',cur_ipu_rec.ipu_code,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',cur_ipu_rec.ipu_code,v_new_ipu_code)),\n                                            cur_ipu_rec.ipu_ncd_level,\n                                            cur_ipu_rec.ipu_quz_code,\n                                            cur_ipu_rec.ipu_quz_sht_desc,\n                                            cur_ipu_rec.ipu_sht_desc,\n                                            cur_ipu_rec.ipu_id,\n                                            cur_ipu_rec.ipu_bind_code,\n                                            cur_ipu_rec.ipu_excess_rate,\n                                            cur_ipu_rec.ipu_excess_type,\n                                            cur_ipu_rec.ipu_excess_rate_type,\n                                            cur_ipu_rec.ipu_excess_min,\n                                            cur_ipu_rec.ipu_excess_max,\n                                            cur_ipu_rec.ipu_prereq_ipu_code,\n                                            cur_ipu_rec.ipu_escalation_rate,\n                                            cur_ipu_rec.ipu_comm_rate,\n                                            cur_ipu_rec.ipu_pol_batch_no,\n                                            cur_ipu_rec.ipu_cur_code,\n                                            cur_ipu_rec.ipu_relr_code,\n                                            cur_ipu_rec.ipu_relr_sht_desc,\n                                            DECODE (\n                                                cur_ipu_rec.ipu_pol_est_max_loss,\n                                                NULL, 100,\n                                                0, 100,\n                                                cur_ipu_rec.ipu_pol_est_max_loss),\n                                            vipueffwef,\n                                            --DECODE(v_trans_type,'DC',v_ipu_eff_wef,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',v_ipu_eff_wef,cur_ipu_rec.IPU_EFF_WET + 1)),\n                                            vipueffwet,\n                                            --DECODE(v_trans_type,'DC',v_ipu_wet,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',v_ipu_wet,cur_ipu_rec.IPU_EFF_WET + 1)),\n                                            cur_ipu_rec.ipu_retro_cover,\n                                            cur_ipu_rec.ipu_retro_wef,\n                                            v_covt_code,\n                                            v_ipu_covt_sht_desc,\n                                            cur_ipu_rec.ipu_si_diff,\n                                            cur_ipu_rec.ipu_terr_code,\n                                            cur_ipu_rec.ipu_terr_desc,\n                                            cur_ipu_rec.ipu_from_time,\n                                            cur_ipu_rec.ipu_to_time,\n                                            cur_ipu_rec.ipu_mar_cert_no,\n                                            cur_ipu_rec.ipu_comp_retention,\n                                            cur_ipu_rec.ipu_gross_comp_retention,\n                                            cur_ipu_rec.ipu_com_retention_rate,\n                                            cur_ipu_rec.ipu_prp_code,\n                                            cur_ipu_rec.ipu_tot_endos_prem_dif,\n                                            cur_ipu_rec.ipu_tot_gp,\n                                            cur_ipu_rec.ipu_tot_value,\n                                            cur_ipu_rec.ipu_ri_agnt_com_rate,\n                                            cur_ipu_rec.ipu_cover_days,\n                                            cur_ipu_rec.ipu_bp,\n                                            vprevprem,\n                                            --DECODE(v_trans_type,'DC',v_ipu_prev_prem,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',v_ipu_prev_prem ,0) ),\n                                            cur_ipu_rec.ipu_ri_agnt_comm_amt,\n                                            cur_ipu_rec.ipu_tot_fap,\n                                            cur_ipu_rec.ipu_max_exposure,\n                                            viputranstype,\n                                            --DECODE(v_trans_type,'DC','DC',DECODE(NVL(cur_endors_pol_rec.POL_BINDER_POLICY,'N'),'N',DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N','EN','NB'),cur_ipu_rec.IPU_STATUS)),\n                                            v_risk_uw_yr,\n                                            cur_ipu_rec.ipu_tot_first_loss,\n                                            cur_ipu_rec.ipu_accumulation_limit,\n                                            cur_ipu_rec.ipu_compute_max_exposure,\n                                            cur_ipu_rec.ipu_reinsure_amt,\n                                            vipupaidprem,\n                                              --DECODE(v_trans_type,'DC',cur_ipu_rec.IPU_PAID_PREMIUM,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',cur_ipu_rec.IPU_PAID_PREMIUM,0)),\n                                              NVL (\n                                                  cur_ipu_rec.ipu_trans_count,\n                                                  0)\n                                            + 1,\n                                            vipupaidtl,\n                                            --DECODE(v_trans_type,'DC',cur_ipu_rec.IPU_PAID_TL,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',cur_ipu_rec.IPU_PAID_TL,0)),\n                                            cur_ipu_rec.ipu_inception_uwyr,\n                                            vipuwet,\n                                            --DECODE(v_trans_type,'DC',v_ipu_wet,DECODE(NVL(cur_ipu_rec.IPU_ENDOS_REMOVE,'N'),'N',v_ipu_wet,cur_ipu_rec.IPU_EFF_WET + 1)),\n                                            cur_ipu_rec.ipu_eml_based_on,\n                                            cur_ipu_rec.ipu_aggregate_limits,\n                                            cur_ipu_rec.ipu_rc_sht_desc,\n                                            cur_ipu_rec.ipu_rc_code,\n                                            cur_ipu_rec.ipu_survey_date,\n                                            cur_ipu_rec.ipu_item_details,\n                                            cur_ipu_rec.ipu_tot_fap,\n                                            cur_ipu_rec.ipu_fap,\n                                            cur_ipu_rec.ipu_override_ri_retention,\n                                            v_ipu_prev_ri_amt,\n                                            cur_ipu_rec.ipu_risk_oth_int_parties,\n                                            cur_ipu_rec.ipu_conveyance_type,\n                                            cur_ipu_rec.ipu_prorata_sect_prem,\n                                            cur_ipu_rec.ipu_nonprorata_sect_prem,\n                                            cur_ipu_rec.ipu_prorata_sect_prem,\n                                            cur_ipu_rec.ipu_nonprorata_sect_prem,\n                                            cur_ipu_rec.ipu_tot_prorata_sect_prem,\n                                            cur_ipu_rec.ipu_tot_nonprorata_sect_prem,\n                                            cur_ipu_rec.ipu_tot_prorata_sect_prem,\n                                            cur_ipu_rec.ipu_tot_nonprorata_sect_prem,\n                                            cur_ipu_rec.ipu_status,\n                                            cur_ipu_rec.ipu_install_period,\n                                            cur_ipu_rec.ipu_rs_code,\n                                            cur_ipu_rec.ipu_rescue_mem,\n                                            cur_ipu_rec.ipu_rescue_charge,\n                                            cur_ipu_rec.ipu_health_tax,\n                                            cur_ipu_rec.ipu_road_safety_tax,\n                                            cur_ipu_rec.ipu_certchg,\n                                            cur_ipu_rec.ipu_motor_levy,\n                                            cur_ipu_rec.ipu_cashback_appl,\n                                            cur_ipu_rec.ipu_cashback_level,\n                                            cur_ipu_rec.ipu_vehicle_model_code,\n                                            cur_ipu_rec.ipu_vehicle_make_code,\n                                            cur_ipu_rec.ipu_vehicle_model,\n                                            cur_ipu_rec.ipu_vehicle_make,\n                                            cur_ipu_rec.ipu_model_yr,\n                                            cur_ipu_rec.ipu_cert_no,\n                                            cur_ipu_rec.ipu_maintenance_period_type,\n                                            cur_ipu_rec.ipu_maintenance_period,\n                                            cur_ipu_rec.ipu_other_client_deductibles,\n                                            cur_ipu_rec.ipu_coin_other_client_charges,\n                                            cur_ipu_rec.ipu_survey_agnt_code,\n                                            cur_ipu_rec.ipu_survey);\n\n                        v_endrsd_rsks_tab (1).ipu_code := v_new_ipu_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Unable to populate risk details, ..11.');\n                    END;\n\n                    FOR risk_services_rec\n                        IN risk_services (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_policy_risk_services (\n                                            prs_code,\n                                            prs_ipu_code,\n                                            prs_pol_batch_no,\n                                            prs_pol_policy_no,\n                                            prs_pol_endors_no,\n                                            prs_rss_code,\n                                            prs_rs_code,\n                                            prs_status)\n                                 VALUES (gin_prs_code_seq.NEXTVAL,\n                                         v_new_ipu_code,\n                                         v_new_pol_batch_no,\n                                         risk_services_rec.prs_pol_policy_no,\n                                         v_end_no,\n                                         risk_services_rec.prs_rss_code,\n                                         risk_services_rec.prs_rs_code,\n                                         risk_services_rec.prs_status);\n                        --commit;\n                        EXCEPTION\n                            WHEN DUP_VAL_ON_INDEX\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    'System attempted to illegaly duplicate  risk services record. Please contact Turnkey Africa for support...');\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to populate the risk services.');\n                        END;\n                    END LOOP;\n\n                    FOR driver_details_rec\n                        IN driver_details (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_clm_drv_dtls (\n                                            cdr_code,\n                                            cdr_name,\n                                            cdr_gender,\n                                            cdr_dob,\n                                            cdr_rship,\n                                            cdr_pin,\n                                            cdr_id_no,\n                                            cdr_passport_no,\n                                            cdr_driving_license_no,\n                                            cdr_tel,\n                                            cdr_occupation,\n                                            cdr_driver_experience,\n                                            cdr_third_party_self,\n                                            cdr_module,\n                                            cdr_insured_driver,\n                                            cdr_dr_code,\n                                            cdr_ipu_code)\n                                     VALUES (\n                                                gin_cdr_code_seq.NEXTVAL,\n                                                driver_details_rec.cdr_name,\n                                                driver_details_rec.cdr_gender,\n                                                driver_details_rec.cdr_dob,\n                                                driver_details_rec.cdr_rship,\n                                                driver_details_rec.cdr_pin,\n                                                driver_details_rec.cdr_id_no,\n                                                driver_details_rec.cdr_passport_no,\n                                                driver_details_rec.cdr_driving_license_no,\n                                                driver_details_rec.cdr_tel,\n                                                driver_details_rec.cdr_occupation,\n                                                driver_details_rec.cdr_driver_experience,\n                                                driver_details_rec.cdr_third_party_self,\n                                                driver_details_rec.cdr_module,\n                                                driver_details_rec.cdr_insured_driver,\n                                                driver_details_rec.cdr_dr_code,\n                                                v_new_ipu_code);\n                        --commit;\n                        EXCEPTION\n                            WHEN DUP_VAL_ON_INDEX\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    'System attempted to illegaly duplicate  risk services record. Please contact Turnkey Africa for support...');\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to populate the risk services.');\n                        END;\n                    END LOOP;\n\n                    BEGIN\n                        gin_schedules_pkg.insert_spec_details (\n                            cur_endors_pol_rec.pol_pro_code,\n                            cur_ipu_rec.ipu_code,\n                            v_new_ipu_code,\n                            'N',\n                            'UW-UW');\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Unable to bring foward the specific details');\n                    END;\n\n                    IF v_trans_type NOT IN ('CO', 'CN', 'DC')\n                    THEN\n                        IF NVL (v_cert_autogen, 'N') = 'Y'\n                        THEN\n                            BEGIN\n                                auto_assign_certs (v_new_ipu_code,\n                                                   vipuwef,\n                                                   vipuwet,\n                                                   NULL,\n                                                   NULL);\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        END IF;\n\n                        BEGIN\n                            gin_stp_uw_pkg.populate_cert_to_print (\n                                v_new_batch_no);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                       'Error allocating certificates at step 1....'\n                                    || SQLERRM (SQLCODE));\n                        END;\n                    END IF;\n\n                    IF NVL (v_auto_populate_limits, 'N') = 'Y'\n                    THEN\n                        BEGIN\n                            gin_stp_uw_pkg.autopopulate_schedules (\n                                cur_endors_pol_rec.pol_batch_no,\n                                cur_ipu_rec.ipu_sec_scl_code);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                       'Error inserting mandatory clauses....'\n                                    || SQLERRM (SQLCODE));\n                        END;\n                    END IF;\n\n                    FOR cur_limits_rec IN cur_limits (cur_ipu_rec.ipu_code)\n                    LOOP\n                        v_pil_prem_amt := 0;\n                        v_compute := 'Y';\n\n                        IF     v_trans_type = 'DC'\n                           AND cur_limits_rec.pil_sect_type IN ('SS',\n                                                                'EL',\n                                                                'SL',\n                                                                'ES')\n                           AND NVL (cur_limits_rec.pil_declaration_section,\n                                    'N') !=\n                               'Y'\n                        THEN\n                            v_pil_prem_amt :=\n                                cur_limits_rec.pil_prem_accumulation;\n                            v_compute := 'Y';\n                        ELSE\n                            v_pil_prem_amt := cur_limits_rec.pil_prem_amt;\n                            v_compute :=\n                                NVL (cur_limits_rec.pil_compute, 'Y');\n                        END IF;\n\n                        BEGIN\n                            v_pil_prev_limit := 0;\n\n                            IF v_trans_type IN ('NB', 'RN', 'DC')\n                            THEN\n                                v_pil_prev_limit := 0;\n                            ELSE\n                                IF NVL (cur_ipu_rec.ipu_status, 'NB') IN\n                                       ('EX', 'RN', 'RE')\n                                THEN\n                                    v_pil_prev_limit := 0;\n                                ELSE\n                                    v_pil_prev_limit :=\n                                        cur_limits_rec.pil_used_limit;\n                                END IF;\n                            END IF;\n\n                            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                                   || gin_pil_code_seq.NEXTVAL\n                              INTO v_pil_code\n                              FROM DUAL;\n\n                            INSERT INTO gin_policy_insured_limits (\n                                            pil_code,\n                                            pil_ipu_code,\n                                            pil_sect_code,\n                                            pil_sect_sht_desc,\n                                            pil_row_num,\n                                            pil_calc_group,\n                                            pil_limit_amt,\n                                            pil_prem_rate,\n                                            pil_prem_amt,\n                                            pil_rate_type,\n                                            pil_rate_desc,\n                                            pil_sect_type,\n                                            pil_sect_excess_detail,\n                                            pil_original_prem_rate,\n                                            pil_rate_change_remarks,\n                                            pil_change_done_by,\n                                            pil_min_premium,\n                                            pil_comment,\n                                            pil_multiplier_rate,\n                                            pil_multiplier_div_factor,\n                                            pil_annual_premium,\n                                            pil_rate_div_fact,\n                                            pil_desc,\n                                            pil_compute,\n                                            pil_used_limit,\n                                            pil_indem_prd,\n                                            pil_prd_type,\n                                            pil_indem_fstprd,\n                                            pil_indem_fstprd_pct,\n                                            pil_indem_remprd_pct,\n                                            pil_dual_basis,\n                                            pil_prem_accumulation,\n                                            pil_prev_prem,\n                                            pil_declaration_section,\n                                            pil_prev_limit,\n                                            pil_prev_prem_prorata,\n                                            pil_annual_actual_prem,\n                                            pil_eml_pct,\n                                            pil_top_loc_rate,\n                                            pil_top_loc_div_fact,\n                                            pil_limit_prd,\n                                            pil_free_limit,\n                                            pil_prorata_full,\n                                            pil_expired,\n                                            pil_si_limit_type,\n                                            pil_si_rate,\n                                            pil_cover_type,\n                                            pil_prev_endr_prem_rate,\n                                            pil_prev_endr_rate_div_fact,\n                                            pil_prev_endr_mult_rate,\n                                            pil_prev_endr_mult_div_fact,\n                                            pil_firstloss,\n                                            pil_firstloss_amt_pcnt,\n                                            pil_firstloss_value)\n                                     VALUES (\n                                                v_pil_code,\n                                                v_new_ipu_code,\n                                                cur_limits_rec.pil_sect_code,\n                                                cur_limits_rec.pil_sect_sht_desc,\n                                                cur_limits_rec.pil_row_num,\n                                                cur_limits_rec.pil_calc_group,\n                                                cur_limits_rec.pil_limit_amt,\n                                                cur_limits_rec.pil_prem_rate,\n                                                v_pil_prem_amt,\n                                                cur_limits_rec.pil_rate_type,\n                                                cur_limits_rec.pil_rate_desc,\n                                                cur_limits_rec.pil_sect_type,\n                                                cur_limits_rec.pil_sect_excess_detail,\n                                                cur_limits_rec.pil_original_prem_rate,\n                                                cur_limits_rec.pil_rate_change_remarks,\n                                                cur_limits_rec.pil_change_done_by,\n                                                cur_limits_rec.pil_min_premium,\n                                                cur_limits_rec.pil_comment,\n                                                cur_limits_rec.pil_multiplier_rate,\n                                                cur_limits_rec.pil_multiplier_div_factor,\n                                                cur_limits_rec.pil_annual_premium,\n                                                cur_limits_rec.pil_rate_div_fact,\n                                                cur_limits_rec.pil_desc,\n                                                v_compute,\n                                                cur_limits_rec.pil_used_limit,\n                                                cur_limits_rec.pil_indem_prd,\n                                                cur_limits_rec.pil_prd_type,\n                                                cur_limits_rec.pil_indem_fstprd,\n                                                cur_limits_rec.pil_indem_fstprd_pct,\n                                                cur_limits_rec.pil_indem_remprd_pct,\n                                                cur_limits_rec.pil_dual_basis,\n                                                DECODE (\n                                                    v_trans_type,\n                                                    'DC', cur_limits_rec.pil_prem_accumulation,\n                                                    DECODE (\n                                                        NVL (\n                                                            cur_ipu_rec.ipu_endos_remove,\n                                                            'N'),\n                                                        'N', cur_limits_rec.pil_prem_accumulation,\n                                                        0)),\n                                                cur_limits_rec.pil_annual_premium,\n                                                cur_limits_rec.pil_declaration_section,\n                                                DECODE (\n                                                    v_trans_type,\n                                                    'DC', v_pil_prev_limit,\n                                                    DECODE (\n                                                        NVL (\n                                                            cur_ipu_rec.ipu_endos_remove,\n                                                            'N'),\n                                                        'N', v_pil_prev_limit,\n                                                        0)),\n                                                cur_limits_rec.pil_prem_prorata,\n                                                cur_limits_rec.pil_annual_actual_prem,\n                                                cur_limits_rec.pil_eml_pct,\n                                                cur_limits_rec.pil_top_loc_rate,\n                                                cur_limits_rec.pil_top_loc_div_fact,\n                                                cur_limits_rec.pil_limit_prd,\n                                                cur_limits_rec.pil_free_limit,\n                                                cur_limits_rec.pil_prorata_full,\n                                                cur_limits_rec.pil_expired,\n                                                cur_limits_rec.pil_si_limit_type,\n                                                cur_limits_rec.pil_si_rate,\n                                                cur_limits_rec.pil_cover_type,\n                                                cur_limits_rec.pil_prem_rate,\n                                                cur_limits_rec.pil_rate_div_fact,\n                                                cur_limits_rec.pil_multiplier_rate,\n                                                cur_limits_rec.pil_multiplier_div_factor,\n                                                cur_limits_rec.pil_firstloss,\n                                                cur_limits_rec.pil_firstloss_amt_pcnt,\n                                                cur_limits_rec.pil_firstloss_value);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                       'Unable to insert risk sections details, ipu_code='\n                                    || v_new_ipu_code\n                                    || ' pilcode='\n                                    || v_pil_code);\n                        END;\n                    END LOOP;\n\n                    FOR cur_clauses_rec IN cur_clauses (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_policy_clauses (\n                                            pocl_sbcl_cls_code,\n                                            pocl_sbcl_scl_code,\n                                            pocl_cls_sht_desc,\n                                            pocl_pol_policy_no,\n                                            pocl_pol_ren_endos_no,\n                                            pocl_pol_batch_no,\n                                            pocl_ipu_code,\n                                            pocl_new,\n                                            plcl_cls_type,\n                                            pocl_clause,\n                                            pocl_cls_editable,\n                                            pocl_heading)\n                                 VALUES (cur_clauses_rec.pocl_sbcl_cls_code,\n                                         cur_ipu_rec.ipu_sec_scl_code,\n                                         cur_clauses_rec.pocl_cls_sht_desc,\n                                         v_pol_no,\n                                         v_end_no,\n                                         v_new_pol_batch_no,\n                                         v_new_ipu_code,\n                                         'N',\n                                         cur_clauses_rec.plcl_cls_type,\n                                         cur_clauses_rec.pocl_clause,\n                                         cur_clauses_rec.pocl_cls_editable,\n                                         cur_clauses_rec.pocl_heading);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to insert risk level clause details, ...');\n                        END;\n                    END LOOP;\n\n                    FOR cur_rsk_perils_rec\n                        IN cur_rsk_perils (cur_ipu_rec.ipu_code)\n                    LOOP\n                        -- DO YOUR INSERTS INTO clauses\n                        BEGIN\n                            --    message('inserting risk GIN_POLICY_CLAUSES ...');pause;\n                            INSERT INTO gin_pol_risk_section_perils (\n                                            prspr_code,\n                                            prspr_pol_batch_no,\n                                            prspr_ipu_code,\n                                            prspr_scl_code,\n                                            prspr_sect_code,\n                                            prspr_sect_sht_desc,\n                                            prspr_per_code,\n                                            prspr_per_sht_desc,\n                                            prspr_mandatory,\n                                            prspr_peril_limit,\n                                            prspr_peril_type,\n                                            prspr_si_or_limit,\n                                            prspr_sec_code,\n                                            prspr_excess_type,\n                                            prspr_excess,\n                                            prspr_excess_min,\n                                            prspr_excess_max,\n                                            prspr_expire_on_claim,\n                                            prspr_bind_code,\n                                            prspr_person_limit,\n                                            prspr_claim_limit,\n                                            prspr_desc,\n                                            prspr_bind_type,\n                                            prspr_sspr_code,\n                                            prspr_salvage_pct,\n                                            prspr_claim_excess_type,\n                                            prspr_tl_excess_type,\n                                            prspr_tl_excess,\n                                            prspr_tl_excess_min,\n                                            prspr_tl_excess_max,\n                                            prspr_pl_excess_type,\n                                            prspr_pl_excess,\n                                            prspr_pl_excess_min,\n                                            prspr_pl_excess_max,\n                                            prspr_claim_excess_min,\n                                            prspr_claim_excess_max,\n                                            prspr_depend_loss_type,\n                                            prspr_ttd_ben_pcts,\n                                            prspr_ssprm_code,\n                                            prspr_prem_rate,\n                                            prspr_premium_amt,\n                                            prspr_pil_code,\n                                            prspr_annual_premium,\n                                            prspr_prem_prorata,\n                                            prspr_actual_rate_prem,\n                                            prspr_rate_div_fact,\n                                            prspr_free_limit_amt,\n                                            prspr_prorata_full,\n                                            prspr_min_premium,\n                                            prspr_multiplier_rate,\n                                            prspr_multiplier_div_factor)\n                                     VALUES (\n                                                   TO_CHAR (SYSDATE, 'RRRR')\n                                                || gin_prspr_code_seq.NEXTVAL,\n                                                v_new_pol_batch_no,\n                                                v_new_ipu_code,\n                                                cur_rsk_perils_rec.prspr_scl_code,\n                                                cur_rsk_perils_rec.prspr_sect_code,\n                                                cur_rsk_perils_rec.prspr_sect_sht_desc,\n                                                cur_rsk_perils_rec.prspr_per_code,\n                                                cur_rsk_perils_rec.prspr_per_sht_desc,\n                                                cur_rsk_perils_rec.prspr_mandatory,\n                                                cur_rsk_perils_rec.prspr_peril_limit,\n                                                cur_rsk_perils_rec.prspr_peril_type,\n                                                cur_rsk_perils_rec.prspr_si_or_limit,\n                                                cur_rsk_perils_rec.prspr_sec_code,\n                                                cur_rsk_perils_rec.prspr_excess_type,\n                                                cur_rsk_perils_rec.prspr_excess,\n                                                cur_rsk_perils_rec.prspr_excess_min,\n                                                cur_rsk_perils_rec.prspr_excess_max,\n                                                cur_rsk_perils_rec.prspr_expire_on_claim,\n                                                cur_rsk_perils_rec.prspr_bind_code,\n                                                cur_rsk_perils_rec.prspr_person_limit,\n                                                cur_rsk_perils_rec.prspr_claim_limit,\n                                                cur_rsk_perils_rec.prspr_desc,\n                                                cur_rsk_perils_rec.prspr_bind_type,\n                                                cur_rsk_perils_rec.prspr_sspr_code,\n                                                cur_rsk_perils_rec.prspr_salvage_pct,\n                                                cur_rsk_perils_rec.prspr_claim_excess_type,\n                                                cur_rsk_perils_rec.prspr_tl_excess_type,\n                                                cur_rsk_perils_rec.prspr_tl_excess,\n                                                cur_rsk_perils_rec.prspr_tl_excess_min,\n                                                cur_rsk_perils_rec.prspr_tl_excess_max,\n                                                cur_rsk_perils_rec.prspr_pl_excess_type,\n                                                cur_rsk_perils_rec.prspr_pl_excess,\n                                                cur_rsk_perils_rec.prspr_pl_excess_min,\n                                                cur_rsk_perils_rec.prspr_pl_excess_max,\n                                                cur_rsk_perils_rec.prspr_claim_excess_min,\n                                                cur_rsk_perils_rec.prspr_claim_excess_max,\n                                                cur_rsk_perils_rec.prspr_depend_loss_type,\n                                                cur_rsk_perils_rec.prspr_ttd_ben_pcts,\n                                                cur_rsk_perils_rec.prspr_ssprm_code,\n                                                cur_rsk_perils_rec.prspr_prem_rate,\n                                                cur_rsk_perils_rec.prspr_premium_amt,\n                                                cur_rsk_perils_rec.prspr_pil_code,\n                                                cur_rsk_perils_rec.prspr_annual_premium,\n                                                cur_rsk_perils_rec.prspr_prem_prorata,\n                                                cur_rsk_perils_rec.prspr_actual_rate_prem,\n                                                cur_rsk_perils_rec.prspr_rate_div_fact,\n                                                cur_rsk_perils_rec.prspr_free_limit_amt,\n                                                cur_rsk_perils_rec.prspr_prorata_full,\n                                                cur_rsk_perils_rec.prspr_min_premium,\n                                                cur_rsk_perils_rec.prspr_multiplier_rate,\n                                                cur_rsk_perils_rec.prspr_multiplier_div_factor);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to insert risk level clause details, ...');\n                        END;\n                    END LOOP;\n\n                    FOR cur_perils_rec IN cur_perils (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_pol_sec_perils (\n                                            gpsp_per_code,\n                                            gpsp_per_sht_desc,\n                                            gpsp_sec_sect_code,\n                                            gpsp_sect_sht_desc,\n                                            gpsp_sec_scl_code,\n                                            gpsp_ipp_code,\n                                            gpsp_ipu_code,\n                                            gpsp_limit_amt,\n                                            gpsp_excess_amt)\n                                 VALUES (cur_perils_rec.gpsp_per_code,\n                                         cur_perils_rec.gpsp_per_sht_desc,\n                                         cur_perils_rec.gpsp_sec_sect_code,\n                                         cur_perils_rec.gpsp_sect_sht_desc,\n                                         cur_perils_rec.gpsp_sec_scl_code,\n                                         cur_perils_rec.gpsp_ipp_code,\n                                         v_new_ipu_code,\n                                         cur_perils_rec.gpsp_limit_amt,\n                                         cur_perils_rec.gpsp_excess_amt);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to insert risk peril details, ...');\n                        END;\n                    END LOOP;\n\n                    FOR cur_fam_rec IN cur_fam_dtls (cur_ipu_rec.ipu_code)\n                    LOOP\n                        INSERT INTO gin_pol_med_cat_family_details (\n                                        pmcfd_code,\n                                        pmcfd_pol_batch_no,\n                                        pmcfd_ipu_code,\n                                        pmcfd_fam_size,\n                                        pmcfd_units,\n                                        pmcfd_males,\n                                        pmcfd_females,\n                                        pmcfd_prem_amt,\n                                        pmcfd_si)\n                             VALUES (pmcfd_code_seq.NEXTVAL,\n                                     v_new_pol_batch_no,\n                                     v_new_ipu_code,\n                                     cur_fam_rec.pmcfd_fam_size,\n                                     cur_fam_rec.pmcfd_units,\n                                     cur_fam_rec.pmcfd_males,\n                                     cur_fam_rec.pmcfd_females,\n                                     cur_fam_rec.pmcfd_prem_amt,\n                                     cur_fam_rec.pmcfd_si);\n\n                        FOR cur_fam_limit_rec\n                            IN cur_fam_limit_dtls (cur_ipu_rec.ipu_code)\n                        LOOP                            -- think through again\n                            INSERT INTO gin_pol_med_fam_insured_limits (\n                                            pmfil_code,\n                                            pmfil_pmcfd_code,\n                                            pmfil_pol_batch_no,\n                                            pmfil_ipu_code,\n                                            pmfil_pil_code,\n                                            pmfil_fam_size,\n                                            pmfil_limit,\n                                            pmfil_limit_type,\n                                            pmfil_prem_amt,\n                                            pmfil_si)\n                                 VALUES (gin_pmfil_code_seq.NEXTVAL,\n                                         pmcfd_code_seq.CURRVAL,\n                                         v_new_pol_batch_no,\n                                         v_new_ipu_code,\n                                         v_pil_code,\n                                         cur_fam_limit_rec.pmfil_fam_size,\n                                         cur_fam_limit_rec.pmfil_limit,\n                                         cur_fam_limit_rec.pmfil_limit_type,\n                                         cur_fam_limit_rec.pmfil_prem_amt,\n                                         cur_fam_limit_rec.pmfil_si);\n                        END LOOP;\n                    END LOOP;\n                END LOOP;\n            END LOOP;\n        END LOOP;\n    END;",
        "populate_endos_rsk_dtls": "PROCEDURE populate_endos_rsk_dtls (\n        v_old_batch_no       IN     NUMBER,\n        v_trans_type         IN     VARCHAR2,\n        v_new_batch_no       IN     NUMBER,\n        v_old_ipu_code       IN     NUMBER,\n        v_ipu_add_edit       IN     VARCHAR2,\n        v_new_ipu_code          OUT NUMBER,\n        v_action_type        IN     VARCHAR2,\n        --S Suspend, C Cancel RT Reinstate R Revise\n        v_del_date           IN     DATE DEFAULT NULL,\n        v_susp_reinst_type   IN     VARCHAR2 DEFAULT 'PREM',\n        -- Reinstate by refund premium (PREM) or Extending days (DAYS)\n        v_rcpt_amt           IN     NUMBER DEFAULT NULL,\n        -- cash basis",
        "populate_endos_rsk_dtls_0703": "PROCEDURE populate_endos_rsk_dtls_0703 (\n        v_old_batch_no       IN     NUMBER,\n        v_trans_type         IN     VARCHAR2,\n        v_new_batch_no       IN     NUMBER,\n        v_old_ipu_code       IN     NUMBER,\n        v_ipu_add_edit       IN     VARCHAR2,\n        v_new_ipu_code          OUT NUMBER,\n        v_action_type        IN     VARCHAR2,\n        --S Suspend, C Cancel RT Reinstate R Revise\n        v_del_date           IN     DATE DEFAULT NULL,\n        v_susp_reinst_type   IN     VARCHAR2 DEFAULT 'PREM',\n        -- Reinstate by refund premium (PREM) or Extending days (DAYS)\n        v_rcpt_amt           IN     NUMBER DEFAULT NULL,\n        -- cash basis",
        "create_contra_trans": "PROCEDURE create_contra_trans (v_old_batch   IN     NUMBER,\n                                   v_batch_no       OUT NUMBER,\n                                   v_user        IN     VARCHAR2,\n                                   v_eff_date    IN     DATE)\n    IS\n        v_serial         NUMBER (10);\n        v_pol_no         VARCHAR2 (26);\n        v_ends_no        VARCHAR2 (26);\n        --next_ggt_trans_no number;\n        v_pol_prefix     VARCHAR2 (15);\n        v_new_ipu_code   NUMBER;\n        vdummy           NUMBER;\n        v_tran_no        NUMBER;\n        v_prrd_code      NUMBER;\n        v_pdl_code       NUMBER;\n\n        CURSOR cur_pol IS\n            SELECT *\n              FROM gin_policies\n             WHERE pol_batch_no = v_old_batch;\n\n        CURSOR cur_taxes IS\n            SELECT *\n              FROM gin_policy_taxes\n             WHERE ptx_pol_batch_no = v_old_batch;\n\n        CURSOR cur_coinsurer IS\n            SELECT *\n              FROM gin_coinsurers\n             WHERE coin_pol_batch_no = v_old_batch;\n\n        CURSOR cur_facre_dtls IS\n            SELECT *\n              FROM gin_facre_in_dtls\n             WHERE fid_pol_batch_no = v_old_batch;\n\n        CURSOR cur_conditions IS\n            SELECT *\n              FROM gin_policy_lvl_clauses\n             WHERE plcl_pol_batch_no = v_old_batch;\n\n        CURSOR cur_insureds IS\n            SELECT *\n              FROM gin_policy_insureds\n             WHERE polin_pol_batch_no = v_old_batch;\n\n        CURSOR cur_ipu (v_polin_code NUMBER)\n        IS\n            SELECT *\n              FROM gin_insured_property_unds\n             WHERE     ipu_pol_batch_no = v_old_batch\n                   AND ipu_polin_code = v_polin_code;\n\n        CURSOR cur_rsk_perils (v_ipu VARCHAR2)\n        IS\n            SELECT *\n              FROM gin_pol_risk_section_perils\n             WHERE prspr_ipu_code = v_ipu;\n\n        CURSOR cur_limits (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_insured_limits\n             WHERE pil_ipu_code = v_ipu;\n\n        CURSOR cur_clauses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_clauses\n             WHERE pocl_ipu_code = v_ipu;\n\n        CURSOR perils (v_ipu NUMBER)\n        IS\n            SELECT gpsp_per_code,\n                   gpsp_per_sht_desc,\n                   gpsp_sec_sect_code,\n                   gpsp_sect_sht_desc,\n                   gpsp_sec_scl_code,\n                   gpsp_ipp_code,\n                   gpsp_ipu_code,\n                   gpsp_limit_amt,\n                   gpsp_excess_amt\n              FROM gin_pol_sec_perils\n             WHERE gpsp_ipu_code = v_ipu;\n\n        CURSOR risk_excesses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_risk_excess\n             WHERE re_ipu_code = v_ipu;\n\n        CURSOR schedules (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_risk_schedules\n             WHERE polrs_ipu_code = v_ipu;\n\n        CURSOR cur_prrd (v_cur_prrd NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_risk_ri_dtls\n             WHERE prrd_code = v_cur_prrd;\n\n        CURSOR cur_facre (v_prrd NUMBER)\n        IS\n            SELECT *\n              FROM gin_facre_cessions\n             WHERE fc_prrd_code = v_prrd;\n\n        CURSOR cur_pool (v_prrd NUMBER)\n        IS\n            SELECT *\n              FROM gin_pol_rein_pool_risk_details\n             WHERE prprd_prrd_code = v_prrd;\n\n        CURSOR cur_rein (v_prrd NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_rein_risk_details\n             WHERE ptotr_prrd_code = v_prrd;\n\n        CURSOR cur_part (v_ptotr NUMBER)\n        IS\n            SELECT *\n              FROM gin_participations\n             WHERE part_ptotr_code = v_ptotr;\n\n        CURSOR cur_rcpt IS\n            SELECT *\n              FROM gin_prem_receipts\n             WHERE prm_pol_batch_no = v_old_batch;\n\n        CURSOR cur_pol_sbu_dtls IS\n            SELECT *\n              FROM gin_policy_sbu_dtls\n             WHERE pdl_pol_batch_no = v_old_batch;\n\n        CURSOR cur_riskcommissions (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_risk_commissions\n             WHERE prc_ipu_code = v_ipu;\n    BEGIN\n        IF v_old_batch IS NULL\n        THEN\n            raise_error ('Select old transaction!!...');\n        END IF;\n\n        IF v_user IS NULL\n        THEN\n            raise_error ('User not defined.');\n        END IF;\n\n        FOR cur_pol_rec IN cur_pol\n        LOOP\n            --         IF     NVL (cur_pol_rec.pol_reinsured, 'N') != 'Y'\n            --            AND NVL (cur_pol_rec.pol_loaded, 'N') = 'N'\n            --            AND tqc_interfaces_pkg.get_org_type (37) = 'INS'\n            --         THEN\n            --            raise_error\n            --               ('Reinsurance for the previous transaction on this policy has not been performed/Authorised. Cannot continue..'\n            --               );\n            --         END IF;  One of the main rasons for doing a contra is to reverse the old transaction so there is no need of this check\n            BEGIN\n                SELECT COUNT ('X')\n                  INTO vdummy\n                  FROM gin_claim_master_bookings\n                 WHERE     cmb_pol_batch_no = v_old_batch\n                       AND NVL (cmb_claim_status, 'B') NOT IN ('U', 'N');\n            --AND (cmb_claim_status != 'U' OR cmb_claim_status != 'N');\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error checking claim on the transaction to contra..');\n            END;\n\n            IF vdummy > 0\n            --Heritage are requesting that you cannot contra a transaction with a claim booked on it  by Peter\n            -- by solomon, need to rethink through the process again\n            -- supposed to introduce a dialogue in stead of raise error\n            THEN\n                --raise_error  ('This transaction has a claim booked on it, you cannot reverse it...'  );\n                --ELSE\n                BEGIN\n                    vdummy := 0;\n\n                    SELECT COUNT ('X')\n                      INTO vdummy\n                      FROM gin_claim_master_bookings\n                     WHERE     cmb_pol_batch_no = v_old_batch\n                           AND NVL (cmb_claim_status, 'N') != 'U';\n                -- AND ROWNUM = 1;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error checking claims contras on the transaction to contra..');\n                END;\n\n                IF NVL (vdummy, 0) > 0\n                THEN\n                    BEGIN\n                        UPDATE gin_claim_master_bookings\n                           SET cmb_claim_status = 'U'\n                         WHERE     cmb_pol_batch_no = v_old_batch\n                               AND NVL (cmb_claim_status, 'N') != 'U';\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error updating claim on policy record..');\n                    END;\n                END IF;\n            END IF;\n\n            BEGIN\n                SELECT pro_policy_prefix\n                  INTO v_pol_prefix\n                  FROM gin_products\n                 WHERE pro_code = cur_pol_rec.pol_pro_code;\n\n                IF v_pol_prefix IS NULL\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           'The policy prefix for the product '\n                        || cur_pol_rec.pol_pro_sht_desc\n                        || ' is not defined in the setup');\n                END IF;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           'The product '\n                        || cur_pol_rec.pol_pro_sht_desc\n                        || ' is not defined in the setup');\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           'Unable to retrieve the policy prefix for the product '\n                        || cur_pol_rec.pol_pro_sht_desc);\n            END;\n\n            IF cur_pol_rec.pol_policy_type = 'N'\n            THEN\n                v_ends_no :=\n                    gin_sequences_pkg.get_number_format (\n                        'E',\n                        cur_pol_rec.pol_pro_code,\n                        cur_pol_rec.pol_brn_code,\n                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                        'CO',\n                        v_serial,\n                        'N',\n                        cur_pol_rec.pol_policy_no);\n            ELSE\n                v_ends_no :=\n                    gin_sequences_pkg.get_number_format (\n                        'ER',\n                        cur_pol_rec.pol_pro_code,\n                        cur_pol_rec.pol_brn_code,\n                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                        'CO',\n                        v_serial,\n                        'N',\n                        cur_pol_rec.pol_policy_no);\n            END IF;\n\n            BEGIN\n                SELECT COUNT (1)\n                  INTO vdummy\n                  FROM gin_policies\n                 WHERE     pol_policy_no = cur_pol_rec.pol_policy_no\n                       AND pol_ren_endos_no = v_ends_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            IF NVL (vdummy, 0) > 0\n            THEN\n                v_ends_no := v_ends_no || '-' || vdummy;\n            END IF;\n\n            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                   || gin_pol_batch_no_seq.NEXTVAL\n              INTO v_batch_no\n              FROM DUAL;\n\n            --Insert intO policies table\n            BEGIN\n                INSERT INTO gin_policies (pol_policy_no,\n                                          pol_ren_endos_no,\n                                          pol_batch_no,\n                                          pol_agnt_agent_code,\n                                          pol_agnt_sht_desc,\n                                          pol_pmod_code,\n                                          pol_bind_code,\n                                          pol_wef_dt,\n                                          pol_wet_dt,\n                                          pol_uw_year,\n                                          pol_total_sum_insured,\n                                          pol_policy_status,\n                                          pol_comm_amt,\n                                          pol_comm_rate,\n                                          pol_inception_dt,\n                                          pol_tran_type,\n                                          pol_acpr_code,\n                                          pol_acpr_sht_desc,\n                                          pol_alp_proposal_no,\n                                          pol_basic_premium,\n                                          pol_nett_premium,\n                                          pol_cur_code,\n                                          pol_prepared_by,\n                                          pol_prepared_date,\n                                          pol_checked_by,\n                                          pol_check_date,\n                                          pol_policy_type,\n                                          pol_conversion_rate,\n                                          pol_client_policy_number,\n                                          pol_brn_code,\n                                          pol_business_type,\n                                          pol_cur_rate,\n                                          pol_curr_rate_type,\n                                          pol_comm_endos_diff_amt,\n                                          pol_total_fap,\n                                          pol_total_gp,\n                                          pol_tot_endos_diff_amt,\n                                          pol_coinsurance,\n                                          pol_coinsure_leader,\n                                          pol_fp,\n                                          pol_post_status,\n                                          pol_drcr_no,\n                                          pol_cur_symbol,\n                                          pol_post_ok,\n                                          pol_brn_sht_desc,\n                                          pol_prp_code,\n                                          pol_current_status,\n                                          pol_authosrised,\n                                          pol_cancel_dt,\n                                          pol_inception_uwyr,\n                                          pol_pro_code,\n                                          pol_btr_code,\n                                          pol_btr_trans_code,\n                                          pol_your_ref,\n                                          pol_prop_holding_co_prp_code,\n                                          pol_oth_int_parties,\n                                          pol_pro_sht_desc,\n                                          pol_prev_batch_no,\n                                          pol_uwyr_length,\n                                          pol_binder_policy,\n                                          pol_bind_pro_code,\n                                          pol_bind_pro_sht_desc,\n                                          pol_remarks,\n                                          pol_coinsure_pct,\n                                          pol_renewed_rec,\n                                          pol_renewable,\n                                          pol_policy_cover_to,\n                                          pol_policy_cover_from,\n                                          pol_si_diff,\n                                          pol_wtht,\n                                          pol_prem_tax,\n                                          pol_mar_cert_no,\n                                          pol_coinsurance_share,\n                                          pol_coin_tot_prem,\n                                          pol_coin_endos_prem,\n                                          pol_coin_tot_si,\n                                          pol_renewal_dt,\n                                          pol_prev_prem,\n                                          pol_ri_agnt_agent_code,\n                                          pol_ri_agnt_sht_desc,\n                                          pol_ri_agent_comm_rate,\n                                          pol_trans_eff_wet,\n                                          pol_tot_tl,\n                                          pol_tl,\n                                          pol_coin_fee,\n                                          pol_coin_fee_amt,\n                                          pol_coin_policy_no,\n                                          pol_annual_tl,\n                                          pol_duties,\n                                          pol_extras,\n                                          pol_old_policy_no,\n                                          pol_commission_allowed,\n                                          pol_edp_batch,\n                                          pol_pip_code,\n                                          pol_tot_phfund,\n                                          pol_phfund,\n                                          pol_vat_amt,\n                                          pol_vat_rate,\n                                          pol_prem_computed,\n                                          pol_bussiness_growth_type,\n                                          pol_coin_leader_combined,\n                                          pol_open_cover,\n                                          pol_co_phfund,\n                                          pol_policy_debit,\n                                          pol_scheme_policy,\n                                          pol_policy_doc,\n                                          pol_pro_interface_type,\n                                          pol_health_tax,\n                                          pol_road_safety_tax,\n                                          pol_certchg,\n                                          pol_motor_levy,\n                                          pol_client_vat_amt,\n                                          pol_cr_date_notified,\n                                          pol_cr_note_number,\n                                          pol_admin_fee_allowed,\n                                          pol_cashback_appl,\n                                          pol_uw_only,\n                                          pol_debiting_type,\n                                          pol_lta_comm_amt,\n                                          pol_lta_wtht,\n                                          pol_other_client_deductibles,\n                                          pol_coin_other_client_charges,\n                                          pol_div_code)\n                     VALUES (cur_pol_rec.pol_policy_no,\n                             v_ends_no,\n                             v_batch_no,\n                             cur_pol_rec.pol_agnt_agent_code,\n                             cur_pol_rec.pol_agnt_sht_desc,\n                             cur_pol_rec.pol_pmod_code,\n                             cur_pol_rec.pol_bind_code,\n                             cur_pol_rec.pol_wef_dt,\n                             cur_pol_rec.pol_wet_dt,\n                             cur_pol_rec.pol_uw_year,\n                             cur_pol_rec.pol_total_sum_insured,\n                             'CO',\n                             -NVL (cur_pol_rec.pol_comm_amt, 0),\n                             cur_pol_rec.pol_comm_rate,\n                             cur_pol_rec.pol_inception_dt,\n                             cur_pol_rec.pol_tran_type,\n                             cur_pol_rec.pol_acpr_code,\n                             cur_pol_rec.pol_acpr_sht_desc,\n                             cur_pol_rec.pol_alp_proposal_no,\n                             -NVL (cur_pol_rec.pol_basic_premium, 0),\n                             -NVL (cur_pol_rec.pol_nett_premium, 0),\n                             cur_pol_rec.pol_cur_code,\n                             v_user,\n                             TRUNC (SYSDATE),\n                             NULL,\n                             NULL,\n                             cur_pol_rec.pol_policy_type,\n                             cur_pol_rec.pol_conversion_rate,\n                             cur_pol_rec.pol_client_policy_number,\n                             cur_pol_rec.pol_brn_code,\n                             cur_pol_rec.pol_business_type,\n                             cur_pol_rec.pol_cur_rate,\n                             cur_pol_rec.pol_curr_rate_type,\n                             -NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),\n                             -NVL (cur_pol_rec.pol_total_fap, 0),\n                             -NVL (cur_pol_rec.pol_total_gp, 0),\n                             -cur_pol_rec.pol_tot_endos_diff_amt,\n                             cur_pol_rec.pol_coinsurance,\n                             cur_pol_rec.pol_coinsure_leader,\n                             -cur_pol_rec.pol_fp,\n                             'N',\n                             NULL,\n                             cur_pol_rec.pol_cur_symbol,\n                             cur_pol_rec.pol_post_ok,\n                             cur_pol_rec.pol_brn_sht_desc,\n                             cur_pol_rec.pol_prp_code,\n                             'D',\n                             'R',\n                             cur_pol_rec.pol_cancel_dt,\n                             cur_pol_rec.pol_inception_uwyr,\n                             cur_pol_rec.pol_pro_code,\n                             cur_pol_rec.pol_btr_code,\n                             cur_pol_rec.pol_btr_trans_code,\n                             cur_pol_rec.pol_your_ref,\n                             cur_pol_rec.pol_prop_holding_co_prp_code,\n                             cur_pol_rec.pol_oth_int_parties,\n                             cur_pol_rec.pol_pro_sht_desc,\n                             v_old_batch,\n                             cur_pol_rec.pol_uwyr_length,\n                             cur_pol_rec.pol_binder_policy,\n                             cur_pol_rec.pol_bind_pro_code,\n                             cur_pol_rec.pol_bind_pro_sht_desc,\n                             cur_pol_rec.pol_remarks,\n                             cur_pol_rec.pol_coinsure_pct,\n                             cur_pol_rec.pol_renewed_rec,\n                             cur_pol_rec.pol_renewable,\n                             cur_pol_rec.pol_policy_cover_to,\n                             cur_pol_rec.pol_policy_cover_from,\n                             -NVL (cur_pol_rec.pol_si_diff, 0),\n                             -NVL (cur_pol_rec.pol_wtht, 0),\n                             -cur_pol_rec.pol_prem_tax,\n                             cur_pol_rec.pol_mar_cert_no,\n                             cur_pol_rec.pol_coinsurance_share,\n                             -cur_pol_rec.pol_coin_tot_prem,\n                             -cur_pol_rec.pol_coin_endos_prem,\n                             -cur_pol_rec.pol_coin_tot_si,\n                             cur_pol_rec.pol_renewal_dt,\n                             -NVL (cur_pol_rec.pol_prev_prem, 0),\n                             cur_pol_rec.pol_ri_agnt_agent_code,\n                             cur_pol_rec.pol_ri_agnt_sht_desc,\n                             cur_pol_rec.pol_ri_agent_comm_rate,\n                             cur_pol_rec.pol_trans_eff_wet,\n                             -cur_pol_rec.pol_tot_tl,\n                             -cur_pol_rec.pol_tl,\n                             -cur_pol_rec.pol_coin_fee,\n                             -cur_pol_rec.pol_coin_fee_amt,\n                             cur_pol_rec.pol_coin_policy_no,\n                             -cur_pol_rec.pol_annual_tl,\n                             -cur_pol_rec.pol_duties,\n                             -cur_pol_rec.pol_extras,\n                             cur_pol_rec.pol_old_policy_no,\n                             cur_pol_rec.pol_commission_allowed,\n                             cur_pol_rec.pol_edp_batch,\n                             cur_pol_rec.pol_pip_code,\n                             -cur_pol_rec.pol_tot_phfund,\n                             -cur_pol_rec.pol_phfund,\n                             -cur_pol_rec.pol_vat_amt,\n                             cur_pol_rec.pol_vat_rate,\n                             'Y',\n                             gin_stp_uw_pkg.get_growth_type (\n                                 cur_pol_rec.pol_prp_code,\n                                 'CO',\n                                 cur_pol_rec.pol_policy_no,\n                                 v_batch_no),\n                             cur_pol_rec.pol_coin_leader_combined,\n                             cur_pol_rec.pol_open_cover,\n                             -cur_pol_rec.pol_co_phfund,\n                             cur_pol_rec.pol_policy_debit,\n                             cur_pol_rec.pol_scheme_policy,\n                             cur_pol_rec.pol_policy_doc,\n                             cur_pol_rec.pol_pro_interface_type,\n                             -cur_pol_rec.pol_health_tax,\n                             -cur_pol_rec.pol_road_safety_tax,\n                             -cur_pol_rec.pol_certchg,\n                             -cur_pol_rec.pol_motor_levy,\n                             -cur_pol_rec.pol_client_vat_amt,\n                             cur_pol_rec.pol_cr_date_notified,\n                             cur_pol_rec.pol_cr_note_number,\n                             cur_pol_rec.pol_admin_fee_allowed,\n                             cur_pol_rec.pol_cashback_appl,\n                             cur_pol_rec.pol_uw_only,\n                             cur_pol_rec.pol_debiting_type,\n                             -cur_pol_rec.pol_lta_comm_amt,\n                             -cur_pol_rec.pol_lta_wtht,\n                             -cur_pol_rec.pol_other_client_deductibles,\n                             -cur_pol_rec.pol_coin_other_client_charges,\n                             cur_pol_rec.pol_div_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           ' Error creating policy endorsement record. Contact the system administrator...2'\n                        || v_ends_no\n                        || '==='\n                        || v_serial);\n            END;\n\n            --OPEN CUR_TAXES\n            FOR cur_tax_rec IN cur_taxes\n            LOOP\n                --INSERTING INTO GIN_POLICY_TAXES\n                BEGIN\n                    INSERT INTO gin_policy_taxes (\n                                    ptx_trac_trnt_code,\n                                    ptx_pol_policy_no,\n                                    ptx_pol_ren_endos_no,\n                                    ptx_pol_batch_no,\n                                    ptx_rate,\n                                    ptx_amount,\n                                    ptx_tl_lvl_code,\n                                    ptx_rate_type,\n                                    ptx_rate_desc,\n                                    ptx_endos_diff_amt,\n                                    ptx_tax_type,\n                                    ptx_trac_scl_code,\n                                    ptx_coin_other_client_chrgs,\n                                    ptx_override,\n                                    ptx_override_amt)\n                         VALUES (cur_tax_rec.ptx_trac_trnt_code,\n                                 cur_tax_rec.ptx_pol_policy_no,\n                                 v_ends_no,\n                                 v_batch_no,\n                                 cur_tax_rec.ptx_rate,\n                                 -NVL (cur_tax_rec.ptx_amount, 0),\n                                 cur_tax_rec.ptx_tl_lvl_code,\n                                 cur_tax_rec.ptx_rate_type,\n                                 cur_tax_rec.ptx_rate_desc,\n                                 -cur_tax_rec.ptx_endos_diff_amt,\n                                 cur_tax_rec.ptx_tax_type,\n                                 cur_tax_rec.ptx_trac_scl_code,\n                                 -cur_tax_rec.ptx_coin_other_client_chrgs,\n                                 cur_tax_rec.ptx_override,\n                                 -cur_tax_rec.ptx_override_amt);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            ' Error creating policy tax record. Contact the system administrator...');\n                END;\n            END LOOP;                                            --cur_tax_rec\n\n            /****** Insert FACRE IN Details ********/\n            BEGIN\n                SELECT TO_NUMBER (\n                              TO_CHAR (SYSDATE, 'YY')\n                           || ggt_trans_no_seq.NEXTVAL)\n                  INTO v_tran_no\n                  FROM DUAL;\n\n                INSERT INTO gin_gis_transactions (ggt_trans_no,\n                                                  ggt_pol_policy_no,\n                                                  ggt_pol_batch_no,\n                                                  ggt_pro_sht_desc,\n                                                  ggt_btr_trans_code,\n                                                  ggt_done_by,\n                                                  ggt_client_policy_number,\n                                                  ggt_uw_clm_tran,\n                                                  ggt_trans_date,\n                                                  ggt_old_tran_no,\n                                                  ggt_effective_date)\n                    SELECT v_tran_no,\n                           cur_pol_rec.pol_policy_no,\n                           v_batch_no,\n                           cur_pol_rec.pol_pro_sht_desc,\n                           'CO',\n                           v_user,\n                           cur_pol_rec.pol_client_policy_number,\n                           'U',\n                           TRUNC (SYSDATE),\n                           ggt_old_tran_no,\n                           NVL (v_eff_date, SYSDATE)\n                      FROM gin_gis_transactions\n                     WHERE     ggt_pol_batch_no = v_old_batch\n                           AND ggt_uw_clm_tran = 'U';\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                           'No previous record found for contra; policy No.'\n                        || cur_pol_rec.pol_policy_no);\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (\n                        'Unable to retrieve and create record for contra..');\n            END;\n\n            FOR cur_pol_sbu_rec IN cur_pol_sbu_dtls\n            LOOP\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))\n                           || gin_pdl_code_seq.NEXTVAL\n                      INTO v_pdl_code\n                      FROM DUAL;\n\n                    INSERT INTO gin_policy_sbu_dtls (pdl_code,\n                                                     pdl_pol_batch_no,\n                                                     pdl_unit_code,\n                                                     pdl_location_code,\n                                                     pdl_prepared_date)\n                         VALUES (v_pdl_code,\n                                 v_batch_no,\n                                 cur_pol_sbu_rec.pdl_unit_code,\n                                 cur_pol_sbu_rec.pdl_location_code,\n                                 TRUNC (SYSDATE));\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        NULL;\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Creating Policy Other Details Record..');\n                END;\n            END LOOP;\n\n            BEGIN\n                FOR cur_facre_dtls_rec IN cur_facre_dtls\n                LOOP\n                    INSERT INTO gin_facre_in_dtls (fid_pol_policy_no,\n                                                   fid_pol_ren_endos_no,\n                                                   fid_pol_batch_no,\n                                                   fid_agnt_agent_code,\n                                                   fid_agnt_sht_desc,\n                                                   fid_prp_code,\n                                                   fid_sum_insured,\n                                                   fid_gross_rate,\n                                                   fid_cede_comp_first_prem,\n                                                   fid_cede_comp_terms,\n                                                   fid_rein_terms,\n                                                   fid_cede_comp_gross_ret,\n                                                   fid_cede_comp_rein_amt,\n                                                   fid_amt_perc_sum_insured,\n                                                   fid_wef,\n                                                   fid_wet,\n                                                   fid_code,\n                                                   fid_cede_comp_policy_no,\n                                                   fid_cede_comp_term_frm,\n                                                   fid_cede_comp_term_to,\n                                                   fid_cede_company_ren_prem,\n                                                   fid_reins_term_to,\n                                                   fid_cede_sign_dt)\n                             VALUES (\n                                        cur_facre_dtls_rec.fid_pol_policy_no,\n                                        v_ends_no,\n                                        v_batch_no,\n                                        cur_facre_dtls_rec.fid_agnt_agent_code,\n                                        cur_facre_dtls_rec.fid_agnt_sht_desc,\n                                        cur_facre_dtls_rec.fid_prp_code,\n                                        cur_facre_dtls_rec.fid_sum_insured,\n                                        cur_facre_dtls_rec.fid_gross_rate,\n                                        cur_facre_dtls_rec.fid_cede_comp_first_prem,\n                                        cur_facre_dtls_rec.fid_cede_comp_terms,\n                                        cur_facre_dtls_rec.fid_rein_terms,\n                                        cur_facre_dtls_rec.fid_cede_comp_gross_ret,\n                                        cur_facre_dtls_rec.fid_cede_comp_rein_amt,\n                                        cur_facre_dtls_rec.fid_amt_perc_sum_insured,\n                                        cur_facre_dtls_rec.fid_wef,\n                                        cur_facre_dtls_rec.fid_wet,\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_fid_code_seq.NEXTVAL,\n                                        cur_facre_dtls_rec.fid_cede_comp_policy_no,\n                                        cur_facre_dtls_rec.fid_cede_comp_term_frm,\n                                        cur_facre_dtls_rec.fid_cede_comp_term_to,\n                                        cur_facre_dtls_rec.fid_cede_company_ren_prem,\n                                        cur_facre_dtls_rec.fid_reins_term_to,\n                                        cur_facre_dtls_rec.fid_cede_sign_dt);\n                END LOOP;                                 --cur_facre_dtls_rec\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    ROLLBACK;\n                    raise_error (' Unable to insert facre details...');\n            END;\n\n            FOR cur_coinsurer_rec IN cur_coinsurer\n            LOOP\n                --INSERT INTO GIN_COINSURERS\n                BEGIN\n                    INSERT INTO gin_coinsurers (\n                                    coin_agnt_agent_code,\n                                    coin_agnt_sht_desc,\n                                    coin_gl_code,\n                                    coin_lead,\n                                    coin_perct,\n                                    coin_prem,\n                                    coin_pol_policy_no,\n                                    coin_pol_ren_endos_no,\n                                    coin_pol_batch_no,\n                                    coin_fee_rate,\n                                    coin_fee_amt,\n                                    coin_duties,\n                                    coin_si,\n                                    coin_commission,\n                                    coin_whtx,\n                                    coin_prem_tax,\n                                    coin_annual_prem,\n                                    coin_fee_type,\n                                    coin_aga_code,\n                                    coin_aga_sht_desc,\n                                    coin_com_disc_amt,\n                                    coin_vat_amt,\n                                    coin_optional_comm,\n                                    coin_comm_rate,\n                                    coin_other_client_deductibles,\n                                    coin_premium_tax)\n                             VALUES (\n                                        cur_coinsurer_rec.coin_agnt_agent_code,\n                                        cur_coinsurer_rec.coin_agnt_sht_desc,\n                                        cur_coinsurer_rec.coin_gl_code,\n                                        cur_coinsurer_rec.coin_lead,\n                                        cur_coinsurer_rec.coin_perct,\n                                        -NVL (cur_coinsurer_rec.coin_prem, 0),\n                                        cur_coinsurer_rec.coin_pol_policy_no,\n                                        v_ends_no,\n                                        v_batch_no,\n                                        cur_coinsurer_rec.coin_fee_rate,\n                                        -cur_coinsurer_rec.coin_fee_amt,\n                                        -cur_coinsurer_rec.coin_duties,\n                                        -cur_coinsurer_rec.coin_si,\n                                        -cur_coinsurer_rec.coin_commission,\n                                        -cur_coinsurer_rec.coin_whtx,\n                                        -cur_coinsurer_rec.coin_prem_tax,\n                                        -cur_coinsurer_rec.coin_annual_prem,\n                                        cur_coinsurer_rec.coin_fee_type,\n                                        cur_coinsurer_rec.coin_aga_code,\n                                        cur_coinsurer_rec.coin_aga_sht_desc,\n                                        -cur_coinsurer_rec.coin_com_disc_amt,\n                                        -cur_coinsurer_rec.coin_vat_amt,\n                                        cur_coinsurer_rec.coin_optional_comm,\n                                        -cur_coinsurer_rec.coin_comm_rate,\n                                        -cur_coinsurer_rec.coin_other_client_deductibles,\n                                        -cur_coinsurer_rec.coin_premium_tax);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            '  Error creating policy coinsurance record. Contact the system administrator...');\n                END;\n            END LOOP;\n\n            --OPEN CONDITIONS\n            FOR cur_conditions_rec IN cur_conditions\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_lvl_clauses (\n                                    plcl_sbcl_cls_code,\n                                    plcl_sbcl_scl_code,\n                                    plcl_pro_sht_desc,\n                                    plcl_pro_code,\n                                    plcl_pol_policy_no,\n                                    plcl_pol_ren_endos_no,\n                                    plcl_pol_batch_no,\n                                    plcl_sbcl_cls_sht_desc,\n                                    plcl_cls_type,\n                                    plcl_clause,\n                                    plcl_cls_editable,\n                                    plcl_new,\n                                    plcl_heading)\n                         VALUES (cur_conditions_rec.plcl_sbcl_cls_code,\n                                 cur_conditions_rec.plcl_sbcl_scl_code,\n                                 cur_conditions_rec.plcl_pro_sht_desc,\n                                 cur_conditions_rec.plcl_pro_code,\n                                 cur_conditions_rec.plcl_pol_policy_no,\n                                 v_ends_no,\n                                 v_batch_no,\n                                 cur_conditions_rec.plcl_sbcl_cls_sht_desc,\n                                 cur_conditions_rec.plcl_cls_type,\n                                 cur_conditions_rec.plcl_clause,\n                                 cur_conditions_rec.plcl_cls_editable,\n                                 cur_conditions_rec.plcl_new,\n                                 cur_conditions_rec.plcl_heading);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            '  Error creating policy clauses record. Contact the system administrator...');\n                END;\n            END LOOP;\n\n            FOR cur_rctp_rec IN cur_rcpt\n            LOOP\n                INSERT INTO gin_prem_receipts (prm_code,\n                                               prm_trans_no,\n                                               prm_date,\n                                               prm_cheque_no,\n                                               prm_amt,\n                                               prm_pol_batch_no,\n                                               prm_pol_policy_no,\n                                               prm_receipt_no,\n                                               prm_receipt_date,\n                                               prm_allocated_amt,\n                                               prm_refund_amt,\n                                               prm_pay_method,\n                                               prm_prem_pymt_amt,\n                                               prm_remarks,\n                                               prm_authorised,\n                                               prm_authorised_by,\n                                               prm_prem_comm,\n                                               prm_pens_comm,\n                                               prm_chk_comm,\n                                               prm_prem_tax,\n                                               prm_drcr,\n                                               prm_status,\n                                               prm_done_by,\n                                               prm_fully_refunded,\n                                               prm_source,\n                                               prm_receipt_trans_code,\n                                               prm_production_date,\n                                               prm_chk_comm_rate,\n                                               prm_reinst_int_amt,\n                                               prm_fund_posted,\n                                               prm_additional_prem,\n                                               prm_pof_code,\n                                               prm_other_taxes,\n                                               prm_rcpt_rfnd_amt,\n                                               prm_rfnd_prodctn_date,\n                                               prm_within_system,\n                                               prm_fund_posted_by,\n                                               prm_fund_post_date,\n                                               prm_origin,\n                                               prm_alloc_to,\n                                               prm_prem_tax_posted,\n                                               prm_prem_tax_posted_by,\n                                               prm_prem_tax_posted_date,\n                                               prm_policy_fee,\n                                               prm_chk_agen_code,\n                                               prm_prev_unalloc,\n                                               prm_tracking_no)\n                         VALUES (\n                                       TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))\n                                    || gin_prm_code_seq.NEXTVAL,\n                                    cur_rctp_rec.prm_trans_no,\n                                    SYSDATE,\n                                    cur_rctp_rec.prm_cheque_no,\n                                    -cur_rctp_rec.prm_amt,\n                                    v_batch_no,\n                                    cur_rctp_rec.prm_pol_policy_no,\n                                    cur_rctp_rec.prm_receipt_no,\n                                    cur_rctp_rec.prm_receipt_date,\n                                    -cur_rctp_rec.prm_allocated_amt,\n                                    NULL,\n                                    cur_rctp_rec.prm_pay_method,\n                                    NULL,\n                                    cur_rctp_rec.prm_remarks,\n                                    NULL,\n                                    NULL,\n                                    -cur_rctp_rec.prm_prem_comm,\n                                    -cur_rctp_rec.prm_pens_comm,\n                                    -cur_rctp_rec.prm_chk_comm,\n                                    -cur_rctp_rec.prm_prem_tax,\n                                    'D',\n                                    cur_rctp_rec.prm_status,\n                                    cur_rctp_rec.prm_done_by,\n                                    cur_rctp_rec.prm_fully_refunded,\n                                    cur_rctp_rec.prm_source,\n                                    cur_rctp_rec.prm_receipt_trans_code,\n                                    cur_rctp_rec.prm_production_date,\n                                    cur_rctp_rec.prm_chk_comm_rate,\n                                    -cur_rctp_rec.prm_reinst_int_amt,\n                                    cur_rctp_rec.prm_fund_posted,\n                                    -cur_rctp_rec.prm_additional_prem,\n                                    cur_rctp_rec.prm_pof_code,\n                                    cur_rctp_rec.prm_other_taxes,\n                                    -cur_rctp_rec.prm_rcpt_rfnd_amt,\n                                    cur_rctp_rec.prm_rfnd_prodctn_date,\n                                    cur_rctp_rec.prm_within_system,\n                                    cur_rctp_rec.prm_fund_posted_by,\n                                    cur_rctp_rec.prm_fund_post_date,\n                                    cur_rctp_rec.prm_origin,\n                                    cur_rctp_rec.prm_alloc_to,\n                                    cur_rctp_rec.prm_prem_tax_posted,\n                                    cur_rctp_rec.prm_prem_tax_posted_by,\n                                    cur_rctp_rec.prm_prem_tax_posted_date,\n                                    cur_rctp_rec.prm_policy_fee,\n                                    cur_rctp_rec.prm_chk_agen_code,\n                                    cur_rctp_rec.prm_prev_unalloc,\n                                    cur_rctp_rec.prm_tracking_no);\n            END LOOP;\n\n            --OPEN cur_insureds\n            FOR cur_insureds_rec IN cur_insureds\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_insureds (polin_code,\n                                                     polin_pa,\n                                                     polin_pol_policy_no,\n                                                     polin_pol_ren_endos_no,\n                                                     polin_pol_batch_no,\n                                                     polin_category,\n                                                     polin_prp_code)\n                             VALUES (\n                                        TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR')\n                                            || polin_code_seq.NEXTVAL),\n                                        NULL,\n                                        cur_pol_rec.pol_policy_no,\n                                        v_ends_no,\n                                        v_batch_no,\n                                        NULL,\n                                        cur_insureds_rec.polin_prp_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            ' Error creating insureds record. Contact the system administrator...');\n                END;\n\n                FOR cur_ipu_rec IN cur_ipu (cur_insureds_rec.polin_code)\n                LOOP\n                    SELECT TO_NUMBER (\n                                  TO_CHAR (SYSDATE, 'RRRR')\n                               || gin_ipu_code_seq.NEXTVAL)\n                      INTO v_new_ipu_code\n                      FROM DUAL;\n\n                    -- DO YOUR INSERTS INTO ipu\n                    BEGIN\n                        --  RAISE_ERROR('YEAR'||cur_ipu_rec.ipu_model_yr||'MODEL'|| cur_ipu_rec.ipu_vehicle_model\n                        --  ||'MAKE' ||cur_ipu_rec.ipu_vehicle_make);\n                        INSERT INTO gin_insured_property_unds (\n                                        ipu_code,\n                                        ipu_property_id,\n                                        ipu_item_desc,\n                                        ipu_qty,\n                                        ipu_value,\n                                        ipu_wef,\n                                        ipu_wet,\n                                        ipu_pol_policy_no,\n                                        ipu_pol_ren_endos_no,\n                                        ipu_pol_batch_no,\n                                        ipu_basic_premium,\n                                        ipu_nett_premium,\n                                        ipu_compulsory_excess,\n                                        ipu_add_theft_excess,\n                                        ipu_add_exp_excess,\n                                        ipu_prr_rate,\n                                        ipu_comp_retention,\n                                        ipu_pol_est_max_loss,\n                                        ipu_avail_fulc_bal,\n                                        ipu_endos_diff_amt,\n                                        ipu_prem_wef,\n                                        ipu_earth_quake_cover,\n                                        ipu_earth_quake_prem,\n                                        ipu_location,\n                                        ipu_itl,\n                                        ipu_polin_code,\n                                        ipu_sec_sect_code,\n                                        ipu_sect_sht_desc,\n                                        ipu_sec_scl_code,\n                                        ipu_ncd_status,\n                                        ipu_cert_issued,\n                                        ipu_related_ipu_code,\n                                        ipu_prorata,\n                                        ipu_bp,\n                                        ipu_gp,\n                                        ipu_fp,\n                                        ipu_fap,\n                                        ipu_prev_ipu_code,\n                                        ipu_cummulative_reins,\n                                        ipu_eml_si,\n                                        ipu_reinsured,\n                                        ipu_ct_code,\n                                        ipu_sht_desc,\n                                        ipu_quz_code,\n                                        ipp_quz_sht_desc,\n                                        ipu_quz_sht_desc,\n                                        ipu_ncl_level,\n                                        ipu_ncd_level,\n                                        ipu_id,\n                                        ipu_gross_comp_retention,\n                                        ipu_bind_code,\n                                        ipu_commission,\n                                        ipu_comm_endos_diff_amt,\n                                        ipu_facre_amount,\n                                        ipu_clp_code,\n                                        ipu_excess_rate,\n                                        ipu_excess_type,\n                                        ipu_excess_rate_type,\n                                        ipu_excess_min,\n                                        ipu_excess_max,\n                                        ipu_prereq_ipu_code,\n                                        ipu_escalation_rate,\n                                        ipu_endos_remove,\n                                        ipu_comm_rate,\n                                        ipu_prev_batch_no,\n                                        ipu_cur_code,\n                                        ipu_relr_code,\n                                        ipu_relr_sht_desc,\n                                        ipu_reinsure_amt,\n                                        ipu_prp_code,\n                                        ipu_max_exposure,\n                                        ipu_com_retention_rate,\n                                        ipu_retro_cover,\n                                        ipu_retro_wef,\n                                        ipu_eff_wef,\n                                        ipu_eff_wet,\n                                        ipu_comments,\n                                        ipu_covt_code,\n                                        ipu_covt_sht_desc,\n                                        ipu_si_diff,\n                                        ipu_terr_code,\n                                        ipu_terr_desc,\n                                        ipu_from_time,\n                                        ipu_to_time,\n                                        ipu_tot_endos_prem_dif,\n                                        ipu_tot_gp,\n                                        ipu_tot_value,\n                                        ipu_cover_days,\n                                        ipu_grp_si_risk_pct,\n                                        ipu_grp_top_loc,\n                                        ipu_grp_comp_gross_ret,\n                                        ipu_grp_comp_net_ret,\n                                        ipu_prev_prem,\n                                        ipu_ri_agnt_com_rate,\n                                        ipu_uw_yr,\n                                        ipu_status,\n                                        ipu_paid_tl,\n                                        ipu_paid_premium,\n                                        ipu_trans_count,\n                                        ipu_rate_change_comment,\n                                        ipu_prem_tax,\n                                        ipu_trans_eff_wet,\n                                        ipu_compute_max_exposure,\n                                        ipu_endose_fap_or_bc,\n                                        ipu_tot_first_loss,\n                                        ipu_accumulation_limit,\n                                        ipu_inception_uwyr,\n                                        ipu_eml_based_on,\n                                        ipu_aggregate_limits,\n                                        ipu_rc_sht_desc,\n                                        ipu_rc_code,\n                                        ipu_survey_date,\n                                        ipu_item_details,\n                                        ipu_contrad_ipu_code,\n                                        ipu_prev_tot_fap,\n                                        ipu_prev_fap,\n                                        ipu_override_ri_retention,\n                                        ipu_ri_agnt_comm_amt,\n                                        ipu_earthqke_prem_diff,\n                                        ipu_tot_fap,\n                                        ipu_coin_tl,\n                                        ipu_mktr_com_amt,\n                                        ipu_mktr_com_rate,\n                                        ipu_vat_rate,\n                                        ipu_vat_amt,\n                                        ipu_prev_status,\n                                        ipu_rs_code,\n                                        ipu_rescue_mem,\n                                        ipu_rescue_charge,\n                                        ipu_phfund,\n                                        ipu_wtht, ---- ADDED ON 03_11_2022 TO RESOLVE CONTRA TRANSACTIONS THAT DO NOT REVERSE THE WHTX AMOUNT\n                                        ipu_co_phfund,\n                                        ipu_health_tax,\n                                        ipu_road_safety_tax,\n                                        ipu_certchg,\n                                        ipu_motor_levy,\n                                        ipu_client_vat_amt,\n                                        ipu_cashback_appl,\n                                        ipu_cashback_level,\n                                        ipu_vehicle_model,\n                                        ipu_vehicle_make,\n                                        ipu_vehicle_model_code,\n                                        ipu_vehicle_make_code,\n                                        ipu_loc_town,\n                                        ipu_prop_address,\n                                        ipu_risk_note,\n                                        ipu_other_com_charges,\n                                        ipu_model_yr,\n                                        ipu_insured_driver,\n                                        ipu_cert_no,\n                                        ipu_lta_endos_com_amt,\n                                        ipu_lta_commission,\n                                        ipu_lta_comm_rate,\n                                        ipu_maintenance_period_type,\n                                        ipu_maintenance_period,\n                                        ipu_other_client_deductibles,\n                                        ipu_coin_other_client_charges,\n                                        ipu_survey_agnt_code,\n                                        ipu_survey,\n                                        ipu_marine_type)\n                                 VALUES (\n                                            v_new_ipu_code,\n                                            cur_ipu_rec.ipu_property_id,\n                                            cur_ipu_rec.ipu_item_desc,\n                                            cur_ipu_rec.ipu_qty,\n                                            -NVL (cur_ipu_rec.ipu_value, 0),\n                                            cur_ipu_rec.ipu_wef,\n                                            cur_ipu_rec.ipu_wet,\n                                            cur_pol_rec.pol_policy_no,\n                                            v_ends_no,\n                                            v_batch_no,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_basic_premium,\n                                                 0),\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_nett_premium,\n                                                 0),\n                                            cur_ipu_rec.ipu_compulsory_excess,\n                                            cur_ipu_rec.ipu_add_theft_excess,\n                                            cur_ipu_rec.ipu_add_exp_excess,\n                                            cur_ipu_rec.ipu_prr_rate,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_comp_retention,\n                                                 0),\n                                            cur_ipu_rec.ipu_pol_est_max_loss,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_avail_fulc_bal,\n                                                 0),\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_endos_diff_amt,\n                                                 0),\n                                            cur_ipu_rec.ipu_prem_wef,\n                                            cur_ipu_rec.ipu_earth_quake_cover,\n                                            cur_ipu_rec.ipu_earth_quake_prem,\n                                            cur_ipu_rec.ipu_location,\n                                            -NVL (cur_ipu_rec.ipu_itl, 0),\n                                            TO_NUMBER (\n                                                   TO_CHAR (SYSDATE, 'RRRR')\n                                                || polin_code_seq.CURRVAL),\n                                            cur_ipu_rec.ipu_sec_sect_code,\n                                            cur_ipu_rec.ipu_sect_sht_desc,\n                                            cur_ipu_rec.ipu_sec_scl_code,\n                                            cur_ipu_rec.ipu_ncd_status,\n                                            cur_ipu_rec.ipu_cert_issued,\n                                            cur_ipu_rec.ipu_related_ipu_code,\n                                            cur_ipu_rec.ipu_prorata,\n                                            -NVL (cur_ipu_rec.ipu_bp, 0),\n                                            -NVL (cur_ipu_rec.ipu_gp, 0),\n                                            -NVL (cur_ipu_rec.ipu_fp, 0),\n                                            -NVL (cur_ipu_rec.ipu_fap, 0),\n                                            cur_ipu_rec.ipu_prev_ipu_code,\n                                            cur_ipu_rec.ipu_cummulative_reins,\n                                            cur_ipu_rec.ipu_eml_si,\n                                            1,\n                                            cur_ipu_rec.ipu_ct_code,\n                                            cur_ipu_rec.ipu_sht_desc,\n                                            cur_ipu_rec.ipu_quz_code,\n                                            cur_ipu_rec.ipp_quz_sht_desc,\n                                            cur_ipu_rec.ipu_quz_sht_desc,\n                                            cur_ipu_rec.ipu_ncl_level,\n                                            cur_ipu_rec.ipu_ncd_level,\n                                            cur_ipu_rec.ipu_id,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_gross_comp_retention,\n                                                 0),\n                                            cur_ipu_rec.ipu_bind_code,\n                                            -NVL (cur_ipu_rec.ipu_commission,\n                                                  0),\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_comm_endos_diff_amt,\n                                                 0),\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_facre_amount,\n                                                 0),\n                                            cur_ipu_rec.ipu_clp_code,\n                                            cur_ipu_rec.ipu_excess_rate,\n                                            cur_ipu_rec.ipu_excess_type,\n                                            cur_ipu_rec.ipu_excess_rate_type,\n                                            cur_ipu_rec.ipu_excess_min,\n                                            cur_ipu_rec.ipu_excess_max,\n                                            cur_ipu_rec.ipu_prereq_ipu_code,\n                                            cur_ipu_rec.ipu_escalation_rate,\n                                            cur_ipu_rec.ipu_endos_remove,\n                                            cur_ipu_rec.ipu_comm_rate,\n                                            cur_ipu_rec.ipu_prev_batch_no,\n                                            cur_ipu_rec.ipu_cur_code,\n                                            cur_ipu_rec.ipu_relr_code,\n                                            cur_ipu_rec.ipu_relr_sht_desc,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_reinsure_amt,\n                                                 0),\n                                            cur_ipu_rec.ipu_prp_code,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_max_exposure,\n                                                 0),\n                                            cur_ipu_rec.ipu_com_retention_rate,\n                                            cur_ipu_rec.ipu_retro_cover,\n                                            cur_ipu_rec.ipu_retro_wef,\n                                            cur_ipu_rec.ipu_eff_wef,\n                                            cur_ipu_rec.ipu_eff_wet,\n                                            cur_ipu_rec.ipu_comments,\n                                            cur_ipu_rec.ipu_covt_code,\n                                            cur_ipu_rec.ipu_covt_sht_desc,\n                                            -NVL (cur_ipu_rec.ipu_si_diff, 0),\n                                            cur_ipu_rec.ipu_terr_code,\n                                            cur_ipu_rec.ipu_terr_desc,\n                                            cur_ipu_rec.ipu_from_time,\n                                            cur_ipu_rec.ipu_to_time,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_tot_endos_prem_dif,\n                                                 0),\n                                            -NVL (cur_ipu_rec.ipu_tot_gp, 0),\n                                            -NVL (cur_ipu_rec.ipu_tot_value,\n                                                  0),\n                                            cur_ipu_rec.ipu_cover_days,\n                                            cur_ipu_rec.ipu_grp_si_risk_pct,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_grp_top_loc,\n                                                 0),\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_grp_comp_gross_ret,\n                                                 0),\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_grp_comp_net_ret,\n                                                 0),\n                                            -NVL (cur_ipu_rec.ipu_prev_prem,\n                                                  0),\n                                            cur_ipu_rec.ipu_ri_agnt_com_rate,\n                                            cur_ipu_rec.ipu_uw_yr,\n                                            cur_ipu_rec.ipu_status,\n                                            -NVL (cur_ipu_rec.ipu_paid_tl, 0),\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_paid_premium,\n                                                 0),\n                                              NVL (\n                                                  cur_ipu_rec.ipu_trans_count,\n                                                  0)\n                                            + 1,\n                                            cur_ipu_rec.ipu_rate_change_comment,\n                                            -NVL (cur_ipu_rec.ipu_prem_tax,\n                                                  0),\n                                            cur_ipu_rec.ipu_trans_eff_wet,\n                                            cur_ipu_rec.ipu_compute_max_exposure,\n                                            cur_ipu_rec.ipu_endose_fap_or_bc,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_tot_first_loss,\n                                                 0),\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_accumulation_limit,\n                                                 0),\n                                            cur_ipu_rec.ipu_inception_uwyr,\n                                            cur_ipu_rec.ipu_eml_based_on,\n                                            cur_ipu_rec.ipu_aggregate_limits,\n                                            cur_ipu_rec.ipu_rc_sht_desc,\n                                            cur_ipu_rec.ipu_rc_code,\n                                            cur_ipu_rec.ipu_survey_date,\n                                            cur_ipu_rec.ipu_item_details,\n                                            cur_ipu_rec.ipu_code,\n                                            -NVL (\n                                                 cur_ipu_rec.ipu_prev_tot_fap,\n                                                 0),\n                                            -NVL (cur_ipu_rec.ipu_prev_fap,\n                                                  0),\n                                            cur_ipu_rec.ipu_override_ri_retention,\n                                            -cur_ipu_rec.ipu_ri_agnt_comm_amt,\n                                            -cur_ipu_rec.ipu_earthqke_prem_diff,\n                                            cur_ipu_rec.ipu_tot_fap,\n                                            -cur_ipu_rec.ipu_coin_tl,\n                                            -cur_ipu_rec.ipu_mktr_com_amt,\n                                            cur_ipu_rec.ipu_mktr_com_rate,\n                                            cur_ipu_rec.ipu_vat_rate,\n                                            -cur_ipu_rec.ipu_vat_amt,\n                                            cur_ipu_rec.ipu_status,\n                                            cur_ipu_rec.ipu_rs_code,\n                                            cur_ipu_rec.ipu_rescue_mem,\n                                            -cur_ipu_rec.ipu_rescue_charge,\n                                            -cur_ipu_rec.ipu_phfund,\n                                            cur_ipu_rec.IPU_WTHT, ---- ADDED ON 03_11_2022 TO RESOLVE CONTRA TRANSACTIONS THAT DO NOT REVERSE THE WHTX AMOUNT\n                                            -cur_ipu_rec.ipu_co_phfund,\n                                            -cur_ipu_rec.ipu_health_tax,\n                                            -cur_ipu_rec.ipu_road_safety_tax,\n                                            -cur_ipu_rec.ipu_certchg,\n                                            -cur_ipu_rec.ipu_motor_levy,\n                                            -cur_ipu_rec.ipu_client_vat_amt,\n                                            cur_ipu_rec.ipu_cashback_appl,\n                                            cur_ipu_rec.ipu_cashback_level,\n                                            cur_ipu_rec.ipu_vehicle_model,\n                                            cur_ipu_rec.ipu_vehicle_make,\n                                            cur_ipu_rec.ipu_vehicle_model_code,\n                                            cur_ipu_rec.ipu_vehicle_make_code,\n                                            cur_ipu_rec.ipu_loc_town,\n                                            cur_ipu_rec.ipu_prop_address,\n                                            cur_ipu_rec.ipu_risk_note,\n                                            cur_ipu_rec.ipu_other_com_charges,\n                                            cur_ipu_rec.ipu_model_yr,\n                                            cur_ipu_rec.ipu_insured_driver,\n                                            cur_ipu_rec.ipu_cert_no,\n                                            -cur_ipu_rec.ipu_lta_endos_com_amt,\n                                            -cur_ipu_rec.ipu_lta_commission,\n                                            cur_ipu_rec.ipu_lta_comm_rate,\n                                            cur_ipu_rec.ipu_maintenance_period_type,\n                                            cur_ipu_rec.ipu_maintenance_period,\n                                            -cur_ipu_rec.ipu_other_client_deductibles,\n                                            -cur_ipu_rec.ipu_coin_other_client_charges,\n                                            cur_ipu_rec.ipu_survey_agnt_code,\n                                            cur_ipu_rec.ipu_survey,\n                                            cur_ipu_rec.ipu_marine_type);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            ROLLBACK;\n                            raise_error (\n                                   ' Error creating risk contra record. Contact the system administrator...'\n                                || 'PHF FUND='\n                                || cur_ipu_rec.ipu_co_phfund);\n                    END;\n\n                    --               CONTRA COMMISSION\n                    FOR cur_comm_rec\n                        IN cur_riskcommissions (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_policy_risk_commissions (\n                                            PRC_CODE,\n                                            PRC_IPU_CODE,\n                                            PRC_POL_BATCH_NO,\n                                            PRC_AGN_CODE,\n                                            PRC_TRANS_CODE,\n                                            PRC_ACT_CODE,\n                                            PRC_AMOUNT,\n                                            PRC_SETUP_RATE,\n                                            PRC_USED_RATE,\n                                            PRC_WHTAX_AMOUNT,\n                                            PRC_WHTAX_RATE,\n                                            PRC_TRNT_CODE,\n                                            PRC_DISC_TYPE,\n                                            PRC_DISC_RATE,\n                                            PRC_DISC_AMOUNT,\n                                            PRC_GROUP,\n                                            PRC_PREMIUM_AMT,\n                                            PRC_ALLOWED_AMT,\n                                            PRC_ROUNDS)\n                                 VALUES (tq_gis.prc_code_seq.NEXTVAL,\n                                         v_new_ipu_code,\n                                         v_batch_no,\n                                         cur_comm_rec.PRC_AGN_CODE,\n                                         cur_comm_rec.PRC_TRANS_CODE,\n                                         cur_comm_rec.PRC_ACT_CODE,\n                                         -cur_comm_rec.PRC_AMOUNT,\n                                         cur_comm_rec.PRC_SETUP_RATE,\n                                         cur_comm_rec.PRC_USED_RATE,\n                                         -cur_comm_rec.PRC_WHTAX_AMOUNT,\n                                         cur_comm_rec.PRC_WHTAX_RATE,\n                                         cur_comm_rec.PRC_TRNT_CODE,\n                                         cur_comm_rec.PRC_DISC_TYPE,\n                                         cur_comm_rec.PRC_DISC_RATE,\n                                         cur_comm_rec.PRC_DISC_AMOUNT,\n                                         cur_comm_rec.PRC_GROUP,\n                                         -cur_comm_rec.PRC_PREMIUM_AMT,\n                                         -cur_comm_rec.PRC_ALLOWED_AMT,\n                                         cur_comm_rec.PRC_ROUNDS);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    '  Error creating risk section record. Contact the system administrator...');\n                        END;\n                    END LOOP;\n\n                    --OPEN LIMITS\n                    FOR cur_limits_rec IN cur_limits (cur_ipu_rec.ipu_code)\n                    LOOP\n                        -- DO YOUR INSERTS INTO limits\n                        BEGIN\n                            INSERT INTO gin_policy_insured_limits (\n                                            pil_code,\n                                            pil_ipu_code,\n                                            pil_sect_code,\n                                            pil_sect_sht_desc,\n                                            pil_row_num,\n                                            pil_calc_group,\n                                            pil_limit_amt,\n                                            pil_prem_rate,\n                                            pil_prem_amt,\n                                            pil_rate_type,\n                                            pil_rate_desc,\n                                            pil_sect_type,\n                                            pil_sect_excess_detail,\n                                            pil_original_prem_rate,\n                                            pil_rate_change_remarks,\n                                            pil_change_done_by,\n                                            pil_comment,\n                                            pil_multiplier_rate,\n                                            pil_multiplier_div_factor,\n                                            pil_annual_premium,\n                                            pil_rate_div_fact,\n                                            pil_min_premium,\n                                            pil_desc,\n                                            pil_compute,\n                                            pil_used_limit,\n                                            pil_indem_prd,\n                                            pil_prd_type,\n                                            pil_indem_fstprd,\n                                            pil_indem_fstprd_pct,\n                                            pil_indem_remprd_pct,\n                                            pil_dual_basis,\n                                            pil_prem_accumulation,\n                                            pil_declaration_section,\n                                            pil_prev_limit,\n                                            pil_actual_prem,\n                                            pil_prev_prem_prorata,\n                                            pil_annual_actual_prem,\n                                            pil_eml_pct,\n                                            pil_top_loc_rate,\n                                            pil_top_loc_div_fact,\n                                            pil_limit_prd,\n                                            pil_free_limit,\n                                            pil_prev_endr_prem_rate,\n                                            pil_prev_endr_rate_div_fact,\n                                            pil_prev_endr_mult_rate,\n                                            pil_prev_endr_mult_div_fact,\n                                            pil_expired,\n                                            pil_firstloss,\n                                            pil_firstloss_amt_pcnt,\n                                            pil_firstloss_value)\n                                     VALUES (\n                                                TO_NUMBER (\n                                                       TO_CHAR (SYSDATE,\n                                                                'RRRR')\n                                                    || gin_pil_code_seq.NEXTVAL),\n                                                v_new_ipu_code,\n                                                cur_limits_rec.pil_sect_code,\n                                                cur_limits_rec.pil_sect_sht_desc,\n                                                cur_limits_rec.pil_row_num,\n                                                cur_limits_rec.pil_calc_group,\n                                                -NVL (\n                                                     cur_limits_rec.pil_limit_amt,\n                                                     0),\n                                                cur_limits_rec.pil_prem_rate,\n                                                -NVL (\n                                                     cur_limits_rec.pil_prem_amt,\n                                                     0),\n                                                cur_limits_rec.pil_rate_type,\n                                                cur_limits_rec.pil_rate_desc,\n                                                cur_limits_rec.pil_sect_type,\n                                                cur_limits_rec.pil_sect_excess_detail,\n                                                cur_limits_rec.pil_original_prem_rate,\n                                                cur_limits_rec.pil_rate_change_remarks,\n                                                cur_limits_rec.pil_change_done_by,\n                                                cur_limits_rec.pil_comment,\n                                                cur_limits_rec.pil_multiplier_rate,\n                                                cur_limits_rec.pil_multiplier_div_factor,\n                                                -NVL (\n                                                     cur_limits_rec.pil_annual_premium,\n                                                     0),\n                                                cur_limits_rec.pil_rate_div_fact,\n                                                -NVL (\n                                                     cur_limits_rec.pil_min_premium,\n                                                     0),\n                                                cur_limits_rec.pil_desc,\n                                                cur_limits_rec.pil_compute,\n                                                -NVL (\n                                                     cur_limits_rec.pil_used_limit,\n                                                     0),\n                                                cur_limits_rec.pil_indem_prd,\n                                                cur_limits_rec.pil_prd_type,\n                                                cur_limits_rec.pil_indem_fstprd,\n                                                cur_limits_rec.pil_indem_fstprd_pct,\n                                                cur_limits_rec.pil_indem_remprd_pct,\n                                                cur_limits_rec.pil_dual_basis,\n                                                -NVL (\n                                                     cur_limits_rec.pil_prem_accumulation,\n                                                     0),\n                                                cur_limits_rec.pil_declaration_section,\n                                                -NVL (\n                                                     cur_limits_rec.pil_prev_limit,\n                                                     0),\n                                                -NVL (\n                                                     cur_limits_rec.pil_actual_prem,\n                                                     0),\n                                                -NVL (\n                                                     cur_limits_rec.pil_prev_prem_prorata,\n                                                     0),\n                                                -NVL (\n                                                     cur_limits_rec.pil_annual_actual_prem,\n                                                     0),\n                                                cur_limits_rec.pil_eml_pct,\n                                                cur_limits_rec.pil_top_loc_rate,\n                                                cur_limits_rec.pil_top_loc_div_fact,\n                                                cur_limits_rec.pil_limit_prd,\n                                                cur_limits_rec.pil_free_limit,\n                                                cur_limits_rec.pil_prem_rate,\n                                                cur_limits_rec.pil_rate_div_fact,\n                                                cur_limits_rec.pil_multiplier_rate,\n                                                cur_limits_rec.pil_multiplier_div_factor,\n                                                cur_limits_rec.pil_expired,\n                                                cur_limits_rec.pil_firstloss,\n                                                cur_limits_rec.pil_firstloss_amt_pcnt,\n                                                cur_limits_rec.pil_firstloss_value);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    '  Error creating risk section record. Contact the system administrator...');\n                        END;\n                    END LOOP;                                 --cur_limits_rec\n\n                    --OPEN CLAUSES\n                    FOR cur_clauses_rec IN cur_clauses (cur_ipu_rec.ipu_code)\n                    LOOP\n                        -- DO YOUR INSERTS INTO clauses\n                        BEGIN\n                            INSERT INTO gin_policy_clauses (\n                                            pocl_sbcl_cls_code,\n                                            pocl_sbcl_scl_code,\n                                            pocl_cls_sht_desc,\n                                            pocl_pol_policy_no,\n                                            pocl_pol_ren_endos_no,\n                                            pocl_pol_batch_no,\n                                            pocl_ipu_code,\n                                            plcl_cls_type,\n                                            pocl_clause,\n                                            pocl_cls_editable,\n                                            pocl_new,\n                                            pocl_heading)\n                                 VALUES (cur_clauses_rec.pocl_sbcl_cls_code,\n                                         cur_clauses_rec.pocl_sbcl_scl_code,\n                                         cur_clauses_rec.pocl_cls_sht_desc,\n                                         cur_pol_rec.pol_policy_no,\n                                         v_ends_no,\n                                         v_batch_no,\n                                         v_new_ipu_code,\n                                         cur_clauses_rec.plcl_cls_type,\n                                         cur_clauses_rec.pocl_clause,\n                                         cur_clauses_rec.pocl_cls_editable,\n                                         cur_clauses_rec.pocl_new,\n                                         cur_clauses_rec.pocl_heading);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    '  Error creating risk clauses record. Contact the system administrator...');\n                        END;\n                    END LOOP;                                --cur_clauses_rec\n\n                    FOR cur_rsk_perils_rec\n                        IN cur_rsk_perils (cur_ipu_rec.ipu_code)\n                    LOOP\n                        -- DO YOUR INSERTS INTO clauses\n                        BEGIN\n                            --    message('inserting risk GIN_POLICY_CLAUSES ...');pause;\n                            INSERT INTO gin_pol_risk_section_perils (\n                                            prspr_code,\n                                            prspr_pol_batch_no,\n                                            prspr_ipu_code,\n                                            prspr_scl_code,\n                                            prspr_sect_code,\n                                            prspr_sect_sht_desc,\n                                            prspr_per_code,\n                                            prspr_per_sht_desc,\n                                            prspr_mandatory,\n                                            prspr_peril_limit,\n                                            prspr_peril_type,\n                                            prspr_si_or_limit,\n                                            prspr_sec_code,\n                                            prspr_excess_type,\n                                            prspr_excess,\n                                            prspr_excess_min,\n                                            prspr_excess_max,\n                                            prspr_expire_on_claim,\n                                            prspr_bind_code,\n                                            prspr_person_limit,\n                                            prspr_claim_limit,\n                                            prspr_desc,\n                                            prspr_bind_type,\n                                            prspr_sspr_code,\n                                            prspr_salvage_pct,\n                                            prspr_claim_excess_type,\n                                            prspr_tl_excess_type,\n                                            prspr_tl_excess,\n                                            prspr_tl_excess_min,\n                                            prspr_tl_excess_max,\n                                            prspr_pl_excess_type,\n                                            prspr_pl_excess,\n                                            prspr_pl_excess_min,\n                                            prspr_pl_excess_max,\n                                            prspr_claim_excess_min,\n                                            prspr_claim_excess_max,\n                                            prspr_depend_loss_type,\n                                            prspr_ttd_ben_pcts,\n                                            prspr_ssprm_code,\n                                            prspr_prem_rate,\n                                            prspr_premium_amt,\n                                            prspr_pil_code,\n                                            prspr_annual_premium,\n                                            prspr_prem_prorata,\n                                            prspr_actual_rate_prem,\n                                            prspr_rate_div_fact,\n                                            prspr_free_limit_amt,\n                                            prspr_prorata_full,\n                                            prspr_min_premium,\n                                            prspr_multiplier_rate,\n                                            prspr_multiplier_div_factor)\n                                     VALUES (\n                                                   TO_CHAR (SYSDATE, 'RRRR')\n                                                || gin_prspr_code_seq.NEXTVAL,\n                                                v_batch_no,\n                                                v_new_ipu_code,\n                                                cur_rsk_perils_rec.prspr_scl_code,\n                                                cur_rsk_perils_rec.prspr_sect_code,\n                                                cur_rsk_perils_rec.prspr_sect_sht_desc,\n                                                cur_rsk_perils_rec.prspr_per_code,\n                                                cur_rsk_perils_rec.prspr_per_sht_desc,\n                                                cur_rsk_perils_rec.prspr_mandatory,\n                                                cur_rsk_perils_rec.prspr_peril_limit,\n                                                cur_rsk_perils_rec.prspr_peril_type,\n                                                cur_rsk_perils_rec.prspr_si_or_limit,\n                                                cur_rsk_perils_rec.prspr_sec_code,\n                                                cur_rsk_perils_rec.prspr_excess_type,\n                                                cur_rsk_perils_rec.prspr_excess,\n                                                cur_rsk_perils_rec.prspr_excess_min,\n                                                cur_rsk_perils_rec.prspr_excess_max,\n                                                cur_rsk_perils_rec.prspr_expire_on_claim,\n                                                cur_rsk_perils_rec.prspr_bind_code,\n                                                cur_rsk_perils_rec.prspr_person_limit,\n                                                cur_rsk_perils_rec.prspr_claim_limit,\n                                                cur_rsk_perils_rec.prspr_desc,\n                                                cur_rsk_perils_rec.prspr_bind_type,\n                                                cur_rsk_perils_rec.prspr_sspr_code,\n                                                cur_rsk_perils_rec.prspr_salvage_pct,\n                                                cur_rsk_perils_rec.prspr_claim_excess_type,\n                                                cur_rsk_perils_rec.prspr_tl_excess_type,\n                                                cur_rsk_perils_rec.prspr_tl_excess,\n                                                cur_rsk_perils_rec.prspr_tl_excess_min,\n                                                cur_rsk_perils_rec.prspr_tl_excess_max,\n                                                cur_rsk_perils_rec.prspr_pl_excess_type,\n                                                cur_rsk_perils_rec.prspr_pl_excess,\n                                                cur_rsk_perils_rec.prspr_pl_excess_min,\n                                                cur_rsk_perils_rec.prspr_pl_excess_max,\n                                                cur_rsk_perils_rec.prspr_claim_excess_min,\n                                                cur_rsk_perils_rec.prspr_claim_excess_max,\n                                                cur_rsk_perils_rec.prspr_depend_loss_type,\n                                                cur_rsk_perils_rec.prspr_ttd_ben_pcts,\n                                                cur_rsk_perils_rec.prspr_ssprm_code,\n                                                cur_rsk_perils_rec.prspr_prem_rate,\n                                                -cur_rsk_perils_rec.prspr_premium_amt,\n                                                NULL,\n                                                -cur_rsk_perils_rec.prspr_annual_premium,\n                                                -cur_rsk_perils_rec.prspr_prem_prorata,\n                                                -cur_rsk_perils_rec.prspr_actual_rate_prem,\n                                                cur_rsk_perils_rec.prspr_rate_div_fact,\n                                                -cur_rsk_perils_rec.prspr_free_limit_amt,\n                                                cur_rsk_perils_rec.prspr_prorata_full,\n                                                -cur_rsk_perils_rec.prspr_min_premium,\n                                                cur_rsk_perils_rec.prspr_multiplier_rate,\n                                                cur_rsk_perils_rec.prspr_multiplier_div_factor);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to insert risk level clause details, ...');\n                        END;\n                    END LOOP;\n\n                    FOR cur_perils_rec IN perils (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_pol_sec_perils (\n                                            gpsp_per_code,\n                                            gpsp_per_sht_desc,\n                                            gpsp_sec_sect_code,\n                                            gpsp_sect_sht_desc,\n                                            gpsp_sec_scl_code,\n                                            gpsp_ipp_code,\n                                            gpsp_ipu_code,\n                                            gpsp_limit_amt,\n                                            gpsp_excess_amt)\n                                 VALUES (cur_perils_rec.gpsp_per_code,\n                                         cur_perils_rec.gpsp_per_sht_desc,\n                                         cur_perils_rec.gpsp_sec_sect_code,\n                                         cur_perils_rec.gpsp_sect_sht_desc,\n                                         cur_perils_rec.gpsp_sec_scl_code,\n                                         cur_perils_rec.gpsp_ipp_code,\n                                         v_new_ipu_code,\n                                         cur_perils_rec.gpsp_limit_amt,\n                                         cur_perils_rec.gpsp_excess_amt);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    '  Error creating risk perils record. Contact the system administrator...');\n                        END;\n                    END LOOP;                                 --Cur_perils_rec\n\n                    FOR risk_excesses_rec\n                        IN risk_excesses (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_risk_excess (re_ipu_code,\n                                                         re_excess_rate,\n                                                         re_excess_type,\n                                                         re_excess_rate_type,\n                                                         re_excess_min,\n                                                         re_excess_max,\n                                                         re_comments)\n                                     VALUES (\n                                                v_new_ipu_code,\n                                                risk_excesses_rec.re_excess_rate,\n                                                risk_excesses_rec.re_excess_type,\n                                                risk_excesses_rec.re_excess_rate_type,\n                                                risk_excesses_rec.re_excess_min,\n                                                risk_excesses_rec.re_excess_max,\n                                                risk_excesses_rec.re_comments);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    '  Error creating risk excess record. Contact the system administrator...');\n                        END;\n                    END LOOP;                              --risk_excesses_rec\n\n                    FOR schedules_rec IN schedules (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_policy_risk_schedules (\n                                            polrs_code,\n                                            polrs_ipu_code,\n                                            polrs_pol_batch_no,\n                                            polrs_schedule)\n                                     VALUES (\n                                                   TO_NUMBER (\n                                                       TO_CHAR (SYSDATE,\n                                                                'RRRR'))\n                                                || gin_polrs_code_seq.NEXTVAL,\n                                                v_new_ipu_code,\n                                                v_batch_no,\n                                                schedules_rec.polrs_schedule);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    ' Error creating risk schedules record. Contact the system administrator...');\n                        END;\n                    END LOOP;                                  --Schedules_rec\n\n                    FOR cur_prrd_rec\n                        IN cur_prrd (cur_ipu_rec.ipu_current_prrd_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_policy_risk_ri_dtls (\n                                            prrd_code,\n                                            prrd_ipu_code,\n                                            prrd_idx,\n                                            prrd_tran_no,\n                                            prrd_wef,\n                                            prrd_wet,\n                                            prrd_current,\n                                            prrd_comp_retention,\n                                            prrd_avail_fulc_bal,\n                                            prrd_gross_comp_retention,\n                                            prrd_facre_amount,\n                                            prrd_com_retention_rate,\n                                            prrd_grp_si_risk_pct,\n                                            prrd_grp_top_loc,\n                                            prrd_grp_comp_gross_ret,\n                                            prrd_grp_comp_net_ret,\n                                            prrd_excess_pct,\n                                            prrd_ri_prem,\n                                            prrd_comp_net_rate,\n                                            prrd_prorata_days,\n                                            prrd_prev_facre_rate,\n                                            prrd_refund_prem,\n                                            prrd_prev_ret_rate,\n                                            prrd_prev_net_rate,\n                                            prrd_facre_rate,\n                                            prrd_allowed_grs_comp_ret,\n                                            prrd_as_uwyr,\n                                            prrd_annual_prem,\n                                            prrd_cover_days,\n                                            prrd_prorata_prem,\n                                            prrd_prev_net_retention,\n                                            prrd_refund_net_prem,\n                                            prrd_refund_facre_prem,\n                                            prrd_net_prem,\n                                            prrd_prev_prrd_code,\n                                            prrd_earthquake_prem,\n                                            prrd_facoblig_limit)\n                                     VALUES (\n                                                   TO_NUMBER (\n                                                       TO_CHAR (SYSDATE,\n                                                                'RRRR'))\n                                                || gin_prrd_code_seq.NEXTVAL,\n                                                v_new_ipu_code,\n                                                1,\n                                                v_tran_no,\n                                                cur_prrd_rec.prrd_wef,\n                                                cur_prrd_rec.prrd_wet,\n                                                'Y',\n                                                -NVL (\n                                                     cur_prrd_rec.prrd_comp_retention,\n                                                     0),\n                                                0,\n                                                /*** to bypass facre trigger**/\n                                                -NVL (\n                                                     cur_prrd_rec.prrd_gross_comp_retention,\n                                                     0),\n                                                -NVL (\n                                                     cur_prrd_rec.prrd_facre_amount,\n                                                     0),\n                                                cur_prrd_rec.prrd_com_retention_rate,\n                                                cur_prrd_rec.prrd_grp_si_risk_pct,\n                                                -NVL (\n                                                     cur_prrd_rec.prrd_grp_top_loc,\n                                                     0),\n                                                -NVL (\n                                                     cur_prrd_rec.prrd_grp_comp_gross_ret,\n                                                     0),\n                                                -NVL (\n                                                     cur_prrd_rec.prrd_grp_comp_net_ret,\n                                                     0),\n                                                cur_prrd_rec.prrd_excess_pct,\n                                                -NVL (\n                                                     cur_prrd_rec.prrd_ri_prem,\n                                                     0),\n                                                cur_prrd_rec.prrd_comp_net_rate,\n                                                cur_prrd_rec.prrd_prorata_days,\n                                                cur_prrd_rec.prrd_prev_facre_rate,\n                                                cur_prrd_rec.prrd_refund_prem,\n                                                cur_prrd_rec.prrd_prev_ret_rate,\n                                                cur_prrd_rec.prrd_prev_net_rate,\n                                                cur_prrd_rec.prrd_facre_rate,\n                                                cur_prrd_rec.prrd_allowed_grs_comp_ret,\n                                                cur_prrd_rec.prrd_as_uwyr,\n                                                cur_prrd_rec.prrd_annual_prem,\n                                                cur_prrd_rec.prrd_cover_days,\n                                                cur_prrd_rec.prrd_prorata_prem,\n                                                cur_prrd_rec.prrd_prev_net_retention,\n                                                cur_prrd_rec.prrd_refund_net_prem,\n                                                cur_prrd_rec.prrd_refund_facre_prem,\n                                                -cur_prrd_rec.prrd_net_prem,\n                                                cur_prrd_rec.prrd_code,\n                                                -cur_prrd_rec.prrd_earthquake_prem,\n                                                -cur_prrd_rec.prrd_facoblig_limit);\n\n                            UPDATE gin_insured_property_unds\n                               SET ipu_current_prrd_code =\n                                          TO_NUMBER (\n                                              TO_CHAR (SYSDATE, 'RRRR'))\n                                       || gin_prrd_code_seq.CURRVAL\n                             WHERE ipu_code = v_new_ipu_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    ' Unable to insert risk RI details...');\n                        END;\n\n                        FOR cur_rein_rec IN cur_rein (cur_prrd_rec.prrd_code)\n                        LOOP\n                            BEGIN\n                                INSERT INTO gin_policy_rein_risk_details (\n                                                ptotr_code,\n                                                ptotr_risk_cur_code,\n                                                ptotr_trt_cur_code,\n                                                ptotr_exch_rate,\n                                                ptotr_risk_si_pcur,\n                                                ptotr_risk_si_tcur,\n                                                ptotr_risk_prem_pcur,\n                                                ptotr_risk_prem_tcur,\n                                                ptotr_trt_si_pcur,\n                                                ptotr_trt_si_tcur,\n                                                ptotr_trt_prem_pcur,\n                                                ptotr_trt_prem_tcur,\n                                                ptotr_trt_share,\n                                                ptotr_rei_code,\n                                                ptotr_trt_code,\n                                                ptotr_trt_sht_desc,\n                                                ptotr_clt_scl_code,\n                                                ptotr_rate,\n                                                ptotr_trt_comm_pcur,\n                                                ptotr_trt_comm_tcur,\n                                                ptotr_cession_pct,\n                                                ptotr_property_id,\n                                                ptotr_uwyr,\n                                                ptotr_ipu_code,\n                                                ptotr_pol_batch_no,\n                                                ptotr_pol_policy_no,\n                                                ptotr_pol_ren_endos_no,\n                                                ptotr_acpr_sht_desc,\n                                                ptotr_acpr_code,\n                                                ptotr_risk_cur_symbol,\n                                                ptotr_trt_cur_symbol,\n                                                ptotr_prem_tax_pcur,\n                                                ptotr_prem_tax_tcur,\n                                                ptotr_comm_tax_pcur,\n                                                ptotr_comm_tax_tcur,\n                                                ptotr_ta_code,\n                                                ptotr_as_code,\n                                                ptotr_sect_code,\n                                                ptotr_trs_code,\n                                                ptotr_trs_sht_desc,\n                                                ptotr_rate_type,\n                                                ptotr_remarks,\n                                                ptotr_ggt_tran_no,\n                                                ptotr_tran_type,\n                                                ptotr_date,\n                                                ptotr_rprem_tax_pcur,\n                                                ptotr_actual_si_share,\n                                                ptotr_current,\n                                                ptotr_prrd_code,\n                                                ptotr_prev_cession_rate,\n                                                ptotr_refund_prem,\n                                                ptotr_refund_com,\n                                                ptotr_comm_rate,\n                                                ptotr_earthqke_prem,\n                                                ptotr_earthqke_comm_rate,\n                                                ptotr_earthqke_comm,\n                                                ptotr_net_less_eq_comm,\n                                                ptotr_net_less_eq_prem)\n                                         VALUES (\n                                                       TO_NUMBER (\n                                                           TO_CHAR (SYSDATE,\n                                                                    'RRRR'))\n                                                    || ptotr_code_seq.NEXTVAL,\n                                                    cur_rein_rec.ptotr_risk_cur_code,\n                                                    cur_rein_rec.ptotr_trt_cur_code,\n                                                    cur_rein_rec.ptotr_exch_rate,\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_risk_si_pcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_risk_si_tcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_risk_prem_pcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_risk_prem_tcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_trt_si_pcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_trt_si_tcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_trt_prem_pcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_trt_prem_tcur,\n                                                         0),\n                                                    cur_rein_rec.ptotr_trt_share,\n                                                    cur_rein_rec.ptotr_rei_code,\n                                                    cur_rein_rec.ptotr_trt_code,\n                                                    cur_rein_rec.ptotr_trt_sht_desc,\n                                                    cur_rein_rec.ptotr_clt_scl_code,\n                                                    cur_rein_rec.ptotr_rate,\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_trt_comm_pcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_trt_comm_tcur,\n                                                         0),\n                                                    cur_rein_rec.ptotr_cession_pct,\n                                                    cur_rein_rec.ptotr_property_id,\n                                                    cur_rein_rec.ptotr_uwyr,\n                                                    v_new_ipu_code,\n                                                    v_batch_no,\n                                                    v_pol_no,\n                                                    v_ends_no,\n                                                    cur_rein_rec.ptotr_acpr_sht_desc,\n                                                    cur_rein_rec.ptotr_acpr_code,\n                                                    cur_rein_rec.ptotr_risk_cur_symbol,\n                                                    cur_rein_rec.ptotr_trt_cur_symbol,\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_prem_tax_pcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_prem_tax_tcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_comm_tax_pcur,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_comm_tax_tcur,\n                                                         0),\n                                                    cur_rein_rec.ptotr_ta_code,\n                                                    cur_rein_rec.ptotr_as_code,\n                                                    cur_rein_rec.ptotr_sect_code,\n                                                    cur_rein_rec.ptotr_trs_code,\n                                                    cur_rein_rec.ptotr_trs_sht_desc,\n                                                    cur_rein_rec.ptotr_rate_type,\n                                                    cur_rein_rec.ptotr_remarks,\n                                                    v_tran_no,\n                                                    'CO',\n                                                    TRUNC (SYSDATE),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_rprem_tax_pcur,\n                                                         0),\n                                                    cur_rein_rec.ptotr_actual_si_share,\n                                                    'N',\n                                                       TO_NUMBER (\n                                                           TO_CHAR (SYSDATE,\n                                                                    'RRRR'))\n                                                    || gin_prrd_code_seq.CURRVAL,\n                                                    cur_rein_rec.ptotr_prev_cession_rate,\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_refund_prem,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_refund_com,\n                                                         0),\n                                                    cur_rein_rec.ptotr_comm_rate,\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_earthqke_prem,\n                                                         0),\n                                                    NVL (\n                                                        cur_rein_rec.ptotr_earthqke_comm_rate,\n                                                        0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_earthqke_comm,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_net_less_eq_comm,\n                                                         0),\n                                                    -NVL (\n                                                         cur_rein_rec.ptotr_net_less_eq_prem,\n                                                         0));\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    ROLLBACK;\n                                    raise_error (\n                                        ' Unable to insert treaty cession details...');\n                            END;\n\n                            FOR cur_part_rec\n                                IN cur_part (cur_rein_rec.ptotr_code)\n                            LOOP\n                                BEGIN\n                                    INSERT INTO gin_participations (\n                                                    part_code,\n                                                    part_cede_rate,\n                                                    part_si_amt_pcur,\n                                                    part_si_amt_tcur,\n                                                    part_comm_amt_pcur,\n                                                    part_comm_amt_tcur,\n                                                    part_prem_amt_pcur,\n                                                    part_prem_amt_tcur,\n                                                    part_trt_code,\n                                                    part_trt_sht_desc,\n                                                    part_agnt_agent_code,\n                                                    part_agnt_sht_desc,\n                                                    part_ptotr_code,\n                                                    part_rei_code,\n                                                    part_pol_cur_code,\n                                                    part_pol_cur_symbol,\n                                                    part_uwyr,\n                                                    part_pol_batch_no,\n                                                    part_pol_policy_no,\n                                                    part_pol_ren_endos_no,\n                                                    part_ipu_code,\n                                                    part_rprem_tax_pcur,\n                                                    part_rprem_tax_tcur,\n                                                    part_prem_tax_pcur,\n                                                    part_prem_tax_tcur,\n                                                    part_ta_code,\n                                                    part_as_code,\n                                                    part_fiscal_year,\n                                                    part_acpr_code,\n                                                    part_acpr_sht_desc,\n                                                    part_acc_posted,\n                                                    part_trs_code,\n                                                    part_trs_sht_desc,\n                                                    part_scl_code,\n                                                    part_ggt_tran_no,\n                                                    part_tran_type,\n                                                    part_prrd_code,\n                                                    part_prev_cede_rate,\n                                                    part_refund_prem,\n                                                    part_prev_com,\n                                                    part_trpa_code)\n                                             VALUES (\n                                                           TO_NUMBER (\n                                                               TO_CHAR (\n                                                                   SYSDATE,\n                                                                   'RRRR'))\n                                                        || gin_part_code_seq.NEXTVAL,\n                                                        cur_part_rec.part_cede_rate,\n                                                        -NVL (\n                                                             cur_part_rec.part_si_amt_pcur,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_si_amt_tcur,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_comm_amt_pcur,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_comm_amt_tcur,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_prem_amt_pcur,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_prem_amt_tcur,\n                                                             0),\n                                                        cur_part_rec.part_trt_code,\n                                                        cur_part_rec.part_trt_sht_desc,\n                                                        cur_part_rec.part_agnt_agent_code,\n                                                        cur_part_rec.part_agnt_sht_desc,\n                                                           TO_NUMBER (\n                                                               TO_CHAR (\n                                                                   SYSDATE,\n                                                                   'RRRR'))\n                                                        || ptotr_code_seq.CURRVAL,\n                                                        cur_part_rec.part_rei_code,\n                                                        cur_part_rec.part_pol_cur_code,\n                                                        cur_part_rec.part_pol_cur_symbol,\n                                                        cur_part_rec.part_uwyr,\n                                                        v_batch_no,\n                                                        cur_part_rec.part_pol_policy_no,\n                                                        v_ends_no,\n                                                        v_new_ipu_code,\n                                                        -NVL (\n                                                             cur_part_rec.part_rprem_tax_pcur,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_rprem_tax_tcur,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_prem_tax_pcur,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_prem_tax_tcur,\n                                                             0),\n                                                        cur_part_rec.part_ta_code,\n                                                        cur_part_rec.part_as_code,\n                                                        cur_part_rec.part_fiscal_year,\n                                                        cur_part_rec.part_acpr_code,\n                                                        cur_part_rec.part_acpr_sht_desc,\n                                                        cur_part_rec.part_acc_posted,\n                                                        cur_part_rec.part_trs_code,\n                                                        cur_part_rec.part_trs_sht_desc,\n                                                        cur_part_rec.part_scl_code,\n                                                        v_tran_no,\n                                                        'CO',\n                                                           TO_NUMBER (\n                                                               TO_CHAR (\n                                                                   SYSDATE,\n                                                                   'RRRR'))\n                                                        || gin_prrd_code_seq.CURRVAL,\n                                                        cur_part_rec.part_prev_cede_rate,\n                                                        -NVL (\n                                                             cur_part_rec.part_refund_prem,\n                                                             0),\n                                                        -NVL (\n                                                             cur_part_rec.part_prev_com,\n                                                             0),\n                                                        cur_part_rec.part_trpa_code);\n                                EXCEPTION\n                                    WHEN OTHERS\n                                    THEN\n                                        ROLLBACK;\n                                        raise_error (\n                                            ' Unable to insert treaty cession participation details...');\n                                END;\n                            END LOOP;                               --cur_part\n                        END LOOP;                                   --cur_rein\n\n                        FOR cur_facre_rec\n                            IN cur_facre (cur_prrd_rec.prrd_code)\n                        LOOP\n                            BEGIN\n                                INSERT INTO gin_facre_cessions (\n                                                fc_code,\n                                                fc_agnt_agent_code,\n                                                fc_amount,\n                                                fc_wef,\n                                                fc_ipu_code,\n                                                fc_agent_sht_desc,\n                                                fc_rate,\n                                                fc_comm_rate,\n                                                fc_comm_amt,\n                                                fc_don_by,\n                                                fc_dc_no,\n                                                fc_prem_amt,\n                                                fc_pol_batch_no,\n                                                fc_uwyr,\n                                                fc_ggt_tran_no,\n                                                fc_tran_type,\n                                                fc_scl_code,\n                                                fc_amt_or_rate,\n                                                fc_prrd_code,\n                                                fc_prev_fc_code,\n                                                fc_earthqke_prem,\n                                                fc_earthqke_comm_rate,\n                                                fc_earthqke_comm,\n                                                fc_net_less_eq_comm,\n                                                fc_net_less_eq_prem,\n                                                fc_accepted,\n                                                fc_facre_type,\n                                                fc_accepted_date,\n                                                fc_prem_diff_amt,\n                                                fc_remark,\n                                                fc_mngmnt_type,\n                                                fc_mngmnt_value,\n                                                fc_rein_tax_type,\n                                                fc_rein_tax_value,\n                                                fc_rein_tax_amt,\n                                                fc_mngmnt_amt,\n                                                fc_vat_rate,\n                                                fc_vat_amt)\n                                         VALUES (\n                                                       TO_NUMBER (\n                                                           TO_CHAR (SYSDATE,\n                                                                    'RRRR'))\n                                                    || gin_fc_code_seq.NEXTVAL,\n                                                    cur_facre_rec.fc_agnt_agent_code,\n                                                    -NVL (\n                                                         cur_facre_rec.fc_amount,\n                                                         0),\n                                                    cur_facre_rec.fc_wef,\n                                                    v_new_ipu_code,\n                                                    cur_facre_rec.fc_agent_sht_desc,\n                                                    cur_facre_rec.fc_rate,\n                                                    cur_facre_rec.fc_comm_rate,\n                                                    -NVL (\n                                                         cur_facre_rec.fc_comm_amt,\n                                                         0),\n                                                    v_user,\n                                                    cur_facre_rec.fc_dc_no,\n                                                    -NVL (\n                                                         cur_facre_rec.fc_prem_amt,\n                                                         0),\n                                                    v_batch_no,\n                                                    cur_facre_rec.fc_uwyr,\n                                                    v_tran_no,\n                                                    'CO',\n                                                    cur_facre_rec.fc_scl_code,\n                                                    cur_facre_rec.fc_amt_or_rate,\n                                                       TO_NUMBER (\n                                                           TO_CHAR (SYSDATE,\n                                                                    'RRRR'))\n                                                    || gin_prrd_code_seq.CURRVAL,\n                                                    cur_facre_rec.fc_code,\n                                                    -cur_facre_rec.fc_earthqke_prem,\n                                                    cur_facre_rec.fc_earthqke_comm_rate,\n                                                    -cur_facre_rec.fc_earthqke_comm,\n                                                    -cur_facre_rec.fc_net_less_eq_comm,\n                                                    -cur_facre_rec.fc_net_less_eq_prem,\n                                                    cur_facre_rec.fc_accepted,\n                                                    cur_facre_rec.fc_facre_type,\n                                                    cur_facre_rec.fc_accepted_date,\n                                                    -cur_facre_rec.fc_prem_diff_amt,\n                                                    cur_facre_rec.fc_remark,\n                                                    cur_facre_rec.fc_mngmnt_type,\n                                                    cur_facre_rec.fc_mngmnt_value,\n                                                    cur_facre_rec.fc_rein_tax_type,\n                                                    cur_facre_rec.fc_rein_tax_value,\n                                                    -cur_facre_rec.fc_rein_tax_amt,\n                                                    -cur_facre_rec.fc_mngmnt_amt,\n                                                    cur_facre_rec.fc_vat_rate,\n                                                    -cur_facre_rec.fc_vat_amt);\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    ROLLBACK;\n                                    raise_error (\n                                        ' Unable to insert facre cessions details...');\n                            END;\n                        END LOOP;                              --cur_facre_rec\n\n                        --raise_error('please give solo this number !'||cur_prrd_rec.prrd_code);\n                        FOR cur_cur_pool_rec\n                            IN cur_pool (cur_prrd_rec.prrd_code)\n                        LOOP\n                            BEGIN\n                                SELECT TO_NUMBER (\n                                              TO_CHAR (SYSDATE, 'YYYY')\n                                           || gin_prprd_code_seq.NEXTVAL)\n                                  INTO v_prrd_code\n                                  FROM DUAL;\n\n                                INSERT INTO gin_pol_rein_pool_risk_details (\n                                                prprd_code,\n                                                prprd_risk_prem_amt,\n                                                prprd_risk_own_ret_amt,\n                                                prprd_risk_cur_code,\n                                                prprd_risk_exch_rate,\n                                                prprd_scrpr_code,\n                                                prprd_rein_pool_rate,\n                                                prprd_ipu_code,\n                                                prprd_scl_code,\n                                                prprd_covt_code,\n                                                prprd_pol_batch_no,\n                                                prprd_rein_pool_amt,\n                                                prprd_rein_pool_comm_rate,\n                                                prprd_rein_pool_vat_rate,\n                                                prprd_rein_pool_comm_amt,\n                                                prprd_rein_pool_vat_amt,\n                                                prprd_prev_prprd_code,\n                                                prprd_ggt_tran_no,\n                                                prprd_property_id,\n                                                prprd_uwyr,\n                                                prprd_pol_ren_endos_no,\n                                                prprd_date,\n                                                prprd_risk_trt_own_ret_amt,\n                                                prprd_prrd_code,\n                                                prprd_pta_code,\n                                                prprd_pool_si)\n                                         VALUES (\n                                                    v_prrd_code,\n                                                    -NVL (\n                                                         cur_cur_pool_rec.prprd_risk_prem_amt,\n                                                         0),\n                                                    -NVL (\n                                                         cur_cur_pool_rec.prprd_risk_own_ret_amt,\n                                                         0),\n                                                    cur_cur_pool_rec.prprd_risk_cur_code,\n                                                    cur_cur_pool_rec.prprd_risk_exch_rate,\n                                                    cur_cur_pool_rec.prprd_scrpr_code,\n                                                    NVL (\n                                                        cur_cur_pool_rec.prprd_rein_pool_rate,\n                                                        0),\n                                                    v_new_ipu_code,\n                                                    cur_cur_pool_rec.prprd_scl_code,\n                                                    cur_cur_pool_rec.prprd_covt_code,\n                                                    v_batch_no,\n                                                    -NVL (\n                                                         cur_cur_pool_rec.prprd_rein_pool_amt,\n                                                         0),\n                                                    NVL (\n                                                        cur_cur_pool_rec.prprd_rein_pool_comm_rate,\n                                                        0),\n                                                    NVL (\n                                                        cur_cur_pool_rec.prprd_rein_pool_vat_rate,\n                                                        0),\n                                                    -NVL (\n                                                         cur_cur_pool_rec.prprd_rein_pool_comm_amt,\n                                                         0),\n                                                    -NVL (\n                                                         cur_cur_pool_rec.prprd_rein_pool_vat_amt,\n                                                         0),\n                                                    cur_cur_pool_rec.prprd_code,\n                                                    v_tran_no,\n                                                    cur_cur_pool_rec.prprd_property_id,\n                                                    cur_cur_pool_rec.prprd_uwyr,\n                                                    v_ends_no,\n                                                    SYSDATE,\n                                                    -NVL (\n                                                         cur_cur_pool_rec.prprd_risk_trt_own_ret_amt,\n                                                         0),\n                                                       TO_NUMBER (\n                                                           TO_CHAR (SYSDATE,\n                                                                    'RRRR'))\n                                                    || gin_prrd_code_seq.CURRVAL,\n                                                    cur_cur_pool_rec.prprd_pta_code,\n                                                    -cur_cur_pool_rec.prprd_pool_si);\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    raise_when_others (\n                                        'Error creating risk Reinsurance Pool Details...');\n                            END;\n                        END LOOP;                                  -- cur pool\n                    END LOOP;                                       --cur_prrd\n                END LOOP;                                        --cur_ipu_rec\n            END LOOP;                                       --cur_insureds_rec\n        END LOOP;                                                --cur_pol_rec\n    END;",
        "pop_policy_perils": "PROCEDURE pop_policy_perils (v_batch_no    IN NUMBER,\n                                 v_pro_code    IN NUMBER,\n                                 v_bind_code   IN NUMBER)\n    IS\n        v_bind_type   VARCHAR2 (1);\n    BEGIN\n        IF v_bind_code IS NULL\n        THEN\n            v_bind_type := 'M';\n        ELSE\n            BEGIN\n                SELECT bind_type\n                  INTO v_bind_type\n                  FROM gin_binders\n                 WHERE bind_code = v_bind_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error getting the binder type...');\n            END;\n        END IF;\n\n        IF v_bind_type = 'B'\n        THEN\n            INSERT INTO gin_policy_section_perils (pspr_code,\n                                                   pspr_sspr_code,\n                                                   pspr_scl_code,\n                                                   pspr_sect_code,\n                                                   pspr_sect_sht_desc,\n                                                   pspr_per_code,\n                                                   pspr_per_sht_desc,\n                                                   pspr_mandatory,\n                                                   pspr_peril_limit,\n                                                   pspr_peril_type,\n                                                   pspr_si_or_limit,\n                                                   pspr_sec_code,\n                                                   pspr_excess_type,\n                                                   pspr_excess,\n                                                   pspr_excess_min,\n                                                   pspr_excess_max,\n                                                   pspr_expire_on_claim,\n                                                   pspr_bind_code,\n                                                   pspr_person_limit,\n                                                   pspr_claim_limit,\n                                                   pspr_desc,\n                                                   pspr_bind_type,\n                                                   pspr_pol_batch_no,\n                                                   pspr_salvage_pct,\n                                                   pspr_tl_excess_type,\n                                                   pspr_tl_excess,\n                                                   pspr_tl_excess_min,\n                                                   pspr_tl_excess_max,\n                                                   pspr_pl_excess_type,\n                                                   pspr_pl_excess,\n                                                   pspr_pl_excess_min,\n                                                   pspr_pl_excess_max,\n                                                   pspr_claim_excess_min,\n                                                   pspr_claim_excess_max,\n                                                   pspr_depend_loss_type,\n                                                   pspr_claim_excess_type,\n                                                   pspr_ttd_ben_pcts)\n                SELECT gin_pspr_code_seq.NEXTVAL,\n                       sspr_code,\n                       sspr_scl_code,\n                       ssprm_sect_code,\n                       ssprm_sect_sht_desc,\n                       sspr_per_code,\n                       sspr_per_sht_desc,\n                       sspr_mandatory,\n                       sspr_peril_limit,\n                       sspr_peril_type,\n                       sspr_si_or_limit,\n                       ssprm_sec_code,\n                       sspr_excess_type,\n                       sspr_excess,\n                       sspr_excess_min,\n                       sspr_excess_max,\n                       sspr_expire_on_claim,\n                       ssprm_bind_code,\n                       sspr_person_limit,\n                       sspr_claim_limit,\n                       sspr_desc,\n                       ssprm_bind_type,\n                       v_batch_no,\n                       sspr_salvage_pct,\n                       sspr_tl_excess_type,\n                       sspr_tl_excess,\n                       sspr_tl_excess_min,\n                       sspr_tl_excess_max,\n                       sspr_pl_excess_type,\n                       sspr_pl_excess,\n                       sspr_pl_excess_min,\n                       sspr_pl_excess_max,\n                       sspr_claim_excess_min,\n                       sspr_claim_excess_max,\n                       sspr_depend_loss_type,\n                       sspr_claim_excess_type,\n                       sspr_ttd_ben_pcts\n                  FROM gin_subcl_sction_perils, gin_subcl_sction_perils_map\n                 WHERE     sspr_bind_code = v_bind_code\n                       AND sspr_code = ssprm_sspr_code\n                       AND sspr_scl_code IN\n                               (SELECT clp_scl_code\n                                  FROM gin_product_sub_classes\n                                 WHERE clp_pro_code = v_pro_code)\n                       AND sspr_code NOT IN\n                               (SELECT pspr_sspr_code\n                                  FROM gin_policy_section_perils\n                                 WHERE pspr_pol_batch_no = v_batch_no);\n        ELSE\n            INSERT INTO gin_policy_section_perils (pspr_code,\n                                                   pspr_sspr_code,\n                                                   pspr_scl_code,\n                                                   pspr_sect_code,\n                                                   pspr_sect_sht_desc,\n                                                   pspr_per_code,\n                                                   pspr_per_sht_desc,\n                                                   pspr_mandatory,\n                                                   pspr_peril_limit,\n                                                   pspr_peril_type,\n                                                   pspr_si_or_limit,\n                                                   pspr_sec_code,\n                                                   pspr_excess_type,\n                                                   pspr_excess,\n                                                   pspr_excess_min,\n                                                   pspr_excess_max,\n                                                   pspr_expire_on_claim,\n                                                   pspr_bind_code,\n                                                   pspr_person_limit,\n                                                   pspr_claim_limit,\n                                                   pspr_desc,\n                                                   pspr_bind_type,\n                                                   pspr_pol_batch_no,\n                                                   pspr_salvage_pct,\n                                                   pspr_tl_excess_type,\n                                                   pspr_tl_excess,\n                                                   pspr_tl_excess_min,\n                                                   pspr_tl_excess_max,\n                                                   pspr_pl_excess_type,\n                                                   pspr_pl_excess,\n                                                   pspr_pl_excess_min,\n                                                   pspr_pl_excess_max,\n                                                   pspr_claim_excess_min,\n                                                   pspr_claim_excess_max,\n                                                   pspr_depend_loss_type,\n                                                   pspr_claim_excess_type,\n                                                   pspr_ttd_ben_pcts)\n                SELECT gin_pspr_code_seq.NEXTVAL,\n                       sspr_code,\n                       sspr_scl_code,\n                       ssprm_sect_code,\n                       ssprm_sect_sht_desc,\n                       sspr_per_code,\n                       sspr_per_sht_desc,\n                       sspr_mandatory,\n                       sspr_peril_limit,\n                       sspr_peril_type,\n                       sspr_si_or_limit,\n                       ssprm_sec_code,\n                       sspr_excess_type,\n                       sspr_excess,\n                       sspr_excess_min,\n                       sspr_excess_max,\n                       sspr_expire_on_claim,\n                       ssprm_bind_code,\n                       sspr_person_limit,\n                       sspr_claim_limit,\n                       sspr_desc,\n                       ssprm_bind_type,\n                       v_batch_no,\n                       sspr_salvage_pct,\n                       sspr_tl_excess_type,\n                       sspr_tl_excess,\n                       sspr_tl_excess_min,\n                       sspr_tl_excess_max,\n                       sspr_pl_excess_type,\n                       sspr_pl_excess,\n                       sspr_pl_excess_min,\n                       sspr_pl_excess_max,\n                       sspr_claim_excess_min,\n                       sspr_claim_excess_max,\n                       sspr_depend_loss_type,\n                       sspr_claim_excess_type,\n                       sspr_ttd_ben_pcts\n                  FROM gin_subcl_sction_perils, gin_subcl_sction_perils_map\n                 WHERE     sspr_bind_type = v_bind_type\n                       AND sspr_code = ssprm_sspr_code\n                       AND sspr_scl_code IN\n                               (SELECT clp_scl_code\n                                  FROM gin_product_sub_classes\n                                 WHERE clp_pro_code = v_pro_code)\n                       AND sspr_code NOT IN\n                               (SELECT pspr_sspr_code\n                                  FROM gin_policy_section_perils\n                                 WHERE pspr_pol_batch_no = v_batch_no);\n        END IF;\n    END;",
        "transfer_to_uw": "PROCEDURE transfer_to_uw (v_pol_batch_no   IN     NUMBER,\n                              v_user           IN     VARCHAR2,\n                              v_batch_no          OUT NUMBER)\n    IS\n        v_pol_no                      VARCHAR2 (26);\n        v_ends_no                     VARCHAR2 (26);\n        next_ggt_trans_no             NUMBER;\n        v_endos_sr                    NUMBER (15);\n        v_pol_prefix                  VARCHAR2 (15);\n        v_new_ipu_code                NUMBER;\n        v_pol_status                  VARCHAR2 (5);\n        v_pmode_code                  NUMBER;\n        v_base_cur_code               NUMBER;\n        v_cnt                         NUMBER;\n        v_dates_error                 VARCHAR2 (200);\n        v_endos_count                 NUMBER;\n        v_curr_batch_no               NUMBER;\n        v_pro_sht_desc                VARCHAR2 (50);\n        v_noyrstautoradclient_param   NUMBER;\n        v_auto_grad_clnt_param        VARCHAR2 (1) := 'N';\n        v_renewal_cnt                 NUMBER;\n        next_ggts_trans_no            NUMBER;\n        v_rn_cnt                      NUMBER;\n        v_pdl_code                    NUMBER;\n        v_re_cnt                      NUMBER;\n        v_count                       NUMBER;\n        v_agent_code                  NUMBER;\n        v_agents_status               VARCHAR (15);\n        v_blacklist_status            VARCHAR2 (400) := 'N';\n\n        CURSOR cur_taxes (v_batch      NUMBER,\n                          vtranstype   VARCHAR2,\n                          vprocode     NUMBER)\n        IS\n            SELECT ptx_trac_scl_code,\n                   ptx_trac_trnt_code,\n                   ptx_pol_policy_no,\n                   ptx_pol_ren_endos_no,\n                   ptx_pol_batch_no,\n                   ptx_rate,\n                   ptx_amount,\n                   ptx_tl_lvl_code,\n                   ptx_rate_type,\n                   ptx_rate_desc,\n                   ptx_endos_diff_amt,\n                   ptx_tax_type\n              FROM gin_ren_policy_taxes, gin_transaction_types\n             WHERE     ptx_trac_trnt_code = trnt_code\n                   AND ptx_pol_batch_no = v_batch\n                   AND NVL (\n                           DECODE (vtranstype,\n                                   'NB', trnt_apply_nb,\n                                   'SP', trnt_apply_sp,\n                                   'RN', trnt_apply_rn,\n                                   'EN', trnt_apply_en,\n                                   'CN', trnt_apply_cn,\n                                   'EX', trnt_apply_ex,\n                                   'DC', trnt_apply_dc,\n                                   'RE', trnt_apply_re),\n                           'N') =\n                       'Y'\n                   AND trnt_code NOT IN (SELECT petx_trnt_code\n                                           FROM gin_product_excluded_taxes\n                                          WHERE petx_pro_code = vprocode);\n\n        --TRNT_RENEWAL_ENDOS != 'N';\n        CURSOR cur_coinsurer (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_coinsurers\n             WHERE coin_pol_batch_no = v_batch;\n\n        CURSOR cur_facre_dtls (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_facre_in_dtls\n             WHERE fid_pol_batch_no = v_batch;\n\n        CURSOR cur_conditions (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_policy_lvl_clauses\n             WHERE plcl_pol_batch_no = v_batch;\n\n        CURSOR cur_schedule_values (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_pol_schedule_values\n             WHERE schpv_pol_batch_no = v_batch;\n\n        CURSOR cur_pol_perils (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_policy_section_perils\n             WHERE pspr_pol_batch_no = v_batch;\n\n        CURSOR cur_insureds (v_batch NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_policy_insureds\n             WHERE polin_pol_batch_no = v_batch;\n\n        CURSOR cur_ipu (v_batch NUMBER, v_polin_code NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_insured_property_unds\n             WHERE     ipu_pol_batch_no = v_batch\n                   AND ipu_polin_code = v_polin_code;\n\n        CURSOR cur_limits (v_ipu NUMBER)\n        IS\n              SELECT *\n                FROM gin_ren_policy_insured_limits\n               WHERE pil_ipu_code = v_ipu\n            ORDER BY pil_code, pil_calc_group, pil_row_num;\n\n        CURSOR cur_clauses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_policy_clauses\n             WHERE pocl_ipu_code = v_ipu;\n\n        CURSOR cur_rsk_perils (v_ipu VARCHAR2)\n        IS\n            SELECT *\n              FROM tq_gis.gin_pol_ren_rsk_section_perils\n             WHERE prspr_ipu_code = v_ipu;\n\n        CURSOR perils (v_ipu NUMBER)\n        IS\n            SELECT gpsp_per_code,\n                   gpsp_per_sht_desc,\n                   gpsp_sec_sect_code,\n                   gpsp_sect_sht_desc,\n                   gpsp_sec_scl_code,\n                   gpsp_ipp_code,\n                   gpsp_ipu_code,\n                   gpsp_limit_amt,\n                   gpsp_excess_amt\n              FROM gin_ren_pol_sec_perils\n             WHERE gpsp_ipu_code = v_ipu;\n\n        CURSOR risk_excesses (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_risk_excess\n             WHERE re_ipu_code = v_ipu;\n\n        CURSOR schedules (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_ren_policy_risk_schedules\n             WHERE polrs_ipu_code = v_ipu;\n\n        CURSOR pol IS\n            SELECT gin_ren_policies.*, 'Y' pol_pop_taxes\n              FROM gin_ren_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n\n        CURSOR cur_coagencies IS\n            SELECT *\n              FROM gin_policy_coagencies\n             WHERE coagn_pol_batch_no = v_pol_batch_no;\n\n        /* CURSOR cur_rcpt\n         IS\n            SELECT *\n              FROM gin_master_transactions\n             WHERE mtran_pol_batch_no = v_pol_batch_no\n               AND mtran_tran_type = 'RC'\n               AND mtran_balance <> 0;*/\n\n        CURSOR cur_rcpt (v_pol_renewal_batch NUMBER)\n        IS\n            SELECT gin_master_transactions.*\n              FROM gin_master_transactions, gin_gis_transmitals\n             WHERE     mtran_tran_type = 'RC'\n                   AND mtran_pol_batch_no = v_pol_batch_no\n                   AND ggts_pol_renewal_batch = v_pol_renewal_batch\n                   AND ggts_pol_batch_no = mtran_pol_batch_no\n                   AND ggts_uw_clm_tran = 'RN'\n                   AND mtran_balance = mtran_net_amt;\n\n        CURSOR pol_dtls IS\n            SELECT *\n              FROM gin_renwl_sbudtls\n             WHERE pdl_pol_batch_no = v_pol_batch_no;\n\n        CURSOR risk_services (v_ipu NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_ren_risk_services\n             WHERE prs_ipu_code = v_ipu;\n\n        CURSOR cur_subclass_conditions (v_btch NUMBER)\n        IS\n            --         SELECT *\n            --           FROM gin_policy_subclass_clauses\n            --          WHERE poscl_pol_batch_no = v_btch;\n            SELECT *\n              FROM gin_policy_subclass_clauses\n             WHERE     poscl_pol_batch_no = v_btch\n                   AND poscl_cls_code IN\n                           (SELECT DISTINCT SBCL_CLS_CODE\n                              FROM gin_subcl_clauses\n                             WHERE     NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                                   AND poscl_scl_code = sbcl_scl_code);\n    --\n    --      CURSOR cur_other_rn_trans (v_pol_policy_no IN VARCHAR2, v_uw_yr IN NUMBER)\n    --      IS\n    --         SELECT   pol_policy_cover_to, pol_policy_cover_from\n    --             FROM gin_policies\n    --            WHERE pol_batch_no = v_pol_batch_no;\n    --              AND pol_uw_year = v_uw_yr\n    --              AND pol_current_status != 'CO'\n    --         ORDER BY pol_wef_dt;\n    BEGIN\n        --   RAISE_ERROR('I'||';'||v_pol_batch_no);\n        IF v_user IS NULL\n        THEN\n            raise_error ('User not defined.');\n        END IF;\n\n        v_dates_error :=\n            gin_uw_author_proc.check_ren_pol_coverdates (v_pol_batch_no);\n\n        IF v_dates_error IS NOT NULL\n        THEN\n            raise_error (v_dates_error);\n        END IF;\n\n        FOR p IN pol\n        LOOP\n            BEGIN\n                v_auto_grad_clnt_param :=\n                    gin_parameters_pkg.get_param_varchar (\n                        'AUTO_GRADUATE_CLIENT');\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_auto_grad_clnt_param := 'N';\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error getting parameter AUTO_GRADUATE_CLIENT');\n            END;\n\n            --      RAISE_ERROR(p.pol_renewal_batch);\n\n            IF NVL (v_auto_grad_clnt_param, 'N') = 'Y'\n            THEN\n                BEGIN\n                    v_noyrstautoradclient_param :=\n                        gin_parameters_pkg.get_param_varchar (\n                            'NO_YRS_TO_AUTO_GRAD_CLIENT');\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        raise_error (\n                            'The parameter NO_YRS_TO_AUTO_GRAD_CLIENT not defined');\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Getting parameter NO_YRS_TO_AUTO_GRAD_CLIENT');\n                END;\n            END IF;\n\n            --21-02-17\n            --Raise_error ('HERE'||v_pol_batch_no);\n            BEGIN\n                SELECT pol_agnt_agent_code\n                  INTO v_agent_code\n                  FROM gin_ren_policies\n                 WHERE pol_batch_no = v_pol_batch_no;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    NULL;\n            END;\n\n            BEGIN\n                SELECT agn_status\n                  INTO v_agents_status\n                  FROM tqc_agencies\n                 WHERE agn_code = v_agent_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    NULL;\n            END;\n\n            --RAISE_ERROR('v_agents_status'||v_agents_status||'v_agent_code'||v_agent_code);\n            IF NVL (v_agents_status, 'ACTIVE') = UPPER ('INACTIVE')\n            THEN\n                raise_error (\n                    'The agent is inactive. Please update the agent to continue...');\n            END IF;\n\n\n            BEGIN\n                SELECT NVL (\n                           GIN_STP_UW_PKG.CHECK_BLACKLIST_STATUS (\n                               v_pol_batch_no),\n                           'N')\n                  INTO v_blacklist_status\n                  FROM DUAL;\n            END;\n\n            IF v_blacklist_status != 'N'\n            THEN\n                raise_error (\n                       'The transaction has the following blacklisted items: '\n                    || v_blacklist_status);\n            END IF;\n\n            --21-02-17\n            BEGIN\n                SELECT pro_policy_prefix, pro_sht_desc\n                  INTO v_pol_prefix, v_pro_sht_desc\n                  FROM gin_products\n                 WHERE pro_code = p.pol_pro_code;\n\n                IF v_pol_prefix IS NULL\n                THEN\n                    raise_error (\n                           'The policy prefix for the product '\n                        || p.pol_pro_sht_desc\n                        || ' is not defined in the setup');\n                END IF;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    raise_error (\n                           'The product '\n                        || p.pol_pro_sht_desc\n                        || ' is not defined in the setup');\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                           'Unable to retrieve the policy prefix for the product '\n                        || p.pol_pro_sht_desc);\n            END;\n\n            IF p.pol_policy_status = 'RE'    -- further investigation required\n            THEN\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_re_cnt\n                      FROM gin_policies uw\n                     WHERE     uw.pol_batch_no = p.pol_batch_no\n                           AND uw.pol_policy_status IN ('L', 'CN')\n                           AND uw.pol_uw_year = p.pol_uw_year\n                           AND (   (    p.pol_policy_cover_from >=\n                                        uw.pol_policy_cover_from\n                                    AND p.pol_policy_cover_from <\n                                        uw.pol_policy_cover_to)\n                                OR (    p.pol_policy_cover_to >=\n                                        uw.pol_policy_cover_from\n                                    AND p.pol_policy_cover_to <=\n                                        uw.pol_policy_cover_to)\n                                OR (    uw.pol_policy_cover_from >=\n                                        p.pol_policy_cover_from\n                                    AND uw.pol_policy_cover_from <=\n                                        p.pol_policy_cover_to)\n                                OR (    uw.pol_policy_cover_to >\n                                        p.pol_policy_cover_from\n                                    AND uw.pol_policy_cover_to <=\n                                        p.pol_policy_cover_to));\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to retrieve policy transaction details..');\n                END;\n            -- raise_Error(' pol_policy_status= '||p.pol_policy_status\n            --||'='||v_re_cnt||'='||p.pol_uw_year||'='||p.pol_policy_no||'='||p.pol_batch_no);\n            ELSE\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_rn_cnt\n                      FROM gin_policies\n                     WHERE     pol_policy_no = p.pol_policy_no\n                           AND pol_policy_status = 'RN'\n                           AND pol_uw_year = p.pol_uw_year\n                           AND pol_current_status != 'CO';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to retrieve policy transaction details..');\n                END;\n            END IF;\n\n            --         IF NVL (v_re_cnt, 0) != 0\n            --         THEN\n            --            FOR r IN cur_other_rn_trans (p.pol_policy_no, p.pol_uw_year)\n            --            LOOP\n            --               IF p.pol_policy_cover_from BETWEEN r.pol_policy_cover_to\n            --                                                 AND r.pol_policy_cover_from\n            --                  OR p.pol_policy_cover_to BETWEEN r.pol_policy_cover_to\n            --                                               AND r.pol_policy_cover_from\n            --                  OR r.pol_policy_cover_to BETWEEN p.pol_policy_cover_from\n            --                                               AND p.pol_policy_cover_to\n            --                  OR r.pol_policy_cover_from BETWEEN p.pol_policy_cover_from\n            --                                                 AND p.pol_policy_cover_to\n            --               THEN\n            --                  raise_error\n            --                     (   'A renewal transaction for this policy for UW year '\n            --                      || p.pol_uw_year\n            --                      || ' and overlapping dates already exists. Cannot renew for this UW Year..'\n            --                     );\n            --               END IF;\n            --            END LOOP;\n            --         END IF;\n            IF NVL (v_re_cnt, 0) != 0\n            THEN\n                NULL; --REINSTATEMENT OF A CANCELLED POLICY SHOULD REINSTATE THE CANCELLED PERIOD. THIS CHECK EXPERSSLY DENIES THAT.\n            --         raise_error\n            --            (   'A renewal transaction for this policy for UW year '\n            --             || p.pol_uw_year\n            --             || ' and overlapping dates already exists. Cannot renew for this UW Year..'\n            --            );\n            END IF;\n\n            IF NVL (v_rn_cnt, 0) != 0\n            THEN\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_cnt\n                      FROM gin_policies uw, gin_ren_policies ren\n                     WHERE     uw.pol_policy_no = ren.pol_policy_no\n                           AND uw.pol_policy_no = p.pol_policy_no\n                           AND uw.pol_current_status NOT IN ('CO', 'CN')\n                           AND (   (    ren.pol_policy_cover_from >=\n                                        uw.pol_policy_cover_from\n                                    AND ren.pol_policy_cover_from <\n                                        uw.pol_policy_cover_to)\n                                OR (    ren.pol_policy_cover_to >=\n                                        uw.pol_policy_cover_from\n                                    AND ren.pol_policy_cover_to <=\n                                        uw.pol_policy_cover_to)\n                                OR (    uw.pol_policy_cover_from >=\n                                        ren.pol_policy_cover_from\n                                    AND uw.pol_policy_cover_from <=\n                                        ren.pol_policy_cover_to)\n                                OR (    uw.pol_policy_cover_to >\n                                        ren.pol_policy_cover_from\n                                    AND uw.pol_policy_cover_to <=\n                                        ren.pol_policy_cover_to));\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        v_cnt := 0;\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error checking overlapping policy cover date');\n                END;\n\n                IF NVL (v_cnt, 0) != 0\n                THEN\n                    raise_error (\n                           'A renewal transaction for this policy for UW year '\n                        || p.pol_uw_year\n                        || ' and overlapping dates already exists. Cannot renew for this UW Year..');\n                END IF;\n            END IF;\n\n            BEGIN\n                get_endos_seq (v_pol_prefix,\n                               p.pol_brn_code,\n                               TO_NUMBER (TO_CHAR (p.pol_wef_dt, 'RRRR')),\n                               v_endos_sr);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Unable to retrieve the policy endorsement sequence number');\n            END;\n\n            v_pol_no := p.pol_policy_no;\n\n            BEGIN\n                v_ends_no :=\n                    gin_sequences_pkg.get_number_format ('E',\n                                                         p.pol_pro_code,\n                                                         p.pol_brn_code,\n                                                         p.pol_uw_year,\n                                                         --TO_NUMBER(TO_CHAR(P1.POL_UW_YEAR,'RRRR')),\n                                                         p.pol_policy_status,\n                                                         NULL,\n                                                         'N',\n                                                         v_pol_no);\n\n                BEGIN\n                    SELECT COUNT (1)\n                      INTO v_count\n                      FROM gin_policies\n                     WHERE     pol_policy_no = v_pol_no\n                           AND pol_ren_endos_no = v_ends_no;\n\n                    IF v_count > 0\n                    THEN\n                        v_ends_no :=\n                            gin_sequences_pkg.get_number_format (\n                                'E',\n                                p.pol_pro_code,\n                                p.pol_brn_code,\n                                p.pol_uw_year,\n                                --TO_NUMBER(TO_CHAR(P1.POL_UW_YEAR,'RRRR')),\n                                p.pol_policy_status,\n                                NULL,\n                                'N',\n                                p.pol_ren_endos_no);\n                    END IF;\n                END;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error generating endorsement number..');\n            END;\n\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_endos_count\n                  FROM gin_policies\n                 WHERE pol_policy_no = v_pol_no;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_endos_count := 0;\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error Getting number of endorsements...');\n            END;\n\n            IF p.pol_ren_endos_no = v_pol_no || '/' || v_endos_count\n            THEN\n                v_ends_no := v_pol_no || '/' || (v_endos_count + 1);\n            -- THIS IS FOR AIICO SOLO> WHERE SOME TRANSACTIONS GENERATED A WRONG ENDORSEMENT FOR ENDORSEMENT NUMBER 1\n            END IF;\n\n            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                   || gin_pol_batch_no_seq.NEXTVAL\n              INTO v_batch_no\n              FROM DUAL;\n\n            SELECT pol_pmod_code\n              INTO v_pmode_code\n              FROM gin_policies\n             WHERE pol_batch_no = p.pol_batch_no;\n\n            --Insert intO policies table\n            ---curr rate\n            IF p.pol_cur_rate IS NULL\n            THEN\n                BEGIN\n                    SELECT org_cur_code\n                      INTO v_base_cur_code\n                      FROM tqc_organizations\n                     WHERE org_code = 2;\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        v_cnt := 0;\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Unable to retrieve the base currency');\n                END;\n\n                IF v_base_cur_code IS NULL\n                THEN\n                    raise_error (\n                        'The base currency have not been dedfined. Cannot proceed.');\n                END IF;\n\n                p.pol_cur_rate :=\n                    get_exchange_rate (v_base_cur_code,\n                                       p.pol_cur_code,\n                                       TRUNC (SYSDATE));\n            END IF;\n\n            IF p.pol_cur_rate IS NULL\n            THEN\n                raise_error ('Cannot proceed when currency rate is NULL');\n            END IF;\n\n            IF NVL (v_auto_grad_clnt_param, 'N') = 'Y'\n            THEN\n                BEGIN\n                      SELECT COUNT (1)\n                        INTO v_renewal_cnt\n                        FROM gin_policies\n                       WHERE     pol_policy_status = 'RN'\n                             AND pol_policy_no = p.pol_policy_no\n                    GROUP BY pol_policy_no;\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        v_renewal_cnt := 0;\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error Getting Renewal Count');\n                END;\n\n                --raise_error(v_auto_grad_clnt_param||'='||v_renewal_cnt||'='||v_noyrstautoradclient_param||'='||p.pol_prp_code);\n                IF v_noyrstautoradclient_param = v_renewal_cnt\n                THEN\n                    UPDATE tqc_clients\n                       SET clnt_client_level = 'V'\n                     WHERE clnt_code = p.pol_prp_code;\n                END IF;\n            END IF;\n\n            --This is a bug on reinstatement. Commented by Peter\n            --         BEGIN\n            --         SELECT POL_BATCH_NO INTO v_curr_batch_no\n            --         FROM GIN_POLICIES\n            --         WHERE pol_policy_no =p.pol_policy_no\n            --         AND POL_CURRENT_STATUS='A';\n            --         EXCEPTION\n            --         WHEN NO_DATA_FOUND THEN\n            --          raise_error ('There is a pending endorsement that needs to be authorised..');\n            --         END;\n            --RAISE_ERROR('p.pol_pro_interface_type '||p.pol_pro_interface_type);\n            BEGIN\n                INSERT INTO gin_policies (pol_policy_no,\n                                          pol_ren_endos_no,\n                                          pol_batch_no,\n                                          pol_agnt_agent_code,\n                                          pol_agnt_sht_desc,\n                                          pol_bind_code,\n                                          pol_wef_dt,\n                                          pol_wet_dt,\n                                          pol_uw_year,\n                                          pol_total_sum_insured,\n                                          pol_policy_status,\n                                          pol_comm_amt,\n                                          pol_comm_rate,\n                                          pol_inception_dt,\n                                          pol_tran_type,\n                                          pol_acpr_code,\n                                          pol_acpr_sht_desc,\n                                          pol_alp_proposal_no,\n                                          pol_reinsured,\n                                          pol_basic_premium,\n                                          pol_nett_premium,\n                                          pol_cur_code,\n                                          pol_prepared_by,\n                                          pol_prepared_date,\n                                          pol_checked_by,\n                                          pol_check_date,\n                                          pol_policy_type,\n                                          pol_conversion_rate,\n                                          pol_client_policy_number,\n                                          pol_brn_code,\n                                          pol_business_type,\n                                          pol_cur_rate,\n                                          pol_curr_rate_type,\n                                          pol_comm_endos_diff_amt,\n                                          pol_total_fap,\n                                          pol_total_gp,\n                                          pol_tot_endos_diff_amt,\n                                          pol_coinsurance,\n                                          pol_coinsure_leader,\n                                          pol_fp,\n                                          pol_post_status,\n                                          pol_drcr_no,\n                                          pol_cur_symbol,\n                                          pol_post_ok,\n                                          pol_brn_sht_desc,\n                                          pol_prp_code,\n                                          pol_current_status,\n                                          pol_authosrised,\n                                          pol_cancel_dt,\n                                          pol_inception_uwyr,\n                                          pol_pro_code,\n                                          pol_btr_code,\n                                          pol_btr_trans_code,\n                                          pol_your_ref,\n                                          pol_prop_holding_co_prp_code,\n                                          pol_oth_int_parties,\n                                          pol_pro_sht_desc,\n                                          pol_prev_batch_no,\n                                          pol_uwyr_length,\n                                          pol_binder_policy,\n                                          pol_bind_pro_code,\n                                          pol_bind_pro_sht_desc,\n                                          pol_remarks,\n                                          pol_coinsure_pct,\n                                          pol_renewed_rec,\n                                          pol_renewable,\n                                          pol_policy_cover_to,\n                                          pol_policy_cover_from,\n                                          pol_si_diff,\n                                          pol_wtht,\n                                          pol_prem_tax,\n                                          pol_mar_cert_no,\n                                          pol_coinsurance_share,\n                                          pol_coin_tot_prem,\n                                          pol_coin_endos_prem,\n                                          pol_coin_tot_si,\n                                          pol_renewal_dt,\n                                          pol_prev_prem,\n                                          pol_ri_agnt_agent_code,\n                                          pol_ri_agnt_sht_desc,\n                                          pol_ri_agent_comm_rate,\n                                          pol_trans_eff_wet,\n                                          pol_old_policy_no,\n                                          pol_commission_allowed,\n                                          pol_pip_code,\n                                          pol_pmod_code,\n                                          pol_div_code,\n                                          pol_sub_agn_code,\n                                          pol_sub_agn_sht_desc,\n                                          pol_sub_agn_comm_amt,\n                                          pol_lta_comm_endos_amt,\n                                          pol_lta_comm_amt,\n                                          pol_mktr_agn_code,\n                                          pol_mktr_com_amt,\n                                          pol_bussiness_growth_type,\n                                          pol_subagent,\n                                          pol_ipf_nof_instals,\n                                          pol_coagent,\n                                          pol_coagent_main_pct,\n                                          pol_agn_discounted,\n                                          pol_agn_disc_type,\n                                          pol_agn_discount,\n                                          pol_uw_period,\n                                          pol_tot_instlmt,\n                                          pol_open_cover,\n                                          pol_summary_remarks,\n                                          pol_policy_debit,\n                                          pol_scheme_policy,\n                                          pol_pro_interface_type,\n                                          pol_joint,\n                                          pol_joint_prp_code,\n                                          pol_intro_code,\n                                          pol_policy_doc,\n                                          pol_freq_of_payment,\n                                          pol_instlmt_day,\n                                          pol_enforce_sf_param,\n                                          pol_pay_method,\n                                          pol_old_policy_number,\n                                          pol_open_policy,\n                                          pol_old_agent,\n                                          pol_health_tax,\n                                          pol_road_safety_tax,\n                                          pol_motor_levy,\n                                          pol_client_vat_amt,\n                                          pol_instlmt_prem,\n                                          pol_instlmt_amt,\n                                          pol_cr_date_notified,\n                                          pol_cr_note_number,\n                                          pol_admin_fee_allowed,\n                                          pol_cashback_appl,\n                                          pol_pop_taxes,\n                                          pol_uw_only,\n                                          pol_debiting_type)\n                         VALUES (\n                                    p.pol_policy_no,\n                                    v_ends_no,\n                                    v_batch_no,\n                                    p.pol_agnt_agent_code,\n                                    p.pol_agnt_sht_desc,\n                                    p.pol_bind_code,\n                                    p.pol_wef_dt,\n                                    p.pol_wet_dt,\n                                    p.pol_uw_year,\n                                    p.pol_total_sum_insured,\n                                    p.pol_policy_status,\n                                    p.pol_comm_amt,\n                                    p.pol_comm_rate,\n                                    p.pol_inception_dt,\n                                    p.pol_tran_type,\n                                    p.pol_acpr_code,\n                                    p.pol_acpr_sht_desc,\n                                    p.pol_alp_proposal_no,\n                                    'N',\n                                    p.pol_basic_premium,\n                                    p.pol_nett_premium,\n                                    p.pol_cur_code,\n                                    v_user,\n                                    TRUNC (SYSDATE),\n                                    --p.pol_prepared_date,\n                                    p.pol_checked_by,\n                                    p.pol_check_date,\n                                    p.pol_policy_type,\n                                    p.pol_conversion_rate,\n                                    p.pol_policy_no,\n                                    p.pol_brn_code,\n                                    p.pol_business_type,\n                                    p.pol_cur_rate,\n                                    p.pol_curr_rate_type,\n                                    p.pol_comm_endos_diff_amt,\n                                    p.pol_total_fap,\n                                    p.pol_total_gp,\n                                    p.pol_tot_endos_diff_amt,\n                                    p.pol_coinsurance,\n                                    p.pol_coinsure_leader,\n                                    p.pol_fp,\n                                    p.pol_post_status,\n                                    p.pol_drcr_no,\n                                    p.pol_cur_symbol,\n                                    p.pol_post_ok,\n                                    p.pol_brn_sht_desc,\n                                    p.pol_prp_code,\n                                    p.pol_current_status,\n                                    p.pol_authosrised,\n                                    p.pol_cancel_dt,\n                                    p.pol_inception_uwyr,\n                                    p.pol_pro_code,\n                                    p.pol_btr_code,\n                                    p.pol_btr_trans_code,\n                                    p.pol_your_ref,\n                                    p.pol_prop_holding_co_prp_code,\n                                    p.pol_oth_int_parties,\n                                    NVL (p.pol_pro_sht_desc, v_pro_sht_desc),\n                                    p.pol_batch_no,\n                                    p.pol_uwyr_length,\n                                    p.pol_binder_policy,\n                                    p.pol_bind_pro_code,\n                                    p.pol_bind_pro_sht_desc,\n                                    p.pol_remarks,\n                                    p.pol_coinsure_pct,\n                                    p.pol_renewed_rec,\n                                    NVL (p.pol_renewable, 'Y'),\n                                    p.pol_policy_cover_to,\n                                    p.pol_policy_cover_from,\n                                    p.pol_si_diff,\n                                    p.pol_wtht,\n                                    p.pol_prem_tax,\n                                    p.pol_mar_cert_no,\n                                    p.pol_coinsurance_share,\n                                    p.pol_coin_tot_prem,\n                                    p.pol_coin_endos_prem,\n                                    p.pol_coin_tot_si,\n                                    p.pol_renewal_dt,\n                                    p.pol_prev_prem,\n                                    p.pol_ri_agnt_agent_code,\n                                    p.pol_ri_agnt_sht_desc,\n                                    p.pol_ri_agent_comm_rate,\n                                    p.pol_wet_dt,\n                                    p.pol_old_policy_no,\n                                    p.pol_commission_allowed,\n                                    p.pol_pip_code,\n                                    v_pmode_code,\n                                    p.pol_div_code,\n                                    p.pol_sub_agn_code,\n                                    p.pol_sub_agn_sht_desc,\n                                    p.pol_sub_agn_comm_amt,\n                                    p.pol_lta_comm_amt,\n                                    p.pol_lta_comm_amt,\n                                    p.pol_mktr_agn_code,\n                                    p.pol_mktr_com_amt,\n                                    gin_stp_uw_pkg.get_growth_type (\n                                        p.pol_prp_code,\n                                        p.pol_policy_status,\n                                        p.pol_policy_no,\n                                        v_batch_no),\n                                    p.pol_subagent,\n                                    p.pol_ipf_nof_instals,\n                                    p.pol_coagent,\n                                    p.pol_coagent_main_pct,\n                                    p.pol_agn_discounted,\n                                    p.pol_agn_disc_type,\n                                    p.pol_agn_discount,\n                                      NVL (p.pol_uw_period, 1)\n                                    + DECODE (p.pol_policy_status,\n                                              'RN', 1,\n                                              'EX', 1,\n                                              0),\n                                    p.pol_tot_instlmt,\n                                    p.pol_open_cover,\n                                    p.pol_summary_remarks,\n                                    p.pol_policy_debit,\n                                    p.pol_scheme_policy,\n                                    p.pol_pro_interface_type,\n                                    p.pol_joint,\n                                    p.pol_joint_prp_code,\n                                    p.pol_intro_code,\n                                    p.pol_policy_doc,\n                                    p.pol_freq_of_payment,\n                                    p.pol_instlmt_day,\n                                    p.pol_enforce_sf_param,\n                                    p.pol_pay_method,\n                                    p.pol_old_policy_number,\n                                    p.pol_open_policy,\n                                    p.pol_old_agent,\n                                    p.pol_health_tax,\n                                    p.pol_road_safety_tax,\n                                    p.pol_motor_levy,\n                                    p.pol_client_vat_amt,\n                                    p.pol_instlmt_prem,\n                                    p.pol_instlmt_amt,\n                                    p.pol_cr_date_notified,\n                                    p.pol_cr_note_number,\n                                    p.pol_admin_fee_allowed,\n                                    p.pol_cashback_appl,\n                                    NVL (p.pol_pop_taxes, 'Y'),\n                                    p.pol_uw_only,\n                                    p.pol_debiting_type);\n            --message('after pol');pause;\n            --COMMIT;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        ' Fatal Error , creating policy endorsement record....');\n            END;\n\n            BEGIN\n                --message('posting policy specific details oldbatch='||P.POL_BATCH_NO||'new batch='||v_batch_no);pause;\n                insert_policy_spec_details (p.pol_pro_code,\n                                            p.pol_batch_no,\n                                            v_batch_no,\n                                            'U');\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Unable to populate policy specific details');\n            END;\n\n            BEGIN\n                --message('posting policy specific details oldbatch='||P.POL_BATCH_NO||'new batch='||v_batch_no);pause;\n                gin_agency_web_pkg.update_uw_policydtls (p.pol_batch_no,\n                                                         v_batch_no);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Unable to populate policy specific details');\n            END;\n\n            BEGIN\n                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YY'))\n                       || ggt_trans_no_seq.NEXTVAL\n                  INTO next_ggt_trans_no\n                  FROM DUAL;\n\n                --SELECT USER INTO v_user FROM DUAL;\n                --v_user := 'MSHOTE';\n                INSERT INTO gin_gis_transactions (ggt_doc_ref,\n                                                  ggt_trans_no,\n                                                  ggt_pol_policy_no,\n                                                  ggt_cmb_claim_no,\n                                                  ggt_pol_batch_no,\n                                                  ggt_btr_trans_code,\n                                                  ggt_done_by,\n                                                  ggt_done_date,\n                                                  ggt_client_policy_number,\n                                                  ggt_uw_clm_tran,\n                                                  ggt_trans_date,\n                                                  ggt_trans_authorised,\n                                                  ggt_pro_code,\n                                                  ggt_pro_sht_desc)\n                     VALUES ('Renewal',\n                             next_ggt_trans_no,\n                             p.pol_policy_no,\n                             NULL,\n                             v_batch_no,\n                             'RN',\n                             v_user,\n                             SYSDATE,\n                             p.pol_policy_no,\n                             'U',\n                             TRUNC (SYSDATE),\n                             'N',\n                             p.pol_pro_code,\n                             p.pol_pro_sht_desc);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error unable to creaete a transaction record. Contact the system administrator...');\n            END;\n\n            FOR r IN cur_rcpt (p.pol_renewal_batch)\n            LOOP\n                UPDATE gin_master_transactions\n                   SET mtran_pol_batch_no = v_batch_no\n                 WHERE mtran_no = r.mtran_no;\n            END LOOP;\n\n            BEGIN\n                UPDATE gin_gis_transmitals\n                   SET ggts_pol_batch_no = v_batch_no, ggts_uw_clm_tran = 'U'\n                 WHERE ggts_pol_renewal_batch = p.pol_renewal_batch;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            FOR pdl IN pol_dtls\n            LOOP\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YY'))\n                           || gin_pdl_code_seq.NEXTVAL\n                      INTO v_pdl_code\n                      FROM DUAL;\n\n                    --SELECT USER INTO v_user FROM DUAL;\n                    --v_user := 'MSHOTE';\n                    INSERT INTO gin_policy_sbu_dtls (pdl_code,\n                                                     pdl_pol_batch_no,\n                                                     pdl_unit_code,\n                                                     pdl_location_code,\n                                                     pdl_prepared_date)\n                         VALUES (v_pdl_code,\n                                 v_batch_no,\n                                 pdl.pdl_unit_code,\n                                 pdl.pdl_location_code,\n                                 TRUNC (SYSDATE));\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error unable to creaete a transaction record. Contact the system administrator...');\n                END;\n            END LOOP;\n\n            --OPEN CUR_TAXES\n            FOR cur_tax_rec\n                IN cur_taxes (p.pol_batch_no,\n                              p.pol_policy_status,\n                              p.pol_pro_code)\n            LOOP\n                --INSERTING INTO GIN_POLICY_TAXES\n                BEGIN\n                    INSERT INTO gin_policy_taxes (ptx_trac_trnt_code,\n                                                  ptx_pol_policy_no,\n                                                  ptx_pol_ren_endos_no,\n                                                  ptx_pol_batch_no,\n                                                  ptx_rate,\n                                                  ptx_amount,\n                                                  ptx_tl_lvl_code,\n                                                  ptx_rate_type,\n                                                  ptx_rate_desc,\n                                                  ptx_endos_diff_amt,\n                                                  ptx_tax_type,\n                                                  ptx_trac_scl_code)\n                         VALUES (cur_tax_rec.ptx_trac_trnt_code,\n                                 cur_tax_rec.ptx_pol_policy_no,\n                                 v_ends_no,\n                                 v_batch_no,\n                                 cur_tax_rec.ptx_rate,\n                                 cur_tax_rec.ptx_amount,\n                                 cur_tax_rec.ptx_tl_lvl_code,\n                                 cur_tax_rec.ptx_rate_type,\n                                 cur_tax_rec.ptx_rate_desc,\n                                 cur_tax_rec.ptx_endos_diff_amt,\n                                 cur_tax_rec.ptx_tax_type,\n                                 cur_tax_rec.ptx_trac_scl_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            ' Error creating policy tax record. Contact the system administrator...');\n                END;\n            END LOOP;\n\n            --***** Insert FACRE IN Details *******\n            BEGIN\n                FOR cur_facre_dtls_rec IN cur_facre_dtls (p.pol_batch_no)\n                LOOP\n                    INSERT INTO gin_facre_in_dtls (fid_pol_policy_no,\n                                                   fid_pol_ren_endos_no,\n                                                   fid_pol_batch_no,\n                                                   fid_agnt_agent_code,\n                                                   fid_agnt_sht_desc,\n                                                   fid_prp_code,\n                                                   fid_sum_insured,\n                                                   fid_gross_rate,\n                                                   fid_cede_comp_first_prem,\n                                                   fid_cede_comp_terms,\n                                                   fid_rein_terms,\n                                                   fid_cede_comp_gross_ret,\n                                                   fid_cede_comp_rein_amt,\n                                                   fid_amt_perc_sum_insured,\n                                                   fid_wef,\n                                                   fid_wet,\n                                                   fid_code,\n                                                   fid_cede_comp_policy_no,\n                                                   fid_cede_comp_term_frm,\n                                                   fid_cede_comp_term_to,\n                                                   fid_cede_company_ren_prem,\n                                                   fid_reins_term_to,\n                                                   fid_cede_sign_dt)\n                             VALUES (\n                                        cur_facre_dtls_rec.fid_pol_policy_no,\n                                        v_ends_no,\n                                        v_batch_no,\n                                        cur_facre_dtls_rec.fid_agnt_agent_code,\n                                        cur_facre_dtls_rec.fid_agnt_sht_desc,\n                                        cur_facre_dtls_rec.fid_prp_code,\n                                        cur_facre_dtls_rec.fid_sum_insured,\n                                        cur_facre_dtls_rec.fid_gross_rate,\n                                        cur_facre_dtls_rec.fid_cede_comp_first_prem,\n                                        cur_facre_dtls_rec.fid_cede_comp_terms,\n                                        cur_facre_dtls_rec.fid_rein_terms,\n                                        cur_facre_dtls_rec.fid_cede_comp_gross_ret,\n                                        cur_facre_dtls_rec.fid_cede_comp_rein_amt,\n                                        cur_facre_dtls_rec.fid_amt_perc_sum_insured,\n                                        cur_facre_dtls_rec.fid_wef,\n                                        cur_facre_dtls_rec.fid_wet,\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_fid_code_seq.NEXTVAL,\n                                        cur_facre_dtls_rec.fid_cede_comp_policy_no,\n                                        cur_facre_dtls_rec.fid_cede_comp_term_frm,\n                                        cur_facre_dtls_rec.fid_cede_comp_term_to,\n                                        cur_facre_dtls_rec.fid_cede_company_ren_prem,\n                                        cur_facre_dtls_rec.fid_reins_term_to,\n                                        cur_facre_dtls_rec.fid_cede_sign_dt);\n                END LOOP;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (' Unable to insert facre details...');\n            END;\n\n            FOR cur_coagencies_rec IN cur_coagencies\n            LOOP\n                INSERT INTO gin_policy_coagencies (coagn_code,\n                                                   coagn_agn_code,\n                                                   coagn_pct,\n                                                   coagn_pol_batch_no,\n                                                   coagn_comm_amt,\n                                                   coagn_prem_amt)\n                     VALUES (gin_co_code_seq.NEXTVAL,\n                             cur_coagencies_rec.coagn_agn_code,\n                             cur_coagencies_rec.coagn_pct,\n                             v_batch_no,\n                             cur_coagencies_rec.coagn_comm_amt,\n                             cur_coagencies_rec.coagn_prem_amt);\n            END LOOP;\n\n            --COMMIT;\n            --OPEN COINSURER\n            FOR cur_coinsurer_rec IN cur_coinsurer (p.pol_batch_no)\n            LOOP\n                --INSERT INTO GIN_COINSURERS\n                BEGIN\n                    INSERT INTO gin_coinsurers (coin_agnt_agent_code,\n                                                coin_agnt_sht_desc,\n                                                coin_gl_code,\n                                                coin_lead,\n                                                coin_perct,\n                                                coin_prem,\n                                                coin_pol_policy_no,\n                                                coin_pol_ren_endos_no,\n                                                coin_pol_batch_no,\n                                                coin_fee_rate,\n                                                coin_fee_amt,\n                                                coin_duties,\n                                                coin_si,\n                                                coin_optional_comm,\n                                                coin_comm_rate)\n                         VALUES (cur_coinsurer_rec.coin_agnt_agent_code,\n                                 cur_coinsurer_rec.coin_agnt_sht_desc,\n                                 cur_coinsurer_rec.coin_gl_code,\n                                 cur_coinsurer_rec.coin_lead,\n                                 cur_coinsurer_rec.coin_perct,\n                                 cur_coinsurer_rec.coin_prem,\n                                 cur_coinsurer_rec.coin_pol_policy_no,\n                                 v_ends_no,\n                                 v_batch_no,\n                                 cur_coinsurer_rec.coin_fee_rate,\n                                 cur_coinsurer_rec.coin_fee_amt,\n                                 cur_coinsurer_rec.coin_duties,\n                                 cur_coinsurer_rec.coin_si,\n                                 cur_coinsurer_rec.coin_optional_comm,\n                                 cur_coinsurer_rec.coin_comm_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            '  Error creating policy coinsurance record. Contact the system administrator...');\n                END;\n            END LOOP;\n\n            --     COMMIT;\n            FOR cur_subclass_conditions_rec\n                IN cur_subclass_conditions (p.pol_batch_no)\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_subclass_clauses (\n                                    poscl_cls_code,\n                                    poscl_sht_desc,\n                                    poscl_heading,\n                                    poscl_scl_code,\n                                    poscl_pol_policy_no,\n                                    poscl_cls_type,\n                                    poscl_clause,\n                                    poscl_cls_editable,\n                                    poscl_new,\n                                    poscl_pol_batch_no,\n                                    poscl_code)\n                             VALUES (\n                                        cur_subclass_conditions_rec.poscl_cls_code,\n                                        cur_subclass_conditions_rec.poscl_sht_desc,\n                                        cur_subclass_conditions_rec.poscl_heading,\n                                        cur_subclass_conditions_rec.poscl_scl_code,\n                                        cur_subclass_conditions_rec.poscl_pol_policy_no,\n                                        cur_subclass_conditions_rec.poscl_cls_type,\n                                        cur_subclass_conditions_rec.poscl_clause,\n                                        cur_subclass_conditions_rec.poscl_cls_editable,\n                                        cur_subclass_conditions_rec.poscl_new,\n                                        v_batch_no,\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_poscl_code_seq.NEXTVAL);\n                EXCEPTION\n                    WHEN DUP_VAL_ON_INDEX\n                    THEN\n                        raise_error (\n                               'System attempted to illegaly duplicate '\n                            || cur_subclass_conditions_rec.poscl_sht_desc\n                            || ' clause record. Please contact Turnkey Africa for support...');\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to insert policy level sub class clauses details, ...');\n                END;\n            END LOOP;\n\n            --OPEN CONDITIONS\n            FOR cur_conditions_rec IN cur_conditions (p.pol_batch_no)\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_lvl_clauses (\n                                    plcl_sbcl_cls_code,\n                                    plcl_sbcl_scl_code,\n                                    plcl_pro_sht_desc,\n                                    plcl_pro_code,\n                                    plcl_pol_policy_no,\n                                    plcl_pol_ren_endos_no,\n                                    plcl_pol_batch_no,\n                                    plcl_sbcl_cls_sht_desc,\n                                    plcl_cls_type,\n                                    plcl_clause,\n                                    plcl_cls_editable,\n                                    plcl_new,\n                                    plcl_heading)\n                         VALUES (cur_conditions_rec.plcl_sbcl_cls_code,\n                                 cur_conditions_rec.plcl_sbcl_scl_code,\n                                 cur_conditions_rec.plcl_pro_sht_desc,\n                                 cur_conditions_rec.plcl_pro_code,\n                                 cur_conditions_rec.plcl_pol_policy_no,\n                                 v_ends_no,\n                                 v_batch_no,\n                                 cur_conditions_rec.plcl_sbcl_cls_sht_desc,\n                                 cur_conditions_rec.plcl_cls_type,\n                                 cur_conditions_rec.plcl_clause,\n                                 cur_conditions_rec.plcl_cls_editable,\n                                 cur_conditions_rec.plcl_new,\n                                 cur_conditions_rec.plcl_heading);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            '  Error creating policy clauses record. Contact the system administrator...');\n                END;\n            END LOOP;\n\n            FOR cur_schedule_values_rec\n                IN cur_schedule_values (p.pol_batch_no)\n            LOOP\n                --RAISE_ERROR('v_old_pol_batch_no'||v_old_pol_batch_no);\n                BEGIN\n                    INSERT INTO gin_pol_schedule_values (schpv_code,\n                                                         schpv_schv_code,\n                                                         schpv_pol_batch_no,\n                                                         schpv_value,\n                                                         schpv_narration)\n                         VALUES (gin_schpv_code_seq.NEXTVAL,\n                                 cur_schedule_values_rec.schpv_schv_code,\n                                 v_batch_no,\n                                 cur_schedule_values_rec.schpv_value,\n                                 cur_schedule_values_rec.schpv_narration);\n                EXCEPTION\n                    WHEN DUP_VAL_ON_INDEX\n                    THEN\n                        raise_error (\n                               'System attempted to illegaly duplicate '\n                            || cur_schedule_values_rec.schpv_schv_code\n                            || ' clause record. Please contact Turnkey Africa for support...');\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Unable to insert policy level clauses details, ...');\n                END;\n            END LOOP;\n\n            FOR cur_pol_perils_rec IN cur_pol_perils (p.pol_batch_no)\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_section_perils (\n                                    pspr_code,\n                                    pspr_scl_code,\n                                    pspr_sect_code,\n                                    pspr_sect_sht_desc,\n                                    pspr_per_code,\n                                    pspr_per_sht_desc,\n                                    pspr_mandatory,\n                                    pspr_peril_limit,\n                                    pspr_peril_type,\n                                    pspr_si_or_limit,\n                                    pspr_sec_code,\n                                    pspr_excess_type,\n                                    pspr_excess,\n                                    pspr_excess_min,\n                                    pspr_excess_max,\n                                    pspr_expire_on_claim,\n                                    pspr_bind_code,\n                                    pspr_person_limit,\n                                    pspr_claim_limit,\n                                    pspr_desc,\n                                    pspr_bind_type,\n                                    pspr_pol_batch_no,\n                                    pspr_sspr_code,\n                                    pspr_depreciation_pct,\n                                    pspr_tl_excess_type,\n                                    pspr_tl_excess,\n                                    pspr_tl_excess_min,\n                                    pspr_tl_excess_max,\n                                    pspr_pl_excess_type,\n                                    pspr_pl_excess,\n                                    pspr_pl_excess_min,\n                                    pspr_pl_excess_max,\n                                    pspr_claim_excess_min,\n                                    pspr_claim_excess_max,\n                                    pspr_depend_loss_type,\n                                    pspr_claim_excess_type,\n                                    pspr_ttd_ben_pcts)\n                         VALUES (gin_pspr_code_seq.NEXTVAL,\n                                 cur_pol_perils_rec.pspr_scl_code,\n                                 cur_pol_perils_rec.pspr_sect_code,\n                                 cur_pol_perils_rec.pspr_sect_sht_desc,\n                                 cur_pol_perils_rec.pspr_per_code,\n                                 cur_pol_perils_rec.pspr_per_sht_desc,\n                                 cur_pol_perils_rec.pspr_mandatory,\n                                 cur_pol_perils_rec.pspr_peril_limit,\n                                 cur_pol_perils_rec.pspr_peril_type,\n                                 cur_pol_perils_rec.pspr_si_or_limit,\n                                 cur_pol_perils_rec.pspr_sec_code,\n                                 cur_pol_perils_rec.pspr_excess_type,\n                                 cur_pol_perils_rec.pspr_excess,\n                                 cur_pol_perils_rec.pspr_excess_min,\n                                 cur_pol_perils_rec.pspr_excess_max,\n                                 cur_pol_perils_rec.pspr_expire_on_claim,\n                                 cur_pol_perils_rec.pspr_bind_code,\n                                 cur_pol_perils_rec.pspr_person_limit,\n                                 cur_pol_perils_rec.pspr_claim_limit,\n                                 cur_pol_perils_rec.pspr_desc,\n                                 cur_pol_perils_rec.pspr_bind_type,\n                                 v_batch_no,\n                                 cur_pol_perils_rec.pspr_sspr_code,\n                                 cur_pol_perils_rec.pspr_depreciation_pct,\n                                 cur_pol_perils_rec.pspr_tl_excess_type,\n                                 cur_pol_perils_rec.pspr_tl_excess,\n                                 cur_pol_perils_rec.pspr_tl_excess_min,\n                                 cur_pol_perils_rec.pspr_tl_excess_max,\n                                 cur_pol_perils_rec.pspr_pl_excess_type,\n                                 cur_pol_perils_rec.pspr_pl_excess,\n                                 cur_pol_perils_rec.pspr_pl_excess_min,\n                                 cur_pol_perils_rec.pspr_pl_excess_max,\n                                 cur_pol_perils_rec.pspr_claim_excess_min,\n                                 cur_pol_perils_rec.pspr_claim_excess_max,\n                                 cur_pol_perils_rec.pspr_depend_loss_type,\n                                 cur_pol_perils_rec.pspr_claim_excess_type,\n                                 cur_pol_perils_rec.pspr_ttd_ben_pcts);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error updating policy perils..');\n                END;\n            END LOOP;\n\n            BEGIN\n                UPDATE gin_policy_subclass_clauses\n                   SET poscl_new = 'N'\n                 WHERE poscl_pol_policy_no = p.pol_policy_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Unable to update subclass clause status');\n            END;\n\n            -- Insert Insureds\n            --OPEN cur_insureds\n            FOR cur_insureds_rec IN cur_insureds (p.pol_batch_no)\n            LOOP\n                BEGIN\n                    INSERT INTO gin_policy_insureds (polin_code,\n                                                     polin_pa,\n                                                     polin_pol_policy_no,\n                                                     polin_pol_ren_endos_no,\n                                                     polin_pol_batch_no,\n                                                     polin_category,\n                                                     polin_prp_code,\n                                                     polin_new_insured)\n                             VALUES (\n                                        TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR')\n                                            || polin_code_seq.NEXTVAL),\n                                        NULL,\n                                        p.pol_policy_no,\n                                        v_ends_no,\n                                        v_batch_no,\n                                        NULL,\n                                        cur_insureds_rec.polin_prp_code,\n                                        cur_insureds_rec.polin_new_insured);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            ' Error creating insureds record. Contact the system administrator...');\n                END;\n\n                --Insert Insured Risks\n                FOR cur_ipu_rec\n                    IN cur_ipu (p.pol_batch_no, cur_insureds_rec.polin_code)\n                LOOP\n                    SELECT TO_NUMBER (\n                                  TO_CHAR (SYSDATE, 'RRRR')\n                               || gin_ipu_code_seq.NEXTVAL)\n                      INTO v_new_ipu_code\n                      FROM DUAL;\n\n                    -- DO YOUR INSERTS INTO ipu\n                    BEGIN\n                        --message('cur_ipu_rec.IPU_UW_YR='||cur_ipu_rec.IPU_UW_YR);pause;\n                        INSERT INTO gin_insured_property_unds (\n                                        ipu_code,\n                                        ipu_property_id,\n                                        ipu_item_desc,\n                                        ipu_qty,\n                                        ipu_value,\n                                        ipu_wef,\n                                        ipu_wet,\n                                        ipu_pol_policy_no,\n                                        ipu_pol_ren_endos_no,\n                                        ipu_pol_batch_no,\n                                        ipu_basic_premium,\n                                        ipu_nett_premium,\n                                        ipu_compulsory_excess,\n                                        ipu_add_theft_excess,\n                                        ipu_add_exp_excess,\n                                        ipu_prr_rate,\n                                        ipu_comp_retention,\n                                        ipu_pol_est_max_loss,\n                                        ipu_avail_fulc_bal,\n                                        ipu_endos_diff_amt,\n                                        ipu_prem_wef,\n                                        ipu_earth_quake_cover,\n                                        ipu_earth_quake_prem,\n                                        ipu_location,\n                                        ipu_itl,\n                                        ipu_polin_code,\n                                        ipu_sec_sect_code,\n                                        ipu_sect_sht_desc,\n                                        ipu_sec_scl_code,\n                                        ipu_ncd_status,\n                                        ipu_cert_issued,\n                                        ipu_related_ipu_code,\n                                        ipu_prorata,\n                                        ipu_bp,\n                                        ipu_gp,\n                                        ipu_fp,\n                                        ipu_fap,\n                                        ipu_prev_ipu_code,\n                                        ipu_cummulative_reins,\n                                        ipu_eml_si,\n                                        ipu_reinsured,\n                                        ipu_ct_code,\n                                        ipu_sht_desc,\n                                        ipu_quz_code,\n                                        ipp_quz_sht_desc,\n                                        ipu_quz_sht_desc,\n                                        ipu_ncl_level,\n                                        ipu_ncd_level,\n                                        ipu_id,\n                                        ipu_gross_comp_retention,\n                                        ipu_bind_code,\n                                        ipu_commission,\n                                        ipu_comm_endos_diff_amt,\n                                        ipu_facre_amount,\n                                        ipu_clp_code,\n                                        ipu_excess_rate,\n                                        ipu_excess_type,\n                                        ipu_excess_rate_type,\n                                        ipu_excess_min,\n                                        ipu_excess_max,\n                                        ipu_prereq_ipu_code,\n                                        ipu_escalation_rate,\n                                        ipu_endos_remove,\n                                        ipu_comm_rate,\n                                        ipu_prev_batch_no,\n                                        ipu_cur_code,\n                                        ipu_relr_code,\n                                        ipu_relr_sht_desc,\n                                        ipu_reinsure_amt,\n                                        ipu_prp_code,\n                                        ipu_max_exposure,\n                                        ipu_com_retention_rate,\n                                        ipu_retro_cover,\n                                        ipu_retro_wef,\n                                        ipu_eff_wef,\n                                        ipu_eff_wet,\n                                        ipu_comments,\n                                        ipu_covt_code,\n                                        ipu_covt_sht_desc,\n                                        ipu_si_diff,\n                                        ipu_terr_code,\n                                        ipu_terr_desc,\n                                        ipu_from_time,\n                                        ipu_to_time,\n                                        ipu_tot_endos_prem_dif,\n                                        ipu_tot_gp,\n                                        ipu_tot_value,\n                                        ipu_cover_days,\n                                        ipu_grp_si_risk_pct,\n                                        ipu_grp_top_loc,\n                                        ipu_grp_comp_gross_ret,\n                                        ipu_grp_comp_net_ret,\n                                        ipu_prev_prem,\n                                        ipu_ri_agnt_com_rate,\n                                        ipu_ri_agnt_comm_amt,\n                                        ipu_tot_fap,\n                                        ipu_max_dc_refund_pct,\n                                        ipu_uw_yr,\n                                        ipu_tot_first_loss,\n                                        ipu_accumulation_limit,\n                                        ipu_compute_max_exposure,\n                                        ipu_status,\n                                        ipu_inception_uwyr,\n                                        ipu_trans_eff_wet,\n                                        ipu_eml_based_on,\n                                        ipu_aggregate_limits,\n                                        ipu_rc_sht_desc,\n                                        ipu_rc_code,\n                                        ipu_survey_date,\n                                        ipu_item_details,\n                                        ipu_sub_agn_comm_rate,\n                                        ipu_sub_agn_comm_amt,\n                                        ipu_lta_endos_com_amt,\n                                        ipu_lta_commission,\n                                        ipu_lta_comm_rate,\n                                        ipu_conveyance_type,\n                                        ipu_prev_status,\n                                        ipu_install_period,\n                                        ipu_pymt_install_pcts,\n                                        ipu_susp_reinstmt_type,\n                                        ipu_rs_code,\n                                        ipu_rescue_mem,\n                                        ipu_rescue_charge,\n                                        ipu_next_inst_prem,\n                                        ipu_drcr_no,\n                                        ipu_wtht,\n                                        ipu_post_retro_wet,\n                                        ipu_post_retro_cover,\n                                        ipu_health_tax,\n                                        ipu_road_safety_tax,\n                                        ipu_motor_levy,\n                                        ipu_client_vat_amt,\n                                        ipu_cashback_appl,\n                                        ipu_cashback_level,\n                                        ipu_risk_note,\n                                        ipu_other_com_charges,\n                                        ipu_model_yr,\n                                        ipu_vehicle_model,\n                                        ipu_vehicle_make,\n                                        ipu_vehicle_model_code,\n                                        ipu_vehicle_make_code,\n                                        ipu_loc_town,\n                                        ipu_prop_address)\n                                 VALUES (\n                                            v_new_ipu_code,\n                                            cur_ipu_rec.ipu_property_id,\n                                            cur_ipu_rec.ipu_item_desc,\n                                            cur_ipu_rec.ipu_qty,\n                                            cur_ipu_rec.ipu_value,\n                                            p.pol_wef_dt,\n                                            p.pol_wet_dt,\n                                            p.pol_policy_no,\n                                            v_ends_no,\n                                            v_batch_no,\n                                            cur_ipu_rec.ipu_basic_premium,\n                                            cur_ipu_rec.ipu_nett_premium,\n                                            cur_ipu_rec.ipu_compulsory_excess,\n                                            cur_ipu_rec.ipu_add_theft_excess,\n                                            cur_ipu_rec.ipu_add_exp_excess,\n                                            cur_ipu_rec.ipu_prr_rate,\n                                            cur_ipu_rec.ipu_comp_retention,\n                                            cur_ipu_rec.ipu_pol_est_max_loss,\n                                            cur_ipu_rec.ipu_avail_fulc_bal,\n                                            cur_ipu_rec.ipu_endos_diff_amt,\n                                            cur_ipu_rec.ipu_prem_wef,\n                                            cur_ipu_rec.ipu_earth_quake_cover,\n                                            cur_ipu_rec.ipu_earth_quake_prem,\n                                            cur_ipu_rec.ipu_location,\n                                            cur_ipu_rec.ipu_itl,\n                                            TO_NUMBER (\n                                                   TO_CHAR (SYSDATE, 'RRRR')\n                                                || polin_code_seq.CURRVAL),\n                                            cur_ipu_rec.ipu_sec_sect_code,\n                                            cur_ipu_rec.ipu_sect_sht_desc,\n                                            cur_ipu_rec.ipu_sec_scl_code,\n                                            cur_ipu_rec.ipu_ncd_status,\n                                            cur_ipu_rec.ipu_cert_issued,\n                                            cur_ipu_rec.ipu_related_ipu_code,\n                                            cur_ipu_rec.ipu_prorata,\n                                            cur_ipu_rec.ipu_bp,\n                                            cur_ipu_rec.ipu_gp,\n                                            DECODE (cur_ipu_rec.ipu_fp,\n                                                    0, NULL,\n                                                    cur_ipu_rec.ipu_fp),\n                                            cur_ipu_rec.ipu_fap,\n                                            cur_ipu_rec.ipu_prev_ipu_code,\n                                            cur_ipu_rec.ipu_cummulative_reins,\n                                            cur_ipu_rec.ipu_eml_si,\n                                            cur_ipu_rec.ipu_reinsured,\n                                            cur_ipu_rec.ipu_ct_code,\n                                            cur_ipu_rec.ipu_sht_desc,\n                                            cur_ipu_rec.ipu_quz_code,\n                                            cur_ipu_rec.ipp_quz_sht_desc,\n                                            cur_ipu_rec.ipu_quz_sht_desc,\n                                            cur_ipu_rec.ipu_ncl_level,\n                                            cur_ipu_rec.ipu_ncd_level,\n                                            cur_ipu_rec.ipu_id,\n                                            cur_ipu_rec.ipu_gross_comp_retention,\n                                            cur_ipu_rec.ipu_bind_code,\n                                            cur_ipu_rec.ipu_commission,\n                                            cur_ipu_rec.ipu_comm_endos_diff_amt,\n                                            cur_ipu_rec.ipu_facre_amount,\n                                            cur_ipu_rec.ipu_clp_code,\n                                            cur_ipu_rec.ipu_excess_rate,\n                                            cur_ipu_rec.ipu_excess_type,\n                                            cur_ipu_rec.ipu_excess_rate_type,\n                                            cur_ipu_rec.ipu_excess_min,\n                                            cur_ipu_rec.ipu_excess_max,\n                                            cur_ipu_rec.ipu_prereq_ipu_code,\n                                            cur_ipu_rec.ipu_escalation_rate,\n                                            cur_ipu_rec.ipu_endos_remove,\n                                            cur_ipu_rec.ipu_comm_rate,\n                                            cur_ipu_rec.ipu_prev_batch_no,\n                                            cur_ipu_rec.ipu_cur_code,\n                                            cur_ipu_rec.ipu_relr_code,\n                                            cur_ipu_rec.ipu_relr_sht_desc,\n                                            cur_ipu_rec.ipu_reinsure_amt,\n                                            cur_ipu_rec.ipu_prp_code,\n                                            cur_ipu_rec.ipu_max_exposure,\n                                            cur_ipu_rec.ipu_com_retention_rate,\n                                            cur_ipu_rec.ipu_retro_cover,\n                                            cur_ipu_rec.ipu_retro_wef,\n                                            cur_ipu_rec.ipu_eff_wef,\n                                            cur_ipu_rec.ipu_eff_wet,\n                                            cur_ipu_rec.ipu_comments,\n                                            cur_ipu_rec.ipu_covt_code,\n                                            cur_ipu_rec.ipu_covt_sht_desc,\n                                            cur_ipu_rec.ipu_si_diff,\n                                            cur_ipu_rec.ipu_terr_code,\n                                            cur_ipu_rec.ipu_terr_desc,\n                                            cur_ipu_rec.ipu_from_time,\n                                            cur_ipu_rec.ipu_to_time,\n                                            cur_ipu_rec.ipu_tot_endos_prem_dif,\n                                            cur_ipu_rec.ipu_tot_gp,\n                                            cur_ipu_rec.ipu_tot_value,\n                                            cur_ipu_rec.ipu_cover_days,\n                                            cur_ipu_rec.ipu_grp_si_risk_pct,\n                                            cur_ipu_rec.ipu_grp_top_loc,\n                                            cur_ipu_rec.ipu_grp_comp_gross_ret,\n                                            cur_ipu_rec.ipu_grp_comp_net_ret,\n                                            cur_ipu_rec.ipu_prev_prem,\n                                            cur_ipu_rec.ipu_ri_agnt_com_rate,\n                                            cur_ipu_rec.ipu_ri_agnt_comm_amt,\n                                            cur_ipu_rec.ipu_tot_fap,\n                                            cur_ipu_rec.ipu_max_dc_refund_pct,\n                                            cur_ipu_rec.ipu_uw_yr,\n                                            cur_ipu_rec.ipu_tot_first_loss,\n                                            cur_ipu_rec.ipu_accumulation_limit,\n                                            cur_ipu_rec.ipu_compute_max_exposure,\n                                            'RN',\n                                            cur_ipu_rec.ipu_inception_uwyr,\n                                            p.pol_wet_dt,\n                                            cur_ipu_rec.ipu_eml_based_on,\n                                            cur_ipu_rec.ipu_aggregate_limits,\n                                            cur_ipu_rec.ipu_rc_sht_desc,\n                                            cur_ipu_rec.ipu_rc_code,\n                                            cur_ipu_rec.ipu_survey_date,\n                                            cur_ipu_rec.ipu_item_details,\n                                            cur_ipu_rec.ipu_sub_agn_comm_rate,\n                                            cur_ipu_rec.ipu_sub_agn_comm_amt,\n                                            cur_ipu_rec.ipu_lta_commission,\n                                            cur_ipu_rec.ipu_lta_commission,\n                                            cur_ipu_rec.ipu_lta_comm_rate,\n                                            cur_ipu_rec.ipu_conveyance_type,\n                                            'RN',\n                                            cur_ipu_rec.ipu_install_period,\n                                            cur_ipu_rec.ipu_pymt_install_pcts,\n                                            cur_ipu_rec.ipu_susp_reinstmt_type,\n                                            cur_ipu_rec.ipu_rs_code,\n                                            cur_ipu_rec.ipu_rescue_mem,\n                                            cur_ipu_rec.ipu_rescue_charge,\n                                            cur_ipu_rec.ipu_next_inst_prem,\n                                            cur_ipu_rec.ipu_drcr_no,\n                                            cur_ipu_rec.ipu_wtht,\n                                            cur_ipu_rec.ipu_post_retro_wet,\n                                            cur_ipu_rec.ipu_post_retro_cover,\n                                            cur_ipu_rec.ipu_health_tax,\n                                            cur_ipu_rec.ipu_road_safety_tax,\n                                            cur_ipu_rec.ipu_motor_levy,\n                                            cur_ipu_rec.ipu_client_vat_amt,\n                                            cur_ipu_rec.ipu_cashback_appl,\n                                            cur_ipu_rec.ipu_cashback_level,\n                                            cur_ipu_rec.ipu_risk_note,\n                                            cur_ipu_rec.ipu_other_com_charges,\n                                            cur_ipu_rec.ipu_model_yr,\n                                            cur_ipu_rec.ipu_vehicle_model,\n                                            cur_ipu_rec.ipu_vehicle_make,\n                                            cur_ipu_rec.ipu_vehicle_model_code,\n                                            cur_ipu_rec.ipu_vehicle_make_code,\n                                            cur_ipu_rec.ipu_loc_town,\n                                            cur_ipu_rec.ipu_prop_address);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                ' Error creating risk endorsement record. Contact the system administrator...');\n                    END;\n\n                    BEGIN\n                        gin_stp_uw_pkg.populate_cert_to_print (v_batch_no);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                   'Error allocating certificates at step 1....'\n                                || SQLERRM (SQLCODE));\n                    END;\n\n                    /*    -- POPULATE MANDATORY SECTIONS\n                        BEGIN\n                            Gin_Stp_Pkg.pop_mand_policy_rsk_limits(cur_ipu_rec.ipu_code,\n                                                                                                    cur_ipu_rec.ipu_sec_scl_code,\n                                                                                                    cur_ipu_rec.ipu_bind_code,\n                                                                                                    cur_ipu_rec.ipu_covt_code);\n                        EXCEPTION\n                                WHEN OTHERS THEN\n                                    raise_error('Error populating mandatory sections...');\n                        END;*/\n                    --OPEN LIMITS\n                    FOR cur_peril_rec\n                        IN cur_rsk_perils (cur_ipu_rec.ipu_code)\n                    LOOP\n                        --                  BEGIN\n                        --                  --    message('inserting risk GIN_POLICY_CLAUSES ...');pause;\n                        --                  INSERT INTO gin_pol_risk_section_perils\n                        --                              (prspr_code, prspr_pol_batch_no,\n                        --                               prspr_ipu_code,\n                        --                               prspr_scl_code,\n                        --                               prspr_sect_code,\n                        --                               prspr_sect_sht_desc,\n                        --                               prspr_per_code,\n                        --                               prspr_per_sht_desc,\n                        --                               prspr_mandatory,\n                        --                               prspr_peril_limit,\n                        --                               prspr_peril_type,\n                        --                               prspr_si_or_limit,\n                        --                               prspr_sec_code,\n                        --                               prspr_excess_type,\n                        --                               prspr_excess,\n                        --                               prspr_excess_min,\n                        --                               prspr_excess_max,\n                        --                               prspr_expire_on_claim,\n                        --                               prspr_bind_code,\n                        --                               prspr_person_limit,\n                        --                               prspr_claim_limit,\n                        --                               prspr_desc,\n                        --                               prspr_bind_type,\n                        --                               prspr_sspr_code,\n                        --                               prspr_salvage_pct,\n                        --                               prspr_claim_excess_type,\n                        --                               prspr_tl_excess_type,\n                        --                               prspr_tl_excess,\n                        --                               prspr_tl_excess_min,\n                        --                               prspr_tl_excess_max,\n                        --                               prspr_pl_excess_type,\n                        --                               prspr_pl_excess,\n                        --                               prspr_pl_excess_min,\n                        --                               prspr_pl_excess_max,\n                        --                               prspr_claim_excess_min,\n                        --                               prspr_claim_excess_max,\n                        --                               prspr_depend_loss_type,\n                        --                             prspr_ttd_ben_pcts\n                        --                              )\n                        --                       VALUES (gin_prspr_code_seq.NEXTVAL, v_batch_no,\n                        --                               v_new_ipu_code,\n                        --                               cur_rsk_perils_rec.prspr_scl_code,\n                        --                               cur_rsk_perils_rec.prspr_sect_code,\n                        --                               cur_rsk_perils_rec.prspr_sect_sht_desc,\n                        --                               cur_rsk_perils_rec.prspr_per_code,\n                        --                               cur_rsk_perils_rec.prspr_per_sht_desc,\n                        --                               cur_rsk_perils_rec.prspr_mandatory,\n                        --                               cur_rsk_perils_rec.prspr_peril_limit,\n                        --                               cur_rsk_perils_rec.prspr_peril_type,\n                        --                               cur_rsk_perils_rec.prspr_si_or_limit,\n                        --                               cur_rsk_perils_rec.prspr_sec_code,\n                        --                               cur_rsk_perils_rec.prspr_excess_type,\n                        --                               cur_rsk_perils_rec.prspr_excess,\n                        --                               cur_rsk_perils_rec.prspr_excess_min,\n                        --                               cur_rsk_perils_rec.prspr_excess_max,\n                        --                               cur_rsk_perils_rec.prspr_expire_on_claim,\n                        --                               cur_rsk_perils_rec.prspr_bind_code,\n                        --                               cur_rsk_perils_rec.prspr_person_limit,\n                        --                               cur_rsk_perils_rec.prspr_claim_limit,\n                        --                               cur_rsk_perils_rec.prspr_desc,\n                        --                               cur_rsk_perils_rec.prspr_bind_type,\n                        --                               cur_rsk_perils_rec.prspr_sspr_code,\n                        --                               cur_rsk_perils_rec.prspr_salvage_pct,\n                        --                               cur_rsk_perils_rec.prspr_claim_excess_type,\n                        --                               cur_rsk_perils_rec.prspr_tl_excess_type,\n                        --                               cur_rsk_perils_rec.prspr_tl_excess,\n                        --                               cur_rsk_perils_rec.prspr_tl_excess_min,\n                        --                               cur_rsk_perils_rec.prspr_tl_excess_max,\n                        --                               cur_rsk_perils_rec.prspr_pl_excess_type,\n                        --                               cur_rsk_perils_rec.prspr_pl_excess,\n                        --                               cur_rsk_perils_rec.prspr_pl_excess_min,\n                        --                               cur_rsk_perils_rec.prspr_pl_excess_max,\n                        --                               cur_rsk_perils_rec.prspr_claim_excess_min,\n                        --                               cur_rsk_perils_rec.prspr_claim_excess_max,\n                        --                               cur_rsk_perils_rec.prspr_depend_loss_type,\n                        --                               cur_rsk_perils_rec.prspr_ttd_ben_pcts\n                        --                              );\n                        --               EXCEPTION\n                        --                  WHEN OTHERS\n                        --                  THEN\n                        --                     raise_error\n                        --                           ('Unable to insert risk level clause details, ...');\n                        --               END;\n                        NULL;\n                    END LOOP;\n\n                    FOR cur_limits_rec IN cur_limits (cur_ipu_rec.ipu_code)\n                    LOOP\n                        -- DO YOUR INSERTS INTO limits\n                        BEGIN\n                            INSERT INTO gin_policy_insured_limits (\n                                            pil_code,\n                                            pil_ipu_code,\n                                            pil_sect_code,\n                                            pil_sect_sht_desc,\n                                            pil_row_num,\n                                            pil_calc_group,\n                                            pil_limit_amt,\n                                            pil_prem_rate,\n                                            pil_prem_amt,\n                                            pil_rate_type,\n                                            pil_rate_desc,\n                                            pil_sect_type,\n                                            pil_sect_excess_detail,\n                                            pil_original_prem_rate,\n                                            pil_rate_change_remarks,\n                                            pil_change_done_by,\n                                            pil_comment,\n                                            pil_multiplier_rate,\n                                            pil_multiplier_div_factor,\n                                            pil_annual_premium,\n                                            pil_rate_div_fact,\n                                            pil_min_premium,\n                                            pil_desc,\n                                            pil_compute,\n                                            pil_used_limit,\n                                            pil_indem_prd,\n                                            pil_prd_type,\n                                            pil_indem_fstprd,\n                                            pil_indem_fstprd_pct,\n                                            pil_indem_remprd_pct,\n                                            pil_dual_basis,\n                                            pil_eml_pct,\n                                            pil_top_loc_rate,\n                                            pil_top_loc_div_fact,\n                                            pil_declaration_section,\n                                            pil_free_limit,\n                                            pil_prorata_full,\n                                            pil_prr_max_rate,\n                                            pil_prr_min_rate,\n                                            pil_free_limit_amt,\n                                            pil_prev_endr_prem_rate,\n                                            pil_prev_endr_rate_div_fact,\n                                            pil_prev_endr_mult_rate,\n                                            pil_prev_endr_mult_div_fact)\n                                     VALUES (\n                                                TO_NUMBER (\n                                                       TO_CHAR (SYSDATE,\n                                                                'RRRR')\n                                                    || gin_pil_code_seq.NEXTVAL),\n                                                v_new_ipu_code,\n                                                cur_limits_rec.pil_sect_code,\n                                                cur_limits_rec.pil_sect_sht_desc,\n                                                cur_limits_rec.pil_row_num,\n                                                cur_limits_rec.pil_calc_group,\n                                                cur_limits_rec.pil_limit_amt,\n                                                cur_limits_rec.pil_prem_rate,\n                                                cur_limits_rec.pil_prem_amt,\n                                                cur_limits_rec.pil_rate_type,\n                                                cur_limits_rec.pil_rate_desc,\n                                                cur_limits_rec.pil_sect_type,\n                                                cur_limits_rec.pil_sect_excess_detail,\n                                                cur_limits_rec.pil_original_prem_rate,\n                                                cur_limits_rec.pil_rate_change_remarks,\n                                                cur_limits_rec.pil_change_done_by,\n                                                cur_limits_rec.pil_comment,\n                                                cur_limits_rec.pil_multiplier_rate,\n                                                cur_limits_rec.pil_multiplier_div_factor,\n                                                cur_limits_rec.pil_annual_premium,\n                                                cur_limits_rec.pil_rate_div_fact,\n                                                cur_limits_rec.pil_min_premium,\n                                                cur_limits_rec.pil_desc,\n                                                cur_limits_rec.pil_compute,\n                                                cur_limits_rec.pil_used_limit,\n                                                cur_limits_rec.pil_indem_prd,\n                                                cur_limits_rec.pil_prd_type,\n                                                cur_limits_rec.pil_indem_fstprd,\n                                                cur_limits_rec.pil_indem_fstprd_pct,\n                                                cur_limits_rec.pil_indem_remprd_pct,\n                                                cur_limits_rec.pil_dual_basis,\n                                                cur_limits_rec.pil_eml_pct,\n                                                cur_limits_rec.pil_top_loc_rate,\n                                                cur_limits_rec.pil_top_loc_div_fact,\n                                                cur_limits_rec.pil_declaration_section,\n                                                cur_limits_rec.pil_free_limit,\n                                                NVL (\n                                                    cur_limits_rec.pil_prorata_full,\n                                                    'F'),\n                                                cur_limits_rec.pil_prr_max_rate,\n                                                cur_limits_rec.pil_prr_min_rate,\n                                                cur_limits_rec.pil_free_limit_amt,\n                                                cur_limits_rec.pil_prem_rate,\n                                                cur_limits_rec.pil_rate_div_fact,\n                                                cur_limits_rec.pil_multiplier_rate,\n                                                cur_limits_rec.pil_multiplier_div_factor);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    '  Error creating risk section record. Contact the system administrator...');\n                        END;\n                    END LOOP;\n\n                    --OPEN CLAUSES\n                    FOR cur_clauses_rec IN cur_clauses (cur_ipu_rec.ipu_code)\n                    LOOP\n                        -- DO YOUR INSERTS INTO clauses\n                        BEGIN\n                            INSERT INTO gin_policy_clauses (\n                                            pocl_sbcl_cls_code,\n                                            pocl_sbcl_scl_code,\n                                            pocl_cls_sht_desc,\n                                            pocl_pol_policy_no,\n                                            pocl_pol_ren_endos_no,\n                                            pocl_pol_batch_no,\n                                            pocl_ipu_code,\n                                            plcl_cls_type,\n                                            pocl_clause,\n                                            pocl_cls_editable,\n                                            pocl_new,\n                                            pocl_heading)\n                                 VALUES (cur_clauses_rec.pocl_sbcl_cls_code,\n                                         cur_clauses_rec.pocl_sbcl_scl_code,\n                                         cur_clauses_rec.pocl_cls_sht_desc,\n                                         p.pol_policy_no,\n                                         v_ends_no,\n                                         v_batch_no,\n                                         v_new_ipu_code,\n                                         cur_clauses_rec.plcl_cls_type,\n                                         cur_clauses_rec.pocl_clause,\n                                         cur_clauses_rec.pocl_cls_editable,\n                                         cur_clauses_rec.pocl_new,\n                                         cur_clauses_rec.pocl_heading);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    '  Error creating risk clauses record. Contact the system administrator...');\n                        END;\n                    END LOOP;\n\n                    FOR cur_perils_rec IN perils (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_pol_sec_perils (\n                                            gpsp_per_code,\n                                            gpsp_per_sht_desc,\n                                            gpsp_sec_sect_code,\n                                            gpsp_sect_sht_desc,\n                                            gpsp_sec_scl_code,\n                                            gpsp_ipp_code,\n                                            gpsp_ipu_code,\n                                            gpsp_limit_amt,\n                                            gpsp_excess_amt)\n                                 VALUES (cur_perils_rec.gpsp_per_code,\n                                         cur_perils_rec.gpsp_per_sht_desc,\n                                         cur_perils_rec.gpsp_sec_sect_code,\n                                         cur_perils_rec.gpsp_sect_sht_desc,\n                                         cur_perils_rec.gpsp_sec_scl_code,\n                                         cur_perils_rec.gpsp_ipp_code,\n                                         v_new_ipu_code,\n                                         cur_perils_rec.gpsp_limit_amt,\n                                         cur_perils_rec.gpsp_excess_amt);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    '  Error creating risk perils record. Contact the system administrator...');\n                        END;\n                    END LOOP;\n\n                    FOR risk_excesses_rec\n                        IN risk_excesses (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_risk_excess (re_ipu_code,\n                                                         re_excess_rate,\n                                                         re_excess_type,\n                                                         re_excess_rate_type,\n                                                         re_excess_min,\n                                                         re_excess_max,\n                                                         re_comments)\n                                     VALUES (\n                                                v_new_ipu_code,\n                                                risk_excesses_rec.re_excess_rate,\n                                                risk_excesses_rec.re_excess_type,\n                                                risk_excesses_rec.re_excess_rate_type,\n                                                risk_excesses_rec.re_excess_min,\n                                                risk_excesses_rec.re_excess_max,\n                                                risk_excesses_rec.re_comments);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    '  Error creating risk excess record. Contact the system administrator...');\n                        END;\n                    END LOOP;\n\n                    FOR schedules_rec IN schedules (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_policy_risk_schedules (\n                                            polrs_code,\n                                            polrs_ipu_code,\n                                            polrs_pol_batch_no,\n                                            polrs_schedule)\n                                     VALUES (\n                                                   TO_NUMBER (\n                                                       TO_CHAR (SYSDATE,\n                                                                'RRRR'))\n                                                || gin_polrs_code_seq.NEXTVAL,\n                                                v_new_ipu_code,\n                                                v_batch_no,\n                                                schedules_rec.polrs_schedule);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    ' Error creating risk schedules record. Contact the system administrator...');\n                        END;\n                    END LOOP;\n\n                    FOR risk_services_rec\n                        IN risk_services (cur_ipu_rec.ipu_code)\n                    LOOP\n                        BEGIN\n                            INSERT INTO gin_policy_risk_services (\n                                            prs_code,\n                                            prs_ipu_code,\n                                            prs_pol_batch_no,\n                                            prs_pol_policy_no,\n                                            prs_pol_endors_no,\n                                            prs_rss_code,\n                                            prs_rs_code,\n                                            prs_status)\n                                 VALUES (gin_prs_code_seq.NEXTVAL,\n                                         v_new_ipu_code,\n                                         v_batch_no,\n                                         p.pol_policy_no,\n                                         v_ends_no,\n                                         risk_services_rec.prs_rss_code,\n                                         risk_services_rec.prs_rs_code,\n                                         risk_services_rec.prs_status);\n                        --commit;\n                        EXCEPTION\n                            WHEN DUP_VAL_ON_INDEX\n                            THEN\n                                ROLLBACK;\n                                raise_error (\n                                    'System attempted to illegaly duplicate  risk services record. Please contact Turnkey Africa for support...');\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Unable to populate the risk services.');\n                        END;\n                    END LOOP;\n\n                    BEGIN\n                        gin_schedules_pkg.insert_spec_details (\n                            p.pol_pro_code,\n                            cur_ipu_rec.ipu_code,\n                            v_new_ipu_code,\n                            'Y',\n                            'RN-UW');\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            ROLLBACK;\n                            raise_error (\n                                ' Unable to insert specific details...');\n                    END;\n                END LOOP;\n            END LOOP;\n\n            BEGIN\n                UPDATE gin_policy_renewals\n                   SET pren_status = 'U'\n                 WHERE pren_pol_batch_no = p.pol_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_when_others (\n                        'Unbale to update the renewal status..2');\n            END;\n\n            UPDATE gin_policies\n               SET pol_renewed_rec = 'Y'\n             WHERE pol_batch_no = p.pol_batch_no;\n\n            BEGIN\n                --DEL_RENWL_TABLES_POL_DETAILS ( P.POL_POLICY_NO);\n                --MESSAGE('=TTTTTTT='||P.POL_batch_no);PAUSE;\n                BEGIN\n                    SELECT pol_policy_status\n                      INTO v_pol_status\n                      FROM gin_policies\n                     WHERE     pol_batch_no = p.pol_batch_no\n                           AND pol_policy_no = p.pol_policy_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_pol_status := 'RN';\n                --raise_error('Unable to retrieve policy status..');\n                END;\n\n                --MESSAGE(P.POL_batch_no);PAUSE;\n                --   commit;\n                --RAISE_ERROR(v_pol_status||';'||P.POL_batch_no);\n                --IF NVL(v_pol_status,'XX') IN  ('RN','RE') THEN\n\n                BEGIN\n                    UPDATE GIN_REN_POLICIES_LOGS\n                       SET POL_POLICY_RENEWED = 'Y',\n                           POL_RENEWED_BY = v_user,\n                           POL_RENEWED_DATE = TRUNC (SYSDATE)\n                     WHERE     POL_RENEWAL_BATCH = P.POL_RENEWAL_BATCH\n                           AND POL_BATCH_NO = P.POL_BATCH_NO;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                del_ren_pol_proc (p.pol_batch_no);\n            --END IF;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                           ' Unable to clear the renewal record...'\n                        || p.pol_batch_no\n                        || 'p.pol_batch_no');\n            END;\n        END LOOP;\n    END;",
        "assign_certificate": "PROCEDURE assign_certificate (\n        v_ipu_code                IN     NUMBER,\n        v_ct_code                 IN     NUMBER,\n        v_wef_date                IN     DATE,\n        v_wet_date                IN     DATE,\n        v_error                      OUT VARCHAR2,\n        v_add_edit                IN     VARCHAR DEFAULT 'A',\n        v_pass_no                 IN     VARCHAR2 DEFAULT NULL,\n        v_tonnage                 IN     VARCHAR2 DEFAULT NULL,\n        v_polc_cod                IN     NUMBER DEFAULT NULL,\n        v_polc_status             IN     VARCHAR2 DEFAULT NULL,\n        v_print_status            IN     VARCHAR2 DEFAULT NULL,\n        v_polc_reason_cancelled   IN     VARCHAR2 DEFAULT NULL)\n    IS\n        CURSOR rsk IS\n            SELECT ipu_code,\n                   ipu_property_id,\n                   ipu_wef,\n                   ipu_wet,\n                   ipu_pol_policy_no,\n                   ipu_pol_ren_endos_no,\n                   ipu_pol_batch_no,\n                   pol_agnt_agent_code,\n                   pol_agnt_sht_desc,\n                   gis_utilities.clnt_name (clnt_name, clnt_other_names)\n                       insured,\n                   ipu_covt_code,\n                   ipu_sec_scl_code,\n                   ipu_eff_wef,\n                   ipu_eff_wet,\n                   ipu_id,\n                   pol_brn_code,\n                   ipu_covt_sht_desc,\n                   ipu_prp_code,\n                   pol_uw_year,\n                   pol_policy_status,\n                   pol_binder_policy,\n                   pol_pro_code,\n                   ipu_prev_ipu_code,\n                   ipu_cover_suspended,\n                   ipu_risk_note\n              FROM gin_policies,\n                   gin_insured_property_unds,\n                   gin_policy_insureds,\n                   tqc_clients\n             WHERE     ipu_pol_batch_no = pol_batch_no\n                   AND ipu_polin_code = polin_code\n                   AND polin_prp_code = clnt_code\n                   AND ipu_code = v_ipu_code;\n\n        v_wef                         DATE;\n        v_wet                         DATE;\n        v_ct_sht_desc                 VARCHAR2 (25);\n        v_pol_status                  VARCHAR2 (5);\n        v_user                        VARCHAR2 (35)\n            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');\n        v_cnt                         NUMBER;\n        v_polc_code                   NUMBER;\n        v_cert_no                     VARCHAR2 (30);\n        v_comp_name                   VARCHAR2 (75)\n                                          := tqc_interfaces_pkg.organizationname (37, 'N');\n        v_uw_certs                    VARCHAR2 (5);\n        v_cert_sht_period             NUMBER;\n        v_rqrd_docs                   NUMBER;\n        v_ipu_eff_wet                 DATE;\n        v_pol_batch_no                NUMBER;\n        v_pol_prem_computed           VARCHAR2 (10);\n        v_pol_statusi                 VARCHAR2 (10);\n        v_polc_passenger_no           VARCHAR2 (10);\n        v_polc_passenger_no2          VARCHAR2 (10);\n        v_polc_tonnage                NUMBER;\n        v_polc_pll                    NUMBER;\n        v_backdating_of_certs_param   VARCHAR2 (1);\n        v_loaded_cert                 NUMBER;\n        v_loadedcert_no               VARCHAR2 (30);\n        v_ct_type                     VARCHAR2 (30);\n        v_print_date                  DATE;\n        v_polc_print_status           VARCHAR2 (1);\n        v_polc_loaded                 VARCHAR2 (1);\n        v_polc_lot_id                 VARCHAR2 (100);\n        v_gnr_ct_sht_desc             VARCHAR2 (100);\n        v_gnr_ct_code                 NUMBER;\n        v_printed_status              VARCHAR2 (1);\n    BEGIN\n        --RAISE_ERROR('IN');\n        /*IF gin_parameters_pkg.get_param_varchar ('ALLOW_CERTIFICATE_BALANCES') =\n                                                                            'N'\n        THEN\n           BEGIN\n              SELECT ipu_pol_batch_no\n                INTO v_pol_batch_no\n                FROM gin_insured_property_unds\n               WHERE ipu_code = v_ipu_code;\n\n              IF gis_accounts_utilities.get_pdr_balance (v_pol_batch_no) > 0\n              THEN\n                 v_error :=\n                    'Cannot Allocate Certificate when there is pending balance';\n                 RETURN;\n              END IF;\n           EXCEPTION\n              WHEN NO_DATA_FOUND\n              THEN\n                 NULL;\n           END;\n        END IF;*/\n\n        IF NVL (v_add_edit, 'A') = 'E'\n        THEN\n            /*CHECK WHETHER THE EDITTED CERTIFICATE WAS ALREADY PRINTED*/\n            BEGIN\n                SELECT polc_print_status\n                  INTO v_printed_status\n                  FROM gin_policy_certs\n                 WHERE polc_code = v_polc_cod;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_printed_status := 'N';\n            END;\n\n            /*INHIBIT CANCELLING OF A PRINTED CERTIFICATE*/\n            IF     NVL (v_printed_status, 'N') != 'P'\n               AND NVL (v_polc_status, 'N') = 'C'\n            THEN\n                v_error := 'You can only cancel a printed certificate....';\n                RETURN;\n            END IF;\n\n            /*INHIBIT EDITING OF PRINT STATUS OF AN ALREADY PRINTED STATUS*/\n            IF     NVL (v_printed_status, 'N') = 'P'\n               AND NVL (v_print_status, 'N') <> 'P'\n            THEN\n                v_error :=\n                    'You cannot change the print status of an already printed certificate..';\n                RETURN;\n            END IF;\n        END IF;\n\n        BEGIN\n            SELECT gin_parameters_pkg.get_param_varchar (\n                       'ALLOW_BACKDATING_OF_CERTS')\n              INTO v_backdating_of_certs_param\n              FROM DUAL;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_backdating_of_certs_param := 'N';\n            WHEN OTHERS\n            THEN\n                v_backdating_of_certs_param := 'N';\n        END;\n\n        BEGIN\n            IF v_pol_batch_no IS NOT NULL\n            THEN\n                SELECT pol_prem_computed, pol_policy_status\n                  INTO v_pol_prem_computed, v_pol_statusi\n                  FROM gin_policies\n                 WHERE pol_batch_no = v_pol_batch_no;\n\n                IF     NVL (v_pol_prem_computed, 'N') != 'Y'\n                   AND v_pol_statusi != 'CO'\n                THEN\n                    v_error :=\n                        'Please compute premium on policy. Changes have been made on the policy..';\n                    RETURN;\n                END IF;\n            END IF;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                raise_error ('Error Getting Policy Details');\n        END;\n\n        BEGIN\n            SELECT mcoms_carry_capacity, mcoms_tonnage\n              INTO v_polc_passenger_no, v_polc_tonnage\n              FROM gin_motor_commercial_sch\n             WHERE mcoms_ipu_code = v_ipu_code;\n        --AND NVL (mcoms_acc_limit, 'N') = 'N';\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                NULL;\n            WHEN OTHERS\n            THEN\n                ROLLBACK;\n                raise_error ('Error getting tonnage/no. of passengers...');\n                RETURN;\n        END;\n\n        BEGIN\n            SELECT pil_multiplier_rate\n              INTO v_polc_pll\n              FROM gin_policy_insured_limits\n             WHERE pil_sect_sht_desc = 'PLL' AND pil_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                NULL;\n            WHEN OTHERS\n            THEN\n                ROLLBACK;\n                raise_error ('Error getting PLL...');\n                RETURN;\n        END;\n\n        IF v_polc_pll IS NOT NULL\n        THEN\n            v_polc_passenger_no := v_polc_pll;\n            v_polc_passenger_no2 := v_polc_pll;\n        ELSE\n            v_polc_passenger_no2 := v_polc_passenger_no;\n            v_polc_passenger_no := NULL;\n        END IF;\n\n        IF NVL (v_polc_tonnage, 0) = 0\n        THEN\n            v_polc_tonnage := TO_NUMBER (v_tonnage);\n        END IF;\n\n        BEGIN\n            SELECT ipu_eff_wet\n              INTO v_ipu_eff_wet\n              FROM gin_insured_property_unds\n             WHERE ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_ipu_eff_wet := v_wet_date;\n        END;\n\n        --raise_error ('v_polc_passenger_no'||v_polc_passenger_no||'v_polc_pll'||v_polc_pll||'v_polc_tonnage'||v_polc_tonnage);\n        IF NVL (v_add_edit, 'A') = 'A' AND v_ct_code IS NOT NULL\n        THEN\n            FOR r IN rsk\n            LOOP\n                IF NVL (r.ipu_cover_suspended, 'N') = 'Y'\n                THEN\n                    raise_error (\n                        'Cannot assign a certificate to a suspended risk..');\n                END IF;\n\n                v_wef := v_wef_date;\n\n                IF v_wef IS NULL\n                THEN\n                    v_wef := r.ipu_wef;\n                END IF;\n\n                v_wet := v_wet_date;\n\n                IF NVL (v_backdating_of_certs_param, 'N') != 'Y'\n                THEN\n                    v_wef := GREATEST (v_wef, TRUNC (SYSDATE));\n\n                    IF v_wet IS NULL\n                    THEN\n                        v_wet := r.ipu_wet;\n                    END IF;\n\n                    IF    NVL (v_add_edit, 'A') = 'A'\n                       OR NVL (v_add_edit, 'A') = 'E'\n                    THEN\n                        IF v_wef IS NULL OR v_wet IS NULL\n                        THEN\n                            raise_error (\n                                   'Must specify certificates cover effective dates..'\n                                || v_add_edit);\n                        ELSIF v_wef >= v_wet\n                        THEN\n                            raise_error (\n                                   'The Wet date entered '\n                                || v_wet\n                                || ' is earlier than the ''Wef'' '\n                                || v_wef\n                                || ' Date.  Please Re-enter');\n                        ELSIF v_wef < GREATEST (r.ipu_wef, TRUNC (SYSDATE))\n                        THEN\n                            raise_error (\n                                '1 Certificate effective dates can not be before todays date or the risk cover from date..');\n                        ELSIF v_wet >\n                              GREATEST (v_ipu_eff_wet, TRUNC (SYSDATE))\n                        THEN\n                            raise_error (\n                                'You Cannot Have A Certificate For A Cover Period, Outside The Risk Cover');\n                        END IF;\n\n                        IF     NVL (v_print_status, 'P') = 'R'\n                           AND NVL (v_polc_status, 'A') = 'C'\n                        THEN\n                            raise_error (\n                                'You Cannot Cancel A Certificate Which is Ready for Printing');\n                        END IF;\n\n                        BEGIN\n                            SELECT ct_sht_desc, ct_type\n                              INTO v_ct_sht_desc, v_ct_type\n                              FROM gin_cert_types\n                             WHERE ct_code = v_ct_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                tqc_error_manager.raise_unanticipated (\n                                    'Error retrieving certicate type details.');\n                        END;\n                    END IF;\n                ELSE\n                    v_wef := r.ipu_wef;\n\n                    IF v_wet IS NULL\n                    THEN\n                        v_wet := r.ipu_wet;\n                    END IF;\n\n                    IF    NVL (v_add_edit, 'A') = 'A'\n                       OR NVL (v_add_edit, 'A') = 'E'\n                    THEN\n                        IF v_wef IS NULL OR v_wet IS NULL\n                        THEN\n                            raise_error (\n                                   'Must specify certificates cover effective dates..'\n                                || v_add_edit);\n                        ELSIF v_wef >= v_wet\n                        THEN\n                            raise_error (\n                                   'The Wet date entered '\n                                || v_wet\n                                || ' is earlier than the ''Wef'' '\n                                || v_wef\n                                || ' Date.  Please Re-enter');\n                        ELSIF v_wef < r.ipu_wef\n                        THEN\n                            raise_error (\n                                   'The Wet date entered '\n                                || v_wet\n                                || ' is earlier than the ''Wef'' '\n                                || v_wef\n                                || ' Date.  Please Re-enter');\n                        ELSIF v_wet >\n                              GREATEST (v_ipu_eff_wet, TRUNC (SYSDATE))\n                        THEN\n                            raise_error (\n                                'You Cannot Have A Certificate For A Cover Period, Outside The Risk Cover');\n                        END IF;\n\n                        IF     NVL (v_print_status, 'P') = 'R'\n                           AND NVL (v_polc_status, 'A') = 'C'\n                        THEN\n                            raise_error (\n                                'You Cannot Cancel A Certificate Which is Ready for Printing');\n                        END IF;\n\n                        BEGIN\n                            SELECT ct_sht_desc, ct_type\n                              INTO v_ct_sht_desc, v_ct_type\n                              FROM gin_cert_types\n                             WHERE ct_code = v_ct_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                tqc_error_manager.raise_unanticipated (\n                                    'Error retrieving certicate type details.');\n                        END;\n                    END IF;\n                END IF;\n\n                --RAISE_ERROR(v_wef||' = '||v_wet);\n                /*\n                BEGIN\n                select AGC_CODE,SCT_CT_SHT_DESC,AGC_CER_LOT_ID,AGC_CERT_YEAR\n                into v_agc_code,v_sct_ct_sht_desc,v_agc_cer_lot_id,v_agc_cert_year\n                from gin_subclass_cert_types, GIN_AGENT_CERTIFICATES\n                where SCT_CT_CODE = AGC_CT_CODE\n                and SCT_SCL_CODE = R.IPU_SEC_SCL_CODE\n                and sct_covt_code =R.IPU_COVT_CODE\n                AND SCT_CT_CODE = v_ct_code\n                and AGC_AGNT_AGENT_CODE =R.POL_AGNT_AGENT_CODE\n                AND (nvl(AGC_CERT_TO,0) - NVL(AGC_CERT_FROM,0) > 0 OR nvl(AGC_CERT_TO,0) - nvl(AGC_LAST_PRINTED_CERT,0)> 0)\n                AND AGC_CURRENT_STOCK = 'Y';\n                EXCEPTION\n                WHEN OTHERS THEN\n                    RAISE_ERROR('Error retrieving certicate type details.');\n                END;*/\n\n                --RAISE_ERROR(v_add_edit);\n                IF NVL (v_add_edit, 'A') = 'A'\n                THEN\n                    BEGIN\n                        SELECT COUNT (1)\n                          INTO v_cnt\n                          FROM gin_policy_certs\n                         WHERE     polc_ipu_id = r.ipu_id\n                               AND v_wef <= polc_wet\n                               AND (   polc_wef BETWEEN r.ipu_eff_wef\n                                                    AND r.ipu_eff_wet\n                                    OR polc_wet BETWEEN r.ipu_eff_wef\n                                                    AND r.ipu_eff_wet)\n                               AND polc_status != 'C';\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error checking for certificate duplicates..');\n                    END;\n\n                    IF NVL (v_cnt, 0) != 0\n                    THEN\n                        RETURN;\n                    --                  raise_error\n                    --                             (   'Must cancel all active certificates as at '\n                    --                              || TO_CHAR (v_wef, 'DD/MON/RRRR')\n                    --                              || ' before allocating another..'\n                    --                             );\n                    END IF;\n\n                    BEGIN\n                        v_uw_certs :=\n                            gin_parameters_pkg.get_param_varchar ('UW_CERTS');\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            v_uw_certs := 'N';\n                    END;\n\n                    BEGIN\n                        SELECT COUNT (1)\n                          INTO v_loaded_cert\n                          FROM gin_returned_certificates\n                         WHERE     NVL (gnr_allocated, 'N') != 'Y'\n                               AND gnr_risk_id = r.ipu_property_id\n                               AND gnr_risk_note = r.ipu_risk_note;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            v_loaded_cert := 0;\n                    END;\n\n                    IF v_loaded_cert = 1\n                    THEN\n                        BEGIN\n                            SELECT REGEXP_REPLACE (gnr_cert_no,\n                                                   '[^0-9]+',\n                                                   '')           gnr_cert_no,\n                                   gnr_issue_date,\n                                   gin_certificate_loading_pkg.get_cert_lot (\n                                       REGEXP_REPLACE (gnr_cert_no,\n                                                       '[^0-9]+',\n                                                       ''),\n                                       gnr_ct_code               /*v_ct_code*/\n                                                  ,\n                                       r.pol_agnt_agent_code)    polc_lot_id,\n                                   gnr_ct_sht_desc,\n                                   gnr_ct_code,\n                                   DECODE (gnr_status, 'S', 'C', 'P')\n                              INTO v_loadedcert_no,\n                                   v_print_date,\n                                   v_polc_lot_id,\n                                   v_gnr_ct_sht_desc,\n                                   v_gnr_ct_code,\n                                   v_polc_print_status\n                              FROM gin_returned_certificates\n                             WHERE     NVL (gnr_allocated, 'N') != 'Y'\n                                   AND gnr_risk_id = r.ipu_property_id\n                                   AND gnr_risk_note = r.ipu_risk_note;\n\n                            --                      v_polc_print_status:='P';\n                            v_polc_loaded := 'Y';\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        END;\n                    END IF;\n\n                    --raise_error('v_uw_certs='||v_uw_certs);\n                    IF NVL (v_uw_certs, 'N') = 'Y'\n                    THEN\n                        BEGIN\n                            v_cert_no :=\n                                gin_sequences_pkg.get_cert_number_format (\n                                    'C',\n                                    r.ipu_sec_scl_code,\n                                    r.pol_brn_code,\n                                    r.pol_uw_year,\n                                    r.pol_policy_status,\n                                    r.ipu_covt_code);\n                        --                  EXCEPTION\n                        --                     WHEN OTHERS\n                        --                     THEN\n                        --                        raise_error\n                        --                                 ('Error : Generating certificate number ...');\n                        --NULL;\n                        END;\n                    END IF;\n\n                    IF NVL (v_loaded_cert, 0) = 1\n                    THEN\n                        v_cert_no := v_loadedcert_no;\n                    END IF;\n\n                    v_pol_status := 'A';\n\n                    BEGIN\n                        SELECT certificate_no_seq.NEXTVAL\n                          INTO v_polc_code\n                          FROM DUAL;\n\n                        --            RAISE_eRROR(' v_cert_no '||v_cert_no);\n                        INSERT INTO gin_policy_certs (polc_issue_dt,\n                                                      polc_pol_policy_no,\n                                                      polc_pol_ren_endos_no,\n                                                      polc_pol_batch_no,\n                                                      polc_cer_cert_no,\n                                                      polc_ct_code,\n                                                      polc_agnt_agent_code,\n                                                      polc_agnt_sht_desc,\n                                                      polc_property_id,\n                                                      polc_ipu_code,\n                                                      polc_status,\n                                                      polc_print_dt,\n                                                      polc_reason_cancelled,\n                                                      polc_cancel_dt,\n                                                      polc_wef,\n                                                      polc_wet,\n                                                      polc_scl_code,\n                                                      polc_lot_id,\n                                                      polc_prefix,\n                                                      pocl_postfix,\n                                                      polc_cert_year,\n                                                      polc_code,\n                                                      polc_client_policy_no,\n                                                      polc_ct_sht_desc,\n                                                      polc_print_status,\n                                                      polc_check_cert,\n                                                      polc_check_cancel,\n                                                      polc_ipu_id,\n                                                      polc_prp_code,\n                                                      pocl_covt_sht_desc,\n                                                      polc_tonnage,\n                                                      polc_passenger_no,\n                                                      polc_alloc_by,\n                                                      polc_return_date,\n                                                      polc_return_prep_by,\n                                                      polc_return_remarks,\n                                                      polc_returned,\n                                                      polc_signed_date,\n                                                      polc_brn_code,\n                                                      polc_signed,\n                                                      polc_signed_by,\n                                                      polc_agc_code,\n                                                      polc_loaded)\n                             VALUES (NVL (v_print_date, TRUNC (SYSDATE)),\n                                     r.ipu_pol_policy_no,\n                                     r.ipu_pol_ren_endos_no,\n                                     r.ipu_pol_batch_no,\n                                     v_cert_no,\n                                     NVL (v_gnr_ct_code, v_ct_code),\n                                     r.pol_agnt_agent_code,\n                                     r.pol_agnt_sht_desc,\n                                     r.ipu_property_id,\n                                     r.ipu_code,\n                                     v_pol_status,\n                                     v_print_date,\n                                     v_polc_reason_cancelled,\n                                     NULL,\n                                     v_wef,\n                                     v_wet,\n                                     r.ipu_sec_scl_code,\n                                     v_polc_lot_id,\n                                     NULL,\n                                     NULL,\n                                     NULL,\n                                     v_polc_code,\n                                     r.ipu_pol_policy_no,\n                                     NVL (v_gnr_ct_sht_desc, v_ct_sht_desc),\n                                     NVL (v_polc_print_status, 'R'),\n                                     'Y',\n                                     0,\n                                     r.ipu_id,\n                                     r.ipu_prp_code,\n                                     r.ipu_covt_sht_desc,\n                                     v_polc_tonnage,\n                                     v_polc_passenger_no,\n                                     v_user,\n                                     NULL,\n                                     NULL,\n                                     NULL,\n                                     NULL,\n                                     NULL,\n                                     r.pol_brn_code,\n                                     'N',\n                                     NULL,\n                                     NULL,\n                                     v_polc_loaded);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                   'Error inserting certificate record..'\n                                || r.ipu_property_id\n                                || ';'\n                                || r.ipu_risk_note);\n                    END;\n\n                    BEGIN\n                        INSERT INTO gin_print_cert_queue (\n                                        pcq_pol_policy_no,\n                                        pcq_pol_ren_endos_no,\n                                        pcq_pol_batch_no,\n                                        pcq_ipu_code,\n                                        pcq_ct_code,\n                                        pcq_ct_sht_desc,\n                                        pcq_ipu_property_id,\n                                        pcq_date_time,\n                                        pcq_agnt_agent_code,\n                                        pcq_agnt_sht_desc,\n                                        pcq_polc_code,\n                                        pcq_client_policy_no,\n                                        pcq_code,\n                                        pcq_wet,\n                                        pcq_status,\n                                        pcq_client_name,\n                                        pcq_issued_by,\n                                        pcq_covt_sht_desc,\n                                        pcq_brn_code,\n                                        pcq_agc_code,\n                                        pcq_cert_no,\n                                        pcq_passenger_no,\n                                        pcq_tonnage)\n                             VALUES (r.ipu_pol_policy_no,\n                                     r.ipu_pol_ren_endos_no,\n                                     r.ipu_pol_batch_no,\n                                     r.ipu_code,\n                                     NVL (v_gnr_ct_code, v_ct_code),\n                                     v_ct_sht_desc,\n                                     r.ipu_property_id,\n                                     v_wef,\n                                     r.pol_agnt_agent_code,\n                                     r.pol_agnt_sht_desc,\n                                     v_polc_code,\n                                     r.ipu_pol_policy_no,\n                                     gin_pcq_code_seq.NEXTVAL,\n                                     v_wet,\n                                     'N',\n                                     r.insured,\n                                     v_comp_name,\n                                     r.ipu_covt_sht_desc,\n                                     r.pol_brn_code,\n                                     NULL,\n                                     v_cert_no,\n                                     v_polc_passenger_no,\n                                     v_polc_tonnage);\n\n                        BEGIN\n                            gin_stp_pkg.update_cert_details (\n                                r.ipu_code,\n                                v_polc_tonnage,\n                                v_polc_passenger_no2);\n                        --         RAISE_ERROR('IN  -----v_polc_passenger_no2 == '||v_polc_passenger_no2);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Error updating certificate details');\n                        END;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                'Error inserting certificate in print queue.');\n                    END;\n\n                    IF NVL (v_loaded_cert, 0) = 1\n                    THEN\n                        BEGIN\n                            gin_certificate_loading_pkg.update_cert_details (\n                                r.ipu_property_id,\n                                r.ipu_risk_note,\n                                r.ipu_code);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        END;\n                    END IF;\n\n                    IF v_cert_no IS NOT NULL\n                    THEN\n                        UPDATE gin_insured_property_unds\n                           SET ipu_cert_no = v_ct_type || v_cert_no\n                         WHERE ipu_code = r.ipu_code;\n                    END IF;\n\n                    IF     r.pol_policy_status = 'EN'\n                       AND (   r.ipu_code = r.ipu_prev_ipu_code\n                            OR r.ipu_cover_suspended = 'R')\n                    THEN\n                        insert_certificate_charge (r.ipu_pol_policy_no,\n                                                   r.ipu_pol_ren_endos_no,\n                                                   r.ipu_pol_batch_no,\n                                                   r.pol_pro_code,\n                                                   r.pol_binder_policy);\n                    END IF;\n                ELSIF     NVL (v_add_edit, 'A') = 'E'\n                      AND NVL (v_polc_status, 'A') = 'C'\n                THEN\n                    UPDATE gin_policy_certs\n                       SET polc_status = v_polc_status,\n                           polc_print_status = v_print_status\n                     WHERE polc_code = v_polc_cod;\n                END IF;\n            END LOOP;\n        ELSIF NVL (v_add_edit, 'A') = 'E'\n        THEN\n            BEGIN\n                SELECT param_value\n                  INTO v_cert_sht_period\n                  FROM gin_parameters\n                 WHERE param_name = 'CERT_SHT_PERIOD';\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_cert_sht_period := 0;\n            END;\n\n            IF NVL (v_cert_sht_period, 0) != 0\n            THEN\n                BEGIN\n                    SELECT COUNT (usdocr_id)\n                      INTO v_rqrd_docs\n                      FROM gin_uw_doc_reqrd_submtd\n                     WHERE     usdocr_ipu_code = v_ipu_code\n                           AND usdocr_submited = 'N'\n                           AND usdocr_docr_id IN\n                                   (SELECT docr_id\n                                      FROM gin_documents_reqrd\n                                     WHERE     docr_mandtry = 'Y'\n                                           AND docr_cert_doc = 'Y'\n                                           AND docr_level = 'UW'\n                                           AND docr_clp_code IN\n                                                   (SELECT ipu_clp_code\n                                                      FROM gin_policy_active_risk_vw\n                                                           a,\n                                                           gin_insured_property_unds\n                                                           b\n                                                     WHERE     a.ipu_code =\n                                                               b.ipu_code\n                                                           AND b.ipu_code =\n                                                               v_ipu_code\n                                                           AND ROWNUM = 1));\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        v_rqrd_docs := 0;\n                END;\n\n                IF     NVL (v_rqrd_docs, 0) > 0\n                   AND ABS (v_wet_date - v_wef_date) > v_cert_sht_period\n                THEN\n                    --                     SELECT polc_wet\n                    --                       INTO v_wet_date\n                    --                       FROM gin_policy_certs\n                    --                      WHERE polc_code = v_polc_cod;\n                    raise_error (\n                           'Cannot Issue certificate for a period of more than '\n                        || v_cert_sht_period\n                        || ' days without the mandatory documents!');\n                END IF;\n            END IF;\n\n            SELECT ipu_eff_wet\n              INTO v_ipu_eff_wet\n              FROM gin_insured_property_unds\n             WHERE ipu_code = v_ipu_code;\n\n            IF v_wet_date > v_ipu_eff_wet\n            THEN\n                --                  SELECT polc_wet\n                --                    INTO v_wet_date\n                --                    FROM gin_policy_certs\n                --                   WHERE polc_code = v_polc_cod;\n                raise_error (\n                    'You Cannot Have A Certificate For A Cover Period, Outside The Risk Cover');\n            END IF;\n\n            --raise_error(v_wef_date||'='||v_wet_date||'='||v_polc_cod);\n            UPDATE gin_policy_certs\n               SET polc_status = v_polc_status,\n                   polc_wef = v_wef_date,\n                   polc_wet = v_wet_date,\n                   polc_print_status = v_print_status\n             WHERE polc_code = v_polc_cod;\n\n            UPDATE gin_print_cert_queue\n               SET pcq_wet = NVL (v_wet_date, pcq_wet)\n             WHERE pcq_polc_code = v_polc_cod;\n        ELSIF NVL (v_add_edit, 'A') = 'D'\n        THEN\n            SELECT polc_cer_cert_no\n              INTO v_cert_no\n              FROM gin_policy_certs\n             WHERE polc_code = v_polc_cod;\n\n            IF NVL (v_cert_no, 'N') = 'N'\n            THEN\n                DELETE FROM gin_print_cert_queue\n                      WHERE pcq_polc_code = v_polc_cod;\n\n                DELETE FROM gin_policy_certs\n                      WHERE polc_code = v_polc_cod;\n            ELSE\n                raise_error (\n                    'Cannot delete Because A Certificate no. has already been allocated');\n            END IF;\n        END IF;\n    END;",
        "auto_assign_certs": "PROCEDURE auto_assign_certs (\n        v_ipu_code            IN NUMBER,\n        v_wef_date            IN DATE,\n        v_wet_date            IN DATE,\n        v_polc_passenger_no   IN NUMBER,\n        v_pol_add_edit           VARCHAR2,\n        v_tonnage                VARCHAR2 DEFAULT NULL)\n    IS\n        v_add_edit              VARCHAR2 (1);\n        v_ct_code               NUMBER;\n        v_ipu_id                NUMBER;\n        v_cer_cnt               NUMBER;\n        v_error                 VARCHAR2 (200);\n        v_scl_code              NUMBER;\n        v_covt_code             NUMBER;\n        v_curr_cert_wet         DATE;\n        v_cover_suspended       VARCHAR2 (3);\n        v_polc_tonnage          NUMBER;\n        v_polc_pll              NUMBER;\n        v_depend                VARCHAR (1);\n        v_pass                  NUMBER;\n        v_pro_code              NUMBER;\n        v_scr_name              VARCHAR2 (50);\n        v_pol_regional_endors   VARCHAR (1);\n    /*v_pol_regional_endors flag introduced to manage regional certificates GIS-12169*/\n    BEGIN\n        BEGIN\n            SELECT DISTINCT pol_pro_code, pol_regional_endors\n              INTO v_pro_code, v_pol_regional_endors\n              FROM gin_policies, gin_insured_property_unds\n             WHERE pol_batch_no = ipu_pol_batch_no AND ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error getting risk product details...');\n        END;\n\n        --RAISE_ERROR('HERE'||v_pol_regional_endors);\n        BEGIN\n            SELECT screen_name\n              INTO v_scr_name\n              FROM gin_screens, gin_products\n             WHERE     pro_unwr_scr_code = screen_code\n                   AND pro_code = v_pro_code\n                   AND screen_level = 'U';\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error product screen details...');\n        END;\n\n        IF v_scr_name IN ('UMOTCOM', 'UMOTPSV')\n        THEN\n            IF NVL (v_polc_passenger_no, 0) = 0\n            THEN\n                BEGIN\n                    SELECT TO_NUMBER (mcoms_carry_capacity), mcoms_tonnage\n                      INTO v_pass, v_polc_tonnage\n                      FROM gin_motor_commercial_sch\n                     WHERE mcoms_ipu_code = v_ipu_code;\n                --AND NVL (mcoms_acc_limit, 'N') = 'N';\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        NULL;\n                    WHEN OTHERS\n                    THEN\n                        ROLLBACK;\n                        raise_error (\n                            'Error getting tonnage/no. of passengers...');\n                        RETURN;\n                END;\n            ELSE\n                v_pass := v_polc_passenger_no;\n            END IF;\n\n            --RAISE_ERROR(' v_pass '||v_pass);\n            IF NVL (v_pol_add_edit, 'U') = 'E'\n            THEN\n                IF NVL (v_pass, 0) = 0\n                THEN\n                    NULL;\n                --RAISE_ERROR('Error getting the number of passengers...'||v_pol_add_edit);\n                END IF;\n            END IF;\n        END IF;\n\n        IF NVL (v_polc_tonnage, '0') = '0'\n        THEN\n            v_polc_tonnage := v_tonnage;\n        END IF;\n\n        --RAISE_ERROR('v_pass '||v_pass);\n        BEGIN\n            SELECT sct_ct_code,\n                   ipu_id,\n                   ipu_sec_scl_code,\n                   sct_covt_code,\n                   ipu_cover_suspended,\n                   ct_pass_dep\n              INTO v_ct_code,\n                   v_ipu_id,\n                   v_scl_code,\n                   v_covt_code,\n                   v_cover_suspended,\n                   v_depend\n              FROM gin_insured_property_unds,\n                   gin_subclass_cert_types,\n                   gin_cert_types\n             WHERE     sct_covt_code(+) = ipu_covt_code\n                   AND sct_scl_code(+) = ipu_sec_scl_code\n                   AND sct_ct_code = ct_code(+)\n                   AND ipu_code = v_ipu_code\n                   AND NVL (ct_cert_type, 'COVER') !=\n                       DECODE (NVL (v_pol_regional_endors, 'N'),\n                               'Y', 'COVER',\n                               'REGIONAL') /*v_pol_regional_endors flag introduced to manage\n              regional certificates GIS-12169*/\n                   AND DECODE (NVL (ct_pass_dep, 'N'),  'N', 0,  'Y', v_pass) BETWEEN DECODE (\n                                                                                          NVL (\n                                                                                              ct_pass_dep,\n                                                                                              'N'),\n                                                                                          'N', 0,\n                                                                                          'Y', ct_min_pass)\n                                                                                  AND DECODE (\n                                                                                          NVL (\n                                                                                              ct_pass_dep,\n                                                                                              'N'),\n                                                                                          'N', 0,\n                                                                                          'Y', ct_max_pass);\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                RAISE_ERROR ('error...' || SQLERRM);\n            WHEN OTHERS\n            THEN\n                IF NVL (v_depend, 'N') = 'N'\n                THEN\n                    NULL;\n                ELSE\n                    raise_error (\n                        'Error getting certificate....SCL== ' || v_ipu_code);\n                END IF;\n        END;\n\n        IF NVL (v_cover_suspended, 'N') = 'Y'\n        THEN\n            raise_error ('Cannot assign a certificate to a suspended risk..');\n        END IF;\n\n        --     RAISE_ERROR(' v_wef_date '||v_wef_date||' v_wet_date '||v_wet_date||' v_ct_code '||v_ct_code||' v_pass '||v_pass);\n        IF v_ct_code IS NOT NULL\n        THEN\n            BEGIN\n                SELECT COUNT (1), MAX (polc_wet)\n                  INTO v_cer_cnt, v_curr_cert_wet\n                  FROM gin_policy_certs\n                 WHERE     polc_ipu_id = v_ipu_id\n                       AND v_wef_date <= polc_wet\n                       AND (   polc_wef BETWEEN v_wef_date AND v_wet_date\n                            OR polc_wet BETWEEN v_wef_date AND v_wet_date)\n                       AND polc_status != 'C';\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                           'Error getting certificate....SCL== '\n                        || v_scl_code\n                        || ' ipu_cvt_code== '\n                        || v_covt_code);\n            END;\n\n            IF v_wef_date > v_wet_date\n            THEN\n                raise_error (\n                       'Certificate from date '\n                    || v_wef_date\n                    || 'cannot be greater than To Date :'\n                    || v_wet_date);\n            END IF;\n\n            -- raise_error (\n            --                 'Certificate from date '\n            --               || v_wef_date\n            --               || 'cannot be greater than To Date :'\n            --               || v_wet_date);\n            -- IF v_wet_date > TRUNC (SYSDATE) THEN -- this part is handled in the",
        "reinstate_section": "PROCEDURE reinstate_section (v_pol_batch_no          NUMBER,\n                                 v_ipu_code       IN     NUMBER,\n                                 v_date                  DATE,\n                                 v_user           IN     VARCHAR2,\n                                 v_rein_amt       IN     NUMBER,\n                                 v_dr_no             OUT NUMBER)\n    IS\n        v_cnt              NUMBER;\n        v_new_ipu_code     NUMBER;\n        v_new_polin_code   NUMBER;\n        v_exp_flag         VARCHAR2 (2);\n        v_open_cover       VARCHAR2 (2);\n        v_trans_no         NUMBER;\n        v_end_no           VARCHAR2 (45);\n        v_batchno          NUMBER;\n        v_prev_batch_no    NUMBER;\n        v_web_result       VARCHAR2 (50);\n        vexceptions        VARCHAR2 (50);\n        v_pol_rec          web_pol_tab := web_pol_tab ();\n        r_no               NUMBER;\n        v_status           VARCHAR2 (100);\n        v_itb_code         NUMBER;\n\n        CURSOR pol_cur IS\n            SELECT *\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n\n        CURSOR new_pol_cur (v_batchno NUMBER)\n        IS\n            SELECT *\n              FROM gin_policies\n             WHERE pol_batch_no = v_batchno;\n\n        CURSOR exceptions_cur (v_batchno NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_exceptions\n             WHERE gpe_pol_batch_no = v_batchno;\n\n        v_pol_no           VARCHAR2 (40);\n        v_new_pol_batch    NUMBER;\n    --AND NVL(PIL_EXPIRED,'N') = 'N';\n    --AND PIL_SECT_CODE=v_sect_code;\n    BEGIN\n        -- RAISE_APPLICATION_ERROR(-20001,'HERE');\n        SELECT COUNT (1)\n          INTO v_cnt\n          FROM gin_policies\n         WHERE     pol_policy_no = (SELECT pol_policy_no\n                                      FROM gin_policies\n                                     WHERE pol_batch_no = v_pol_batch_no)\n               AND pol_authosrised = 'N';\n\n        SELECT pol_batch_no\n          INTO v_prev_batch_no\n          FROM gin_policies\n         WHERE     pol_policy_no = (SELECT pol_policy_no\n                                      FROM gin_policies\n                                     WHERE pol_batch_no = v_pol_batch_no)\n               AND pol_current_status = 'A';\n\n        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n               || gin_itb_code_seq.NEXTVAL\n          INTO v_itb_code\n          FROM DUAL;\n\n        IF v_prev_batch_no IS NULL\n        THEN\n            raise_error ('An error Occured while reinstating .the policy..');\n        END IF;\n\n        IF NVL (v_cnt, 0) > 0\n        THEN\n            raise_error (\n                'There are unauthorised transactions on this policy,Reinstatement could not be completed');\n        END IF;\n\n        FOR pol IN pol_cur\n        LOOP\n            r_no := 1;\n            v_pol_rec := web_pol_tab ();\n            v_pol_rec.EXTEND (r_no);\n            v_pol_rec (r_no) :=\n                web_pol_rec (NULL,\n                             NULL,                              --POL_ENDOS_NO\n                             v_prev_batch_no,\n                             NULL,                   -- POL_AGNT_AGENT_CODE -,\n                             NULL,             --          POL_AGNT_SHT_DESC ,\n                             NULL,                 --          POL_BIND_CODE ,\n                             NULL,                    --          POL_WEF_DT ,\n                             NULL,                    --          POL_WET_DT ,\n                             NULL,                    --          POL_STATUS ,\n                             NULL,                  --          POL_CUR_CODE ,\n                             NULL,               --          POL_POLICY_TYPE ,\n                             NULL,                  --          POL_BRN_CODE ,\n                             NULL,                  --          POL_CUR_RATE ,\n                             NULL,               --          POL_COINSURANCE ,\n                             NULL,           --          POL_COINSURE_LEADER ,\n                             NULL,                --          POL_CUR_SYMBOL ,\n                             NULL,              --          POL_BRN_SHT_DESC ,\n                             NULL,                  --          POL_PRP_CODE ,\n                             NULL,              --          POL_PRP_SHT_DESC ,\n                             NULL,                  --          POL_PRO_CODE ,\n                             NULL,                  --          POL_YOUR_REF ,\n                             NULL,  --          POL_PROP_HOLDING_CO_PRP_CODE ,\n                             NULL,           --          POL_OTH_INT_PARTIES ,\n                             NULL,              --          POL_PRO_SHT_DESC ,\n                             NULL,             --          POL_BINDER_POLICY ,\n                             NULL,         --          POL_COINSURANCE_SHARE ,\n                             NULL,        --          POL_RI_AGENT_COMM_RATE ,\n                             NULL,          --          POL_RI_AGNT_SHT_DESC ,\n                             NULL,        --          POL_RI_AGNT_AGENT_CODE ,\n                             NULL,                --          POL_POLICY_DOC ,\n                             NULL,        --          POL_COMMISSION_ALLOWED ,\n                             NULL,                 --          POL_RENEWABLE ,\n                             NULL,               --          POL_SHORT_PERIOD,\n                             'EN',\n                             NULL,               --          POL_ACTION_TYPE ,\n                             pol.pol_policy_no, --          POL_GIS_POLICY_NO ,\n                             SYSDATE,\n                             NULL,                     -- POL_EXTEND_TO_DATE ,\n                             'A',\n                             NULL,          --          POL_INTERNAL_COMMENTS,\n                             NULL,                --          POL_INTRO_CODE ,\n                             NULL,                    --          POL_SOURCE ,\n                             NULL,        --          POL_CHEQUE_REQUISITION ,\n                             NULL,                  --          POL_COIN_FEE ,\n                             NULL,                 --          POL_BDIV_CODE ,\n                             NULL,            --          POL_CURR_RATE_TYPE ,\n                             NULL,                 --          POL_PMOD_CODE ,\n                             NULL,                 --          POL_SERIAL_NO ,\n                             NULL,                --          POL_COIN_GROSS ,\n                             NULL,              --          POL_SUB_AGN_CODE ,\n                             NULL,         --          POL_SUB_AGNT_SHT_DESC ,\n                             NULL,      --          POL_CLIENT_POLICY_NUMBER ,\n                             NULL,                  --          POL_AGA_CODE ,\n                             NULL,                 --          POL_CLNA_CODE ,\n                             NULL,              --          POL_SUB_AGA_CODE ,\n                             NULL,      --          POL_COIN_LEADER_COMBINED ,\n                             NULL,          --          POL_DECLARATION_TYPE ,\n                             NULL,           --          POL_MED_POLICY_TYPE ,\n                             NULL,           --          POL_FREQ_OF_PAYMENT ,\n                             NULL,             --          POL_FEE_ADMISSIBLE,\n                             NULL,                --          QUOT_CLNT_TYPE ,\n                             NULL,                  --          QUOT_PRS_CODE,\n                             NULL,             --          POL_MKTR_AGN_CODE ,\n                             'N',\n                             NULL,                        --POL_OLD_BATCH_NO ,\n                             NULL,                         --POL_POP_TAXES   ,\n                             'N',\n                             NULL,                    --          POL_LOADED ,\n                             NULL,                   --          POL_COMMENTS,\n                             NULL,     --          POL_BUSSINESS_GROWTH_TYPE ,\n                             NULL,                 --          POL_SUBAGENT  ,\n                             NULL,           --          POL_IPF_NOF_INSTALS ,\n                             NULL,                  --          POL_COAGENT  ,\n                             NULL,          --          POL_COAGENT_MAIN_PCT ,\n                             NULL,            --          POL_AGN_DISCOUNTED ,\n                             NULL,            --          POL_AGN_DISC_TYPE  ,\n                             NULL,              --          POL_AGN_DISCOUNT ,\n                             NULL,             --          POL_PIP_PF_CODE   ,\n                             NULL,            --          POL_NO_INSTALLMENT ,\n                             NULL,\n                             NULL,        --          POL_IPF_DOWN_PYMT_TYPE ,\n                             NULL,         --          POL_IPF_DOWN_PYMT_AMT ,\n                             NULL,           --          POL_IPF_INTEREST_RATE\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,                           --POL OPEN POLICY\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,                       --POL_INTERFACE_TYPE,\n                             NULL,               --POL_CHECKOFF_AGNT_SHT_DESC,\n                             NULL,                   --POL_CHECKOFF_AGNT_CODE,\n                             NULL,                   --POL_PYMT_FACI_AGNT_CODE\n                             NULL,                         --POL_OLD_POLICY_NO\n                             NULL,                             --POL_OLD_AGENT\n                             NULL,                           --POL_INSTLMT_DAY\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             pol.pol_admin_fee_allowed,\n                             pol.pol_cashback_appl,\n                             pol.pol_uw_only,\n                             pol.pol_debiting_type,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL,\n                             NULL);\n        END LOOP;\n\n        BEGIN\n            gin_policies_prc (v_pol_no,\n                              v_pol_rec,\n                              NULL,\n                              v_new_pol_batch,\n                              v_user);\n\n            UPDATE gin_policies\n               SET pol_commission_allowed = 'N'\n             WHERE pol_batch_no = v_new_pol_batch;\n\n            --         FOR i IN new_pol_cur (v_new_pol_batch)\n            --         LOOP\n            --            BEGIN\n            --               pop_taxes (i.pol_policy_no,\n            --                          i.pol_ren_endos_no,\n            --                          v_new_pol_batch,\n            --                          i.pol_pro_code,\n            --                          i.pol_binder_policy,\n            --                          'RE'\n            --                         );\n            --            EXCEPTION\n            --               WHEN OTHERS\n            --               THEN\n            --                  raise_error ('ERROR POPULATING TAXES..');\n            --            END;\n            --\n            --            BEGIN\n            --               pop_clauses (i.pol_policy_no,\n            --                            i.pol_ren_endos_no,\n            --                            v_new_pol_batch,\n            --                            i.pol_pro_code\n            --                           );\n            --            EXCEPTION\n            --               WHEN OTHERS\n            --               THEN\n            --                  raise_error ('Error populating mandatory clauses..');\n            --            END;\n            --         END LOOP;\n            gin_stp_pkg.populate_endos_rsk_dtls (v_prev_batch_no,\n                                                 'EN',\n                                                 v_new_pol_batch,\n                                                 v_ipu_code,\n                                                 'A',\n                                                 v_new_ipu_code,\n                                                 'R');\n\n            UPDATE gin_insured_property_unds\n               SET ipu_fp = v_rein_amt\n             WHERE ipu_code = v_new_ipu_code;\n\n            UPDATE gin_insured_property_unds\n               SET ipu_install_period =\n                       (SELECT ipu_install_period\n                          FROM gin_insured_property_unds\n                         WHERE ipu_code = v_ipu_code)\n             WHERE ipu_code = v_new_ipu_code;\n\n            BEGIN\n                gin_compute_prem_pkg.compute_premium (v_new_pol_batch);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error Computing premium for the policy..');\n            END;\n\n            --             BEGIN\n            --              GIN_UW_AUTHOR_PROC.pol_make_ready(v_new_pol_batch,null,vexceptions,v_user,'N','N');\n            --            EXCEPTION\n            --            WHEN OTHERS THEN\n            --             raise_error ('Error Computing premium for the policy..');\n            --            END;\n            FOR excepts IN exceptions_cur (v_new_pol_batch)\n            LOOP\n                UPDATE gin_policy_exceptions\n                   SET gpe_authorised = 'Y',\n                       gpe_authorised_by = v_user,\n                       gpe_authorised_date = SYSDATE\n                 WHERE gpe_pol_batch_no = v_new_pol_batch;\n            END LOOP;\n\n            BEGIN\n                gin_uw_author_proc.pol_auth_prc (v_new_pol_batch,\n                                                 v_user,\n                                                 'N',\n                                                 'N',\n                                                 SYSDATE,\n                                                 'Y',\n                                                 'Y',\n                                                 'N',\n                                                 NULL,\n                                                 v_itb_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error while authorizing the policy..');\n            END;\n\n            BEGIN\n                gin_uw_author_proc.auto_auth_reinsurance (v_new_pol_batch,\n                                                          v_user,\n                                                          v_status,\n                                                          'N',\n                                                          'Y',\n                                                          v_itb_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error while authorizing the policy..');\n            END;\n\n            UPDATE gin_policy_insured_limits\n               SET pil_prem_amt = v_rein_amt\n             WHERE     NVL (pil_expired, 'N') = 'Y'\n                   AND pil_ipu_code = v_new_ipu_code;\n\n            SELECT mtran_no\n              INTO v_dr_no\n              FROM gin_master_transactions\n             WHERE mtran_pol_batch_no = v_new_pol_batch;\n        --      EXCEPTION\n        --         WHEN OTHERS\n        --         THEN\n        --            raise_error ('Error Creating Endorsement ' || SQLERRM (SQLCODE));\n        END;\n    -- COMMIT;\n    END;",
        "update_docs_reqrd": "PROCEDURE update_docs_reqrd (v_ipu_code       NUMBER,\n                                 v_ipu_clp_code   NUMBER,\n                                 v_user_name      VARCHAR,\n                                 v_doc_level      VARCHAR)\n    IS\n        CURSOR v_docr IS\n            SELECT docr_id, docr_sht_desc, docr_desc\n              FROM gin_documents_reqrd\n             WHERE     docr_mandtry = 'Y'\n                   AND docr_level = v_doc_level\n                   AND docr_clp_code = v_ipu_clp_code\n                   AND docr_id NOT IN (SELECT usdocr_docr_id\n                                         FROM gin_uw_doc_reqrd_submtd\n                                        WHERE usdocr_ipu_code = v_ipu_code);\n    BEGIN\n        FOR v_docr_rec IN v_docr\n        LOOP\n            INSERT INTO gin_uw_doc_reqrd_submtd (usdocr_code,\n                                                 usdocr_docr_id,\n                                                 usdocr_ipu_code,\n                                                 usdocr_submited,\n                                                 usdocr_date_s,\n                                                 usdocr_user_receivd)\n                 VALUES (usdocr_id_seq.NEXTVAL,\n                         v_docr_rec.docr_id,\n                         v_ipu_code,\n                         'N',\n                         TRUNC (SYSDATE),\n                         v_user_name);\n        -- COMMIT;\n        END LOOP;\n    END update_docs_reqrd;",
        "delete_risk_section": "PROCEDURE delete_risk_section (v_pil_code   IN NUMBER,\n                                   v_batch_no   IN NUMBER)\n    IS\n        v_pol_binder          VARCHAR2 (2);\n        v_bindr_del_allowed   VARCHAR2 (10);\n    -- REMEMBER TO HANLDE BINDERS. WE DONT DELETE BINDER SECTIONS SOLOMON 05/07/2010\n    BEGIN\n        --RAISE_ERROR('v_pil_code'||v_pil_code);\n        BEGIN\n            SELECT pol_binder_policy\n              INTO v_pol_binder\n              FROM gin_policies\n             WHERE pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error determining the policy binder..3..');\n        END;\n\n        IF NVL (v_pol_binder, 'N') = 'Y'\n        THEN\n            v_bindr_del_allowed :=\n                gin_parameters_pkg.get_param_varchar ('BINDER_SECT_DEL');\n        END IF;\n\n        IF    NVL (v_pol_binder, 'N') != 'Y'\n           OR (    NVL (v_pol_binder, 'N') = 'Y'\n               AND NVL (v_bindr_del_allowed, 'N') = 'Y')\n        THEN\n            DELETE FROM gin_pol_med_fam_insured_limits\n                  WHERE pmfil_pil_code = v_pil_code;\n\n            DELETE gin_policy_insured_limits\n             WHERE pil_code = v_pil_code;\n        ELSE\n            tqc_error_manager.raise_unanticipated (\n                text_in   => 'Deleting Binder Section not allowed.');\n        END IF;\n    END;",
        "delete_ren_risk_section": "PROCEDURE delete_ren_risk_section (v_pil_code   IN NUMBER,\n                                       v_batch_no   IN NUMBER DEFAULT NULL)\n    IS\n    BEGIN\n        DELETE gin_ren_policy_insured_limits\n         WHERE pil_code = v_pil_code;\n    END;",
        "delete_coinsurer_agent": "PROCEDURE delete_coinsurer_agent (v_batch_no   IN NUMBER,\n                                      v_agn_code   IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_coinsurers\n         WHERE     coin_agnt_agent_code = v_agn_code\n               AND coin_pol_batch_no = v_batch_no;\n    END;",
        "delete_ren_coinsurer_agent": "PROCEDURE delete_ren_coinsurer_agent (v_batch_no   IN NUMBER,\n                                          v_agn_code   IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_ren_coinsurers\n         WHERE     coin_agnt_agent_code = v_agn_code\n               AND coin_pol_batch_no = v_batch_no;\n    END;",
        "update_ren_insured_details": "PROCEDURE update_ren_insured_details (v_polin_no   IN NUMBER,\n                                          v_pip_code   IN NUMBER)\n    IS\n    BEGIN\n        UPDATE gin_ren_policy_insureds\n           SET polin_interested_parties =\n                   NVL (v_pip_code, polin_interested_parties)\n         WHERE polin_code = v_polin_no;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error ('error updating insured details....');\n    END;",
        "update_insured_details": "PROCEDURE update_insured_details (v_polin_no   IN NUMBER,\n                                      v_pip_code   IN NUMBER)\n    IS\n    BEGIN\n        UPDATE gin_policy_insureds\n           SET polin_interested_parties =\n                   NVL (v_pip_code, polin_interested_parties)\n         WHERE polin_code = v_polin_no;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error ('error updating insured details....');\n    END;",
        "update_coinsurance_share": "PROCEDURE update_coinsurance_share (\n        v_pol_batch_no   IN NUMBER,\n        v_leader         IN VARCHAR2,\n        v_share          IN NUMBER,\n        v_fee            IN NUMBER,\n        v_fac_appl       IN VARCHAR2 DEFAULT 'N',\n        v_fac_pcnt       IN NUMBER DEFAULT NULL)\n    IS\n        v_cnt   NUMBER;\n    BEGIN\n        IF NVL (v_leader, 'N') = 'Y'\n        THEN\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_cnt\n                  FROM gin_coinsurers\n                 WHERE     coin_pol_batch_no = v_pol_batch_no\n                       AND NVL (coin_lead, 'N') = 'Y';\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_cnt := 0;\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error fetching the existing coinsurers...');\n            END;\n\n            IF NVL (v_cnt, 0) > 0\n            THEN\n                raise_error (\n                    'Error:- A coinsurance leader already exists. Please check....');\n            END IF;\n        END IF;\n\n        UPDATE gin_policies\n           SET pol_coinsurance_share = v_share,\n               --NVL(v_share, POL_COINSURANCE_SHARE),\n               pol_coin_fee = v_fee,               --NVL(v_fee, POL_COIN_FEE),\n               pol_coinsure_leader = v_leader,\n               POL_COIN_FAC_CESSION = NVL (v_fac_appl, 'N'),\n               POL_COIN_FAC_PC = v_fac_pcnt\n         --NVL(v_leader, POL_COINSURE_LEADER)\n         WHERE pol_batch_no = v_pol_batch_no;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error ('error updating insured details....');\n    END;",
        "update_ren_coinsurance_share": "PROCEDURE update_ren_coinsurance_share (\n        v_pol_batch_no   IN NUMBER,\n        v_leader         IN VARCHAR2,\n        v_share          IN NUMBER,\n        v_fee            IN NUMBER,\n        v_fac_appl       IN VARCHAR2 DEFAULT 'N',\n        v_fac_pcnt       IN NUMBER DEFAULT NULL)\n    IS\n        v_cnt   NUMBER;\n    BEGIN\n        IF NVL (v_leader, 'N') = 'Y'\n        THEN\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_cnt\n                  FROM gin_ren_coinsurers\n                 WHERE     coin_pol_batch_no = v_pol_batch_no\n                       AND NVL (coin_lead, 'N') = 'Y';\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_cnt := 0;\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error fetching the existing coinsurers...');\n            END;\n\n            IF NVL (v_cnt, 0) > 0\n            THEN\n                raise_error (\n                    'Error:- A coinsurance leader already exists. Please check....');\n            END IF;\n        END IF;\n\n        UPDATE gin_ren_policies\n           SET pol_coinsurance_share = v_share,\n               --NVL(v_share, POL_COINSURANCE_SHARE),\n               pol_coin_fee = v_fee,               --NVL(v_fee, POL_COIN_FEE),\n               pol_coinsure_leader = v_leader,\n               POL_COIN_FAC_CESSION = NVL (v_fac_appl, 'N'),\n               POL_COIN_FAC_PC = v_fac_pcnt\n         --NVL(v_leader, POL_COINSURE_LEADER)\n         WHERE pol_batch_no = v_pol_batch_no;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error ('error updating insured details....');\n    END;",
        "pop_single_clauses": "PROCEDURE pop_single_clauses (v_pol_policy_no   IN VARCHAR2,\n                                  v_pol_endos_no    IN VARCHAR2,\n                                  v_cls_code        IN VARCHAR2,\n                                  v_pol_batch_no    IN NUMBER,\n                                  v_pro_code        IN NUMBER)\n    IS\n        v_clause   CLOB;\n        v_cnt      NUMBER;\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND cls_code = v_cls_code\n                   AND ROWNUM = 1\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no);\n    BEGIN\n        FOR cls IN clause\n        LOOP\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM gin_policy_lvl_clauses\n                 WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND plcl_pol_batch_no = v_pol_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            IF NVL (v_cnt, 0) != 0\n            THEN\n                raise_error (\n                    'Error:- Clause already exists. Please check....');\n            END IF;\n\n            INSERT INTO gin_policy_lvl_clauses (plcl_sbcl_cls_code,\n                                                plcl_sbcl_scl_code,\n                                                plcl_pro_sht_desc,\n                                                plcl_pro_code,\n                                                plcl_pol_policy_no,\n                                                plcl_pol_ren_endos_no,\n                                                plcl_pol_batch_no,\n                                                plcl_sbcl_cls_sht_desc,\n                                                plcl_cls_type,  --PLCL_CLAUSE,\n                                                plcl_cls_editable,\n                                                plcl_new,\n                                                plcl_header,\n                                                plcl_rownum,\n                                                plcl_product_appl,\n                                                plcl_heading)\n                 VALUES (cls.sbcl_cls_code,\n                         cls.clp_scl_code,\n                         cls.clp_pro_sht_desc,\n                         cls.clp_pro_code,\n                         v_pol_policy_no,\n                         v_pol_endos_no,\n                         v_pol_batch_no,\n                         cls.sbcl_cls_sht_desc,\n                         cls.cls_type,                          --PLCL_CLAUSE,\n                         cls.cls_editable,\n                         'Y',\n                         NULL,\n                         NULL,\n                         'Y',\n                         cls.cls_heading);\n\n            IF NVL (cls.cls_editable, 'N') = 'Y'\n            THEN\n                SELECT cls_wording\n                  INTO v_clause\n                  FROM gin_clause\n                 WHERE cls_code = cls.sbcl_cls_code;\n\n                BEGIN\n                    v_clause :=\n                        merge_policies_text (v_pol_batch_no, v_clause);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                UPDATE gin_policy_lvl_clauses\n                   SET plcl_clause = v_clause\n                 WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND plcl_pol_batch_no = v_pol_batch_no;\n            END IF;\n        END LOOP;\n    END;",
        "edit_pol_clause": "PROCEDURE edit_pol_clause (\n        v_plcl_code        IN NUMBER,\n        v_pol_code         IN NUMBER,\n        v_clause           IN gin_policy_lvl_clauses.plcl_clause%TYPE,\n        v_clause_heading   IN VARCHAR2)\n    IS\n    BEGIN\n        IF tqc_parameters_pkg.get_org_type (37) NOT IN ('INS')\n        THEN\n            UPDATE gin_policy_lvl_clauses\n               SET plcl_clause = v_clause,              --NVL(null, QC_CLAUSE)\n                                           plcl_heading = v_clause_heading\n             WHERE     plcl_sbcl_cls_code = v_plcl_code\n                   AND plcl_pol_batch_no = v_pol_code;\n        ELSE\n            UPDATE gin_policy_lvl_clauses\n               SET plcl_clause = v_clause, plcl_heading = v_clause_heading --NVL(null, QC_CLAUSE)\n             WHERE     plcl_sbcl_cls_code = v_plcl_code\n                   AND plcl_pol_batch_no = v_pol_code;\n        END IF;\n    END;",
        "del_pol_clause": "PROCEDURE del_pol_clause (v_plcl_code IN NUMBER, v_pol_code IN NUMBER)\n    IS\n        v_cnt                NUMBER;\n        v_count              NUMBER;\n        v_trans_no           NUMBER;\n        v_trans_code         VARCHAR2 (5);\n        v_del_mand_clauses   VARCHAR2 (1) := 'N';\n    BEGIN\n        BEGIN\n            v_del_mand_clauses :=\n                gin_parameters_pkg.get_param_varchar ('DEL_MANDATORY_CLAUSE');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_del_mand_clauses := 'N';\n        END;\n\n        --  RAISE_eRROR('v_plcl_code= '||v_plcl_code||'v_pol_code=='||v_pol_code);\n        BEGIN\n            SELECT ggt_trans_no, ggt_btr_trans_code\n              INTO v_trans_no, v_trans_code\n              FROM gin_gis_transactions\n             WHERE ggt_pol_batch_no = v_pol_code;\n\n            SELECT COUNT (1)\n              INTO v_cnt\n              FROM gin_subcl_clauses\n             WHERE     sbcl_cls_code = v_plcl_code\n                   AND sbcl_cls_mandatory = 'Y'\n                   AND sbcl_scl_code IN\n                           (SELECT ipu_sec_scl_code\n                              FROM gin_insured_property_unds\n                             WHERE ipu_pol_batch_no = v_pol_code);\n        --         SELECT COUNT (1)\n        --           INTO v_count\n        --           FROM gin_scl_cvt_mand_clauses\n        --          WHERE scvtmc_cls_code = v_plcl_code AND scvmtc_cls_mandatory = 'Y'\n        --          AND (scvtmc_scl_code,scvtmc_sclcovt_code) IN (SELECT IPU_SEC_SCL_CODE,IPU_COVT_CODE\n        --                                                       FROM GIN_INSURED_PROPERTY_UNDS\n        --                                                       WHERE IPU_POL_BATCH_NO=v_pol_code);\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_cnt := 0;\n                v_count := 0;\n            WHEN OTHERS\n            THEN\n                v_cnt := 0;\n                v_count := 0;\n        END;\n\n        IF     NVL (v_del_mand_clauses, 'N') != 'Y'\n           AND (NVL (v_count, 0) != 0 OR NVL (v_cnt, 0) != 0)\n        THEN\n            raise_when_others ('Error.. Cannot Delete  Mandatory Clauses');\n        ELSE\n            IF NVL (v_count, 0) != 0 OR NVL (v_cnt, 0) != 0\n            THEN\n                BEGIN\n                    gin_manage_exceptions.proc_del_mand_clauses_except (\n                        v_pol_code,\n                        v_trans_no,\n                        TRUNC (SYSDATE),\n                        v_trans_code);\n                --                 EXCEPTION\n                --                    WHEN OTHERS\n                --                    THEN\n                --                       raise_when_others ('Error creating Mandatory exception ....');\n                END;\n\n                DELETE gin_policy_lvl_clauses\n                 WHERE     plcl_sbcl_cls_code = v_plcl_code\n                       AND plcl_pol_batch_no = v_pol_code;\n            ELSE\n                DELETE gin_policy_lvl_clauses\n                 WHERE     plcl_sbcl_cls_code = v_plcl_code\n                       AND plcl_pol_batch_no = v_pol_code;\n            END IF;\n        END IF;\n    END;",
        "del_pol_cover_type_clauses": "PROCEDURE del_pol_cover_type_clauses (v_batch_no    IN NUMBER,\n                                          v_covt_code   IN NUMBER)\n    IS\n    BEGIN\n        --raise_error(v_batch_no||'='||v_covt_code);\n        DELETE gin_policy_lvl_clauses\n         WHERE     plcl_pol_batch_no = v_batch_no\n               AND plcl_sbcl_cls_code IN\n                       (SELECT scvtmc_cls_code\n                          FROM gin_scl_cvt_mand_clauses\n                         WHERE scvtmc_sclcovt_code = v_covt_code);\n\n        DELETE gin_policy_subclass_clauses\n         WHERE     poscl_pol_batch_no = v_batch_no\n               AND poscl_cls_code IN\n                       (SELECT scvtmc_cls_code\n                          FROM gin_scl_cvt_mand_clauses\n                         WHERE scvtmc_sclcovt_code = v_covt_code);\n    END;",
        "pop_ren_single_clauses": "PROCEDURE pop_ren_single_clauses (v_pol_policy_no   IN VARCHAR2,\n                                      v_pol_endos_no    IN VARCHAR2,\n                                      v_cls_code        IN VARCHAR2,\n                                      v_pol_batch_no    IN NUMBER,\n                                      v_pro_code        IN NUMBER)\n    IS\n        v_clause   LONG;\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND cls_code = v_cls_code\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_ren_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n                   AND sbcl_scl_code IN\n                           (SELECT DISTINCT ipu_sec_scl_code\n                              FROM gin_ren_insured_property_unds\n                             WHERE ipu_pol_batch_no = v_pol_batch_no);\n    BEGIN\n        FOR cls IN clause\n        LOOP\n            INSERT INTO gin_ren_policy_lvl_clauses (plcl_sbcl_cls_code,\n                                                    plcl_sbcl_scl_code,\n                                                    plcl_pro_sht_desc,\n                                                    plcl_pro_code,\n                                                    plcl_pol_policy_no,\n                                                    plcl_pol_ren_endos_no,\n                                                    plcl_pol_batch_no,\n                                                    plcl_sbcl_cls_sht_desc,\n                                                    plcl_cls_type, --PLCL_CLAUSE,\n                                                    plcl_cls_editable,\n                                                    plcl_new,\n                                                    plcl_header,\n                                                    plcl_rownum,\n                                                    plcl_product_appl,\n                                                    plcl_heading)\n                 VALUES (cls.sbcl_cls_code,\n                         cls.clp_scl_code,\n                         cls.clp_pro_sht_desc,\n                         cls.clp_pro_code,\n                         v_pol_policy_no,\n                         v_pol_endos_no,\n                         v_pol_batch_no,\n                         cls.sbcl_cls_sht_desc,\n                         cls.cls_type,                          --PLCL_CLAUSE,\n                         cls.cls_editable,\n                         'Y',\n                         NULL,\n                         NULL,\n                         'Y',\n                         cls.cls_heading);\n\n            IF NVL (cls.cls_editable, 'N') = 'Y'\n            THEN\n                SELECT cls_wording\n                  INTO v_clause\n                  FROM gin_clause\n                 WHERE cls_code = cls.sbcl_cls_code;\n\n                BEGIN\n                    v_clause :=\n                        merge_policies_text (v_pol_batch_no, v_clause);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                UPDATE gin_ren_policy_lvl_clauses\n                   SET plcl_clause = v_clause\n                 WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND plcl_pol_batch_no = v_pol_batch_no;\n            END IF;\n        END LOOP;\n    END;",
        "edit_ren_pol_clause": "PROCEDURE edit_ren_pol_clause (v_plcl_code        IN NUMBER,\n                                   v_pol_code         IN NUMBER,\n                                   v_clause           IN VARCHAR2,\n                                   v_clause_heading   IN VARCHAR2)\n    IS\n    BEGIN\n        UPDATE gin_ren_policy_lvl_clauses\n           SET plcl_clause = v_clause, plcl_heading = v_clause_heading --NVL(null, QC_CLAUSE)\n         WHERE     plcl_sbcl_cls_code = v_plcl_code\n               AND plcl_pol_batch_no = v_pol_code;\n    END;",
        "del_ren_pol_clause": "PROCEDURE del_ren_pol_clause (v_plcl_code   IN NUMBER,\n                                  v_pol_code    IN NUMBER)\n    IS\n        v_cnt          NUMBER;\n        v_count        NUMBER;\n        v_trans_no     NUMBER;\n        v_trans_code   VARCHAR2 (5);\n    BEGIN\n        BEGIN\n            SELECT ggt_trans_no, ggt_btr_trans_code\n              INTO v_trans_no, v_trans_code\n              FROM gin_gis_transactions\n             WHERE ggt_pol_batch_no = v_pol_code;\n\n            SELECT COUNT (1)\n              INTO v_cnt\n              FROM gin_subcl_clauses\n             WHERE sbcl_cls_code = v_plcl_code;\n\n            SELECT COUNT (1)\n              INTO v_count\n              FROM gin_scl_cvt_mand_clauses\n             WHERE scvtmc_cls_code = v_plcl_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_cnt := 0;\n                v_count := 0;\n            WHEN OTHERS\n            THEN\n                v_cnt := 0;\n                v_count := 0;\n        END;\n\n        IF NVL (v_count, 0) != 0 OR NVL (v_cnt, 0) != 0\n        THEN\n            BEGIN\n                gin_manage_exceptions.proc_del_mand_clauses_except (\n                    v_pol_code,\n                    v_trans_no,\n                    TRUNC (SYSDATE),\n                    v_trans_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_when_others (\n                        'Error creating Mandatory exception ....');\n            END;\n        ELSE\n            DELETE gin_ren_policy_lvl_clauses\n             WHERE     plcl_sbcl_cls_code = v_plcl_code\n                   AND plcl_pol_batch_no = v_pol_code;\n        END IF;\n    END;",
        "insert_certificate_charge": "PROCEDURE insert_certificate_charge (\n        v_pol_policy_no   IN VARCHAR2,\n        v_pol_endos_no    IN VARCHAR2,\n        v_pol_batch_no    IN NUMBER,\n        v_pro_code        IN NUMBER,\n        v_pol_binder      IN VARCHAR2 DEFAULT 'N')\n    IS\n        v_cert_charge      VARCHAR2 (5);\n        v_cert_tran_code   VARCHAR2 (15);\n        v_tax_type         VARCHAR2 (10);\n        v_cnt              NUMBER;\n        v_taxr_rate        NUMBER;\n    BEGIN\n        v_cert_charge :=\n            gin_parameters_pkg.get_param_varchar ('CERTIFICATE_CHARGE_ON_EN');\n        DBMS_OUTPUT.put_line ('v_cert_charge' || v_cert_charge);\n\n        IF NVL (v_cert_charge, 'N') = 'Y'\n        THEN\n            v_cert_tran_code :=\n                gin_parameters_pkg.get_param_varchar (\n                    'CERTIFICATE_CHARGE_TRAN_CODE');\n            DBMS_OUTPUT.put_line ('v_cert_tran_code' || v_cert_tran_code);\n\n            IF v_cert_tran_code IS NOT NULL\n            THEN\n                BEGIN\n                    SELECT trnt_type, taxr_rate\n                      INTO v_tax_type, v_taxr_rate\n                      FROM gin_taxes_types_view\n                     WHERE taxr_trnt_code = v_cert_tran_code;\n                EXCEPTION\n                    WHEN NO_DATA_FOUND\n                    THEN\n                        raise_error (\n                               'Certificate charge code '\n                            || v_cert_tran_code\n                            || ' not defined in setups..');\n                    WHEN TOO_MANY_ROWS\n                    THEN\n                        raise_error (\n                               'More than one Certificate charge code '\n                            || v_cert_tran_code\n                            || '  defined in setups..');\n                END;\n\n                DBMS_OUTPUT.put_line ('v_tax_type' || v_tax_type);\n\n                IF v_tax_type IS NOT NULL\n                THEN\n                    SELECT COUNT (1)\n                      INTO v_cnt\n                      FROM gin_policy_taxes\n                     WHERE     ptx_pol_batch_no = v_pol_batch_no\n                           AND ptx_trac_trnt_code = v_cert_tran_code;\n\n                    DBMS_OUTPUT.put_line ('v_cnt' || v_cnt);\n\n                    IF NVL (v_cnt, 0) = 0\n                    THEN\n                        pop_single_taxes (v_pol_policy_no,\n                                          v_pol_endos_no,\n                                          v_pol_batch_no,\n                                          v_pro_code,\n                                          v_pol_binder,\n                                          v_cert_tran_code,\n                                          v_tax_type,\n                                          'UP',\n                                          'P',\n                                          v_taxr_rate,\n                                          v_taxr_rate,\n                                          'A');\n                    END IF;\n                END IF;\n            END IF;\n        END IF;\n    END;",
        "pop_single_taxes": "PROCEDURE pop_single_taxes (v_pol_policy_no    IN VARCHAR2,\n                                v_pol_endos_no     IN VARCHAR2,\n                                v_pol_batch_no     IN NUMBER,\n                                v_pro_code         IN NUMBER,\n                                v_pol_binder       IN VARCHAR2 DEFAULT 'N',\n                                v_taxr_trnt_code   IN VARCHAR2,\n                                v_tax_type         IN VARCHAR2,\n                                v_trans_lvl        IN VARCHAR2,\n                                v_comp_lvl         IN VARCHAR2,\n                                v_rate             IN NUMBER,\n                                v_amt              IN NUMBER,\n                                v_add_edit         IN VARCHAR2,\n                                v_override_rate    IN VARCHAR2 DEFAULT 'N')\n    IS\n        v_pol_policy_type               VARCHAR2 (1);\n        v_allowsdonfacrein_param        VARCHAR2 (1);\n        v_allowsdoncoinfollower_param   VARCHAR2 (1);\n        v_pol_coinsurance               VARCHAR2 (1);\n        v_pol_coinsure_leader           VARCHAR2 (1);\n\n        CURSOR sub_class IS\n            SELECT ipu_sec_scl_code\n              FROM gin_insured_property_unds\n             WHERE ipu_pol_batch_no = v_pol_batch_no;\n\n        CURSOR taxes (v_scl_code NUMBER)\n        IS\n            SELECT *\n              FROM gin_taxes_types_view\n             WHERE     (   scl_code IS NULL\n                        OR scl_code IN\n                               (SELECT clp_scl_code\n                                  FROM gin_product_sub_classes\n                                 WHERE     clp_pro_code = v_pro_code\n                                       AND clp_scl_code = v_scl_code))\n                   --AND TRNT_MANDATORY = 'Y'\n                   --AND TRNT_TYPE IN ('UTX','SD','UTL','EX','PHFUND')\n                   AND taxr_trnt_code = v_taxr_trnt_code\n                   AND taxr_trnt_code NOT IN\n                           (SELECT ptx_trac_trnt_code\n                              FROM gin_policy_taxes\n                             WHERE ptx_pol_batch_no = v_pol_batch_no);\n\n        CURSOR edit_taxes (v_scl_code NUMBER)\n        IS\n            SELECT *\n              FROM gin_taxes_types_view\n             WHERE     (   scl_code IS NULL\n                        OR scl_code IN\n                               (SELECT clp_scl_code\n                                  FROM gin_product_sub_classes\n                                 WHERE     clp_pro_code = v_pro_code\n                                       AND clp_scl_code = v_scl_code))\n                   AND taxr_trnt_code = v_taxr_trnt_code;\n    BEGIN\n        BEGIN\n            SELECT pol_policy_type, pol_coinsurance, pol_coinsure_leader\n              INTO v_pol_policy_type,\n                   v_pol_coinsurance,\n                   v_pol_coinsure_leader\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error Checking the policy ...');\n        END;\n\n        BEGIN\n            v_allowsdonfacrein_param :=\n                gin_parameters_pkg.get_param_varchar ('ALLOW_SD_ON_FACREIN');\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_allowsdonfacrein_param := 'N';\n            WHEN OTHERS\n            THEN\n                v_allowsdonfacrein_param := 'N';\n        END;\n\n        BEGIN\n            v_allowsdoncoinfollower_param :=\n                gin_parameters_pkg.get_param_varchar (\n                    'ALLOW_SD_ON_COINSURER_FOLLOWER');\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_allowsdoncoinfollower_param := 'N';\n            WHEN OTHERS\n            THEN\n                v_allowsdoncoinfollower_param := 'N';\n        END;\n\n        FOR sub_class_rec IN sub_class\n        LOOP\n            FOR taxes_rec IN taxes (sub_class_rec.ipu_sec_scl_code)\n            LOOP\n                IF     NVL (v_allowsdonfacrein_param, 'N') = 'N'\n                   AND NVL (v_pol_policy_type, 'N') = 'F'\n                   AND taxes_rec.trnt_type = 'SD'\n                THEN\n                    raise_error (\n                        'You cannot add Stamp Duty on this policy...');\n                END IF;\n\n                IF     NVL (v_allowsdoncoinfollower_param, 'N') = 'N'\n                   AND NVL (v_pol_coinsurance, 'N') = 'Y'\n                   AND NVL (v_pol_coinsure_leader, 'N') = 'N'\n                   AND taxes_rec.trnt_type = 'SD'\n                THEN\n                    raise_error (\n                        'You cannot add Stamp Duty on this policy...');\n                END IF;\n\n                IF v_add_edit = 'A'\n                THEN\n                    IF NOT (    taxes_rec.trnt_type = 'SD'\n                            AND NVL (v_pol_binder, 'N') = 'Y')\n                    THEN\n                        BEGIN\n                            INSERT INTO gin_policy_taxes (\n                                            ptx_trac_scl_code,\n                                            ptx_trac_trnt_code,\n                                            ptx_pol_policy_no,\n                                            ptx_pol_ren_endos_no,\n                                            ptx_pol_batch_no,\n                                            ptx_rate,\n                                            ptx_amount,\n                                            ptx_tl_lvl_code,\n                                            ptx_rate_type,\n                                            ptx_rate_desc,\n                                            ptx_endos_diff_amt,\n                                            ptx_tax_type,\n                                            ptx_risk_pol_level,\n                                            ptx_override,\n                                            ptx_override_amt)\n                                 VALUES (taxes_rec.taxr_scl_code,\n                                         taxes_rec.trnt_code,\n                                         v_pol_policy_no,\n                                         v_pol_endos_no,\n                                         v_pol_batch_no,\n                                         NVL (v_rate, taxes_rec.taxr_rate),\n                                         v_amt,\n                                         NVL (v_trans_lvl, 'UP'),\n                                         taxes_rec.taxr_rate_type,\n                                         taxes_rec.taxr_rate_desc,\n                                         NULL,\n                                         taxes_rec.trnt_type,\n                                         NVL (v_comp_lvl, 'P'),\n                                         v_override_rate,\n                                         v_amt);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error ('Error applying taxes..');\n                        END;\n                    END IF;\n                ELSIF v_add_edit = 'E'\n                THEN\n                    BEGIN\n                        UPDATE gin_policy_taxes\n                           SET ptx_trac_scl_code = taxes_rec.taxr_scl_code,\n                               ptx_pol_policy_no = v_pol_policy_no,\n                               ptx_pol_ren_endos_no = ptx_pol_ren_endos_no,\n                               ptx_rate = NVL (v_rate, taxes_rec.taxr_rate),\n                               ptx_amount = v_amt,\n                               ptx_tl_lvl_code = NVL (v_trans_lvl, 'UP'),\n                               ptx_rate_type = taxes_rec.taxr_rate_type,\n                               ptx_rate_desc = taxes_rec.taxr_rate_desc,\n                               ptx_endos_diff_amt = NULL,\n                               ptx_tax_type = taxes_rec.trnt_type,\n                               ptx_risk_pol_level = NVL (v_comp_lvl, 'P'),\n                               ptx_override = v_override_rate,\n                               ptx_override_amt = v_amt\n                         WHERE     ptx_pol_batch_no = v_pol_batch_no\n                               AND ptx_trac_trnt_code = v_taxr_trnt_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error applying taxes..');\n                    END;\n                END IF;\n            END LOOP;\n        END LOOP;\n\n        FOR sub_class_rec IN sub_class\n        LOOP\n            FOR taxes_rec IN edit_taxes (sub_class_rec.ipu_sec_scl_code)\n            LOOP\n                IF v_add_edit = 'E'\n                THEN\n                    BEGIN\n                        UPDATE gin_policy_taxes\n                           SET ptx_trac_scl_code = taxes_rec.taxr_scl_code,\n                               ptx_pol_policy_no = v_pol_policy_no,\n                               ptx_pol_ren_endos_no = ptx_pol_ren_endos_no,\n                               ptx_rate = NVL (v_rate, taxes_rec.taxr_rate),\n                               ptx_amount = v_amt,\n                               ptx_tl_lvl_code = NVL (v_trans_lvl, 'UP'),\n                               ptx_rate_type = taxes_rec.taxr_rate_type,\n                               ptx_rate_desc = taxes_rec.taxr_rate_desc,\n                               ptx_endos_diff_amt = NULL,\n                               ptx_tax_type = taxes_rec.trnt_type,\n                               ptx_risk_pol_level = NVL (v_comp_lvl, 'P'),\n                               ptx_override = v_override_rate,\n                               ptx_override_amt = v_amt\n                         WHERE     ptx_pol_batch_no = v_pol_batch_no\n                               AND ptx_trac_trnt_code = v_taxr_trnt_code;\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error applying taxes..');\n                    END;\n                END IF;\n            END LOOP;\n        END LOOP;\n    END;",
        "pop_ren_single_taxes": "PROCEDURE pop_ren_single_taxes (\n        v_pol_policy_no    IN VARCHAR2,\n        v_pol_endos_no     IN VARCHAR2,\n        v_pol_batch_no     IN NUMBER,\n        v_pro_code         IN NUMBER,\n        v_pol_binder       IN VARCHAR2 DEFAULT 'N',\n        v_taxr_trnt_code   IN VARCHAR2,\n        v_tax_type         IN VARCHAR2,\n        v_trans_lvl        IN VARCHAR2,\n        v_comp_lvl         IN VARCHAR2,\n        v_rate             IN NUMBER,\n        v_amt              IN NUMBER,\n        v_add_edit         IN VARCHAR2,\n        v_override_rate    IN VARCHAR2 DEFAULT 'N')\n    IS\n        CURSOR taxes IS\n            SELECT *\n              FROM gin_taxes_types_view\n             WHERE     (   scl_code IS NULL\n                        OR scl_code IN (SELECT clp_scl_code\n                                          FROM gin_product_sub_classes\n                                         WHERE clp_pro_code = v_pro_code))\n                   --AND TRNT_MANDATORY = 'Y'\n                   --AND TRNT_TYPE IN ('UTX','SD','UTL','EX','PHFUND')\n                   AND taxr_trnt_code = v_taxr_trnt_code;\n    /*AND taxr_trnt_code NOT IN\n        (SELECT ptx_trac_trnt_code\n           FROM gin_ren_policy_taxes\n          WHERE ptx_pol_batch_no = v_pol_batch_no)*/\n    BEGIN\n        FOR taxes_rec IN taxes\n        LOOP\n            IF v_add_edit = 'A'\n            THEN\n                IF NOT (    taxes_rec.trnt_type = 'SD'\n                        AND NVL (v_pol_binder, 'N') = 'Y')\n                THEN\n                    BEGIN\n                        INSERT INTO gin_ren_policy_taxes (\n                                        ptx_trac_scl_code,\n                                        ptx_trac_trnt_code,\n                                        ptx_pol_policy_no,\n                                        ptx_pol_ren_endos_no,\n                                        ptx_pol_batch_no,\n                                        ptx_rate,\n                                        ptx_amount,\n                                        ptx_tl_lvl_code,\n                                        ptx_rate_type,\n                                        ptx_rate_desc,\n                                        ptx_endos_diff_amt,\n                                        ptx_tax_type,\n                                        ptx_risk_pol_level,\n                                        ptx_override,\n                                        ptx_override_amt)\n                             VALUES (taxes_rec.taxr_scl_code,\n                                     taxes_rec.trnt_code,\n                                     v_pol_policy_no,\n                                     v_pol_endos_no,\n                                     v_pol_batch_no,\n                                     v_rate,\n                                     v_amt,\n                                     v_trans_lvl,\n                                     taxes_rec.taxr_rate_type,\n                                     taxes_rec.taxr_rate_desc,\n                                     NULL,\n                                     v_tax_type,\n                                     v_comp_lvl,\n                                     v_override_rate,\n                                     v_amt);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error applying taxes..');\n                    END;\n                END IF;\n            ELSIF v_add_edit = 'E'\n            THEN\n                BEGIN\n                    UPDATE gin_ren_policy_taxes\n                       SET ptx_trac_scl_code = taxes_rec.taxr_scl_code,\n                           ptx_pol_policy_no = v_pol_policy_no,\n                           ptx_pol_ren_endos_no = ptx_pol_ren_endos_no,\n                           ptx_rate = v_rate,\n                           ptx_amount = v_amt,\n                           ptx_tl_lvl_code = v_trans_lvl,\n                           ptx_rate_type = taxes_rec.taxr_rate_type,\n                           ptx_rate_desc = taxes_rec.taxr_rate_desc,\n                           ptx_endos_diff_amt = NULL,\n                           ptx_tax_type = v_tax_type,\n                           ptx_risk_pol_level = v_comp_lvl,\n                           ptx_override = v_override_rate,\n                           ptx_override_amt = v_amt\n                     WHERE     ptx_pol_batch_no = v_pol_batch_no\n                           AND ptx_trac_trnt_code = v_taxr_trnt_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error applying taxes..');\n                END;\n            END IF;\n        END LOOP;\n    END;",
        "edit_pol_taxes": "PROCEDURE edit_pol_taxes (v_trnt_code   IN VARCHAR2,\n                              v_pol_code    IN NUMBER,\n                              v_tax_type    IN VARCHAR2,\n                              v_trans_lvl   IN VARCHAR2,\n                              v_comp_lvl    IN VARCHAR2,\n                              v_rate        IN NUMBER,\n                              v_amt         IN NUMBER)\n    IS\n    BEGIN\n        UPDATE gin_policy_taxes\n           SET ptx_rate = NVL (v_rate, ptx_rate),\n               ptx_amount = NVL (v_amt, ptx_amount),\n               ptx_tl_lvl_code = NVL (v_trans_lvl, ptx_tl_lvl_code),\n               ptx_tax_type = NVL (v_tax_type, ptx_tax_type),\n               ptx_risk_pol_level = NVL (v_comp_lvl, ptx_risk_pol_level)\n         WHERE     ptx_trac_trnt_code = v_trnt_code\n               AND ptx_pol_batch_no = v_pol_code;\n    END;",
        "del_pol_taxes": "PROCEDURE del_pol_taxes (v_trnt_code IN VARCHAR2, v_pol_code IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_policy_taxes\n         WHERE     ptx_trac_trnt_code = v_trnt_code\n               AND ptx_pol_batch_no = v_pol_code;\n    END;",
        "del_ren_pol_taxes": "PROCEDURE del_ren_pol_taxes (v_trnt_code   IN VARCHAR2,\n                                 v_pol_code    IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_ren_policy_taxes\n         WHERE     ptx_trac_trnt_code = v_trnt_code\n               AND ptx_pol_batch_no = v_pol_code;\n    END;",
        "update_policy_excesses": "PROCEDURE update_policy_excesses (\n        v_pspr_code                     gin_policy_section_perils.pspr_code%TYPE,\n        v_action                        VARCHAR2,\n        v_pspr_pol_batch_no             gin_policy_section_perils.pspr_pol_batch_no%TYPE,\n        v_sspr_code                     gin_policy_section_perils.pspr_sspr_code%TYPE,\n        v_pspr_peril_limit              gin_policy_section_perils.pspr_peril_limit%TYPE,\n        v_pspr_peril_type               gin_policy_section_perils.pspr_peril_type%TYPE,\n        v_pspr_si_or_limit              gin_policy_section_perils.pspr_si_or_limit%TYPE,\n        v_pspr_excess_type              gin_policy_section_perils.pspr_excess_type%TYPE,\n        v_pspr_excess                   gin_policy_section_perils.pspr_excess%TYPE,\n        v_pspr_excess_min               gin_policy_section_perils.pspr_excess_min%TYPE,\n        v_pspr_excess_max               gin_policy_section_perils.pspr_excess_max%TYPE,\n        v_pspr_expire_on_claim          gin_policy_section_perils.pspr_expire_on_claim%TYPE,\n        v_pspr_person_limit             gin_policy_section_perils.pspr_person_limit%TYPE,\n        v_pspr_claim_limit              gin_policy_section_perils.pspr_claim_limit%TYPE,\n        v_pspr_desc                     gin_policy_section_perils.pspr_desc%TYPE,\n        v_pspr_tl_excess_type           gin_policy_section_perils.pspr_tl_excess_type%TYPE,\n        v_pspr_tl_excess                gin_policy_section_perils.pspr_tl_excess%TYPE,\n        v_pspr_tl_excess_min            gin_policy_section_perils.pspr_tl_excess_min%TYPE,\n        v_pspr_tl_excess_max            gin_policy_section_perils.pspr_tl_excess_max%TYPE,\n        v_pspr_pl_excess_type           gin_policy_section_perils.pspr_pl_excess_type%TYPE,\n        v_pspr_pl_excess                gin_policy_section_perils.pspr_pl_excess%TYPE,\n        v_pspr_pl_excess_min            gin_policy_section_perils.pspr_pl_excess_min%TYPE,\n        v_pspr_pl_excess_max            gin_policy_section_perils.pspr_pl_excess_max%TYPE,\n        v_prspr_salvage_pct             gin_pol_risk_section_perils.prspr_salvage_pct%TYPE,\n        v_prspr_claim_excess_type       gin_pol_risk_section_perils.prspr_claim_excess_type%TYPE,\n        v_prspr_claim_excess_min        gin_pol_risk_section_perils.prspr_claim_excess_min%TYPE,\n        v_prspr_claim_excess_max        gin_pol_risk_section_perils.prspr_claim_excess_max%TYPE,\n        v_prspr_depend_loss_type        gin_pol_risk_section_perils.prspr_depend_loss_type%TYPE,\n        v_prspr_ttd_ben_pcts            gin_pol_risk_section_perils.prspr_ttd_ben_pcts%TYPE,\n        v_pspr_ssprm_code               gin_policy_section_perils.pspr_ssprm_code%TYPE,\n        v_code                          NUMBER,\n        v_err                       OUT VARCHAR2)\n    IS                                             --GIN_POLICY_SECTION_PERILS\n        v_new_pspr_code        NUMBER;\n        v_pspr_scl_code        gin_policy_section_perils.pspr_scl_code%TYPE;\n        v_pspr_sect_code       gin_policy_section_perils.pspr_sect_code%TYPE;\n        v_pspr_sect_sht_desc   gin_policy_section_perils.pspr_sect_sht_desc%TYPE;\n        v_pspr_per_code        gin_policy_section_perils.pspr_per_code%TYPE;\n        v_pspr_per_sht_desc    gin_policy_section_perils.pspr_per_sht_desc%TYPE;\n        v_pspr_sec_code        gin_policy_section_perils.pspr_sec_code%TYPE;\n        v_pspr_bind_type       gin_policy_section_perils.pspr_bind_type%TYPE;\n        v_pspr_bind_code       gin_policy_section_perils.pspr_bind_code%TYPE;\n        v_pspr_mandatory       gin_policy_section_perils.pspr_mandatory%TYPE;\n        v_status               VARCHAR2 (200);\n        v_pol_loaded           VARCHAR2 (1);\n    BEGIN\n        BEGIN\n            --v_err:='test ' || v_sspr_code;\n            --return;\n            SELECT sspr_scl_code,\n                   ssprm_sect_code         sspr_sect_code,\n                   ssprm_sect_sht_desc     sspr_sect_sht_desc,\n                   sspr_per_code,\n                   sspr_per_sht_desc,\n                   ssprm_sec_code          sspr_sec_code,\n                   ssprm_bind_type         sspr_bind_type,\n                   ssprm_bind_code         sspr_bind_code,\n                   sspr_mandatory\n              INTO v_pspr_scl_code,\n                   v_pspr_sect_code,\n                   v_pspr_sect_sht_desc,\n                   v_pspr_per_code,\n                   v_pspr_per_sht_desc,\n                   v_pspr_sec_code,\n                   v_pspr_bind_type,\n                   v_pspr_bind_code,\n                   v_pspr_mandatory\n              FROM gin_subcl_sction_perils, gin_subcl_sction_perils_map\n             WHERE     sspr_code = v_sspr_code\n                   AND ssprm_sspr_code = sspr_code\n                   AND ssprm_code = v_pspr_ssprm_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_err :=\n                       'Perils / Excesses have NOT been defined for the subclass'\n                    || v_pspr_scl_code\n                    || '..'\n                    || SQLERRM (SQLCODE);\n                RETURN;\n            WHEN OTHERS\n            THEN\n                v_err :=\n                       'Error on Perils / Excesses for subclass'\n                    || v_pspr_scl_code\n                    || ' ...'\n                    || SQLERRM (SQLCODE);\n                RETURN;\n        END;\n\n        BEGIN\n            SELECT pol_authosrised, pol_loaded\n              INTO v_status, v_pol_loaded\n              FROM gin_policies\n             WHERE pol_batch_no = v_pspr_pol_batch_no;\n        END;\n\n        IF v_status = 'A' AND NVL (v_pol_loaded, 'N') = 'N'\n        THEN\n            v_err := 'Cannot Make Changes to an authorized Policy ...';\n            RETURN;\n        END IF;\n\n        IF v_action = 'A'\n        THEN\n            BEGIN\n                SELECT gin_pspr_code_seq.NEXTVAL\n                  INTO v_new_pspr_code\n                  FROM DUAL;\n\n                INSERT INTO gin_policy_section_perils (\n                                pspr_code,\n                                pspr_pol_batch_no,\n                                pspr_scl_code,\n                                pspr_sect_code,\n                                pspr_sect_sht_desc,\n                                pspr_per_code,\n                                pspr_per_sht_desc,\n                                pspr_mandatory,\n                                pspr_peril_limit,\n                                pspr_peril_type,\n                                pspr_si_or_limit,\n                                pspr_sec_code,\n                                pspr_excess_type,\n                                pspr_excess,\n                                pspr_excess_min,\n                                pspr_excess_max,\n                                pspr_expire_on_claim,\n                                pspr_bind_code,\n                                pspr_person_limit,\n                                pspr_claim_limit,\n                                pspr_desc,\n                                pspr_bind_type,\n                                pspr_sspr_code,\n                                pspr_claim_excess_type,\n                                pspr_ssprm_code)\n                     VALUES (v_new_pspr_code,\n                             v_pspr_pol_batch_no,\n                             v_pspr_scl_code,\n                             v_pspr_sect_code,\n                             v_pspr_sect_sht_desc,\n                             v_pspr_per_code,\n                             v_pspr_per_sht_desc,\n                             v_pspr_mandatory,\n                             v_pspr_peril_limit,\n                             v_pspr_peril_type,\n                             v_pspr_si_or_limit,\n                             v_pspr_sec_code,\n                             v_pspr_excess_type,\n                             v_pspr_excess,\n                             v_pspr_excess_min,\n                             v_pspr_excess_max,\n                             v_pspr_expire_on_claim,\n                             v_pspr_bind_code,\n                             v_pspr_person_limit,\n                             v_pspr_claim_limit,\n                             v_pspr_desc,\n                             v_pspr_bind_type,\n                             v_sspr_code,\n                             v_prspr_claim_excess_type,\n                             v_pspr_ssprm_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on inserting Excesses ...1'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_policy_section_perils\n                   SET --pspr_QR_QUOT_CODE = NVL(v_pspr_qr_quot_code,pspr_QR_QUOT_CODE),\n                            --pspr_QR_CODE = NVL(v_pspr_qr_code,pspr_QR_CODE),\n                   pspr_scl_code = NVL (v_pspr_scl_code, pspr_scl_code),\n                   pspr_sect_code = NVL (v_pspr_sect_code, pspr_sect_code),\n                   pspr_sect_sht_desc =\n                       NVL (v_pspr_sect_sht_desc, pspr_sect_sht_desc),\n                   pspr_per_code = NVL (v_pspr_per_code, pspr_per_code),\n                   pspr_per_sht_desc =\n                       NVL (v_pspr_per_sht_desc, pspr_per_sht_desc),\n                   pspr_mandatory = NVL (v_pspr_mandatory, pspr_mandatory),\n                   pspr_peril_limit =\n                       NVL (v_pspr_peril_limit, pspr_peril_limit),\n                   pspr_peril_type = NVL (v_pspr_peril_type, pspr_peril_type),\n                   pspr_si_or_limit =\n                       NVL (v_pspr_si_or_limit, pspr_si_or_limit),\n                   pspr_sec_code = NVL (v_pspr_sec_code, pspr_sec_code),\n                   pspr_excess_type =\n                       NVL (v_pspr_excess_type, pspr_excess_type),\n                   pspr_excess = NVL (v_pspr_excess, pspr_excess),\n                   pspr_excess_min = NVL (v_pspr_excess_min, pspr_excess_min),\n                   pspr_excess_max = NVL (v_pspr_excess_max, pspr_excess_max),\n                   pspr_expire_on_claim =\n                       NVL (v_pspr_expire_on_claim, pspr_expire_on_claim),\n                   pspr_bind_code = NVL (v_pspr_bind_code, pspr_bind_code),\n                   pspr_person_limit =\n                       NVL (v_pspr_person_limit, pspr_person_limit),\n                   pspr_claim_limit =\n                       NVL (v_pspr_claim_limit, pspr_claim_limit),\n                   pspr_desc = NVL (v_pspr_desc, pspr_desc),\n                   pspr_bind_type = NVL (v_pspr_bind_type, pspr_bind_type),\n                   pspr_ssprm_code = v_pspr_ssprm_code\n                 WHERE pspr_code = v_pspr_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve excess for update  ...'\n                        || v_pspr_per_sht_desc\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on updating The Excesses ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_policy_section_perils\n                      WHERE pspr_code = v_pspr_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve excess for DELETION  ...'\n                        || v_pspr_per_sht_desc\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on DELETING The Excess ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        END IF;\n    END update_policy_excesses;",
        "update_ren_policy_excesses": "PROCEDURE update_ren_policy_excesses (\n        v_pspr_code                     gin_policy_section_perils.pspr_code%TYPE,\n        v_action                        VARCHAR2,\n        v_pspr_pol_batch_no             gin_policy_section_perils.pspr_pol_batch_no%TYPE,\n        v_sspr_code                     gin_policy_section_perils.pspr_sspr_code%TYPE,\n        v_pspr_peril_limit              gin_policy_section_perils.pspr_peril_limit%TYPE,\n        v_pspr_peril_type               gin_policy_section_perils.pspr_peril_type%TYPE,\n        v_pspr_si_or_limit              gin_policy_section_perils.pspr_si_or_limit%TYPE,\n        v_pspr_excess_type              gin_policy_section_perils.pspr_excess_type%TYPE,\n        v_pspr_excess                   gin_policy_section_perils.pspr_excess%TYPE,\n        v_pspr_excess_min               gin_policy_section_perils.pspr_excess_min%TYPE,\n        v_pspr_excess_max               gin_policy_section_perils.pspr_excess_max%TYPE,\n        v_pspr_expire_on_claim          gin_policy_section_perils.pspr_expire_on_claim%TYPE,\n        v_pspr_person_limit             gin_policy_section_perils.pspr_person_limit%TYPE,\n        v_pspr_claim_limit              gin_policy_section_perils.pspr_claim_limit%TYPE,\n        v_pspr_desc                     gin_policy_section_perils.pspr_desc%TYPE,\n        v_pspr_tl_excess_type           gin_policy_section_perils.pspr_tl_excess_type%TYPE,\n        v_pspr_tl_excess                gin_policy_section_perils.pspr_tl_excess%TYPE,\n        v_pspr_tl_excess_min            gin_policy_section_perils.pspr_tl_excess_min%TYPE,\n        v_pspr_tl_excess_max            gin_policy_section_perils.pspr_tl_excess_max%TYPE,\n        v_pspr_pl_excess_type           gin_policy_section_perils.pspr_pl_excess_type%TYPE,\n        v_pspr_pl_excess                gin_policy_section_perils.pspr_pl_excess%TYPE,\n        v_pspr_pl_excess_min            gin_policy_section_perils.pspr_pl_excess_min%TYPE,\n        v_pspr_pl_excess_max            gin_policy_section_perils.pspr_pl_excess_max%TYPE,\n        v_prspr_salvage_pct             gin_pol_risk_section_perils.prspr_salvage_pct%TYPE,\n        v_prspr_claim_excess_type       gin_pol_risk_section_perils.prspr_claim_excess_type%TYPE,\n        v_prspr_claim_excess_min        gin_pol_risk_section_perils.prspr_claim_excess_min%TYPE,\n        v_prspr_claim_excess_max        gin_pol_risk_section_perils.prspr_claim_excess_max%TYPE,\n        v_prspr_depend_loss_type        gin_pol_risk_section_perils.prspr_depend_loss_type%TYPE,\n        v_prspr_ttd_ben_pcts            gin_pol_risk_section_perils.prspr_ttd_ben_pcts%TYPE,\n        v_pspr_ssprm_code               gin_pol_risk_section_perils.prspr_ssprm_code%TYPE,\n        v_err                       OUT VARCHAR2)\n    IS                                             --GIN_POLICY_SECTION_PERILS\n        v_new_pspr_code        NUMBER;\n        v_pspr_scl_code        gin_policy_section_perils.pspr_scl_code%TYPE;\n        v_pspr_sect_code       gin_policy_section_perils.pspr_sect_code%TYPE;\n        v_pspr_sect_sht_desc   gin_policy_section_perils.pspr_sect_sht_desc%TYPE;\n        v_pspr_per_code        gin_policy_section_perils.pspr_per_code%TYPE;\n        v_pspr_per_sht_desc    gin_policy_section_perils.pspr_per_sht_desc%TYPE;\n        v_pspr_sec_code        gin_policy_section_perils.pspr_sec_code%TYPE;\n        v_pspr_bind_type       gin_policy_section_perils.pspr_bind_type%TYPE;\n        v_pspr_bind_code       gin_policy_section_perils.pspr_bind_code%TYPE;\n        v_pspr_mandatory       gin_policy_section_perils.pspr_mandatory%TYPE;\n        v_status               VARCHAR2 (200);\n        v_pol_loaded           VARCHAR2 (1);\n    BEGIN\n        BEGIN\n            --v_err:='test ' || v_sspr_code;\n            --return;\n            SELECT sspr_scl_code,\n                   ssprm_sect_code         sspr_sect_code,\n                   ssprm_sect_sht_desc     sspr_sect_sht_desc,\n                   sspr_per_code,\n                   sspr_per_sht_desc,\n                   ssprm_sec_code          sspr_sec_code,\n                   ssprm_bind_type         sspr_bind_type,\n                   ssprm_bind_code         sspr_bind_code,\n                   sspr_mandatory\n              INTO v_pspr_scl_code,\n                   v_pspr_sect_code,\n                   v_pspr_sect_sht_desc,\n                   v_pspr_per_code,\n                   v_pspr_per_sht_desc,\n                   v_pspr_sec_code,\n                   v_pspr_bind_type,\n                   v_pspr_bind_code,\n                   v_pspr_mandatory\n              FROM gin_subcl_sction_perils, gin_subcl_sction_perils_map\n             WHERE     sspr_code = v_sspr_code\n                   AND ssprm_sspr_code = sspr_code\n                   AND ssprm_code = v_pspr_ssprm_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_err :=\n                       'Perils / Excesses have NOT been defined for the subclass'\n                    || v_pspr_scl_code\n                    || '..'\n                    || SQLERRM (SQLCODE);\n                RETURN;\n            WHEN OTHERS\n            THEN\n                v_err :=\n                       'Error on Perils / Excesses for subclass'\n                    || v_pspr_scl_code\n                    || ' ...'\n                    || SQLERRM (SQLCODE);\n                RETURN;\n        END;\n\n        BEGIN\n            SELECT pol_authosrised, pol_loaded\n              INTO v_status, v_pol_loaded\n              FROM gin_policies\n             WHERE pol_batch_no = v_pspr_pol_batch_no;\n        END;\n\n        IF v_status = 'A' AND NVL (v_pol_loaded, 'N') = 'N'\n        THEN\n            v_err := 'Cannot Make Changes to an authorized Policy ...';\n            RETURN;\n        END IF;\n\n        IF v_action = 'A'\n        THEN\n            BEGIN\n                SELECT gin_pspr_code_seq.NEXTVAL\n                  INTO v_new_pspr_code\n                  FROM DUAL;\n\n                INSERT INTO gin_ren_pol_section_perils (pspr_code,\n                                                        pspr_pol_batch_no,\n                                                        pspr_scl_code,\n                                                        pspr_sect_code,\n                                                        pspr_sect_sht_desc,\n                                                        pspr_per_code,\n                                                        pspr_per_sht_desc,\n                                                        pspr_mandatory,\n                                                        pspr_peril_limit,\n                                                        pspr_peril_type,\n                                                        pspr_si_or_limit,\n                                                        pspr_sec_code,\n                                                        pspr_excess_type,\n                                                        pspr_excess,\n                                                        pspr_excess_min,\n                                                        pspr_excess_max,\n                                                        pspr_expire_on_claim,\n                                                        pspr_bind_code,\n                                                        pspr_person_limit,\n                                                        pspr_claim_limit,\n                                                        pspr_desc,\n                                                        pspr_bind_type,\n                                                        pspr_sspr_code,\n                                                        pspr_ssprm_code)\n                     VALUES (v_new_pspr_code,\n                             v_pspr_pol_batch_no,\n                             v_pspr_scl_code,\n                             v_pspr_sect_code,\n                             v_pspr_sect_sht_desc,\n                             v_pspr_per_code,\n                             v_pspr_per_sht_desc,\n                             v_pspr_mandatory,\n                             v_pspr_peril_limit,\n                             v_pspr_peril_type,\n                             v_pspr_si_or_limit,\n                             v_pspr_sec_code,\n                             v_pspr_excess_type,\n                             v_pspr_excess,\n                             v_pspr_excess_min,\n                             v_pspr_excess_max,\n                             v_pspr_expire_on_claim,\n                             v_pspr_bind_code,\n                             v_pspr_person_limit,\n                             v_pspr_claim_limit,\n                             v_pspr_desc,\n                             v_pspr_bind_type,\n                             v_sspr_code,\n                             v_pspr_ssprm_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on inserting Excesses ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_ren_pol_section_perils\n                   SET --pspr_QR_QUOT_CODE = NVL(v_pspr_qr_quot_code,pspr_QR_QUOT_CODE),\n                            --pspr_QR_CODE = NVL(v_pspr_qr_code,pspr_QR_CODE),\n                   pspr_scl_code = NVL (v_pspr_scl_code, pspr_scl_code),\n                   pspr_sect_code = NVL (v_pspr_sect_code, pspr_sect_code),\n                   pspr_sect_sht_desc =\n                       NVL (v_pspr_sect_sht_desc, pspr_sect_sht_desc),\n                   pspr_per_code = NVL (v_pspr_per_code, pspr_per_code),\n                   pspr_per_sht_desc =\n                       NVL (v_pspr_per_sht_desc, pspr_per_sht_desc),\n                   pspr_mandatory = NVL (v_pspr_mandatory, pspr_mandatory),\n                   pspr_peril_limit =\n                       NVL (v_pspr_peril_limit, pspr_peril_limit),\n                   pspr_peril_type = NVL (v_pspr_peril_type, pspr_peril_type),\n                   pspr_si_or_limit =\n                       NVL (v_pspr_si_or_limit, pspr_si_or_limit),\n                   pspr_sec_code = NVL (v_pspr_sec_code, pspr_sec_code),\n                   pspr_excess_type =\n                       NVL (v_pspr_excess_type, pspr_excess_type),\n                   pspr_excess = NVL (v_pspr_excess, pspr_excess),\n                   pspr_excess_min = NVL (v_pspr_excess_min, pspr_excess_min),\n                   pspr_excess_max = NVL (v_pspr_excess_max, pspr_excess_max),\n                   pspr_expire_on_claim =\n                       NVL (v_pspr_expire_on_claim, pspr_expire_on_claim),\n                   pspr_bind_code = NVL (v_pspr_bind_code, pspr_bind_code),\n                   pspr_person_limit =\n                       NVL (v_pspr_person_limit, pspr_person_limit),\n                   pspr_claim_limit =\n                       NVL (v_pspr_claim_limit, pspr_claim_limit),\n                   pspr_desc = NVL (v_pspr_desc, pspr_desc),\n                   pspr_bind_type = NVL (v_pspr_bind_type, pspr_bind_type),\n                   pspr_ssprm_code = v_pspr_ssprm_code\n                 WHERE pspr_code = v_pspr_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve excess for update  ...'\n                        || v_pspr_per_sht_desc\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on updating The Excesses ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_ren_pol_section_perils\n                      WHERE pspr_code = v_pspr_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve excess for DELETION  ...'\n                        || v_pspr_per_sht_desc\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on DELETING The Excess ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        END IF;\n    END update_ren_policy_excesses;",
        "update_risk_excesses": "PROCEDURE update_risk_excesses (\n        v_pspr_code                     gin_policy_section_perils.pspr_code%TYPE,\n        v_action                        VARCHAR2,\n        v_pspr_pol_batch_no             gin_policy_section_perils.pspr_pol_batch_no%TYPE,\n        v_sspr_code                     gin_policy_section_perils.pspr_sspr_code%TYPE,\n        v_pspr_peril_limit              gin_policy_section_perils.pspr_peril_limit%TYPE,\n        v_pspr_peril_type               gin_policy_section_perils.pspr_peril_type%TYPE,\n        v_pspr_si_or_limit              gin_policy_section_perils.pspr_si_or_limit%TYPE,\n        v_pspr_excess_type              gin_policy_section_perils.pspr_excess_type%TYPE,\n        v_pspr_excess                   gin_policy_section_perils.pspr_excess%TYPE,\n        v_pspr_excess_min               gin_policy_section_perils.pspr_excess_min%TYPE,\n        v_pspr_excess_max               gin_policy_section_perils.pspr_excess_max%TYPE,\n        v_pspr_expire_on_claim          gin_policy_section_perils.pspr_expire_on_claim%TYPE,\n        v_pspr_person_limit             gin_policy_section_perils.pspr_person_limit%TYPE,\n        v_pspr_claim_limit              gin_policy_section_perils.pspr_claim_limit%TYPE,\n        v_pspr_desc                     gin_policy_section_perils.pspr_desc%TYPE,\n        v_pspr_tl_excess_type           gin_policy_section_perils.pspr_tl_excess_type%TYPE,\n        v_pspr_tl_excess                gin_policy_section_perils.pspr_tl_excess%TYPE,\n        v_pspr_tl_excess_min            gin_policy_section_perils.pspr_tl_excess_min%TYPE,\n        v_pspr_tl_excess_max            gin_policy_section_perils.pspr_tl_excess_max%TYPE,\n        v_pspr_pl_excess_type           gin_policy_section_perils.pspr_pl_excess_type%TYPE,\n        v_pspr_pl_excess                gin_policy_section_perils.pspr_pl_excess%TYPE,\n        v_pspr_pl_excess_min            gin_policy_section_perils.pspr_pl_excess_min%TYPE,\n        v_pspr_pl_excess_max            gin_policy_section_perils.pspr_pl_excess_max%TYPE,\n        v_prspr_salvage_pct             gin_pol_risk_section_perils.prspr_salvage_pct%TYPE,\n        v_prspr_claim_excess_type       gin_pol_risk_section_perils.prspr_claim_excess_type%TYPE,\n        v_prspr_claim_excess_min        gin_pol_risk_section_perils.prspr_claim_excess_min%TYPE,\n        v_prspr_claim_excess_max        gin_pol_risk_section_perils.prspr_claim_excess_max%TYPE,\n        v_prspr_depend_loss_type        gin_pol_risk_section_perils.prspr_depend_loss_type%TYPE,\n        v_prspr_ttd_ben_pcts            gin_pol_risk_section_perils.prspr_ttd_ben_pcts%TYPE,\n        v_prspr_ssprm_code              gin_pol_risk_section_perils.prspr_ssprm_code%TYPE,\n        v_ipu_code                      NUMBER,\n        v_err                       OUT VARCHAR2)\n    IS                                             --GIN_POLICY_SECTION_PERILS\n        v_new_pspr_code        NUMBER;\n        v_pspr_scl_code        gin_policy_section_perils.pspr_scl_code%TYPE;\n        v_pspr_sect_code       gin_policy_section_perils.pspr_sect_code%TYPE;\n        v_pspr_sect_sht_desc   gin_policy_section_perils.pspr_sect_sht_desc%TYPE;\n        v_pspr_per_code        gin_policy_section_perils.pspr_per_code%TYPE;\n        v_pspr_per_sht_desc    gin_policy_section_perils.pspr_per_sht_desc%TYPE;\n        v_pspr_sec_code        gin_policy_section_perils.pspr_sec_code%TYPE;\n        v_pspr_bind_type       gin_policy_section_perils.pspr_bind_type%TYPE;\n        v_pspr_bind_code       gin_policy_section_perils.pspr_bind_code%TYPE;\n        v_pspr_mandatory       gin_policy_section_perils.pspr_mandatory%TYPE;\n        v_status               VARCHAR2 (200);\n        v_pol_loaded           VARCHAR2 (1);\n    BEGIN\n        BEGIN\n            --         v_err:='test ' || v_sspr_code;\n            --         return;\n            SELECT ssprm_scl_code          sspr_scl_code,\n                   ssprm_sect_code         sspr_sect_code,\n                   ssprm_sect_sht_desc     sspr_sect_sht_desc,\n                   sspr_per_code,\n                   sspr_per_sht_desc,\n                   ssprm_sec_code          sspr_sec_code,\n                   ssprm_bind_type         sspr_bind_type,\n                   ssprm_bind_code         sspr_bind_code,\n                   sspr_mandatory\n              INTO v_pspr_scl_code,\n                   v_pspr_sect_code,\n                   v_pspr_sect_sht_desc,\n                   v_pspr_per_code,\n                   v_pspr_per_sht_desc,\n                   v_pspr_sec_code,\n                   v_pspr_bind_type,\n                   v_pspr_bind_code,\n                   v_pspr_mandatory\n              FROM gin_subcl_sction_perils, gin_subcl_sction_perils_map\n             WHERE     sspr_code = v_sspr_code\n                   AND ssprm_sspr_code = sspr_code\n                   AND ssprm_code = v_prspr_ssprm_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_err :=\n                       'Perils / Excesses have NOT been defined for the subclass'\n                    || v_pspr_scl_code\n                    || '..'\n                    || SQLERRM (SQLCODE);\n                RETURN;\n            WHEN OTHERS\n            THEN\n                v_err :=\n                       'Error on Perils / Excesses for subclass'\n                    || v_prspr_ssprm_code\n                    || ' ...'\n                    || SQLERRM (SQLCODE);\n                RETURN;\n        END;\n\n        BEGIN\n            SELECT pol_authosrised, pol_loaded\n              INTO v_status, v_pol_loaded\n              FROM gin_policies\n             WHERE pol_batch_no = v_pspr_pol_batch_no;\n        END;\n\n        IF v_status = 'A' AND NVL (v_pol_loaded, 'N') = 'N'\n        THEN\n            v_err := 'Cannot Make Changes to an authorized Policy ...';\n            RETURN;\n        END IF;\n\n        IF v_action = 'A'\n        THEN\n            BEGIN\n                SELECT gin_pspr_code_seq.NEXTVAL\n                  INTO v_new_pspr_code\n                  FROM DUAL;\n\n                INSERT INTO gin_pol_risk_section_perils (\n                                prspr_code,\n                                prspr_pol_batch_no,\n                                prspr_scl_code,\n                                prspr_sect_code,\n                                prspr_sect_sht_desc,\n                                prspr_per_code,\n                                prspr_per_sht_desc,\n                                prspr_mandatory,\n                                prspr_peril_limit,\n                                prspr_peril_type,\n                                prspr_si_or_limit,\n                                prspr_sec_code,\n                                prspr_excess_type,\n                                prspr_excess,\n                                prspr_excess_min,\n                                prspr_excess_max,\n                                prspr_expire_on_claim,\n                                prspr_bind_code,\n                                prspr_person_limit,\n                                prspr_claim_limit,\n                                prspr_desc,\n                                prspr_bind_type,\n                                prspr_sspr_code,\n                                prspr_ipu_code,\n                                prspr_tl_excess_type,\n                                prspr_tl_excess,\n                                prspr_tl_excess_min,\n                                prspr_tl_excess_max,\n                                prspr_pl_excess_type,\n                                prspr_pl_excess,\n                                prspr_pl_excess_min,\n                                prspr_pl_excess_max,\n                                prspr_salvage_pct,\n                                prspr_claim_excess_type,\n                                prspr_claim_excess_min,\n                                prspr_claim_excess_max,\n                                prspr_depend_loss_type,\n                                prspr_ttd_ben_pcts,\n                                prspr_ssprm_code)\n                     VALUES (v_new_pspr_code,\n                             v_pspr_pol_batch_no,\n                             v_pspr_scl_code,\n                             v_pspr_sect_code,\n                             v_pspr_sect_sht_desc,\n                             v_pspr_per_code,\n                             v_pspr_per_sht_desc,\n                             v_pspr_mandatory,\n                             v_pspr_peril_limit,\n                             v_pspr_peril_type,\n                             v_pspr_si_or_limit,\n                             v_pspr_sec_code,\n                             v_pspr_excess_type,\n                             v_pspr_excess,\n                             v_pspr_excess_min,\n                             v_pspr_excess_max,\n                             v_pspr_expire_on_claim,\n                             v_pspr_bind_code,\n                             v_pspr_person_limit,\n                             v_pspr_claim_limit,\n                             v_pspr_desc,\n                             v_pspr_bind_type,\n                             v_sspr_code,\n                             v_ipu_code,\n                             v_pspr_tl_excess_type,\n                             v_pspr_tl_excess,\n                             v_pspr_tl_excess_min,\n                             v_pspr_tl_excess_max,\n                             v_pspr_pl_excess_type,\n                             v_pspr_pl_excess,\n                             v_pspr_pl_excess_min,\n                             v_pspr_pl_excess_max,\n                             v_prspr_salvage_pct,\n                             v_prspr_claim_excess_type,\n                             v_prspr_claim_excess_min,\n                             v_prspr_claim_excess_max,\n                             v_prspr_depend_loss_type,\n                             v_prspr_ttd_ben_pcts,\n                             v_prspr_ssprm_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on inserting Excesses ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_pol_risk_section_perils\n                   SET --pspr_QR_QUOT_CODE = NVL(v_pspr_qr_quot_code,pspr_QR_QUOT_CODE),\n                            --pspr_QR_CODE = NVL(v_pspr_qr_code,pspr_QR_CODE),\n                   prspr_scl_code = NVL (v_pspr_scl_code, prspr_scl_code),\n                   prspr_sect_code = NVL (v_pspr_sect_code, prspr_sect_code),\n                   prspr_sect_sht_desc =\n                       NVL (v_pspr_sect_sht_desc, prspr_sect_sht_desc),\n                   prspr_per_code = NVL (v_pspr_per_code, prspr_per_code),\n                   prspr_per_sht_desc =\n                       NVL (v_pspr_per_sht_desc, prspr_per_sht_desc),\n                   prspr_mandatory = NVL (v_pspr_mandatory, prspr_mandatory),\n                   prspr_peril_limit = v_pspr_peril_limit,\n                   prspr_peril_type = v_pspr_peril_type,\n                   prspr_si_or_limit = v_pspr_si_or_limit,\n                   prspr_sec_code = v_pspr_sec_code,\n                   prspr_excess_type = v_pspr_excess_type,\n                   prspr_excess = v_pspr_excess,\n                   prspr_excess_min = v_pspr_excess_min,\n                   prspr_excess_max = v_pspr_excess_max,\n                   prspr_expire_on_claim = v_pspr_expire_on_claim,\n                   prspr_bind_code = v_pspr_bind_code,\n                   prspr_person_limit = v_pspr_person_limit,\n                   prspr_claim_limit = v_pspr_claim_limit,\n                   prspr_desc = v_pspr_desc,\n                   prspr_bind_type = NVL (v_pspr_bind_type, prspr_bind_type),\n                   prspr_tl_excess_type = v_pspr_tl_excess_type,\n                   prspr_tl_excess = v_pspr_tl_excess,\n                   prspr_tl_excess_min = v_pspr_tl_excess_min,\n                   prspr_tl_excess_max = v_pspr_tl_excess_max,\n                   prspr_pl_excess_type = v_pspr_pl_excess_type,\n                   prspr_pl_excess = v_pspr_pl_excess,\n                   prspr_pl_excess_min = v_pspr_pl_excess_min,\n                   prspr_pl_excess_max = v_pspr_pl_excess_max,\n                   prspr_salvage_pct = v_prspr_salvage_pct,\n                   prspr_claim_excess_type = v_prspr_claim_excess_type,\n                   prspr_claim_excess_min = v_prspr_claim_excess_min,\n                   prspr_claim_excess_max = v_prspr_claim_excess_max,\n                   prspr_depend_loss_type = v_prspr_depend_loss_type,\n                   prspr_ttd_ben_pcts = v_prspr_ttd_ben_pcts,\n                   prspr_ssprm_code = v_prspr_ssprm_code\n                 WHERE prspr_code = v_pspr_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve excess for update  ...'\n                        || v_pspr_per_sht_desc\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on updating The Excesses ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_pol_risk_section_perils\n                      WHERE prspr_code = v_pspr_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve excess for DELETION  ...'\n                        || v_pspr_per_sht_desc\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on DELETING The Excess ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        END IF;\n    END update_risk_excesses;",
        "update_ren_risk_excesses": "PROCEDURE update_ren_risk_excesses (\n        v_pspr_code                     gin_policy_section_perils.pspr_code%TYPE,\n        v_action                        VARCHAR2,\n        v_pspr_pol_batch_no             gin_policy_section_perils.pspr_pol_batch_no%TYPE,\n        v_sspr_code                     gin_policy_section_perils.pspr_sspr_code%TYPE,\n        v_pspr_peril_limit              gin_policy_section_perils.pspr_peril_limit%TYPE,\n        v_pspr_peril_type               gin_policy_section_perils.pspr_peril_type%TYPE,\n        v_pspr_si_or_limit              gin_policy_section_perils.pspr_si_or_limit%TYPE,\n        v_pspr_excess_type              gin_policy_section_perils.pspr_excess_type%TYPE,\n        v_pspr_excess                   gin_policy_section_perils.pspr_excess%TYPE,\n        v_pspr_excess_min               gin_policy_section_perils.pspr_excess_min%TYPE,\n        v_pspr_excess_max               gin_policy_section_perils.pspr_excess_max%TYPE,\n        v_pspr_expire_on_claim          gin_policy_section_perils.pspr_expire_on_claim%TYPE,\n        v_pspr_person_limit             gin_policy_section_perils.pspr_person_limit%TYPE,\n        v_pspr_claim_limit              gin_policy_section_perils.pspr_claim_limit%TYPE,\n        v_pspr_desc                     gin_policy_section_perils.pspr_desc%TYPE,\n        v_pspr_tl_excess_type           gin_policy_section_perils.pspr_tl_excess_type%TYPE,\n        v_pspr_tl_excess                gin_policy_section_perils.pspr_tl_excess%TYPE,\n        v_pspr_tl_excess_min            gin_policy_section_perils.pspr_tl_excess_min%TYPE,\n        v_pspr_tl_excess_max            gin_policy_section_perils.pspr_tl_excess_max%TYPE,\n        v_pspr_pl_excess_type           gin_policy_section_perils.pspr_pl_excess_type%TYPE,\n        v_pspr_pl_excess                gin_policy_section_perils.pspr_pl_excess%TYPE,\n        v_pspr_pl_excess_min            gin_policy_section_perils.pspr_pl_excess_min%TYPE,\n        v_pspr_pl_excess_max            gin_policy_section_perils.pspr_pl_excess_max%TYPE,\n        v_prspr_salvage_pct             gin_pol_risk_section_perils.prspr_salvage_pct%TYPE,\n        v_prspr_claim_excess_type       gin_pol_risk_section_perils.prspr_claim_excess_type%TYPE,\n        v_prspr_claim_excess_min        gin_pol_risk_section_perils.prspr_claim_excess_min%TYPE,\n        v_prspr_claim_excess_max        gin_pol_risk_section_perils.prspr_claim_excess_max%TYPE,\n        v_prspr_depend_loss_type        gin_pol_risk_section_perils.prspr_depend_loss_type%TYPE,\n        v_prspr_ttd_ben_pcts            gin_pol_risk_section_perils.prspr_ttd_ben_pcts%TYPE,\n        v_prspr_ssprm_code              gin_pol_risk_section_perils.prspr_ssprm_code%TYPE,\n        v_ipu_code                      NUMBER,\n        v_err                       OUT VARCHAR2)\n    IS                                             --GIN_POLICY_SECTION_PERILS\n        v_new_pspr_code        NUMBER;\n        v_pspr_scl_code        gin_policy_section_perils.pspr_scl_code%TYPE;\n        v_pspr_sect_code       gin_policy_section_perils.pspr_sect_code%TYPE;\n        v_pspr_sect_sht_desc   gin_policy_section_perils.pspr_sect_sht_desc%TYPE;\n        v_pspr_per_code        gin_policy_section_perils.pspr_per_code%TYPE;\n        v_pspr_per_sht_desc    gin_policy_section_perils.pspr_per_sht_desc%TYPE;\n        v_pspr_sec_code        gin_policy_section_perils.pspr_sec_code%TYPE;\n        v_pspr_bind_type       gin_policy_section_perils.pspr_bind_type%TYPE;\n        v_pspr_bind_code       gin_policy_section_perils.pspr_bind_code%TYPE;\n        v_pspr_mandatory       gin_policy_section_perils.pspr_mandatory%TYPE;\n        v_status               VARCHAR2 (200);\n        v_pol_loaded           VARCHAR2 (1);\n    BEGIN\n        BEGIN\n            SELECT sspr_scl_code,\n                   ssprm_sect_code         sspr_sect_code,\n                   ssprm_sect_sht_desc     sspr_sect_sht_desc,\n                   sspr_per_code,\n                   sspr_per_sht_desc,\n                   ssprm_sec_code          sspr_sec_code,\n                   ssprm_bind_type         sspr_bind_type,\n                   ssprm_bind_code         sspr_bind_code,\n                   sspr_mandatory\n              INTO v_pspr_scl_code,\n                   v_pspr_sect_code,\n                   v_pspr_sect_sht_desc,\n                   v_pspr_per_code,\n                   v_pspr_per_sht_desc,\n                   v_pspr_sec_code,\n                   v_pspr_bind_type,\n                   v_pspr_bind_code,\n                   v_pspr_mandatory\n              FROM gin_subcl_sction_perils, gin_subcl_sction_perils_map\n             WHERE     sspr_code = v_sspr_code\n                   AND ssprm_sspr_code = sspr_code\n                   AND ssprm_code = v_prspr_ssprm_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_err :=\n                       'Perils / Excesses have NOT been defined for the subclass'\n                    || v_pspr_scl_code\n                    || '..'\n                    || SQLERRM (SQLCODE);\n                RETURN;\n            WHEN OTHERS\n            THEN\n                v_err :=\n                       'Error on Perils / Excesses for subclass'\n                    || v_pspr_scl_code\n                    || ' ...'\n                    || SQLERRM (SQLCODE);\n                RETURN;\n        END;\n\n        BEGIN\n            SELECT pol_authosrised, pol_loaded\n              INTO v_status, v_pol_loaded\n              FROM gin_policies\n             WHERE pol_batch_no = v_pspr_pol_batch_no;\n        END;\n\n        IF v_status = 'A' AND NVL (v_pol_loaded, 'N') = 'N'\n        THEN\n            v_err := 'Cannot Make Changes to an authorized Policy ...';\n            RETURN;\n        END IF;\n\n        IF v_action = 'A'\n        THEN\n            BEGIN\n                SELECT gin_pspr_code_seq.NEXTVAL\n                  INTO v_new_pspr_code\n                  FROM DUAL;\n\n                INSERT INTO gin_ren_pol_risk_sect_perils (\n                                prspr_code,\n                                prspr_pol_batch_no,\n                                prspr_scl_code,\n                                prspr_sect_code,\n                                prspr_sect_sht_desc,\n                                prspr_per_code,\n                                prspr_per_sht_desc,\n                                prspr_mandatory,\n                                prspr_peril_limit,\n                                prspr_peril_type,\n                                prspr_si_or_limit,\n                                prspr_sec_code,\n                                prspr_excess_type,\n                                prspr_excess,\n                                prspr_excess_min,\n                                prspr_excess_max,\n                                prspr_expire_on_claim,\n                                prspr_bind_code,\n                                prspr_person_limit,\n                                prspr_claim_limit,\n                                prspr_desc,\n                                prspr_bind_type,\n                                prspr_sspr_code,\n                                prspr_tl_excess_type,\n                                prspr_tl_excess,\n                                prspr_tl_excess_min,\n                                prspr_tl_excess_max,\n                                prspr_pl_excess_type,\n                                prspr_pl_excess,\n                                prspr_pl_excess_min,\n                                prspr_pl_excess_max,\n                                prspr_salvage_pct,\n                                prspr_claim_excess_type,\n                                prspr_claim_excess_min,\n                                prspr_claim_excess_max,\n                                prspr_depend_loss_type,\n                                prspr_ttd_ben_pcts,\n                                prspr_ssprm_code)\n                     VALUES (v_new_pspr_code,\n                             v_pspr_pol_batch_no,\n                             v_pspr_scl_code,\n                             v_pspr_sect_code,\n                             v_pspr_sect_sht_desc,\n                             v_pspr_per_code,\n                             v_pspr_per_sht_desc,\n                             v_pspr_mandatory,\n                             v_pspr_peril_limit,\n                             v_pspr_peril_type,\n                             v_pspr_si_or_limit,\n                             v_pspr_sec_code,\n                             v_pspr_excess_type,\n                             v_pspr_excess,\n                             v_pspr_excess_min,\n                             v_pspr_excess_max,\n                             v_pspr_expire_on_claim,\n                             v_pspr_bind_code,\n                             v_pspr_person_limit,\n                             v_pspr_claim_limit,\n                             v_pspr_desc,\n                             v_pspr_bind_type,\n                             v_sspr_code,\n                             v_pspr_tl_excess_type,\n                             v_pspr_tl_excess,\n                             v_pspr_tl_excess_min,\n                             v_pspr_tl_excess_max,\n                             v_pspr_pl_excess_type,\n                             v_pspr_pl_excess,\n                             v_pspr_pl_excess_min,\n                             v_pspr_pl_excess_max,\n                             v_prspr_salvage_pct,\n                             v_prspr_claim_excess_type,\n                             v_prspr_claim_excess_min,\n                             v_prspr_claim_excess_max,\n                             v_prspr_depend_loss_type,\n                             v_prspr_ttd_ben_pcts,\n                             v_prspr_ssprm_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on inserting Excesses ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_ren_pol_risk_sect_perils\n                   SET --pspr_QR_QUOT_CODE = NVL(v_pspr_qr_quot_code,pspr_QR_QUOT_CODE),\n                            --pspr_QR_CODE = NVL(v_pspr_qr_code,pspr_QR_CODE),\n                   prspr_scl_code = NVL (v_pspr_scl_code, prspr_scl_code),\n                   prspr_sect_code = NVL (v_pspr_sect_code, prspr_sect_code),\n                   prspr_sect_sht_desc =\n                       NVL (v_pspr_sect_sht_desc, prspr_sect_sht_desc),\n                   prspr_per_code = NVL (v_pspr_per_code, prspr_per_code),\n                   prspr_per_sht_desc =\n                       NVL (v_pspr_per_sht_desc, prspr_per_sht_desc),\n                   prspr_mandatory = NVL (v_pspr_mandatory, prspr_mandatory),\n                   prspr_peril_limit = v_pspr_peril_limit,\n                   prspr_peril_type = v_pspr_peril_type,\n                   prspr_si_or_limit = v_pspr_si_or_limit,\n                   prspr_sec_code = v_pspr_sec_code,\n                   prspr_excess_type = v_pspr_excess_type,\n                   prspr_excess = v_pspr_excess,\n                   prspr_excess_min = v_pspr_excess_min,\n                   prspr_excess_max = v_pspr_excess_max,\n                   prspr_expire_on_claim = v_pspr_expire_on_claim,\n                   prspr_bind_code = v_pspr_bind_code,\n                   prspr_person_limit = v_pspr_person_limit,\n                   prspr_claim_limit = v_pspr_claim_limit,\n                   prspr_desc = v_pspr_desc,\n                   prspr_bind_type = NVL (v_pspr_bind_type, prspr_bind_type),\n                   prspr_tl_excess_type = v_pspr_tl_excess_type,\n                   prspr_tl_excess = v_pspr_tl_excess,\n                   prspr_tl_excess_min = v_pspr_tl_excess_min,\n                   prspr_tl_excess_max = v_pspr_tl_excess_max,\n                   prspr_pl_excess_type = v_pspr_pl_excess_type,\n                   prspr_pl_excess = v_pspr_pl_excess,\n                   prspr_pl_excess_min = v_pspr_pl_excess_min,\n                   prspr_pl_excess_max = v_pspr_pl_excess_max,\n                   prspr_salvage_pct = v_prspr_salvage_pct,\n                   prspr_claim_excess_type = v_prspr_claim_excess_type,\n                   prspr_claim_excess_min = v_prspr_claim_excess_min,\n                   prspr_claim_excess_max = v_prspr_claim_excess_max,\n                   prspr_depend_loss_type = v_prspr_depend_loss_type,\n                   prspr_ttd_ben_pcts = v_prspr_ttd_ben_pcts,\n                   prspr_ssprm_code = v_prspr_ssprm_code\n                 WHERE prspr_code = v_pspr_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve excess for update  ...'\n                        || v_pspr_per_sht_desc\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on updating The Excesses ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_ren_pol_risk_sect_perils\n                      WHERE prspr_code = v_pspr_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve excess for DELETION  ...'\n                        || v_pspr_per_sht_desc\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on DELETING The Excess ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        END IF;\n    END update_ren_risk_excesses;",
        "update_facre_dtls": "PROCEDURE update_facre_dtls (\n        v_fid_code                 NUMBER,\n        v_action                   VARCHAR2,\n        v_fid_pol_batch_no         NUMBER,\n        v_pol_no                   VARCHAR2,\n        v_ren_endors_no            VARCHAR2,\n        v_ced_pol_no               gin_facre_in_dtls.fid_cede_comp_policy_no%TYPE,\n        v_si                       gin_facre_in_dtls.fid_sum_insured%TYPE,\n        v_gross_rate               gin_facre_in_dtls.fid_gross_rate%TYPE,\n        v_first_prem               gin_facre_in_dtls.fid_cede_comp_first_prem%TYPE,\n        v_ren_prem                 gin_facre_in_dtls.fid_cede_company_ren_prem%TYPE,\n        v_wef                      gin_facre_in_dtls.fid_wef%TYPE,\n        v_wet                      gin_facre_in_dtls.fid_wet%TYPE,\n        v_rein_terms               gin_facre_in_dtls.fid_rein_terms_from%TYPE,\n        v_rein_terms_to            gin_facre_in_dtls.fid_reins_term_to%TYPE,\n        v_gross_ret                gin_facre_in_dtls.fid_cede_comp_gross_ret%TYPE,\n        v_rein_amt                 gin_facre_in_dtls.fid_cede_comp_rein_amt%TYPE,\n        v_amt                      gin_facre_in_dtls.fid_amt_perc_sum_insured%TYPE,\n        v_sign_dt                  gin_facre_in_dtls.fid_cede_sign_dt%TYPE,\n        v_fid_primary_broker       gin_facre_in_dtls.fid_primary_broker%TYPE,\n        v_err                  OUT VARCHAR2)\n    IS\n        v_new_fid_code   NUMBER;\n        v_status         VARCHAR2 (10);\n    BEGIN\n        -- raise_error('v_si'||v_si);\n        BEGIN\n            SELECT pol_authosrised\n              INTO v_status\n              FROM gin_policies\n             WHERE pol_batch_no = v_fid_pol_batch_no;\n        END;\n\n        IF v_status = 'A'\n        THEN\n            v_err := 'Cannot Make Changes to an authorized Policy ...';\n            RETURN;\n        END IF;\n\n        IF v_action = 'A'\n        THEN\n            BEGIN\n                SELECT gin_fid_code_seq.NEXTVAL INTO v_new_fid_code FROM DUAL;\n\n                INSERT INTO gin_facre_in_dtls (fid_code,\n                                               fid_pol_batch_no,\n                                               fid_pol_ren_endos_no,\n                                               fid_pol_policy_no,\n                                               fid_cede_comp_policy_no,\n                                               fid_sum_insured,\n                                               fid_gross_rate,\n                                               fid_cede_comp_first_prem,\n                                               fid_cede_company_ren_prem,\n                                               fid_wef,\n                                               fid_wet,\n                                               fid_rein_terms_from,\n                                               fid_reins_term_to,\n                                               fid_cede_comp_gross_ret,\n                                               fid_cede_comp_rein_amt,\n                                               fid_cede_sign_dt,\n                                               fid_amt_perc_sum_insured,\n                                               fid_primary_broker)\n                     VALUES (v_new_fid_code,\n                             v_fid_pol_batch_no,\n                             v_ren_endors_no,\n                             v_pol_no,\n                             v_ced_pol_no,\n                             v_si,\n                             v_gross_rate,\n                             v_first_prem,\n                             v_ren_prem,\n                             v_wef,\n                             v_wet,\n                             v_rein_terms,\n                             v_rein_terms_to,\n                             v_gross_ret,\n                             v_rein_amt,\n                             v_sign_dt,\n                             v_amt,\n                             v_fid_primary_broker);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on inserting facre details ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_facre_in_dtls\n                   SET --pspr_QR_QUOT_CODE = NVL(v_pspr_qr_quot_code,pspr_QR_QUOT_CODE),\n                            --pspr_QR_CODE = NVL(v_pspr_qr_code,pspr_QR_CODE),\n                   fid_cede_comp_policy_no =\n                       NVL (v_ced_pol_no, fid_cede_comp_policy_no),\n                   fid_sum_insured = NVL (v_si, fid_sum_insured),\n                   fid_gross_rate = NVL (v_gross_rate, fid_gross_rate),\n                   fid_cede_comp_first_prem =\n                       NVL (v_first_prem, fid_cede_comp_first_prem),\n                   fid_cede_company_ren_prem =\n                       NVL (v_ren_prem, fid_cede_company_ren_prem),\n                   fid_wef = NVL (v_wef, fid_wef),\n                   fid_wet = NVL (v_wet, fid_wet),\n                   fid_rein_terms_from =\n                       NVL (v_rein_terms, fid_rein_terms_from),\n                   fid_reins_term_to =\n                       NVL (v_rein_terms_to, fid_reins_term_to),\n                   fid_cede_comp_gross_ret =\n                       NVL (v_gross_ret, fid_cede_comp_gross_ret),\n                   fid_cede_comp_rein_amt =\n                       NVL (v_rein_amt, fid_cede_comp_rein_amt),\n                   fid_cede_sign_dt = NVL (v_sign_dt, fid_cede_sign_dt),\n                   fid_amt_perc_sum_insured =\n                       NVL (v_amt, fid_amt_perc_sum_insured),\n                   fid_primary_broker = v_fid_primary_broker\n                 WHERE fid_code = v_fid_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve facre details for update  ...'\n                        || v_ced_pol_no\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on updating facre details ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_facre_in_dtls\n                      WHERE fid_code = v_fid_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to facre details for DELETION  ...'\n                        || v_ced_pol_no\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on DELETING facre details ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        END IF;\n    END update_facre_dtls;",
        "update_ren_facre_dtls": "PROCEDURE update_ren_facre_dtls (\n        v_fid_code               NUMBER,\n        v_action                 VARCHAR2,\n        v_fid_pol_batch_no       NUMBER,\n        v_pol_no                 VARCHAR2,\n        v_ren_endors_no          VARCHAR2,\n        v_ced_pol_no             gin_facre_in_dtls.fid_cede_comp_policy_no%TYPE,\n        v_si                     gin_facre_in_dtls.fid_sum_insured%TYPE,\n        v_gross_rate             gin_facre_in_dtls.fid_gross_rate%TYPE,\n        v_first_prem             gin_facre_in_dtls.fid_cede_comp_first_prem%TYPE,\n        v_ren_prem               gin_facre_in_dtls.fid_cede_company_ren_prem%TYPE,\n        v_wef                    gin_facre_in_dtls.fid_wef%TYPE,\n        v_wet                    gin_facre_in_dtls.fid_wet%TYPE,\n        v_rein_terms             gin_facre_in_dtls.fid_rein_terms%TYPE,\n        v_rein_terms_to          gin_facre_in_dtls.fid_reins_term_to%TYPE,\n        v_gross_ret              gin_facre_in_dtls.fid_cede_comp_gross_ret%TYPE,\n        v_rein_amt               gin_facre_in_dtls.fid_cede_comp_rein_amt%TYPE,\n        v_amt                    gin_facre_in_dtls.fid_amt_perc_sum_insured%TYPE,\n        v_sign_dt                gin_facre_in_dtls.fid_cede_sign_dt%TYPE,\n        v_err                OUT VARCHAR2)\n    IS\n        v_new_fid_code   NUMBER;\n        v_status         VARCHAR2 (10);\n    BEGIN\n        BEGIN\n            SELECT pol_authosrised\n              INTO v_status\n              FROM gin_policies\n             WHERE pol_batch_no = v_fid_pol_batch_no;\n        END;\n\n        IF v_status = 'A'\n        THEN\n            v_err := 'Cannot Make Changes to an authorized Policy ...';\n            RETURN;\n        END IF;\n\n        IF v_action = 'A'\n        THEN\n            BEGIN\n                SELECT gin_fid_code_seq.NEXTVAL INTO v_new_fid_code FROM DUAL;\n\n                INSERT INTO gin_ren_facre_in_dtls (fid_code,\n                                                   fid_pol_batch_no,\n                                                   fid_pol_ren_endos_no,\n                                                   fid_pol_policy_no,\n                                                   fid_cede_comp_policy_no,\n                                                   fid_sum_insured,\n                                                   fid_gross_rate,\n                                                   fid_cede_comp_first_prem,\n                                                   fid_cede_company_ren_prem,\n                                                   fid_wef,\n                                                   fid_wet,\n                                                   fid_rein_terms,\n                                                   fid_reins_term_to,\n                                                   fid_cede_comp_gross_ret,\n                                                   fid_cede_comp_rein_amt,\n                                                   fid_cede_sign_dt,\n                                                   fid_amt_perc_sum_insured)\n                     VALUES (v_new_fid_code,\n                             v_fid_pol_batch_no,\n                             v_ren_endors_no,\n                             v_pol_no,\n                             v_ced_pol_no,\n                             v_si,\n                             v_gross_rate,\n                             v_first_prem,\n                             v_ren_prem,\n                             v_wef,\n                             v_wet,\n                             v_rein_terms,\n                             v_rein_terms_to,\n                             v_gross_ret,\n                             v_rein_amt,\n                             v_sign_dt,\n                             v_amt);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on inserting facre details ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_ren_facre_in_dtls\n                   SET --pspr_QR_QUOT_CODE = NVL(v_pspr_qr_quot_code,pspr_QR_QUOT_CODE),\n                            --pspr_QR_CODE = NVL(v_pspr_qr_code,pspr_QR_CODE),\n                   fid_cede_comp_policy_no =\n                       NVL (v_ced_pol_no, fid_cede_comp_policy_no),\n                   fid_sum_insured = NVL (v_si, fid_sum_insured),\n                   fid_gross_rate = NVL (v_gross_rate, fid_gross_rate),\n                   fid_cede_comp_first_prem =\n                       NVL (v_first_prem, fid_cede_comp_first_prem),\n                   fid_cede_company_ren_prem =\n                       NVL (v_ren_prem, fid_cede_company_ren_prem),\n                   fid_wef = NVL (v_wef, fid_wef),\n                   fid_wet = NVL (v_wet, fid_wet),\n                   fid_rein_terms = NVL (v_rein_terms, fid_rein_terms),\n                   fid_reins_term_to =\n                       NVL (v_rein_terms_to, fid_reins_term_to),\n                   fid_cede_comp_gross_ret =\n                       NVL (v_gross_ret, fid_cede_comp_gross_ret),\n                   fid_cede_comp_rein_amt =\n                       NVL (v_rein_amt, fid_cede_comp_rein_amt),\n                   fid_cede_sign_dt = NVL (v_sign_dt, fid_cede_sign_dt),\n                   fid_amt_perc_sum_insured =\n                       NVL (v_amt, fid_amt_perc_sum_insured)\n                 WHERE fid_code = v_fid_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to retrieve facre details for update  ...'\n                        || v_ced_pol_no\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on updating facre details ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        ELSIF v_action = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_ren_facre_in_dtls\n                      WHERE fid_code = v_fid_code;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_err :=\n                           'Unable to facre details for DELETION  ...'\n                        || v_ced_pol_no\n                        || '..'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n                WHEN OTHERS\n                THEN\n                    v_err :=\n                           'Error occurred on DELETING facre details ...'\n                        || SQLERRM (SQLCODE);\n                    RETURN;\n            END;\n        END IF;\n    END update_ren_facre_dtls;",
        "pop_single_risk_clause": "PROCEDURE pop_single_risk_clause (v_pol_policy_no   IN VARCHAR2,\n                                      v_pol_endos_no    IN VARCHAR2,\n                                      v_cls_code        IN VARCHAR2,\n                                      v_pol_batch_no    IN NUMBER,\n                                      v_pro_code        IN NUMBER,\n                                      v_ipu_code        IN NUMBER)\n    IS\n        v_clause     CLOB;\n        v_scl_code   NUMBER;\n\n        CURSOR clause (v_sclcode NUMBER)\n        IS\n            SELECT DISTINCT\n                   cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND sbcl_scl_code = v_sclcode\n                   AND clp_pro_code = v_pro_code\n                   AND cls_code = v_cls_code\n                   AND cls_code NOT IN\n                           (SELECT pocl_sbcl_cls_code\n                              FROM gin_policy_clauses\n                             WHERE     pocl_pol_batch_no = v_pol_batch_no\n                                   AND pocl_ipu_code = v_ipu_code);\n    BEGIN\n        BEGIN\n            SELECT ipu_sec_scl_code\n              INTO v_scl_code\n              FROM gin_insured_property_unds\n             WHERE ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error getting Risk Sub class');\n        END;\n\n        FOR cls IN clause (v_scl_code)\n        LOOP\n            SELECT cls_wording\n              INTO v_clause\n              FROM gin_clause\n             WHERE cls_code = cls.sbcl_cls_code;\n\n            INSERT INTO gin_policy_clauses (pocl_sbcl_cls_code,\n                                            pocl_cls_sht_desc,\n                                            pocl_sbcl_scl_code,\n                                            pocl_pol_policy_no,\n                                            pocl_pol_ren_endos_no,\n                                            pocl_pol_batch_no,\n                                            pocl_ipu_code,\n                                            plcl_cls_type,\n                                            pocl_clause,\n                                            pocl_cls_editable,\n                                            pocl_new,\n                                            pocl_heading)\n                 VALUES (cls.sbcl_cls_code,\n                         cls.sbcl_cls_sht_desc,\n                         cls.clp_scl_code,\n                         v_pol_policy_no,\n                         v_pol_endos_no,\n                         v_pol_batch_no,\n                         v_ipu_code,\n                         cls.cls_type,\n                         v_clause,\n                         cls.cls_editable,\n                         'Y',\n                         cls.cls_heading);\n\n            IF NVL (cls.cls_editable, 'N') = 'Y'\n            THEN\n                SELECT cls_wording\n                  INTO v_clause\n                  FROM gin_clause\n                 WHERE cls_code = cls.sbcl_cls_code;\n\n                BEGIN\n                    v_clause :=\n                        merge_policies_text (v_pol_batch_no, v_clause);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                UPDATE gin_policy_clauses\n                   SET pocl_clause = v_clause\n                 WHERE     pocl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND pocl_ipu_code = v_ipu_code;\n            END IF;\n        END LOOP;\n    END;",
        "edit_risk_clause": "PROCEDURE edit_risk_clause (v_pocl_code   IN NUMBER,\n                                v_ipu_code    IN NUMBER,\n                                v_clause      IN VARCHAR2,\n                                v_heading     IN VARCHAR2)\n    IS\n    BEGIN\n        UPDATE gin_policy_clauses\n           SET pocl_clause = v_clause, pocl_heading = v_heading --NVL(null, QC_CLAUSE)\n         WHERE     pocl_sbcl_cls_code = v_pocl_code\n               AND pocl_ipu_code = v_ipu_code;\n    END;",
        "del_risk_clause": "PROCEDURE del_risk_clause (v_pocl_code IN NUMBER, v_ipu_code IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_policy_clauses\n         WHERE     pocl_sbcl_cls_code = v_pocl_code\n               AND pocl_ipu_code = v_ipu_code;\n    END;",
        "pop_ren_single_risk_clause": "PROCEDURE pop_ren_single_risk_clause (v_pol_policy_no   IN VARCHAR2,\n                                          v_pol_endos_no    IN VARCHAR2,\n                                          v_cls_code        IN VARCHAR2,\n                                          v_pol_batch_no    IN NUMBER,\n                                          v_pro_code        IN NUMBER,\n                                          v_ipu_code        IN NUMBER)\n    IS\n        v_clause   LONG;\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable,\n                   cls_wording\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND cls_code = v_cls_code\n                   AND cls_code NOT IN\n                           (SELECT pocl_sbcl_cls_code\n                              FROM gin_ren_policy_clauses\n                             WHERE pocl_pol_batch_no = v_pol_batch_no);\n    BEGIN\n        FOR cls IN clause\n        LOOP\n            INSERT INTO gin_ren_policy_clauses (pocl_sbcl_cls_code,\n                                                pocl_cls_sht_desc,\n                                                pocl_sbcl_scl_code,\n                                                pocl_pol_policy_no,\n                                                pocl_pol_ren_endos_no,\n                                                pocl_pol_batch_no,\n                                                pocl_ipu_code,\n                                                plcl_cls_type,\n                                                pocl_clause,\n                                                pocl_cls_editable,\n                                                pocl_new,\n                                                pocl_heading)\n                 VALUES (cls.sbcl_cls_code,\n                         cls.sbcl_cls_sht_desc,\n                         cls.clp_scl_code,\n                         v_pol_policy_no,\n                         v_pol_endos_no,\n                         v_pol_batch_no,\n                         v_ipu_code,\n                         cls.cls_type,\n                         cls.cls_wording,\n                         cls.cls_editable,\n                         'Y',\n                         cls.cls_heading);\n\n            IF NVL (cls.cls_editable, 'N') = 'Y'\n            THEN\n                SELECT cls_wording\n                  INTO v_clause\n                  FROM gin_clause\n                 WHERE cls_code = cls.sbcl_cls_code;\n\n                BEGIN\n                    v_clause :=\n                        merge_policies_text (v_pol_batch_no, v_clause);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                UPDATE gin_ren_policy_clauses\n                   SET pocl_clause = v_clause\n                 WHERE     pocl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND pocl_ipu_code = v_ipu_code;\n            END IF;\n        END LOOP;\n    END;",
        "edit_ren_risk_clause": "PROCEDURE edit_ren_risk_clause (v_pocl_code   IN NUMBER,\n                                    v_ipu_code    IN NUMBER,\n                                    v_clause      IN VARCHAR2)\n    IS\n    BEGIN\n        UPDATE gin_ren_policy_clauses\n           SET pocl_clause = v_clause                   --NVL(null, QC_CLAUSE)\n         WHERE     pocl_sbcl_cls_code = v_pocl_code\n               AND pocl_ipu_code = v_ipu_code;\n    END;",
        "del_ren_risk_clause": "PROCEDURE del_ren_risk_clause (v_pocl_code   IN NUMBER,\n                                   v_ipu_code    IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_ren_policy_clauses\n         WHERE     pocl_sbcl_cls_code = v_pocl_code\n               AND pocl_ipu_code = v_ipu_code;\n    END;",
        "edit_endors_details": "PROCEDURE edit_endors_details (v_pol_batch_no   IN NUMBER,\n                                   v_prp_code       IN NUMBER,\n                                   v_comment        IN VARCHAR2,\n                                   v_type           IN VARCHAR2,\n                                   v_end_code       IN NUMBER)\n    IS\n        v_text         VARCHAR2 (4000);\n        v_pol_status   VARCHAR2 (5);\n    BEGIN\n        -- RAISE_ERROR('v_text ; '||v_pol_batch_no);\n        BEGIN\n            -- RAISE_ERROR('TEST'||v_comment);\n            IF v_type = 'RN'\n            THEN\n                v_text := merge_ren_policies_text (v_pol_batch_no, v_comment);\n            -- RAISE_ERROR('v_text'||v_text);\n            ELSE\n                v_text := merge_policies_text (v_pol_batch_no, v_comment);\n            END IF;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_text := v_comment;\n        --RAISE_ERROR('Error Occured while saving Endorsement Details...'||SQLERRM(SQLCODE));\n        END;\n\n        --RAISE_ERROR('TEST'||v_text);\\\n        IF v_type = 'NB'\n        THEN\n            SELECT pol_policy_status\n              INTO v_pol_status\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n        END IF;\n\n        IF v_type = 'RN'\n        THEN\n            UPDATE gin_ren_policies\n               SET                                    -- pol_remarks = v_text,\n                   pol_summary_remarks = v_text\n             WHERE pol_batch_no = v_pol_batch_no;\n        ELSIF v_type = 'NB' AND v_pol_status = 'RN'\n        THEN\n            UPDATE gin_policies\n               SET pol_summary_remarks = v_text,\n                   pol_remarks_code = v_end_code\n             WHERE pol_batch_no = v_pol_batch_no;\n        ELSIF v_type = 'NB'\n        THEN\n            UPDATE gin_policies\n               SET pol_remarks = v_text, pol_remarks_code = v_end_code\n             WHERE pol_batch_no = v_pol_batch_no;\n        ELSIF v_type = 'EN'\n        THEN\n            --           RAISE_ERROR('v_type'||v_type||'v_text'||v_text);\n            UPDATE gin_policies\n               SET pol_summary_remarks = v_text,\n                   pol_end_code_remarks = v_end_code\n             WHERE pol_batch_no = v_pol_batch_no;\n        END IF;\n    END;",
        "update_risk_remarks": "PROCEDURE update_risk_remarks (v_polrs_code     IN     NUMBER,\n                                   v_action         IN     VARCHAR2,\n                                   v_pol_batch_no   IN     NUMBER,\n                                   v_ipu_code       IN     NUMBER,\n                                   v_polrs_sch      IN     LONG,\n                                   v_err               OUT VARCHAR2)\n    IS\n        v_new_polrs_code   NUMBER;\n    BEGIN\n        IF v_action = 'A'\n        THEN\n            BEGIN\n                SELECT gin_polrs_code_seq.NEXTVAL\n                  INTO v_new_polrs_code\n                  FROM DUAL;\n\n                INSERT INTO gin_policy_risk_schedules (polrs_code,\n                                                       polrs_ipu_code,\n                                                       polrs_pol_batch_no,\n                                                       polrs_schedule)\n                     VALUES (v_new_polrs_code,\n                             v_ipu_code,\n                             v_pol_batch_no,\n                             v_polrs_sch);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err := 'error inserting risk remark....';\n                    RETURN;\n            END;\n        ELSIF v_action = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_policy_risk_schedules\n                   SET polrs_schedule = v_polrs_sch\n                 WHERE polrs_code = v_polrs_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err := 'error updating risk remark....';\n                    RETURN;\n            END;\n        ELSIF v_action = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_policy_risk_schedules\n                      WHERE polrs_code = v_polrs_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_err := 'error updating risk remark....';\n                    RETURN;\n            END;\n        ELSE\n            BEGIN\n                v_err := 'error determing action....';\n                RETURN;\n            END;\n        END IF;\n    END;",
        "update_allocate_certs": "PROCEDURE update_allocate_certs (--------20122022\n    --        v_action                      VARCHAR2,\n    --        v_polc_code                   gin_policy_certs.polc_code%TYPE,\n    --        v_polc_pol_policy_no          gin_policy_certs.polc_pol_policy_no%TYPE,\n    --        v_polc_pol_ren_endos_no       gin_policy_certs.polc_pol_ren_endos_no%TYPE,\n    --        v_polc_pol_batch_no           gin_policy_certs.polc_pol_batch_no%TYPE,\n    --        v_polc_ipu_code               gin_policy_certs.polc_ipu_code%TYPE,\n    --        v_ipu_id                      gin_policy_certs.polc_ipu_id%TYPE,\n    --        v_polc_ct_code                gin_policy_certs.polc_ct_code%TYPE,\n    --        v_polc_ct_sht_desc            gin_policy_certs.polc_ct_sht_desc%TYPE,\n    --        v_polc_cer_cert_no            gin_policy_certs.polc_cer_cert_no%TYPE,\n    --        v_polc_lot_id                 gin_policy_certs.polc_lot_id%TYPE,\n    --        v_polc_issue_dt               gin_policy_certs.polc_issue_dt%TYPE,\n    --        v_polc_cert_year              gin_policy_certs.polc_cert_year%TYPE,\n    --        v_polc_status                 gin_policy_certs.polc_status%TYPE,\n    --        v_polc_print_status           gin_policy_certs.polc_print_status%TYPE,\n    --        v_polc_print_dt               gin_policy_certs.polc_print_dt%TYPE,\n    --        v_polc_wef                    gin_policy_certs.polc_wef%TYPE,\n    --        v_polc_wet                    gin_policy_certs.polc_wet%TYPE,\n    --        v_polc_check_cert             gin_policy_certs.polc_check_cert%TYPE,\n    --        v_polc_reason_cancelled       gin_policy_certs.polc_reason_cancelled%TYPE,\n    --        v_polc_cancel_dt              gin_policy_certs.polc_cancel_dt%TYPE,\n    --        v_user                        VARCHAR,\n    --        v_err                     OUT VARCHAR2)\n    --    IS\n    --        v_new_polc_code               NUMBER;\n    --        v_new_pcq_code                NUMBER;\n    --        --  v_wef            DATE;\n    --        v_wet                         DATE;\n    --        v_ipu_wef                     DATE;\n    --        v_ipu_wet                     DATE;\n    --        v_ipu_eff_wet                 DATE;\n    --        v_unsubmtd_docs               NUMBER;\n    --        v_short_period                NUMBER;\n    --        v_cert_wef                    DATE;\n    --        v_rqrd_docs                   NUMBER;\n    --        --v_rqrd_doc       VARCHAR2(1);\n    --        v_ipu_prev_ipu_code           NUMBER;\n    --        v_error                       VARCHAR2 (200);\n    --        v_polc_passenger_no           gin_policy_certs.polc_passenger_no%TYPE;\n    --        v_polc_tonnage                gin_policy_certs.polc_tonnage%TYPE;\n    --        v_ipu_clp_code                gin_insured_property_unds.ipu_clp_code%TYPE;\n    --        v_ipu_eff_wef                 gin_insured_property_unds.ipu_eff_wef%TYPE;\n    --        v_ipu_covt_sht_desc           gin_insured_property_unds.ipu_covt_sht_desc%TYPE;\n    --        v_insured                     VARCHAR2 (300);\n    --        v_comp_name                   VARCHAR2 (100);\n    --        v_uw_certs                    VARCHAR2 (1);\n    --        --v_cert_sht_period Number;\n    --        v_cover_code                  NUMBER;\n    --        v_cert_desc                   VARCHAR2 (50);\n    --        v_ct_type                     VARCHAR2 (10);\n    --        v_cert_no                     VARCHAR2 (20);\n    --        v_ipu_sec_scl_code            gin_insured_property_unds.ipu_sec_scl_code%TYPE;\n    --        v_brn_code                    gin_policies.pol_brn_code%TYPE;\n    --        v_pol_uw_year                 gin_policies.pol_uw_year%TYPE;\n    --        v_pol_tran_type               gin_policies.pol_tran_type%TYPE;\n    --        v_agn_agent_code              tqc_agencies.agn_code%TYPE;\n    --        v_agnt_sht_desc               tqc_agencies.agn_sht_desc%TYPE;\n    --        v_ipu_property_id             gin_insured_property_unds.ipu_property_id%TYPE;\n    --        v_pol_client_policy_number    gin_policies.pol_client_policy_number%TYPE;\n    --        v_ipu_prp_code                gin_insured_property_unds.ipu_prp_code%TYPE;\n    --        v_cnt                         NUMBER;\n    --        cert_status                   VARCHAR2 (1);\n    --        cert_wef                      DATE;\n    --        cert_wet                      DATE;\n    --        print_cert_status             VARCHAR2 (1);\n    --        v_polc_ipu_id                 NUMBER;\n    --        v_pol_prem_computed           VARCHAR2 (10);\n    --        v_pol_statusi                 VARCHAR2 (10);\n    --        v_clnt_code                   NUMBER;\n    --        v_agn_code                    NUMBER;\n    --        v_backdating_of_certs_param   VARCHAR2 (1);\n    --        v_print_status                VARCHAR2 (1);\n    --        v_cer_cert_no                 VARCHAR2 (100);\n    --    BEGIN\n    --        BEGIN\n    --            SELECT pol_prp_code, pol_agnt_agent_code\n    --              INTO v_clnt_code, v_agn_code\n    --              FROM gin_policies\n    --             WHERE pol_batch_no = v_polc_pol_batch_no;\n    --        EXCEPTION\n    --            WHEN OTHERS\n    --            THEN\n    --                raise_error ('Error getting policy details...');\n    --        END;\n    --\n    --        BEGIN\n    --            v_backdating_of_certs_param :=\n    --                gin_parameters_pkg.get_param_varchar (\n    --                    'ALLOW_BACKDATING_OF_CERTS');\n    --        EXCEPTION\n    --            WHEN NO_DATA_FOUND\n    --            THEN\n    --                v_backdating_of_certs_param := 'N';\n    --            WHEN OTHERS\n    --            THEN\n    --                v_backdating_of_certs_param := 'N';\n    --        END;\n    --\n    --        IF gin_parameters_pkg.get_param_varchar (\n    --               'ALLOW_CERTIFICATE_BALANCES') =\n    --           'N'\n    --        THEN\n    --            IF gis_accounts_utilities.getpaidprem (v_polc_pol_batch_no,\n    --                                                   v_agn_code,\n    --                                                   v_clnt_code,\n    --                                                   'B') > 0\n    --            THEN\n    --                v_err :=\n    --                    'Cannot Allocate Certificate when there is pending balance';\n    --                RETURN;\n    --            END IF;\n    --        END IF;\n    --\n    --        SELECT pol_prem_computed, pol_policy_status\n    --          INTO v_pol_prem_computed, v_pol_statusi\n    --          FROM gin_policies\n    --         WHERE pol_batch_no = v_polc_pol_batch_no;\n    --\n    --        --raise_error(' v_pol_prem_computed '||v_pol_prem_computed);\n    --        --      IF NVL (v_pol_prem_computed, 'N') != 'Y' AND v_pol_statusi != 'CO'\n    --        --      THEN\n    --        --         -- RAISE_ERROR('here.......idiot*10');\n    --        --         v_err :=\n    --        --            'Please compute premium on policy. Changes have been made on the policy..';\n    --        --         RETURN;\n    --        --      END IF;\n    --        BEGIN\n    --            SELECT pol_brn_code,\n    --                   pol_uw_year,\n    --                   pol_tran_type,\n    --                   pol_agnt_agent_code,\n    --                   pol_agnt_sht_desc,\n    --                   pol_client_policy_number\n    --              INTO v_brn_code,\n    --                   v_pol_uw_year,\n    --                   v_pol_tran_type,\n    --                   v_agn_agent_code,\n    --                   v_agnt_sht_desc,\n    --                   v_pol_client_policy_number\n    --              FROM gin_policies\n    --             WHERE pol_batch_no = v_polc_pol_batch_no;\n    --        EXCEPTION\n    --            WHEN NO_DATA_FOUND\n    --            THEN\n    --                v_err :=\n    --                       'Error retrieving policy for certificate allocation ...'\n    --                    || SQLERRM (SQLCODE);\n    --                RETURN;\n    --            WHEN OTHERS\n    --            THEN\n    --                v_err :=\n    --                    'Error Occurred at policy Level ...' || SQLERRM (SQLCODE);\n    --                RETURN;\n    --        END;\n    --\n    --        BEGIN\n    --            SELECT ipu_wef,\n    --                   ipu_wet,\n    --                   ipu_prev_ipu_code,\n    --                   ipu_eff_wet,\n    --                   ipu_eff_wef,\n    --                   ipu_sec_scl_code,\n    --                   ipu_clp_code,\n    --                   ipu_covt_sht_desc,\n    --                   ipu_property_id,\n    --                   ipu_prp_code,\n    --                   gis_utilities.clnt_name (clnt_name, clnt_other_names)\n    --                       insured,\n    --                   ipu_id\n    --              INTO v_ipu_wef,\n    --                   v_ipu_wet,\n    --                   v_ipu_prev_ipu_code,\n    --                   v_ipu_eff_wet,\n    --                   v_ipu_eff_wef,\n    --                   v_ipu_sec_scl_code,\n    --                   v_ipu_clp_code,\n    --                   v_ipu_covt_sht_desc,\n    --                   v_ipu_property_id,\n    --                   v_ipu_prp_code,\n    --                   v_insured,\n    --                   v_polc_ipu_id\n    --              FROM gin_insured_property_unds, tqc_clients\n    --             WHERE     ipu_code = v_polc_ipu_code\n    --                   AND ipu_pol_batch_no = v_polc_pol_batch_no\n    --                   AND ipu_prp_code = clnt_code;\n    --        EXCEPTION\n    --            WHEN NO_DATA_FOUND\n    --            THEN\n    --                v_err :=\n    --                       'Error retrieving risk for certificate At Risk Level ...ipu='\n    --                    || v_polc_ipu_code\n    --                    || '= batch='\n    --                    || v_polc_pol_batch_no\n    --                    || SQLERRM (SQLCODE);\n    --                RETURN;\n    --            WHEN OTHERS\n    --            THEN\n    --                v_err := 'Error Occurred Risk Level ...' || SQLERRM (SQLCODE);\n    --                RETURN;\n    --        END;\n    --\n    --        BEGIN\n    --            SELECT polc_status,\n    --                   polc_wef,\n    --                   polc_wet,\n    --                   polc_print_status\n    --              INTO cert_status,\n    --                   cert_wef,\n    --                   cert_wet,\n    --                   print_cert_status\n    --              FROM gin_policy_certs\n    --             WHERE polc_code = v_polc_code;\n    --        EXCEPTION\n    --            WHEN NO_DATA_FOUND\n    --            THEN\n    --                NULL;\n    --            WHEN OTHERS\n    --            THEN\n    --                v_err :=\n    --                       'Error Occurred getting the allocated certificate ...'\n    --                    || SQLERRM (SQLCODE);\n    --                RETURN;\n    --        END;\n    --\n    --        BEGIN\n    --            SELECT MAX (wef_dt)\n    --              INTO v_cert_wef\n    --              FROM (SELECT MAX (NVL ((polc_wet + 1), v_ipu_wef))     wef_dt\n    --                      FROM gin_policy_certs\n    --                     WHERE     polc_ipu_code(+) = v_polc_ipu_code\n    --                           AND polc_status != 'C'\n    --                    UNION\n    --                    SELECT MAX (NVL ((polc_wet + 1), v_ipu_wef))     wef_dt\n    --                      FROM gin_policy_certs\n    --                     WHERE     polc_ipu_code(+) = v_ipu_prev_ipu_code\n    --                           AND polc_status != 'C'\n    --                    UNION\n    --                    SELECT TRUNC (SYSDATE) FROM DUAL);\n    --        EXCEPTION\n    --            WHEN NO_DATA_FOUND\n    --            THEN\n    --                v_cert_wef := NULL;\n    --        END;\n    --\n    --        IF v_cert_wef IS NOT NULL\n    --        THEN\n    --            NULL;                                        -- v_wef:=v_cert_wef;\n    --        ELSE\n    --            NULL;               --v_wef := GREATEST(v_ipu_wef,TRUNC(SYSDATE));\n    --        END IF;\n    --\n    --        BEGIN\n    --            SELECT COUNT (*)\n    --              INTO v_unsubmtd_docs\n    --              FROM gin_uw_doc_reqrd_submtd\n    --             WHERE     usdocr_ipu_code = v_polc_ipu_code\n    --                   AND usdocr_submited = 'N';\n    --        EXCEPTION\n    --            WHEN NO_DATA_FOUND\n    --            THEN\n    --                v_unsubmtd_docs := 0;\n    --        END;\n    --\n    --        BEGIN\n    --            SELECT param_value\n    --              INTO v_short_period\n    --              FROM gin_parameters\n    --             WHERE param_name = 'CERT_SHT_PERIOD';\n    --        EXCEPTION\n    --            WHEN NO_DATA_FOUND\n    --            THEN\n    --                NULL;\n    --        END;\n    --\n    --        IF v_unsubmtd_docs > 0 AND v_short_period > 0\n    --        THEN\n    --            SELECT MIN (wet_dt)\n    --              INTO v_wet\n    --              FROM (SELECT (v_polc_wef + v_short_period) wet_dt FROM DUAL\n    --                    UNION\n    --                    SELECT v_ipu_wet wet_dt FROM DUAL);\n    --        ELSE\n    --            NULL;                                        --v_wet := v_ipu_wet;\n    --        END IF;\n    --\n    --        IF NVL (v_backdating_of_certs_param, 'N') != 'Y'\n    --        THEN\n    --            IF NVL (v_action, 'A') = 'A' OR NVL (v_action, 'A') = 'E'\n    --            THEN\n    --                IF v_polc_wef IS NULL OR v_polc_wet IS NULL\n    --                THEN\n    --                    v_err :=\n    --                        'Must specify certificates cover effective dates..';\n    --                ELSIF v_polc_wef > v_polc_wet\n    --                THEN\n    --                    v_err :=\n    --                        'The Wet date entered is earlier than the ''Wef'' Date.  Please Re-enter';\n    --                    RETURN;\n    --                ELSIF v_polc_wef < GREATEST (v_ipu_wef, TRUNC (SYSDATE))\n    --                THEN\n    --                    v_err :=\n    --                        'Certificate effective dates can not be before today''s date or the risk cover from date..';\n    --                    RETURN;\n    --                END IF;\n    --            END IF;\n    --        ELSE\n    --            IF NVL (v_action, 'A') = 'A' OR NVL (v_action, 'A') = 'E'\n    --            THEN\n    --                IF v_polc_wef IS NULL OR v_polc_wet IS NULL\n    --                THEN\n    --                    v_err :=\n    --                        'Must specify certificates cover effective dates..';\n    --                ELSIF v_polc_wef > v_polc_wet\n    --                THEN\n    --                    v_err :=\n    --                        'The Wet date entered is earlier than the ''Wef'' Date.  Please Re-enter';\n    --                    RETURN;\n    --                END IF;\n    --            END IF;\n    --        END IF;\n    --\n    --        IF v_action = 'A'\n    --        THEN\n    --            IF v_polc_print_status = 'P'\n    --            THEN\n    --                v_err :=\n    --                    'This certificate has already been printed and can not be allocated again..';\n    --                RETURN;\n    --            END IF;\n    --\n    --            IF v_polc_ct_sht_desc IS NULL\n    --            THEN\n    --                v_err := 'Select certificate type first..';\n    --                RETURN;\n    --            END IF;\n    --\n    --            IF v_polc_wet > v_ipu_eff_wet\n    --            THEN\n    --                v_err :=\n    --                    'You Cannot Have A Certificate For A Cover Period, Outside The Risk Cover....';\n    --                RETURN;\n    --            END IF;\n    --\n    --            BEGIN\n    --                check_dup_certificates (v_polc_wef,\n    --                                        v_polc_wet,\n    --                                        v_polc_status,\n    --                                        v_polc_ipu_id,\n    --                                        v_error);\n    --            EXCEPTION\n    --                WHEN OTHERS\n    --                THEN\n    --                    v_err :=\n    --                           'Error on Checking duplicate certificates....'\n    --                        || SQLERRM (SQLCODE);\n    --                    RETURN;\n    --            END;\n    --\n    --            IF v_error IS NOT NULL\n    --            THEN\n    --                v_err := v_error;\n    --                RETURN;\n    --            END IF;\n    --\n    --            IF v_short_period IS NOT NULL\n    --            THEN\n    --                BEGIN\n    --                    --                      SELECT COUNT(USDOCR_ID) Into     v_rqrd_docs\n    --                    --                          FROM GIN_UW_DOC_REQRD_SUBMTD\n    --                    --                          WHERE USDOCR_IPU_CODE=v_polc_ipu_code\n    --                    --                          AND USDOCR_SUBMITED='N'\n    --                    --                          AND USDOCR_DOCR_ID IN\n    --                    --                          (SELECT DOCR_ID\n    --                    --                          FROM GIN_DOCUMENTS_REQRD\n    --                    --                          WHERE DOCR_MANDTRY='Y'\n    --                    --                          AND DOCR_CERT_DOC='Y'\n    --                    --                          AND DOCR_LEVEL='UW'\n    --                    --                          AND DOCR_CLP_CODE=v_ipu_clp_code);\n    --                    SELECT COUNT (usdocr_code)\n    --                      INTO v_rqrd_docs\n    --                      FROM gin_uw_doc_reqrd_submtd\n    --                     WHERE     usdocr_ipu_code = v_polc_ipu_code\n    --                           AND usdocr_submited = 'N'\n    --                           AND usdocr_docr_id IN\n    --                                   (SELECT sclrd_code\n    --                                      FROM gin_reqrd_documents,\n    --                                           gin_subclass_req_docs\n    --                                     WHERE     rdoc_mandtry = 'Y'\n    --                                           AND rdoc_cert_doc = 'Y'\n    --                                           AND rdoc_id = sclrd_rdoc_id\n    --                                           AND sclrd_scl_code =\n    --                                               v_ipu_sec_scl_code);\n    --                EXCEPTION\n    --                    WHEN NO_DATA_FOUND\n    --                    THEN\n    --                        NULL;\n    --                    WHEN OTHERS\n    --                    THEN\n    --                        v_err := 'CERTIFICATE PRE-INSERT ERROR....';\n    --                        RETURN;\n    --                END;\n    --            END IF;\n    --\n    --            IF     NVL (v_rqrd_docs, 0) > 0\n    --               AND (TO_NUMBER (v_polc_wet - v_polc_wef) >\n    --                    NVL (v_short_period, 0))\n    --            THEN\n    --                --message('All documents not provided....');pause;\n    --                NULL;                                       --v_rqrd_doc:='Y';\n    --                v_err :=\n    --                    'Cannot Issue full term certificate without the mandatory documents!';\n    --\n    --                IF v_short_period IS NOT NULL\n    --                THEN\n    --                    IF NVL (v_short_period, 0) >=\n    --                       TO_NUMBER (v_polc_wet - v_polc_wef)\n    --                    THEN\n    --                        v_err :=\n    --                            'Certificate issued for one month and no mandatory documents Submitted!';\n    --                    /*:SYSTEM.MESSAGE_LEVEL := 25;\n    --                    COMMIT;\n    --                    :SYSTEM.MESSAGE_LEVEL := 0;*/\n    --                    ELSIF TO_NUMBER (v_polc_wet - v_polc_wef) >\n    --                          NVL (v_short_period, 0)\n    --                    THEN\n    --                        --:GIN_POLICY_CERTS.POLC_CHECK_CERT:='N';\n    --                        v_err :=\n    --                               'Cannot Issue certificate without the mandatory documents and past '\n    --                            || v_short_period\n    --                            || 'days!! ...';\n    --                        RETURN;\n    --                    END IF;\n    --                END IF;\n    --            ELSE\n    --                NULL;                                       --v_rqrd_doc:='Y';\n    --            END IF;\n    --\n    --            IF     v_polc_status = 'A'\n    --               AND v_ipu_eff_wef > v_polc_wef\n    --               AND v_ipu_eff_wet < v_polc_wet\n    --            THEN\n    --                v_err :=\n    --                    'One cannot allocate a cert when the certificate cover period does not match the risk cover period.';\n    --                RETURN;\n    --            END IF;\n    --\n    --            IF     NVL (v_rqrd_docs, 0) > 0\n    --               AND (TO_NUMBER (v_polc_wet - v_polc_wef) >\n    --                    NVL (v_short_period, 0))\n    --               AND NVL (v_short_period, 0) <\n    --                   TO_NUMBER (v_polc_wet - v_polc_wef)\n    --            THEN\n    --                --  :GIN_POLICY_CERTS.POLC_CHECK_CERT:='N';\n    --                v_err :=\n    --                    'Cannot Issue full term certificate without the mandatory documents!';\n    --                RETURN;\n    --            ELSE\n    --                --message('All documents provided start....');pause;\n    --                BEGIN\n    --                    v_uw_certs :=\n    --                        gin_parameters_pkg.get_param_varchar ('UW_CERTS');\n    --                EXCEPTION\n    --                    WHEN OTHERS\n    --                    THEN\n    --                        v_uw_certs := 'N';\n    --                END;\n    --\n    --                -----------------------------------------------------------ADDED BY KIMOTHO FOR CERTS FOR NIGER\n    --                IF NVL (v_uw_certs, 'N') = 'Y'\n    --                THEN\n    --                    BEGIN\n    --                        SELECT covt_code\n    --                          INTO v_cover_code\n    --                          FROM gin_cover_types\n    --                         WHERE covt_sht_desc = v_ipu_covt_sht_desc;\n    --                    EXCEPTION\n    --                        WHEN OTHERS\n    --                        THEN\n    --                            v_err :=\n    --                                'Error Getting Cover Code for the risk certificate.....';\n    --                            RETURN;\n    --                    END;\n    --\n    --                    BEGIN\n    --                        v_cert_no :=\n    --                            gin_sequences_pkg.get_cert_number_format (\n    --                                'C',\n    --                                v_ipu_sec_scl_code,\n    --                                v_brn_code,\n    --                                v_pol_uw_year,\n    --                                v_pol_tran_type,\n    --                                v_cover_code);\n    --                    EXCEPTION\n    --                        WHEN OTHERS\n    --                        THEN\n    --                            NULL;\n    --                    END;\n    --                END IF;\n    --\n    --                ----------------------------------------------------------------------------------------------------------\n    --                BEGIN\n    --                    SELECT COUNT (1)\n    --                      INTO v_cnt\n    --                      FROM gin_policy_certs\n    --                     WHERE     polc_pol_batch_no = v_polc_pol_batch_no\n    --                           AND polc_ipu_code = v_polc_ipu_code\n    --                           AND polc_print_status != 'P';\n    --                EXCEPTION\n    --                    WHEN OTHERS\n    --                    THEN\n    --                        v_err :=\n    --                            'Error checking for other allocations on the risk..';\n    --                        RETURN;\n    --                END;\n    --\n    --                IF NVL (v_cnt, 0) != 0\n    --                THEN\n    --                    v_err :=\n    --                        'This risk has another certificate allocation awaiting printing..';\n    --                    RETURN;\n    --                END IF;\n    --\n    --                IF     NVL (v_polc_check_cert, 'N') = 'Y'\n    --                   AND NVL (v_polc_print_status, 'N') = 'N'\n    --                THEN\n    --                    --SET_ALERT_PROPERTY('CANCEL',ALERT_MESSAGE_TEXT,'Do You Realy Want to Print Certificate ?');\n    --                    --al_id := SHOW_ALERT('CANCEL');\n    --                    --    IF al_id = ALERT_BUTTON1 THEN\n    --                    BEGIN\n    --                        SELECT certificate_no_seq.NEXTVAL\n    --                          INTO v_new_polc_code\n    --                          FROM DUAL;\n    --\n    --                        INSERT INTO gin_policy_certs (polc_code,\n    --                                                      polc_issue_dt,\n    --                                                      polc_pol_policy_no,\n    --                                                      polc_pol_ren_endos_no,\n    --                                                      polc_pol_batch_no,\n    --                                                      polc_ct_code,\n    --                                                      polc_agnt_agent_code,\n    --                                                      polc_agnt_sht_desc,\n    --                                                      polc_property_id,\n    --                                                      polc_ipu_code,\n    --                                                      polc_status,\n    --                                                      polc_print_dt,\n    --                                                      polc_wef,\n    --                                                      polc_wet,\n    --                                                      polc_scl_code,\n    --                                                      polc_cert_year,\n    --                                                      polc_client_policy_no,\n    --                                                      polc_ct_sht_desc,\n    --                                                      polc_print_status,\n    --                                                      polc_check_cert,\n    --                                                      polc_ipu_id,\n    --                                                      polc_prp_code,\n    --                                                      pocl_covt_sht_desc,\n    --                                                      polc_alloc_by,\n    --                                                      polc_brn_code,\n    --                                                      polc_cer_cert_no)\n    --                             VALUES (v_new_polc_code,\n    --                                     NVL (v_polc_issue_dt, SYSDATE),\n    --                                     v_polc_pol_policy_no,\n    --                                     v_polc_pol_ren_endos_no,\n    --                                     v_polc_pol_batch_no,\n    --                                     v_polc_ct_code,\n    --                                     v_agn_agent_code,\n    --                                     v_agnt_sht_desc,\n    --                                     v_ipu_property_id,\n    --                                     v_polc_ipu_code,\n    --                                     v_polc_status,\n    --                                     v_polc_print_dt,\n    --                                     v_polc_wef,\n    --                                     v_polc_wet,\n    --                                     v_ipu_sec_scl_code,\n    --                                     v_pol_uw_year,\n    --                                     v_pol_client_policy_number,\n    --                                     v_polc_ct_sht_desc,\n    --                                     v_polc_print_status,\n    --                                     v_polc_check_cert,\n    --                                     v_polc_ipu_id,\n    --                                     v_ipu_prp_code,\n    --                                     v_ipu_covt_sht_desc,\n    --                                     v_user,\n    --                                     v_brn_code,\n    --                                     v_cert_no);\n    --                    EXCEPTION\n    --                        WHEN OTHERS\n    --                        THEN\n    --                            ROLLBACK;\n    --                            v_err :=\n    --                                   'Error inserting risk in allocation for certificates ..'\n    --                                || SQLERRM (SQLCODE);\n    --                            RETURN;\n    --                    END;\n    --\n    --                    -----------------------------------------------------------ADDED BY KIMOTHO FOR CERTS FOR NIGER\n    --                    IF NVL (v_uw_certs, 'N') = 'Y'\n    --                    THEN\n    --                        -- :POLC_CER_CERT_NO:=v_cert_no;\n    --                        NULL;\n    --                    END IF;\n    --\n    --                    -----------------------------------------------------------\n    --                    --added for tonnage and passengers <ken 29/10/2008>\n    --                    BEGIN\n    --                        BEGIN\n    --                            SELECT ct_type, ct_sht_desc\n    --                              INTO v_ct_type, v_cert_desc\n    --                              FROM gin_cert_types\n    --                             WHERE ct_code = v_polc_ct_code;\n    --                        EXCEPTION\n    --                            WHEN NO_DATA_FOUND\n    --                            THEN\n    --                                NULL;\n    --                            WHEN OTHERS\n    --                            THEN\n    --                                ROLLBACK;\n    --                                v_err := 'Error getting the cert type...';\n    --                                RETURN;\n    --                        END;\n    --\n    --                        --IF v_ct_type IS NOT NULL AND v_ct_type IN ('A','B') THEN<kimotho commented this part to cater for PSV >\n    --                        IF     v_cert_desc IS NOT NULL\n    --                           AND v_cert_desc IN ('PSV', 'COMM')\n    --                        THEN\n    --                            BEGIN\n    --                                SELECT mcoms_carry_capacity, mcoms_tonnage\n    --                                  INTO v_polc_passenger_no, v_polc_tonnage\n    --                                  FROM gin_motor_commercial_sch\n    --                                 WHERE     mcoms_ipu_code = v_polc_ipu_code\n    --                                       AND NVL (mcoms_acc_limit, 'N') = 'N';\n    --                            EXCEPTION\n    --                                WHEN NO_DATA_FOUND\n    --                                THEN\n    --                                    NULL;\n    --                                WHEN OTHERS\n    --                                THEN\n    --                                    ROLLBACK;\n    --                                    v_err :=\n    --                                        'Error getting tonnage/no. of passengers...';\n    --                                    RETURN;\n    --                            END;\n    --                        END IF;\n    --                    END;\n    --\n    --                    IF NVL (tqc_parameters_pkg.get_org_type (37), 'INS') =\n    --                       'INS'\n    --                    THEN\n    --                        BEGIN\n    --                            SELECT org_name\n    --                              INTO v_comp_name\n    --                              FROM tqc_systems, tqc_organizations\n    --                             WHERE org_code = sys_org_code AND sys_code = 37;\n    --                        EXCEPTION\n    --                            WHEN NO_DATA_FOUND\n    --                            THEN\n    --                                ROLLBACK;\n    --                                v_err :=\n    --                                    'The company name has not been define, first define the company name...';\n    --                                RETURN;\n    --                            WHEN TOO_MANY_ROWS\n    --                            THEN\n    --                                ROLLBACK;\n    --                                v_err :=\n    --                                    'The company name has been defined more than once...';\n    --                                RETURN;\n    --                        END;\n    --                    ELSE\n    --                        BEGIN\n    --                            SELECT agn_name\n    --                              INTO v_comp_name\n    --                              FROM tqc_agencies\n    --                             WHERE agn_code = v_agn_agent_code;\n    --                        --<KEN TO TAKE CARE OF ALLOCATION AFTER CANCELLATION>\n    --                        --:TQC_AGENCIES.AGN_CODE; --\n    --                        EXCEPTION\n    --                            WHEN OTHERS\n    --                            THEN\n    --                                ROLLBACK;\n    --                                v_err := 'Error getting the insurer name...';\n    --                                RETURN;\n    --                        END;\n    --                    END IF;\n    --\n    --                    --        MESSAGE(':POLC_CODE ='||:POLC_CODE);PAUSE;\n    --                    IF NVL (v_uw_certs, 'N') = 'N'\n    --                    THEN\n    --                        SELECT gin_pcq_code_seq.NEXTVAL\n    --                          INTO v_new_pcq_code\n    --                          FROM DUAL;\n    --\n    --                        BEGIN\n    --                            INSERT INTO gin_print_cert_queue (\n    --                                            pcq_pol_policy_no,\n    --                                            pcq_pol_ren_endos_no,\n    --                                            pcq_pol_batch_no,\n    --                                            pcq_ipu_code,\n    --                                            pcq_ct_code,\n    --                                            pcq_ct_sht_desc,\n    --                                            pcq_ipu_property_id,\n    --                                            pcq_date_time,\n    --                                            pcq_agnt_agent_code,\n    --                                            pcq_agnt_sht_desc,\n    --                                            pcq_polc_code,\n    --                                            pcq_client_policy_no,\n    --                                            pcq_code,\n    --                                            pcq_wet,\n    --                                            pcq_status,\n    --                                            pcq_client_name,\n    --                                            pcq_issued_by,\n    --                                            pcq_covt_sht_desc,\n    --                                            pcq_scl_code,\n    --                                            pcq_capacity,\n    --                                            pcq_brn_code,\n    --                                            pcq_tonnage,\n    --                                            pcq_passenger_no,\n    --                                            pcq_cert_no)\n    --                                 VALUES (v_polc_pol_policy_no,\n    --                                         v_polc_pol_ren_endos_no,\n    --                                         v_polc_pol_batch_no,\n    --                                         v_polc_ipu_code,\n    --                                         v_polc_ct_code,\n    --                                         v_polc_ct_sht_desc,\n    --                                         v_ipu_property_id,\n    --                                         v_polc_wef,\n    --                                         v_agn_agent_code,\n    --                                         v_agnt_sht_desc,\n    --                                         v_new_polc_code,\n    --                                         v_pol_client_policy_number,\n    --                                         v_new_pcq_code,\n    --                                         v_polc_wet,\n    --                                         'N',\n    --                                         v_insured,\n    --                                         v_comp_name,\n    --                                         v_ipu_covt_sht_desc,\n    --                                         v_ipu_sec_scl_code,\n    --                                         NULL,\n    --                                         v_brn_code,\n    --                                         v_polc_tonnage,\n    --                                         v_polc_passenger_no,\n    --                                         v_cert_no);\n    --\n    --                            UPDATE gin_policy_certs\n    --                               SET polc_print_status = 'R'\n    --                             WHERE polc_code = v_new_polc_code;\n    --                        EXCEPTION\n    --                            WHEN OTHERS\n    --                            THEN\n    --                                ROLLBACK;\n    --                                v_err :=\n    --                                       'Error inserting risk in certificate queue..'\n    --                                    || SQLERRM (SQLCODE);\n    --                                RETURN;\n    --                        END;\n    --                    END IF;\n    --                END IF;\n    --            END IF;\n    --        ELSIF v_action = 'E'\n    --        THEN\n    --            BEGIN\n    --                SELECT polc_print_status, polc_cer_cert_no\n    --                  INTO v_print_status, v_cer_cert_no\n    --                  FROM gin_policy_certs\n    --                 WHERE polc_code = v_polc_code;\n    --            EXCEPTION\n    --                WHEN OTHERS\n    --                THEN\n    --                    v_print_status := 'N';\n    --            END;\n    --\n    --            IF NVL (v_print_status, 'N') = 'R' AND v_cer_cert_no IS NOT NULL\n    --            THEN\n    --                v_err := 'Deallocate Certificate First....';\n    --                RETURN;\n    --            END IF;\n    --\n    --            IF v_polc_wet > v_ipu_eff_wet\n    --            THEN\n    --                v_err :=\n    --                    'You Cannot Have A Certificate For A Cover Period, Outside The Risk Cover....';\n    --                RETURN;\n    --            END IF;\n    --\n    --            IF v_print_status != 'P' AND v_polc_status = 'C'\n    --            THEN\n    --                v_err :=\n    --                    'You Cannot Cancel a Certificate that has not been printed ...';\n    --                RETURN;\n    --            END IF;\n    --\n    --            IF     print_cert_status = 'P'\n    --               AND v_polc_status = 'C'\n    --               AND (   v_polc_reason_cancelled IS NULL\n    --                    OR v_polc_cancel_dt IS NULL)\n    --            THEN\n    --                v_err :=\n    --                    'You Cannot Cancel a Certificate without providing the reason for cancellation or date ...';\n    --                RETURN;\n    --            END IF;\n    --\n    --            IF print_cert_status = 'P' AND v_polc_cer_cert_no IS NOT NULL\n    --            THEN\n    --                IF v_polc_print_status != print_cert_status\n    --                THEN\n    --                    v_err :=\n    --                        'You Cannot change the Print status for certificate once Printed ...';\n    --                    RETURN;\n    --                END IF;\n    --\n    --                IF cert_wef != v_polc_wef\n    --                THEN\n    --                    v_err :=\n    --                        'You Cannot change the WEF date if the Print status for certificate is Printed ...';\n    --                    RETURN;\n    --                END IF;\n    --\n    --                IF cert_wet != v_polc_wet\n    --                THEN\n    --                    v_err :=\n    --                        'You Cannot change the WET date if the Print status for certificate is Printed ...';\n    --                    RETURN;\n    --                END IF;\n    --            END IF;\n    --\n    --            --        RAISE_eRROR('cert_wet != v_polc_wet '||cert_wet ||' '|| v_polc_wet ||' print_cert_status '||print_cert_status ||' v_polc_cer_cert_no '||v_polc_cer_cert_no);\n    --            BEGIN\n    --                UPDATE gin_policy_certs\n    --                   SET polc_status = NVL (v_polc_status, polc_status),\n    --                       polc_reason_cancelled =\n    --                           NVL (v_polc_reason_cancelled,\n    --                                polc_reason_cancelled),\n    --                       polc_cancel_dt =\n    --                           NVL (v_polc_cancel_dt, polc_cancel_dt),\n    --                       polc_wef = NVL (v_polc_wef, polc_wef),\n    --                       polc_wet = NVL (v_polc_wet, polc_wet),\n    --                       polc_print_status =\n    --                           NVL (v_polc_print_status, polc_print_status)\n    --                 WHERE polc_code = v_polc_code;\n    --\n    --                UPDATE gin_print_cert_queue\n    --                   SET pcq_wet = NVL (v_polc_wet, pcq_wet)\n    --                 WHERE pcq_polc_code = v_polc_code;\n    --            EXCEPTION\n    --                WHEN NO_DATA_FOUND\n    --                THEN\n    --                    v_err :=\n    --                           'Error Retrieving the Certificate to be Updated ...'\n    --                        || SQLERRM (SQLCODE);\n    --                    RETURN;\n    --                WHEN OTHERS\n    --                THEN\n    --                    v_err :=\n    --                           'Error occured on Updating a Certificate... '\n    --                        || SQLERRM (SQLCODE);\n    --                    RETURN;\n    --            END;\n    --        ELSIF v_action = 'D'\n    --        THEN\n    --            IF v_polc_cer_cert_no IS NOT NULL\n    --            THEN\n    --                v_err :=\n    --                    'You Cannot Delete a Printed certificate, it Can be cancelled ...';\n    --                RETURN;\n    --            END IF;\n    --\n    --            BEGIN\n    --                DELETE FROM gin_print_cert_queue\n    --                      WHERE pcq_polc_code = v_polc_code;\n    --\n    --                DELETE FROM gin_policy_certs\n    --                      WHERE polc_code = v_polc_code;\n    --            EXCEPTION\n    --                WHEN NO_DATA_FOUND\n    --                THEN\n    --                    v_err :=\n    --                           'Error Retrieving the Certificate to be deleted ...'\n    --                        || SQLERRM (SQLCODE);\n    --                    RETURN;\n    --                WHEN OTHERS\n    --                THEN\n    --                    v_err :=\n    --                           'Error occured on Deleting a Certificate... '\n    --                        || SQLERRM (SQLCODE);\n    --                    RETURN;\n    --            END;\n    --        END IF;\n    --    END update_allocate_certs;",
        "check_dup_certificates": "PROCEDURE check_dup_certificates (----20122022\n    --        v_polc_wef          gin_policy_certs.polc_wef%TYPE,\n    --        v_polc_wet          gin_policy_certs.polc_wet%TYPE,\n    --        v_polc_status       gin_policy_certs.polc_status%TYPE,\n    --        v_polc_ipu_id       NUMBER,\n    --        v_err           OUT VARCHAR2,\n    --        v_ipu_code          NUMBER DEFAULT NULL)\n    --    IS\n    --        --v_curr_wef DATE;\n    --        v_dummy    NUMBER := 0;\n    --        v_ipu_id   NUMBER;\n    --    BEGIN\n    --        -- v_curr_wef :=v_polc_wef;\n    --        IF v_polc_ipu_id IS NULL AND v_ipu_code IS NOT NULL\n    --        THEN\n    --            BEGIN\n    --                SELECT IPU_ID\n    --                  INTO v_ipu_id\n    --                  FROM GIN_INSURED_PROPERTY_UNDS\n    --                 WHERE IPU_CODE = v_ipu_code;\n    --            EXCEPTION\n    --                WHEN OTHERS\n    --                THEN\n    --                    v_ipu_id := NULL;\n    --            END;\n    --        END IF;\n    --\n    --        BEGIN\n    --            SELECT COUNT (1)\n    --              INTO v_dummy\n    --              FROM gin_policy_certs\n    --             WHERE     NVL (polc_status, 'A') != 'C'\n    --                   AND TRUNC (polc_wet) >= TRUNC (v_polc_wef)\n    --                   AND polc_ipu_id = NVL (v_polc_ipu_id, v_ipu_id);\n    --        EXCEPTION\n    --            WHEN OTHERS\n    --            THEN\n    --                v_dummy := 0;\n    --        END;\n    --\n    --        IF NVL (v_dummy, 0) != 0\n    --        THEN\n    --            v_err :=\n    --                '2 You Cannot Define Another Certificate if The Previous One is Not Cancelled...';\n    --            RETURN;\n    --        END IF;\n    --\n    --        BEGIN\n    --            SELECT COUNT (1)\n    --              INTO v_dummy\n    --              FROM gin_aki_policy_cert_dtls, gin_insured_property_unds\n    --             WHERE     ((NVL (apcd_cert_cancelled, 'N') != 'Y'))\n    --                   AND TRUNC (apcd_wet) >= TRUNC (v_polc_wef)\n    --                   AND apcd_ipu_code = ipu_code\n    --                   AND ipu_id = NVL (v_polc_ipu_id, v_ipu_id);\n    --        EXCEPTION\n    --            WHEN OTHERS\n    --            THEN\n    --                v_dummy := 0;\n    --        END;\n    --\n    --        IF NVL (v_dummy, 0) != 0\n    --        THEN\n    --            v_err :=\n    --                '2 You Cannot Define Another Certificate if The Previous One(Digital) is Not Cancelled/Deleted...';\n    --            RETURN;\n    --        END IF;\n    --    END;",
        "default_srv_fee_rate": "PROCEDURE default_srv_fee_rate (v_fee_rate OUT NUMBER)\n    IS\n    --v_param_value NUMBER(10);\n    --v_status VARCHAR2(10);\n    BEGIN\n        BEGIN\n            SELECT gin_parameters_pkg.get_param_number ('DEFAULTSRVFEERATE')\n              INTO v_fee_rate\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_fee_rate := NULL;\n        END;\n    END;",
        "pop_sections": "PROCEDURE pop_sections (v_ipu_code NUMBER)\n    IS\n        v_scl_code    NUMBER;\n        v_bind_code   NUMBER;\n        v_covt_code   NUMBER;\n        v_batch_no    NUMBER;\n    BEGIN\n        SELECT ipu_sec_scl_code,\n               ipu_bind_code,\n               ipu_covt_code,\n               ipu_pol_batch_no\n          INTO v_scl_code,\n               v_bind_code,\n               v_covt_code,\n               v_batch_no\n          FROM gin_insured_property_unds\n         WHERE ipu_code = v_ipu_code;\n\n        BEGIN\n            DELETE gin_policy_insured_limits\n             WHERE pil_ipu_code = v_ipu_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error deleting previously populated sections...');\n        END;\n\n        BEGIN\n            gin_stp_pkg.pop_policy_rsk_limits (v_ipu_code,\n                                               v_scl_code,\n                                               v_bind_code,\n                                               v_covt_code,\n                                               v_batch_no);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error populating binder sections OR Sections already defined...');\n        END;\n    END;",
        "check_duplicate_risks": "PROCEDURE check_duplicate_risks (v_pol_batch_no IN NUMBER)\n    IS\n        v_cnt                NUMBER;\n        v_allow_duplicates   VARCHAR2 (5);\n        v_msg                VARCHAR2 (2000);\n        v_count              NUMBER;\n\n        CURSOR dup_risk IS\n              SELECT ipu_pol_batch_no, ipu_property_id, ipu_sec_scl_code\n                FROM gin_insured_property_unds, gin_policy_active_risks\n               WHERE     ipu_code = polar_ipu_code\n                     AND polar_pol_batch_no = v_pol_batch_no\n                     AND ipu_pol_batch_no NOT IN\n                             (SELECT pol_batch_no\n                                FROM gin_policies\n                               WHERE     pol_batch_no = ipu_pol_batch_no\n                                     AND NVL (pol_loaded, 'N') = 'Y')\n              HAVING COUNT (1) > 1\n            GROUP BY ipu_pol_batch_no, ipu_property_id, ipu_sec_scl_code;\n    BEGIN\n        BEGIN\n            v_allow_duplicates :=\n                gin_parameters_pkg.get_param_varchar (\n                    'ALLOW_DUPLICATION_OF_RISKS');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_allow_duplicates := 'Y';\n        END;\n\n        IF NVL (v_allow_duplicates, 'N') = 'N'\n        THEN\n            BEGIN\n                /*SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM (  SELECT ipu_pol_batch_no, ipu_property_id\n                            FROM gin_insured_property_unds, gin_policy_active_risks\n                           WHERE     ipu_code = polar_ipu_code\n                                 AND polar_pol_batch_no = v_pol_batch_no\n                          HAVING COUNT (1) > 1\n                        GROUP BY ipu_pol_batch_no, ipu_property_id);*/\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM (  SELECT ipu_pol_batch_no, ipu_property_id\n                            FROM gin_insured_property_unds,\n                                 gin_policy_active_risks,\n                                 gin_sub_classes\n                           WHERE     ipu_code = polar_ipu_code\n                                 AND ipu_sec_scl_code = scl_code\n                                 AND NVL (scl_risk_unique, 'N') = 'Y'\n                                 AND polar_pol_batch_no = v_pol_batch_no\n                          HAVING COUNT (1) > 1\n                        GROUP BY ipu_pol_batch_no, ipu_property_id);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error checking for risk duplicates..');\n            END;\n\n            IF NVL (v_cnt, 0) > 0\n            THEN\n                FOR d_risk IN dup_risk\n                LOOP\n                      SELECT DISTINCT COUNT (1)\n                        INTO v_count\n                        FROM gin_insured_property_unds,\n                             tqc_clients,\n                             tqc_client_systems\n                       WHERE     ipu_prp_code = clnt_code\n                             AND clnt_code = csys_clnt_code\n                             AND csys_sys_code = 37\n                             AND ipu_sec_scl_code = d_risk.ipu_sec_scl_code\n                             AND ipu_property_id = d_risk.ipu_property_id\n                             AND ipu_id NOT IN\n                                     (SELECT DISTINCT polar_ipu_id\n                                        FROM gin_policy_active_risks,\n                                             gin_insured_property_unds\n                                       WHERE     ipu_id = polar_ipu_id\n                                             AND NVL (ipu_endos_remove, 'N') =\n                                                 'Y'\n                                             AND ipu_property_id =\n                                                 d_risk.ipu_property_id)\n                             AND ipu_pol_batch_no NOT IN\n                                     (SELECT pol_batch_no\n                                        FROM gin_policies,\n                                             gin_insured_property_unds\n                                       WHERE     pol_batch_no =\n                                                 ipu_pol_batch_no\n                                             AND ipu_sec_scl_code =\n                                                 d_risk.ipu_sec_scl_code\n                                             AND ipu_property_id =\n                                                 d_risk.ipu_property_id\n                                             AND pol_current_status IN\n                                                     ('CN', 'CO'))\n                             AND NVL (ipu_endos_remove, 'N') != 'Y'\n                    ORDER BY ipu_code;\n\n                    v_msg := v_msg || '<' || d_risk.ipu_property_id || '> ';\n                END LOOP;\n\n                IF NVL (v_count, 0) <> 0\n                THEN\n                    --            Null;\n                    raise_error (\n                           'Risks are duplicated..'\n                        || v_msg\n                        || ' '\n                        || v_count\n                        || ' times EEEE ');\n                END IF;\n            END IF;\n        END IF;\n    END;",
        "update_cert_details": "PROCEDURE update_cert_details (v_ipu_code       IN NUMBER,\n                                   v_tonnage        IN NUMBER,\n                                   v_carry_cap      IN NUMBER DEFAULT NULL,\n                                   v_pol_batch_no   IN NUMBER DEFAULT NULL)\n    IS\n        v_polc_pll      NUMBER;\n        v_ct_sht_desc   VARCHAR2 (30);\n        v_count1        NUMBER;\n        v_scl_code      NUMBER;\n        v_covt_code     NUMBER;\n        v_ct_code       NUMBER;\n    BEGIN\n        --        BEGIN\n        --\n        --\n        --            SELECT PCQ_CT_SHT_DESC\n        --            INTO v_ct_sht_desc\n        --            FROM GIN_PRINT_CERT_QUEUE\n        --            WHERE PCQ_IPU_CODE = v_ipu_code\n        --            AND PCQ_CODE IN (SELECT MAX(PCQ_CODE) FROM GIN_PRINT_CERT_QUEUE WHERE PCQ_IPU_CODE = v_ipu_code);\n        --        EXCEPTION\n        --        WHEN OTHERS THEN\n        --              SELECT POLC_CT_SHT_DESC INTO v_ct_sht_desc\n        --              FROM  GIN_POLICY_CERTS\n        --              WHERE POLC_POL_BATCH_NO=v_pol_batch_no;\n        --\n        --        END;\n        BEGIN\n            SELECT ipu_sec_scl_code, ipu_covt_code\n              INTO v_scl_code, v_covt_code\n              FROM gin_insured_property_unds\n             WHERE ipu_code = v_ipu_code;\n\n            SELECT ct_code, ct_sht_desc\n              INTO v_ct_code, v_ct_sht_desc\n              FROM gin_subclass_cert_types, gin_cert_types\n             WHERE     sct_ct_code = ct_code\n                   AND sct_scl_code = v_scl_code\n                   AND sct_covt_code = v_covt_code\n                   AND NVL (ct_pass_dep, 'N') = 'Y'\n                   AND ct_max_pass = v_carry_cap;\n\n            IF v_ct_code IS NULL\n            THEN\n                BEGIN\n                    SELECT pcq_ct_sht_desc\n                      INTO v_ct_sht_desc\n                      FROM gin_print_cert_queue\n                     WHERE     pcq_ipu_code = v_ipu_code\n                           AND pcq_code IN (SELECT MAX (pcq_code)\n                                              FROM gin_print_cert_queue\n                                             WHERE pcq_ipu_code = v_ipu_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        SELECT polc_ct_sht_desc\n                          INTO v_ct_sht_desc\n                          FROM gin_policy_certs\n                         WHERE polc_pol_batch_no = v_pol_batch_no;\n                END;\n            ELSE\n                UPDATE gin_policy_certs\n                   SET polc_ct_sht_desc = v_ct_sht_desc,\n                       polc_ct_code = v_ct_code\n                 WHERE polc_ipu_code = v_ipu_code;\n\n                UPDATE gin_print_cert_queue\n                   SET pcq_ct_sht_desc = v_ct_sht_desc,\n                       pcq_ct_code = v_ct_code\n                 WHERE     pcq_ipu_code = v_ipu_code\n                       AND pcq_code IN (SELECT MAX (pcq_code)\n                                          FROM gin_print_cert_queue\n                                         WHERE pcq_ipu_code = v_ipu_code);\n            END IF;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                BEGIN\n                    SELECT pcq_ct_sht_desc\n                      INTO v_ct_sht_desc\n                      FROM gin_print_cert_queue\n                     WHERE     pcq_ipu_code = v_ipu_code\n                           AND pcq_code IN (SELECT MAX (pcq_code)\n                                              FROM gin_print_cert_queue\n                                             WHERE pcq_ipu_code = v_ipu_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        SELECT polc_ct_sht_desc\n                          INTO v_ct_sht_desc\n                          FROM gin_policy_certs\n                         WHERE polc_pol_batch_no = v_pol_batch_no;\n                END;\n        END;\n\n        --   RAISE_ERROR('v_ct_sht_desc=='||);\n\n        --   RAISE_ERROR('v_ct_sht_desc=='||v_ct_sht_desc);\n        IF v_ct_sht_desc = 'COMM'\n        THEN\n            IF gis_web_pkg.haspll (v_ipu_code)\n            THEN\n                SELECT pil_multiplier_rate\n                  INTO v_polc_pll\n                  FROM gin_policy_insured_limits\n                 WHERE     pil_sect_sht_desc = 'PLL'\n                       AND pil_ipu_code = v_ipu_code;\n\n                UPDATE gin_print_cert_queue\n                   SET pcq_passenger_no = v_polc_pll, pcq_tonnage = v_tonnage\n                 WHERE pcq_ipu_code = v_ipu_code;\n\n                UPDATE gin_policy_certs\n                   SET polc_passenger_no = v_polc_pll,\n                       polc_tonnage = v_tonnage\n                 WHERE polc_ipu_code = v_ipu_code;\n            ELSE\n                UPDATE gin_print_cert_queue\n                   SET pcq_passenger_no = v_carry_cap,\n                       pcq_tonnage = v_tonnage\n                 WHERE pcq_ipu_code = v_ipu_code;\n\n                UPDATE gin_policy_certs\n                   SET polc_passenger_no = v_carry_cap,\n                       polc_tonnage = v_tonnage\n                 WHERE polc_ipu_code = v_ipu_code;\n            END IF;\n        ELSE\n            UPDATE gin_print_cert_queue\n               SET pcq_passenger_no = v_carry_cap, pcq_tonnage = v_tonnage\n             WHERE pcq_ipu_code = v_ipu_code AND pcq_status != 'P';\n\n            UPDATE gin_policy_certs\n               SET polc_passenger_no = v_carry_cap, polc_tonnage = v_tonnage\n             WHERE polc_ipu_code = v_ipu_code;\n        END IF;\n    END;",
        "saveserviceproviderdetails": "PROCEDURE saveserviceproviderdetails (v_action                VARCHAR2,\n                                          v_gsp_code              NUMBER,\n                                          v_gsp_spr_code          NUMBER,\n                                          v_gsp_spt_code       IN NUMBER,\n                                          v_gsp_pol_batch_no   IN NUMBER)\n    IS\n    BEGIN\n        -- RAISE_ERROR('v_cgpte_pol_batch_no'||v_cgpte_pol_batch_no);\n        IF v_action = 'A'\n        THEN\n            BEGIN\n                INSERT INTO gin_service_providers (gsp_code,\n                                                   gsp_spr_code,\n                                                   gsp_spt_code,\n                                                   gsp_pol_batch_no)\n                     VALUES (gin_gsp_code_seq.NEXTVAL,\n                             v_gsp_spr_code,\n                             v_gsp_spt_code,\n                             v_gsp_pol_batch_no);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error inserting Service Provider Details...');\n            END;\n        ELSIF v_action = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_service_providers\n                   SET gsp_spr_code = v_gsp_spr_code,\n                       gsp_spt_code = v_gsp_spt_code,\n                       gsp_pol_batch_no = v_gsp_pol_batch_no\n                 WHERE gsp_code = v_gsp_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error updating Service Provider Details...');\n            END;\n        ELSIF v_action = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_service_providers\n                      WHERE gsp_code = v_gsp_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error deleting Service Provider Details...');\n            END;\n        ELSE\n            BEGIN\n                raise_error ('invalid Action...');\n            END;\n        END IF;\n    END;",
        "delete_multiple_insured": "PROCEDURE delete_multiple_insured (v_polin_code     IN NUMBER,\n                                       v_pol_batch_no   IN NUMBER,\n                                       v_pro_code       IN NUMBER)\n    IS\n        v_cnt             NUMBER;\n        v_auths           VARCHAR2 (100);\n        -- v_polin_code NUMBER;\n        v_err_pos         VARCHAR2 (100);\n        v_cert_ipu_code   NUMBER;\n        v_errmsg          VARCHAR2 (200);\n\n        CURSOR insured_ref IS\n            SELECT *\n              FROM gin_insured_property_unds\n             WHERE ipu_polin_code = v_polin_code;\n    BEGIN\n        FOR x IN insured_ref\n        LOOP\n            del_ipu_details (v_pol_batch_no, x.ipu_code, v_pro_code);\n        END LOOP;\n\n        DELETE gin_policy_insureds\n         WHERE polin_code = v_polin_code;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error ('deleting Insured details failed');\n    END;",
        "populate_binder_renewals": "PROCEDURE populate_binder_renewals (v_pol_batch_no VARCHAR2)\n    IS\n        CURSOR cur_pol IS\n            SELECT *\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n\n        v_bind_code         NUMBER;\n        v_rate              NUMBER;\n        v_sect_code         NUMBER;\n        v_prem_rate         NUMBER;\n        v_coin_pct          NUMBER;\n        v_min_prem_factor   NUMBER := 1;\n        v_rnd               NUMBER := 2;\n        v_param             VARCHAR2 (1);\n        act_type            VARCHAR2 (5);\n        v_cnt               NUMBER;\n    BEGIN\n        FOR cur_pol_rec IN cur_pol\n        LOOP\n            BEGIN\n                SELECT NVL (\n                           gin_parameters_pkg.get_param_varchar (\n                               'ALLOW_PREM_COMP_BINDERS'),\n                           'N')\n                  INTO v_param\n                  FROM DUAL;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_param := 'N';\n            END;\n\n            BEGIN\n                SELECT DISTINCT agn_act_code\n                  INTO act_type\n                  FROM tqc_agencies\n                 WHERE agn_code = cur_pol_rec.pol_agnt_agent_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_when_others (\n                        'Unable to retrieve the acount type...');\n            END;\n\n            IF NVL (cur_pol_rec.pol_coinsurance, 'N') = 'N'\n            THEN\n                v_coin_pct := 100;\n            ELSE\n                v_coin_pct := NVL (cur_pol_rec.pol_coinsurance_share, 100);\n            END IF;\n\n            BEGIN\n                SELECT pol_bind_code\n                  INTO v_bind_code\n                  FROM gin_policies\n                 WHERE pol_batch_no = v_pol_batch_no;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    NULL;\n            END;\n\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM gin_claim_master_bookings\n                 WHERE     cmb_pol_batch_no = v_pol_batch_no\n                       AND cmb_claim_date BETWEEN cur_pol_rec.pol_wef_dt\n                                              AND cur_pol_rec.pol_wet_dt;\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_cnt := 0;\n                WHEN OTHERS\n                THEN\n                    v_cnt := 0;\n            END;\n\n            --   message('v_cnt='||v_cnt);pause;\n            BEGIN\n                SELECT pil_prem_rate, pil_sect_code\n                  INTO v_rate, v_sect_code\n                  FROM gin_policy_insured_limits, gin_insured_property_unds\n                 WHERE     ipu_code = pil_ipu_code\n                       AND ipu_pol_batch_no = v_pol_batch_no\n                       AND pil_sect_type = 'SS';\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            BEGIN\n                SELECT prr_rate\n                  INTO v_prem_rate\n                  FROM gin_premium_rates, gin_sections\n                 WHERE     sect_code = prr_sect_code\n                       AND prr_sect_code = v_sect_code\n                       AND prr_bind_code = v_bind_code\n                       AND sect_type != 'ND';\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            IF NVL (v_param, 'N') = 'Y'\n            THEN\n                IF        NVL (v_rate, 0) < NVL (v_prem_rate, 0)\n                      AND NVL (v_cnt, 0) != 0\n                   OR NVL (v_rate, 0) >= NVL (v_prem_rate, 0)\n                THEN\n                    BEGIN\n                        gin_compute_prem_pkg.gis_calc_policy_premium (\n                            v_pol_batch_no,\n                            act_type,\n                            cur_pol_rec.pol_cur_code,\n                            cur_pol_rec.pol_cur_symbol,\n                            cur_pol_rec.pol_agnt_agent_code,\n                            cur_pol_rec.pol_wef_dt,\n                            cur_pol_rec.pol_wet_dt,\n                            cur_pol_rec.pol_uw_year,\n                            cur_pol_rec.pol_policy_status,\n                            cur_pol_rec.pol_pro_code,\n                            NVL (cur_pol_rec.pol_coinsure_leader, 'N'),\n                            v_coin_pct,\n                            cur_pol_rec.pol_ri_agnt_agent_code,\n                            cur_pol_rec.pol_policy_type,\n                            cur_pol_rec.pol_min_prem,\n                            v_min_prem_factor,\n                            v_rnd,\n                            cur_pol_rec.pol_commission_allowed);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_when_others (\n                                   'Unable to compute premium for binder renewals...'\n                                || SQLERRM (SQLCODE));\n                    END;\n                END IF;\n            END IF;\n        END LOOP;\n    END;",
        "pop_resc_rsk_limits": "PROCEDURE pop_resc_rsk_limits (v_new_ipu_code   IN NUMBER,\n                                   v_scl_code       IN NUMBER,\n                                   v_bind_code      IN NUMBER,\n                                   v_cvt_code       IN NUMBER,\n                                   v_sect_type      IN VARCHAR2,\n                                   v_rs_code        IN NUMBER DEFAULT NULL)\n    IS\n        v_sect_sht_desc             VARCHAR2 (30);\n        v_sect_desc                 VARCHAR2 (40);\n        --v_sect_type                                VARCHAR2(30);\n        v_type_desc                 VARCHAR2 (30);\n        v_prr_rate_type             VARCHAR2 (10);\n        v_prr_rate                  NUMBER;\n        v_terr_description          VARCHAR2 (30);\n        v_prr_prem_minimum_amt      NUMBER;\n        v_prr_multiplier_rate       NUMBER;\n        v_prr_division_factor       NUMBER;\n        v_prr_multplier_div_fact    NUMBER;\n        v_prr_rate_desc             VARCHAR2 (30);\n        v_dc_sect                   VARCHAR2 (5);\n        v_insert                    BOOLEAN := FALSE;\n        v_no_limit                  VARCHAR2 (2);\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_apply_as_discount         VARCHAR2 (1);\n\n        CURSOR pil_cur IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc || ' ' || prr_ncd_level\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD ' || prr_ncd_level,\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full\n              FROM gin_premium_rates, gin_sections, gin_resc_srv_subcl\n             WHERE     prr_sect_code = sect_code\n                   AND rss_sect_code = sect_code\n                   AND rss_rs_code = v_rs_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND NVL (rss_apply_as_discount, 'N') = 'Y'\n                   AND prr_section_type = v_sect_type\n                   AND sect_code IN\n                           (SELECT scvts_sect_code\n                              FROM gin_subcl_covt_sections\n                             WHERE     scvts_scl_code = v_scl_code\n                                   AND scvts_covt_code = v_cvt_code)\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n    BEGIN\n        --RAISE_ERROR('Unable='||v_bind_code||'='||v_sect_type||'='||v_cvt_code||'=='||v_scl_code||'='||v_rs_code||'==='||v_new_ipu_code);\n        BEGIN\n            DELETE gin_policy_insured_limits\n             WHERE     pil_ipu_code = v_new_ipu_code\n                   AND pil_sect_type = v_sect_type;\n        END;\n\n        BEGIN\n            SELECT rss_apply_as_discount\n              INTO v_apply_as_discount\n              FROM gin_resc_srv_subcl\n             WHERE rss_rs_code = v_rs_code AND rss_scl_code = v_scl_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error getting section details..');\n        END;\n\n        --null;\n        FOR pil_cur_rec IN pil_cur\n        LOOP\n            v_row := NVL (v_row, 0) + 1;\n\n            BEGIN\n                SELECT sec_declaration\n                  INTO v_pil_declaration_section\n                  FROM gin_subcl_sections\n                 WHERE     sec_sect_code = pil_cur_rec.sect_code\n                       AND sec_scl_code = v_scl_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Unable to retrieve the section declaration status');\n            END;\n\n            BEGIN\n                INSERT INTO gin_policy_insured_limits (\n                                pil_code,\n                                pil_ipu_code,\n                                pil_sect_code,\n                                pil_sect_sht_desc,\n                                pil_desc,\n                                pil_row_num,\n                                pil_calc_group,\n                                pil_limit_amt,\n                                pil_prem_rate,\n                                pil_prem_amt,\n                                pil_rate_type,\n                                pil_rate_desc,\n                                pil_sect_type,\n                                pil_original_prem_rate,\n                                pil_multiplier_rate,\n                                pil_multiplier_div_factor,\n                                pil_annual_premium,\n                                pil_rate_div_fact,\n                                --PIL_DESC,\n                                pil_compute,\n                                pil_prd_type,\n                                pil_dual_basis,\n                                pil_prem_accumulation,\n                                pil_declaration_section,\n                                pil_annual_actual_prem,\n                                pil_free_limit,\n                                pil_prorata_full)\n                         VALUES (\n                                    gin_pil_code_seq.NEXTVAL,\n                                    v_new_ipu_code,\n                                    pil_cur_rec.sect_code,\n                                    pil_cur_rec.sect_sht_desc,\n                                    pil_cur_rec.sect_desc,\n                                    v_row,\n                                    1,\n                                    NULL,\n                                    DECODE (pil_cur_rec.prr_rate_type,\n                                            'SRG', 0,\n                                            'RCU', 0,\n                                            pil_cur_rec.prr_rate),\n                                    0,\n                                    pil_cur_rec.prr_rate_type,\n                                    pil_cur_rec.prr_rate_desc,\n                                    pil_cur_rec.sect_type,\n                                    pil_cur_rec.prr_rate,\n                                    pil_cur_rec.prr_multiplier_rate,\n                                    pil_cur_rec.prr_multplier_div_fact,\n                                    0,\n                                    pil_cur_rec.prr_division_factor,\n                                    --v_type_desc,\n                                    'Y',\n                                    NULL,\n                                    'N',\n                                    0,\n                                    v_pil_declaration_section,\n                                    0,\n                                    pil_cur_rec.prr_free_limit,\n                                    pil_cur_rec.prr_prorated_full);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error inserting risk sections..');\n            END;\n        END LOOP;\n\n        -- RAISE_ERROR('v_row='||v_row);\n        IF NVL (v_row, 0) = 0 AND NVL (v_apply_as_discount, 'N') = 'Y'\n        THEN\n            raise_application_error (\n                -20001,\n                'Sections already defined or Premium rates not defined for the selected class and binder...');\n        END IF;\n    END pop_resc_rsk_limits;",
        "pop_ren_resc_rsk_limits": "PROCEDURE pop_ren_resc_rsk_limits (\n        v_new_ipu_code   IN NUMBER,\n        v_scl_code       IN NUMBER,\n        v_bind_code      IN NUMBER,\n        v_cvt_code       IN NUMBER,\n        v_sect_type      IN VARCHAR2,\n        v_rs_code        IN NUMBER DEFAULT NULL)\n    IS\n        v_sect_sht_desc             VARCHAR2 (30);\n        v_sect_desc                 VARCHAR2 (40);\n        --v_sect_type                                VARCHAR2(30);\n        v_type_desc                 VARCHAR2 (30);\n        v_prr_rate_type             VARCHAR2 (10);\n        v_prr_rate                  NUMBER;\n        v_terr_description          VARCHAR2 (30);\n        v_prr_prem_minimum_amt      NUMBER;\n        v_prr_multiplier_rate       NUMBER;\n        v_prr_division_factor       NUMBER;\n        v_prr_multplier_div_fact    NUMBER;\n        v_prr_rate_desc             VARCHAR2 (30);\n        v_dc_sect                   VARCHAR2 (5);\n        v_insert                    BOOLEAN := FALSE;\n        v_no_limit                  VARCHAR2 (2);\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_apply_as_discount         VARCHAR2 (1);\n\n        CURSOR pil_cur IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc || ' ' || prr_ncd_level\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD ' || prr_ncd_level,\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full\n              FROM gin_premium_rates, gin_sections, gin_resc_srv_subcl\n             WHERE     prr_sect_code = sect_code\n                   AND rss_sect_code = sect_code\n                   AND rss_rs_code = v_rs_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND NVL (rss_apply_as_discount, 'N') = 'Y'\n                   AND prr_section_type = v_sect_type\n                   AND sect_code IN\n                           (SELECT scvts_sect_code\n                              FROM gin_subcl_covt_sections\n                             WHERE     scvts_scl_code = v_scl_code\n                                   AND scvts_covt_code = v_cvt_code)\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_ren_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n    BEGIN\n        BEGIN\n            DELETE gin_ren_policy_insured_limits\n             WHERE     pil_ipu_code = v_new_ipu_code\n                   AND pil_sect_type = v_sect_type;\n        END;\n\n        BEGIN\n            SELECT rss_apply_as_discount\n              INTO v_apply_as_discount\n              FROM gin_resc_srv_subcl\n             WHERE rss_rs_code = v_rs_code AND rss_scl_code = v_scl_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error getting section details..');\n        END;\n\n        FOR pil_cur_rec IN pil_cur\n        LOOP\n            v_row := NVL (v_row, 0) + 1;\n\n            BEGIN\n                SELECT sec_declaration\n                  INTO v_pil_declaration_section\n                  FROM gin_subcl_sections\n                 WHERE     sec_sect_code = pil_cur_rec.sect_code\n                       AND sec_scl_code = v_scl_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Unable to retrieve the section declaration status');\n            END;\n\n            BEGIN\n                INSERT INTO gin_ren_policy_insured_limits (\n                                pil_code,\n                                pil_ipu_code,\n                                pil_sect_code,\n                                pil_sect_sht_desc,\n                                pil_desc,\n                                pil_row_num,\n                                pil_calc_group,\n                                pil_limit_amt,\n                                pil_prem_rate,\n                                pil_prem_amt,\n                                pil_rate_type,\n                                pil_rate_desc,\n                                pil_sect_type,\n                                pil_original_prem_rate,\n                                pil_multiplier_rate,\n                                pil_multiplier_div_factor,\n                                pil_annual_premium,\n                                pil_rate_div_fact,\n                                --PIL_DESC,\n                                pil_compute,\n                                pil_prd_type,\n                                pil_dual_basis,\n                                pil_prem_accumulation,\n                                pil_declaration_section,\n                                pil_free_limit,\n                                pil_prorata_full)\n                         VALUES (\n                                    gin_pil_code_seq.NEXTVAL,\n                                    v_new_ipu_code,\n                                    pil_cur_rec.sect_code,\n                                    pil_cur_rec.sect_sht_desc,\n                                    pil_cur_rec.sect_desc,\n                                    v_row,\n                                    1,\n                                    NULL,\n                                    DECODE (pil_cur_rec.prr_rate_type,\n                                            'SRG', 0,\n                                            'RCU', 0,\n                                            pil_cur_rec.prr_rate),\n                                    0,\n                                    pil_cur_rec.prr_rate_type,\n                                    pil_cur_rec.prr_rate_desc,\n                                    pil_cur_rec.sect_type,\n                                    pil_cur_rec.prr_rate,\n                                    pil_cur_rec.prr_multiplier_rate,\n                                    pil_cur_rec.prr_multplier_div_fact,\n                                    0,\n                                    pil_cur_rec.prr_division_factor,\n                                    --v_type_desc,\n                                    'Y',\n                                    NULL,\n                                    'N',\n                                    0,\n                                    v_pil_declaration_section,\n                                    pil_cur_rec.prr_free_limit,\n                                    pil_cur_rec.prr_prorated_full);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error inserting risk sections..');\n            END;\n        END LOOP;\n\n        IF NVL (v_row, 0) = 0 AND NVL (v_apply_as_discount, 'N') = 'Y'\n        THEN\n            raise_application_error (\n                -20001,\n                'Sections already defined or Premium rates not defined for the selected class and binder...');\n        END IF;\n    END pop_ren_resc_rsk_limits;",
        "pop_extra_taxes": "PROCEDURE pop_extra_taxes (v_pol_policy_no   IN VARCHAR2,\n                               v_pol_endos_no    IN VARCHAR2,\n                               v_pol_batch_no    IN NUMBER,\n                               v_pro_code        IN NUMBER,\n                               v_pol_binder      IN VARCHAR2 DEFAULT 'N')\n    IS\n        CURSOR taxes IS\n              SELECT COUNT (1)     cnt,\n                     trnt_code,\n                     taxr_rate,\n                     taxr_rate_desc,\n                     trnt_type,\n                     rs_sht_desc,\n                     taxr_rate_type,\n                     rs_appl_lvl\n                FROM gin_taxes_types_view,\n                     gin_rescue_services,\n                     gin_insured_property_unds,\n                     gin_resc_srv_subcl\n               WHERE     taxr_scl_code IS NULL\n                     AND rss_rs_code = ipu_rs_code\n                     AND rss_scl_code = ipu_sec_scl_code\n                     AND taxr_trnt_code = rs_sht_desc\n                     AND ipu_pol_batch_no = v_pol_batch_no\n                     AND ipu_rs_code = rs_code\n                     AND NVL (rss_apply_as_discount, 'N') = 'Y'\n                     AND trnt_type IN ('RSC')\n                     AND taxr_trnt_code NOT IN\n                             (SELECT ptx_trac_trnt_code\n                                FROM gin_policy_taxes\n                               WHERE ptx_pol_batch_no = v_pol_batch_no)\n            GROUP BY trnt_code,\n                     taxr_rate,\n                     taxr_rate_desc,\n                     trnt_type,\n                     rs_sht_desc,\n                     trnt_type,\n                     taxr_rate_type,\n                     rs_appl_lvl;\n\n        v_apply_as_discount   VARCHAR2 (1);\n    BEGIN\n        FOR taxes_rec IN taxes\n        LOOP\n            IF taxes_rec.trnt_type IN ('RSC')\n            THEN\n                --null;\n                BEGIN\n                    INSERT INTO gin_policy_taxes (ptx_trac_scl_code,\n                                                  ptx_trac_trnt_code,\n                                                  ptx_pol_policy_no,\n                                                  ptx_pol_ren_endos_no,\n                                                  ptx_pol_batch_no,\n                                                  ptx_rate,\n                                                  ptx_amount,\n                                                  ptx_tl_lvl_code,\n                                                  ptx_rate_type,\n                                                  ptx_rate_desc,\n                                                  ptx_endos_diff_amt,\n                                                  ptx_tax_type,\n                                                  ptx_risk_pol_level)\n                         VALUES (NULL,\n                                 taxes_rec.trnt_code,\n                                 v_pol_policy_no,\n                                 v_pol_endos_no,\n                                 v_pol_batch_no,\n                                 taxes_rec.taxr_rate,\n                                 NULL,\n                                 'UP',\n                                 taxes_rec.taxr_rate_type,\n                                 taxes_rec.taxr_rate_desc,\n                                 NULL,\n                                 taxes_rec.trnt_type,\n                                 taxes_rec.rs_appl_lvl);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error applying taxes..');\n                END;\n            END IF;\n        END LOOP;\n    END;",
        "pop_cover_type_clauses": "PROCEDURE pop_cover_type_clauses (v_pol_policy_no   IN VARCHAR2,\n                                      v_pol_endos_no    IN VARCHAR2,\n                                      v_pol_batch_no    IN NUMBER,\n                                      v_pro_code        IN NUMBER)\n    IS\n        v_clause   LONG;\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (sbcl_cls_mandatory, 'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n            UNION\n            SELECT cls_heading,\n                   scvtmc_cls_sht_desc,\n                   scvtmc_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_scl_cvt_mand_clauses,\n                   gin_product_sub_classes,\n                   gin_clause\n             WHERE     clp_scl_code = scvtmc_scl_code\n                   AND scvtmc_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (scvmtc_cls_mandatory, 'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n                   AND scvtmc_cls_code NOT IN\n                           (SELECT sbcl_cls_code\n                              FROM gin_subcl_clauses\n                             WHERE NVL (sbcl_cls_mandatory, 'N') = 'Y');\n    BEGIN\n        FOR cls IN clause\n        LOOP\n            INSERT INTO gin_policy_lvl_clauses (plcl_sbcl_cls_code,\n                                                plcl_sbcl_scl_code,\n                                                plcl_pro_sht_desc,\n                                                plcl_pro_code,\n                                                plcl_pol_policy_no,\n                                                plcl_pol_ren_endos_no,\n                                                plcl_pol_batch_no,\n                                                plcl_sbcl_cls_sht_desc,\n                                                plcl_cls_type,  --PLCL_CLAUSE,\n                                                plcl_cls_editable,\n                                                plcl_new,\n                                                plcl_header,\n                                                plcl_rownum,\n                                                plcl_product_appl,\n                                                plcl_heading)\n                 VALUES (cls.sbcl_cls_code,\n                         cls.clp_scl_code,\n                         cls.clp_pro_sht_desc,\n                         cls.clp_pro_code,\n                         v_pol_policy_no,\n                         v_pol_endos_no,\n                         v_pol_batch_no,\n                         cls.sbcl_cls_sht_desc,\n                         cls.cls_type,                          --PLCL_CLAUSE,\n                         cls.cls_editable,\n                         'Y',\n                         NULL,\n                         NULL,\n                         'Y',\n                         cls.cls_heading);\n\n            IF NVL (cls.cls_editable, 'N') = 'Y'\n            THEN\n                SELECT cls_wording\n                  INTO v_clause\n                  FROM gin_clause\n                 WHERE cls_code = cls.sbcl_cls_code;\n\n                BEGIN\n                    v_clause :=\n                        merge_policies_text (v_pol_batch_no, v_clause);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                UPDATE gin_policy_lvl_clauses\n                   SET plcl_clause = v_clause\n                 WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND plcl_pol_batch_no = v_pol_batch_no;\n            END IF;\n        END LOOP;\n    END;",
        "pop_cov_type_binder_clauses": "PROCEDURE pop_cov_type_binder_clauses (v_pol_policy_no   IN VARCHAR2,\n                                           v_pol_endos_no    IN VARCHAR2,\n                                           v_pol_batch_no    IN NUMBER,\n                                           v_pro_code        IN NUMBER)\n    IS\n        v_clause   LONG;\n\n        CURSOR clause IS\n            SELECT cls_heading,\n                   sbcl_cls_sht_desc,\n                   sbcl_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_subcl_clauses, gin_product_sub_classes, gin_clause\n             WHERE     clp_scl_code = sbcl_scl_code\n                   AND sbcl_cls_code = cls_code\n                   AND cls_code IN\n                           (SELECT bsccl_cls_code\n                              FROM gin_binder_subcl_clauses, gin_policies\n                             WHERE     pol_bind_code = bsccl_bind_code\n                                   AND pol_batch_no = v_pol_batch_no\n                                   AND NVL (pol_binder_policy, 'N') = 'Y')\n                   AND clp_pro_code = v_pro_code\n                   --AND NVL(SBCL_CLS_MANDATORY,'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n            UNION\n            SELECT cls_heading,\n                   scvtmc_cls_sht_desc,\n                   scvtmc_cls_code,\n                   cls_type,\n                   DECODE (cls_type,\n                           'CL', 'Clause',\n                           'WR', 'Warranty',\n                           'SC', 'Special Conditions')    type_desc,\n                   clp_pro_code,\n                   clp_pro_sht_desc,\n                   clp_scl_code,\n                   cls_editable                               --,--CLS_WORDING\n              FROM gin_scl_cvt_mand_clauses,\n                   gin_product_sub_classes,\n                   gin_clause\n             WHERE     clp_scl_code = scvtmc_scl_code\n                   AND scvtmc_cls_code = cls_code\n                   AND clp_pro_code = v_pro_code\n                   AND NVL (scvmtc_cls_mandatory, 'N') = 'Y'\n                   AND cls_code NOT IN\n                           (SELECT plcl_sbcl_cls_code\n                              FROM gin_policy_lvl_clauses\n                             WHERE plcl_pol_batch_no = v_pol_batch_no)\n                   AND scvtmc_cls_code NOT IN\n                           (SELECT sbcl_cls_code\n                              FROM gin_subcl_clauses\n                             WHERE NVL (sbcl_cls_mandatory, 'N') = 'Y');\n    BEGIN\n        FOR cls IN clause\n        LOOP\n            INSERT INTO gin_policy_lvl_clauses (plcl_sbcl_cls_code,\n                                                plcl_sbcl_scl_code,\n                                                plcl_pro_sht_desc,\n                                                plcl_pro_code,\n                                                plcl_pol_policy_no,\n                                                plcl_pol_ren_endos_no,\n                                                plcl_pol_batch_no,\n                                                plcl_sbcl_cls_sht_desc,\n                                                plcl_cls_type,  --PLCL_CLAUSE,\n                                                plcl_cls_editable,\n                                                plcl_new,\n                                                plcl_header,\n                                                plcl_rownum,\n                                                plcl_product_appl,\n                                                plcl_heading)\n                 VALUES (cls.sbcl_cls_code,\n                         cls.clp_scl_code,\n                         cls.clp_pro_sht_desc,\n                         cls.clp_pro_code,\n                         v_pol_policy_no,\n                         v_pol_endos_no,\n                         v_pol_batch_no,\n                         cls.sbcl_cls_sht_desc,\n                         cls.cls_type,                          --PLCL_CLAUSE,\n                         cls.cls_editable,\n                         'Y',\n                         NULL,\n                         NULL,\n                         'Y',\n                         cls.cls_heading);\n\n            IF NVL (cls.cls_editable, 'N') = 'Y'\n            THEN\n                SELECT cls_wording\n                  INTO v_clause\n                  FROM gin_clause\n                 WHERE cls_code = cls.sbcl_cls_code;\n\n                BEGIN\n                    v_clause :=\n                        merge_policies_text (v_pol_batch_no, v_clause);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                UPDATE gin_policy_lvl_clauses\n                   SET plcl_clause = v_clause\n                 WHERE     plcl_sbcl_cls_code = cls.sbcl_cls_code\n                       AND plcl_pol_batch_no = v_pol_batch_no;\n            END IF;\n        END LOOP;\n    END;",
        "addreqdocs": "PROCEDURE addreqdocs (v_pol_batch_no IN NUMBER, v_trans_type IN VARCHAR2)\n    IS\n        v_cnt   NUMBER;\n\n        CURSOR dispatchdocs IS\n            SELECT *\n              FROM gin_dispatch_docs\n             WHERE dd_doc_lvl = v_trans_type;\n    BEGIN\n        SELECT COUNT (1)\n          INTO v_cnt\n          FROM gin_uw_pol_docs\n         WHERE upd_pol_batch_no = v_pol_batch_no;\n\n        IF NVL (v_cnt, 0) > 0\n        THEN\n            FOR dispatchdocs_rec IN dispatchdocs\n            LOOP\n                INSERT INTO gin_uw_pol_docs (upd_code,\n                                             upd_dd_code,\n                                             upd_dispatched,\n                                             upd_pol_batch_no)\n                     VALUES (gin_upd_code_seq.NEXTVAL,\n                             dispatchdocs_rec.dd_code,\n                             'N',\n                             v_pol_batch_no);\n            END LOOP;\n        END IF;\n    END;",
        "dispatchselectedreddoc": "PROCEDURE dispatchselectedreddoc (v_upd_code IN NUMBER)\n    IS\n    BEGIN\n        UPDATE gin_uw_pol_docs\n           SET upd_dispatched = 'Y'\n         WHERE upd_code = v_upd_code;\n    END;",
        "checkifauthorised": "PROCEDURE checkifauthorised (v_pol_batch_no IN NUMBER)\n    IS\n        v_cnt   NUMBER;\n    BEGIN\n        SELECT COUNT (1)\n          INTO v_cnt\n          FROM gin_uw_pol_docs\n         WHERE upd_pol_batch_no = v_pol_batch_no AND upd_dispatched = 'N';\n\n        IF NVL (v_cnt, 0) > 0\n        THEN\n            raise_error (\n                   'You have not Authorised '\n                || ' '\n                || v_cnt\n                || ' '\n                || 'Documents');\n        END IF;\n    END;",
        "auto_renew_prc": "PROCEDURE auto_renew_prc (v_renewal_batch IN NUMBER)\n    IS\n        v_endos_prem      NUMBER;\n        v_pol_batch_no    NUMBER;\n        v_user            VARCHAR2 (30);\n        v_batch_no        NUMBER;\n        v_balance         NUMBER;\n        v_trans_no        NUMBER;\n        v_cr_bal          NUMBER;\n        v_cr_com          NUMBER;\n        v_mtran_dr_no     NUMBER;\n        v_com_inclusive   VARCHAR2 (1) := 'N';\n        v_itb_code        NUMBER;\n\n        CURSOR rcpt IS\n            SELECT *\n              FROM gin_master_transactions\n             WHERE mtran_pol_batch_no = v_batch_no AND mtran_balance <> 0;\n    BEGIN\n        -- RAISE_ERROR(v_renewal_batch);\n        BEGIN\n            SELECT pol_tot_endos_diff_amt, pol_batch_no, pol_prepared_by\n              INTO v_endos_prem, v_pol_batch_no, v_user\n              FROM gin_ren_policies\n             WHERE pol_renewal_batch = v_renewal_batch;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error fetching renewal record....');\n        END;\n\n        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n               || gin_itb_code_seq.NEXTVAL\n          INTO v_itb_code\n          FROM DUAL;\n\n        BEGIN\n            SELECT SUM (\n                       DECODE (mtran_dc,\n                               'D', ABS (mtran_balance),\n                               -ABS (mtran_balance)))\n              INTO v_balance\n              FROM gin_master_transactions\n             WHERE     mtran_pol_batch_no = v_pol_batch_no\n                   AND mtran_tran_type IN ('RC', 'CN')\n                   AND mtran_balance <> 0;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error fetching receipts on this renewal...');\n        END;\n\n        --  RAISE_ERROR('HERE='||v_balance||';'||v_endos_prem);\n        IF ABS (v_balance) >= v_endos_prem\n        THEN\n            transfer_to_uw (v_pol_batch_no, v_user, v_batch_no);\n\n            BEGIN\n                SELECT ggt_trans_no\n                  INTO v_trans_no\n                  FROM gin_gis_transactions\n                 WHERE     ggt_uw_clm_tran = 'U'\n                       AND ggt_pol_batch_no = v_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error retrieving transaction number..');\n            END;\n\n            BEGIN\n                gin_compute_prem_pkg.compute_premium (v_batch_no);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('ERROR COMPUTING PREMIUM.');\n            END;\n\n            --COMMIT;\n            BEGIN\n                UPDATE gin_insured_property_unds\n                   SET ipu_reinsured = 1\n                 WHERE ipu_pol_batch_no = v_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error updating risk as reinsurance ready.');\n            END;\n\n            BEGIN\n                UPDATE gin_master_transactions\n                   SET mtran_pol_batch_no = v_batch_no\n                 WHERE     mtran_pol_batch_no = v_pol_batch_no\n                       AND mtran_tran_type IN ('RC', 'CN')\n                       AND mtran_balance <> 0;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            --COMMIT;\n            BEGIN\n                gis_ri_",
        "auto_pop_policy_excesses": "PROCEDURE auto_pop_policy_excesses (\n        v_pspr_pol_batch_no   gin_policy_section_perils.pspr_pol_batch_no%TYPE)\n    IS\n        v_status          VARCHAR2 (200);\n        v_pol_loaded      VARCHAR2 (200);\n        v_new_pspr_code   NUMBER;\n        v_prev_scl        NUMBER;\n\n        CURSOR pilicy_risks_ref IS\n              SELECT *\n                FROM gin_insured_property_unds\n               WHERE ipu_pol_batch_no = v_pspr_pol_batch_no\n            ORDER BY ipu_sec_scl_code;\n    BEGIN\n        --RAISE_ERROR('v_pspr_pol_batch_no'||v_pspr_pol_batch_no);\n        BEGIN\n            SELECT pol_authosrised, pol_loaded\n              INTO v_status, v_pol_loaded\n              FROM gin_policies\n             WHERE pol_batch_no = v_pspr_pol_batch_no;\n        END;\n\n        IF v_status = 'A' AND NVL (v_pol_loaded, 'N') = 'N'\n        THEN\n            raise_error (\n                'Cannot make changes to a policy that is already authorised');\n            RETURN;\n        END IF;\n\n        v_prev_scl := 0;\n\n        FOR pilicy_risks_rec IN pilicy_risks_ref\n        LOOP\n            IF v_prev_scl = pilicy_risks_rec.ipu_sec_scl_code\n            THEN\n                CONTINUE;\n            END IF;\n\n            v_prev_scl := pilicy_risks_rec.ipu_sec_scl_code;\n\n            DECLARE\n                CURSOR sect_sub_class_per_ref IS\n                    SELECT *\n                      FROM gin_subcl_sction_perils,\n                           gin_perils,\n                           gin_sections,\n                           gin_subcl_sction_perils_map\n                     WHERE     sspr_scl_code =\n                               NVL (pilicy_risks_rec.ipu_sec_scl_code,\n                                    sspr_scl_code)\n                           AND ssprm_per_code = per_code\n                           AND ssprm_sspr_code = sspr_code\n                           AND sspr_scl_code = ssprm_scl_code\n                           AND ssprm_sect_code = sect_code\n                           AND ssprm_bind_code IN\n                                   (SELECT ipu_bind_code\n                                      FROM gin_insured_property_unds\n                                     WHERE ipu_pol_batch_no =\n                                           v_pspr_pol_batch_no)\n                           AND ssprm_sect_code IN\n                                   (SELECT pil_sect_code\n                                      FROM gin_policy_insured_limits\n                                     WHERE pil_ipu_code IN\n                                               (SELECT ipu_code\n                                                  FROM gin_insured_property_unds\n                                                 WHERE ipu_pol_batch_no =\n                                                       v_pspr_pol_batch_no))\n                           AND ssprm_code NOT IN\n                                   (SELECT pspr_ssprm_code\n                                      FROM gin_policy_section_perils\n                                     WHERE pspr_pol_batch_no =\n                                           v_pspr_pol_batch_no);\n            BEGIN\n                FOR sect_sub_class_per_rec IN sect_sub_class_per_ref\n                LOOP\n                    BEGIN\n                        SELECT gin_pspr_code_seq.NEXTVAL\n                          INTO v_new_pspr_code\n                          FROM DUAL;\n\n                        INSERT INTO gin_policy_section_perils (\n                                        pspr_code,\n                                        pspr_pol_batch_no,\n                                        pspr_scl_code,\n                                        pspr_sect_code,\n                                        pspr_sect_sht_desc,\n                                        pspr_per_code,\n                                        pspr_per_sht_desc,\n                                        pspr_mandatory,\n                                        pspr_peril_limit,\n                                        pspr_peril_type,\n                                        pspr_si_or_limit,\n                                        pspr_sec_code,\n                                        pspr_excess_type,\n                                        pspr_excess,\n                                        pspr_excess_min,\n                                        pspr_excess_max,\n                                        pspr_expire_on_claim,\n                                        pspr_bind_code,\n                                        pspr_claim_limit,\n                                        pspr_person_limit,\n                                        pspr_bind_type,\n                                        pspr_sspr_code,\n                                        pspr_depend_loss_type,\n                                        pspr_claim_excess_type)\n                                 VALUES (\n                                            v_new_pspr_code,\n                                            v_pspr_pol_batch_no,\n                                            pilicy_risks_rec.ipu_sec_scl_code,\n                                            sect_sub_class_per_rec.ssprm_sect_code,\n                                            sect_sub_class_per_rec.ssprm_sect_sht_desc,\n                                            sect_sub_class_per_rec.ssprm_per_code,\n                                            sect_sub_class_per_rec.per_sht_desc,\n                                            sect_sub_class_per_rec.sspr_mandatory,\n                                            sect_sub_class_per_rec.sspr_peril_limit,\n                                            sect_sub_class_per_rec.sspr_peril_type,\n                                            sect_sub_class_per_rec.sspr_si_or_limit,\n                                            sect_sub_class_per_rec.ssprm_sec_code,\n                                            NVL (\n                                                sect_sub_class_per_rec.sspr_excess_type,\n                                                sect_sub_class_per_rec.sspr_claim_excess_type),\n                                            sect_sub_class_per_rec.sspr_excess,\n                                            sect_sub_class_per_rec.sspr_excess_min,\n                                            sect_sub_class_per_rec.sspr_excess_max,\n                                            sect_sub_class_per_rec.sspr_expire_on_claim,\n                                            sect_sub_class_per_rec.ssprm_bind_code,\n                                            sect_sub_class_per_rec.sspr_claim_limit,\n                                            sect_sub_class_per_rec.sspr_person_limit,\n                                            sect_sub_class_per_rec.ssprm_bind_type,\n                                            sect_sub_class_per_rec.ssprm_sspr_code,\n                                            sect_sub_class_per_rec.sspr_depend_loss_type,\n                                            sect_sub_class_per_rec.sspr_claim_excess_type);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                   'Error occurred on inserting Excesses ...'\n                                || SQLERRM (SQLCODE));\n                            RETURN;\n                    END;\n                END LOOP;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Failed to create policy level perils');\n            END;\n        END LOOP;\n    END auto_pop_policy_excesses;",
        "process_med_risk_prc": "PROCEDURE process_med_risk_prc (v_pol_batch_no   IN NUMBER,\n                                    v_comm_rate      IN NUMBER,\n                                    v_trans_type     IN VARCHAR2,\n                                    v_scl1           IN VARCHAR2,\n                                    v_scl2           IN VARCHAR2,\n                                    v_scl3           IN VARCHAR2,\n                                    v_scl4           IN VARCHAR2,\n                                    v_scl5           IN VARCHAR2,\n                                    v_scl6           IN VARCHAR2,\n                                    v_prem1          IN NUMBER,\n                                    v_prem2          IN NUMBER,\n                                    v_prem3          IN NUMBER,\n                                    v_prem4          IN NUMBER,\n                                    v_prem5          IN NUMBER,\n                                    v_prem6          IN NUMBER)\n    IS\n        v_insert          BOOLEAN := FALSE;\n        v_scl_code        NUMBER;\n        v_prem            NUMBER (23, 5);\n        v_covt_type       VARCHAR2 (30);\n        v_covt_code       NUMBER;\n        v_si              NUMBER;\n        v_rsk_rec         web_risk_tab := web_risk_tab ();\n        v_rsk_sect_data   web_sect_tab := web_sect_tab ();\n        r_no              NUMBER := 0;\n        v_med_scl         VARCHAR2 (10);\n        v_scl_desc        VARCHAR2 (50);\n        v_date_from       DATE;\n        v_date_to         DATE;\n        v_prp_code        NUMBER;\n        v_med_policy_no   VARCHAR2 (30);\n        v_bind_code       NUMBER;\n        v_user            VARCHAR2 (30);\n        v_new_ipu_code    NUMBER;\n        v_sect_code       NUMBER;\n    BEGIN\n        FOR x IN 1 .. 6\n        LOOP\n            v_insert := FALSE;\n\n            IF x = 1 AND v_scl1 IS NOT NULL AND NVL (v_prem1, 0) != 0\n            THEN\n                BEGIN\n                    SELECT scm_scl_code\n                      INTO v_scl_code\n                      FROM gin_subclass_mapping\n                     WHERE scm_mapped_code = v_scl1;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Fetching Sub Class Mapping For ' || v_scl1);\n                END;\n\n                v_insert := TRUE;\n                v_prem := NVL (v_prem1, 0);\n                v_med_scl := v_scl1;\n            ELSIF x = 2 AND v_scl2 IS NOT NULL AND NVL (v_prem2, 0) != 0\n            THEN\n                BEGIN\n                    SELECT scm_scl_code\n                      INTO v_scl_code\n                      FROM gin_subclass_mapping\n                     WHERE scm_mapped_code = v_scl2;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Fetching Sub Class Mapping For ' || v_scl2);\n                END;\n\n                v_insert := TRUE;\n                v_prem := NVL (v_prem2, 0);\n                v_med_scl := v_scl3;\n            ELSIF x = 3 AND v_scl3 IS NOT NULL AND NVL (v_prem3, 0) != 0\n            THEN\n                BEGIN\n                    SELECT scm_scl_code\n                      INTO v_scl_code\n                      FROM gin_subclass_mapping\n                     WHERE scm_mapped_code = v_scl3;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Fetching Sub Class Mapping For ' || v_scl3);\n                END;\n\n                v_insert := TRUE;\n                v_prem := NVL (v_prem3, 0);\n                v_med_scl := v_scl3;\n            ELSIF x = 4 AND v_scl4 IS NOT NULL AND NVL (v_prem4, 0) != 0\n            THEN\n                BEGIN\n                    SELECT scm_scl_code\n                      INTO v_scl_code\n                      FROM gin_subclass_mapping\n                     WHERE scm_mapped_code = v_scl4;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Fetching Sub Class Mapping For ' || v_scl4);\n                END;\n\n                v_insert := TRUE;\n                v_prem := NVL (v_prem4, 0);\n                v_med_scl := v_scl4;\n            ELSIF x = 5 AND v_scl5 IS NOT NULL AND NVL (v_prem5, 0) != 0\n            THEN\n                BEGIN\n                    SELECT scm_scl_code\n                      INTO v_scl_code\n                      FROM gin_subclass_mapping\n                     WHERE scm_mapped_code = v_scl5;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Fetching Sub Class Mapping For ' || v_scl5);\n                END;\n\n                v_insert := TRUE;\n                v_prem := NVL (v_prem5, 0);\n                v_med_scl := v_scl5;\n            ELSIF x = 6 AND v_scl6 IS NOT NULL AND NVL (v_prem6, 0) != 0\n            THEN\n                BEGIN\n                    SELECT scm_scl_code\n                      INTO v_scl_code\n                      FROM gin_subclass_mapping\n                     WHERE scm_mapped_code = v_scl6;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error Fetching Sub Class Mapping For ' || v_scl6);\n                END;\n\n                v_insert := TRUE;\n                v_prem := NVL (v_prem6, 0);\n                v_med_scl := v_scl6;\n            END IF;\n\n            IF v_insert\n            THEN\n                BEGIN\n                    SELECT sclcovt_covt_sht_desc,\n                           sclcovt_covt_code,\n                           sclcovt_default_si,\n                           scl_desc\n                      INTO v_covt_type,\n                           v_covt_code,\n                           v_si,\n                           v_scl_desc\n                      FROM gin_subclass_cover_types, gin_sub_classes\n                     WHERE     scl_code = sclcovt_scl_code\n                           AND scl_code = v_scl_code\n                           AND NVL (sclcovt_default, 'N') = 'Y';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                               'Unable retrieving subclass cover type for subclass code '\n                            || v_scl_code);\n                END;\n\n                BEGIN\n                    SELECT pol_policy_cover_from,\n                           pol_policy_cover_to,\n                           pol_prp_code,\n                           pol_old_policy_number,\n                           pol_prepared_by\n                      INTO v_date_from,\n                           v_date_to,\n                           v_prp_code,\n                           v_med_policy_no,\n                           v_user\n                      FROM gin_policies\n                     WHERE pol_batch_no = v_pol_batch_no;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'Error fetching policy number (medware...)');\n                END;\n\n                IF NVL (v_comm_rate, 0) = 0\n                THEN\n                    UPDATE gin_policies\n                       SET pol_commission_allowed = 'N'\n                     WHERE     pol_batch_no = v_pol_batch_no\n                           AND pol_agnt_agent_code != 0;\n                END IF;\n\n                BEGIN\n                    SELECT bind_code\n                      INTO v_bind_code\n                      FROM gin_binders\n                     WHERE     bind_scl_code = v_scl_code\n                           AND NVL (bind_web_default, 'N') = 'Y';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                               'Error fetching binder for sub class '\n                            || v_scl_code);\n                END;\n\n                --            IF v_trans_type = 'NB' THEN\n                --create the insured\n                --create the risks\n                r_no := 1;\n                v_rsk_rec := web_risk_tab ();\n                v_rsk_rec.EXTEND (r_no);\n                v_rsk_rec (r_no) :=\n                    web_risk_rec (v_med_policy_no || '-' || v_med_scl,\n                                  --IPU_PROPERTY_ID  VARCHAR2(60),\n                                  v_scl_desc, --  IPU_DESC         VARCHAR2(200),\n                                  v_scl_code,     --  IPU_SCL_CODE     NUMBER,\n                                  NULL,     --  IPU_SCL_DESC     VARCHAR2(55),\n                                  v_covt_code,    --  IPU_CVT_CODE     NUMBER,\n                                  v_covt_type, --  IPU_CVT_DESC     VARCHAR2(20),\n                                  v_bind_code,    --  IPU_BIND_CODE    NUMBER,\n                                  NULL,     --  IPU_BIND_DESC    VARCHAR2(45),\n                                  NULL,     --  IPU_SECT_CODE    VARCHAR2(60),\n                                  NULL,     --  IPU_SECT_DESC    VARCHAR2(60),\n                                  v_si,     --  IPU_LIMIT        NUMBER(22,5),\n                                  NULL,       --  WEB_IPU_CODE     NUMBER(22),\n                                  NULL,      --  IPU_ACTION_TYPE  VARCHAR2(1),\n                                  NULL,       --  GIS_IPU_CODE     NUMBER(22),\n                                  NULL,           --  POLIN_CODE       NUMBER,\n                                  v_prp_code,     --  prp_code         NUMBER,\n                                  NULL,      --  IPU_STATUS       VARCHAR2(3),\n                                  NULL,      --IPU_EML_SI         VARCHAR2(1),\n                                  NULL,    --IPU_RISK_ADDRESS   VARCHAR2(150),\n                                  NULL,    --IPU_RISK_DETAILS   VARCHAR2(150),\n                                  'Y',       --IPU_PRORATA        VARCHAR2(1),\n                                  NULL,     --IPU_NCD_STATUS     VARCHAR2(15),\n                                  NULL,           --IPU_NCD_LVL        NUMBER,\n                                  NULL,           --IPU_QUZ_CODE       NUMBER,\n                                  NULL,           --IPU_RELR_CODE      NUMBER,\n                                  NULL,     --IPU_RELR_SHT_DESC  VARCHAR2(15),\n                                  NULL,      --IPU_RETRO_COVER    VARCHAR2(1),\n                                  NULL,             --IPU_RETRO_WEF      DATE,\n                                  NULL,           --IPU_TERR_CODE      NUMBER,\n                                  NULL,    --IPU_TERR_DESC      VARCHAR2(200),\n                                  NULL,           --IPU_RC_CODE        NUMBER,\n                                  NULL,     --IPU_RC_SHT_DESC    VARCHAR2(20),\n                                  NULL,      --IPU_FREE_LIMIT     VARCHAR2(1),\n                                  NULL,             --IPU_SURVEY_DATE    DATE,\n                                  NULL,           --IPU_PRO_CODE       NUMBER,\n                                  NULL,     --IPU_PRO_SHT_DESC   VARCHAR2(55),\n                                  'A',          --IPU_ADD_EDIT    VARCHAR2(2),\n                                  v_date_from,\n                                  --TO_DATE(TO_CHAR(cur_clnts_rec.PED_WEF,'DD-MON-RRRR'),'DD/MM/RRRR'),                         --IPU_WEF         DATE,\n                                  v_date_to,\n                                  -- TO_DATE(TO_CHAR(cur_clnts_rec.PED_WET,'DD-MON-RRRR'),'DD/MM/RRRR'),                         --IPU_WET         DATE,\n                                  NULL,        --IPU_CERT_TYPE   VARCHAR2(10),\n                                  NULL,                --IPU_CERT_WEF    DATE,\n                                  NULL,                 --IPU_CERT_WET    DATE\n                                  v_comm_rate,                 --IPU_COMM_RATE\n                                  v_prem,                             --IPU_FP\n                                  v_si,\n                                  'N',  --DECODE(NVL(v_max_expo,0),0,'Y','N'),\n                                  NULL,                 --IPU_AGN_CODE NUMBER,\n                                  NULL,       --IPU_AGN_SHT_DESC VARCHAR2(55),\n                                  NULL,        --IPU_QP_BIND_TYPE VARCHAR2(1),\n                                  NULL,              --IPU_QP_BIND_CODE NUMBER\n                                  NULL,              --IPU_CONVEYANCE VARCHAR2\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,                --ipu_endorse_fap_or_bc\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL,\n                                  NULL);\n\n                BEGIN\n                    gin_stp_pkg.gin_ipu_prc (v_pol_batch_no,\n                                             v_trans_type,\n                                             'A',\n                                             v_rsk_rec,\n                                             v_user,\n                                             v_new_ipu_code,\n                                             'N',\n                                             'Y',\n                                             NULL);\n                END;\n\n                --create the sections\n                BEGIN\n                    SELECT scvts_sect_code\n                      INTO v_sect_code\n                      FROM gin_subcl_covt_sections\n                     WHERE     scvts_scl_code = v_scl_code\n                           AND scvts_covt_code = v_covt_code\n                           AND NVL (scvts_mandatory, 'N') = 'Y';\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                               'Error fetching medware default section for sub class '\n                            || v_scl_code);\n                END;\n\n                gin_rsk_limits_stp (v_new_ipu_code,\n                                    --v_new_ipu_code   IN   NUMBER,\n                                    v_scl_code, --v_scl_code       IN   NUMBER,\n                                    v_bind_code, --v_bind_code      IN   NUMBER,\n                                    v_sect_code, --v_sect_code      IN   NUMBER,\n                                    v_covt_code, --v_covt_code      IN   NUMBER,\n                                    1,         --v_row            IN   NUMBER,\n                                    NULL,\n                                    'A',     --v_add_edit       IN   VARCHAR2,\n                                    'N',     --v_renewal        IN   VARCHAR2,\n                                    NULL        --v_ncd_level      IN   NUMBER\n                                        );\n            --            ELSIF v_trans_type = 'EN' THEN\n            --            -- populate the risks based on the subclasses provided\n            --            null;\n            --            ELSIF v_trans_type = 'RN' THEN\n            --            -- populate the risks based on the provided subclasses\n            --            null;\n            --            END IF;\n            END IF;\n        END LOOP;\n    END;",
        "update_insured_remarks": "PROCEDURE update_insured_remarks (v_polin_code   NUMBER,\n                                      v_comment      VARCHAR2)\n    IS\n    BEGIN\n        UPDATE gin_policy_insureds\n           SET polin_comment = v_comment\n         WHERE polin_code = v_polin_code;\n    END;",
        "duplicate_risk": "PROCEDURE duplicate_risk (v_ipu_code NUMBER)\n    IS\n        v_new_ipu_code       NUMBER;\n        v_ipu_pol_batch_no   NUMBER;\n        v_is_motor_risk      CHAR;\n    BEGIN\n        SELECT IPU_POL_BATCH_NO, SCL_MOTOR_VERIFY\n          INTO v_ipu_pol_batch_no, v_is_motor_risk\n          FROM GIN_INSURED_PROPERTY_UNDS, GIN_SUB_CLASSES\n         WHERE IPU_SEC_SCL_CODE = SCL_CODE AND IPU_CODE = v_ipu_code;\n\n        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n               || gin_ipu_code_seq.NEXTVAL\n          INTO v_new_ipu_code\n          FROM DUAL;\n\n        INSERT INTO gin_insured_property_unds (\n                        ipu_code,\n                        ipu_property_id,\n                        ipu_item_desc,\n                        ipu_qty,\n                        ipu_value,\n                        ipu_wef,\n                        ipu_wet,\n                        ipu_pol_policy_no,\n                        ipu_pol_ren_endos_no,\n                        ipu_pol_batch_no,\n                        ipu_basic_premium,\n                        ipu_nett_premium,\n                        ipu_compulsory_excess,\n                        ipu_add_theft_excess,\n                        ipu_add_exp_excess,\n                        ipu_prr_rate,\n                        ipu_comp_retention,\n                        ipu_pol_est_max_loss,\n                        ipu_avail_fulc_bal,\n                        ipu_endos_diff_amt,\n                        ipu_prem_wef,\n                        ipu_earth_quake_cover,\n                        ipu_earth_quake_prem,\n                        ipu_location,\n                        ipu_itl,\n                        ipu_polin_code,\n                        ipu_sec_sect_code,\n                        ipu_sect_sht_desc,\n                        ipu_sec_scl_code,\n                        ipu_ncd_status,\n                        ipu_cert_issued,\n                        ipu_related_ipu_code,\n                        ipu_prorata,\n                        ipu_bp,\n                        ipu_gp,\n                        ipu_fp,\n                        ipu_fap,\n                        ipu_prev_ipu_code,\n                        ipu_cummulative_reins,\n                        ipu_eml_si,\n                        ipu_reinsured,\n                        ipu_ct_code,\n                        ipu_sht_desc,\n                        ipu_quz_code,\n                        ipp_quz_sht_desc,\n                        ipu_quz_sht_desc,\n                        ipu_ncl_level,\n                        ipu_ncd_level,\n                        ipu_id,\n                        ipu_gross_comp_retention,\n                        ipu_bind_code,\n                        ipu_commission,\n                        ipu_comm_endos_diff_amt,\n                        ipu_facre_amount,\n                        ipu_clp_code,\n                        ipu_excess_rate,\n                        ipu_excess_type,\n                        ipu_excess_rate_type,\n                        ipu_excess_min,\n                        ipu_excess_max,\n                        ipu_prereq_ipu_code,\n                        ipu_escalation_rate,\n                        ipu_endos_remove,\n                        ipu_comm_rate,\n                        ipu_prev_batch_no,\n                        ipu_cur_code,\n                        ipu_relr_code,\n                        ipu_relr_sht_desc,\n                        ipu_reinsure_amt,\n                        ipu_prp_code,\n                        ipu_max_exposure,\n                        ipu_com_retention_rate,\n                        ipu_eff_wef,\n                        ipu_eff_wet,\n                        ipu_retro_cover,\n                        ipu_retro_wef,\n                        ipu_covt_code,\n                        ipu_covt_sht_desc,\n                        ipu_si_diff,\n                        ipu_terr_code,\n                        ipu_terr_desc,\n                        ipu_comments,\n                        ipu_from_time,\n                        ipu_to_time,\n                        ipu_mar_cert_no,\n                        ipu_tot_endos_prem_dif,\n                        ipu_tot_gp,\n                        ipu_tot_value,\n                        ipu_cover_days,\n                        ipu_grp_comp_net_ret,\n                        ipu_grp_si_risk_pct,\n                        ipu_grp_top_loc,\n                        ipu_grp_comp_gross_ret,\n                        ipu_prev_prem,\n                        ipu_current_prrd_code,\n                        ipu_ri_agnt_com_rate,\n                        ipu_ri_agnt_comm_amt,\n                        ipu_tot_fap,\n                        ipu_max_dc_refund_pct,\n                        ipu_extra_premium,\n                        ipu_status,\n                        ipu_uw_yr,\n                        ipu_endose_fap_or_bc,\n                        ipu_tot_first_loss,\n                        ipu_accumulation_limit,\n                        ipu_compute_max_exposure,\n                        ipu_trans_eff_wet,\n                        ipu_prem_tax,\n                        ipu_rate_change_comment,\n                        ipu_trans_count,\n                        ipu_paid_premium,\n                        ipu_paid_tl,\n                        ipu_inception_uwyr,\n                        ipu_prem_comment,\n                        ipu_coin_tl,\n                        ipu_dc_paid_premium,\n                        ipu_dc_ap,\n                        ipu_item_details,\n                        ipu_eml_based_on,\n                        ipu_aggregate_limits,\n                        ipu_rc_code,\n                        ipu_rc_sht_desc,\n                        ipu_free_limit,\n                        ipu_contrad_ipu_code,\n                        ipu_survey_date,\n                        ipu_declared,\n                        ipu_prev_fap,\n                        ipu_prev_tot_fap,\n                        ipu_min_premium_used,\n                        ipu_cancellation_days,\n                        ipu_allowed_comm_rate,\n                        ipu_allowed_comm_amt,\n                        ipu_dc_penalty_pct,\n                        ipu_reinsure_diff_amt,\n                        ipu_prev_reinsure_amt,\n                        ipu_phfund,\n                        ipu_coin_phfund,\n                        ipu_enforce_cvt_min_prem,\n                        ipu_instal_prem,\n                        ipu_prev_ri_si,\n                        ipu_policy_status,\n                        ipu_earthqke_prem_diff,\n                        ipu_override_ri_retention,\n                        ipu_risk_oth_int_parties,\n                        ipu_prorata_sect_prem,\n                        ipu_nonprorata_sect_prem,\n                        ipu_prev_prorata_sect_prem,\n                        ipu_prev_nonprorata_sect_prem,\n                        ipu_tot_prorata_sect_prem,\n                        ipu_tot_nonprorata_sect_prem,\n                        ipu_prev_tot_prorata_s_prem,\n                        ipu_prev_tot_nonprorata_s_prem,\n                        ipu_sub_agn_comm_rate,\n                        ipu_sub_agn_comm_amt,\n                        ipu_lta_endos_com_amt,\n                        ipu_lta_commission,\n                        ipu_lta_comm_rate,\n                        ipu_admin_fee_disc_amt,\n                        ipu_admin_fee_disc_rate,\n                        ipu_lta_comm_disc_rate,\n                        ipu_lta_comm_disc_amt,\n                        ipu_tot_families,\n                        ipu_tot_individuals,\n                        ipu_tot_females,\n                        ipu_tot_males,\n                        ipu_conveyance_type,\n                        ipu_stamp_duty,\n                        ipu_mktr_com_amt,\n                        ipu_mktr_com_rate,\n                        ipu_vat_amt,\n                        ipu_vat_rate,\n                        ipu_comm_disc_type,\n                        ipu_comm_disc_rate,\n                        ipu_comm_disc_amt,\n                        ipu_prev_status,\n                        ipu_rs_code,\n                        ipu_rescue_mem,\n                        ipu_ped_code,\n                        ipu_cover_suspended,\n                        ipu_suspend_wef,\n                        ipu_suspend_wet,\n                        ipu_ncd_cert_no,\n                        ipu_pymt_install_pcts,\n                        ipu_susp_reinstmt_type,\n                        ipu_install_period,\n                        ipu_rescue_charge,\n                        ipu_previous_insurer,\n                        ipu_next_inst_prem,\n                        ipu_wtht,\n                        ipu_drcr_no,\n                        ipu_post_retro_wet,\n                        ipu_post_retro_cover,\n                        ipu_co_phfund,\n                        ipu_cover_note_remarks,\n                        ipu_cover_note_wet,\n                        ipu_cover_note_wef,\n                        ipu_cover_note_date,\n                        ipu_cover_note_by,\n                        ipu_cover_note_no,\n                        ipu_health_tax,\n                        ipu_motor_tax,\n                        ipu_certchg,\n                        ipu_road_safety_tax,\n                        ipu_client_vat_amt,\n                        ipu_motor_levy,\n                        ipu_overrideride_ret_type,\n                        ipu_db_code,\n                        ipu_rare_model,\n                        ipu_cashback_appl,\n                        ipu_cashback_level,\n                        ipu_vehicle_model,\n                        ipu_vehicle_make,\n                        ipu_vehicle_model_code,\n                        ipu_vehicle_make_code,\n                        ipu_loc_town,\n                        ipu_prop_address,\n                        ipu_other_com_charges,\n                        ipu_risk_note,\n                        ipu_model_yr,\n                        ipu_insured_driver,\n                        ipu_cert_no,\n                        ipu_validate_ucr,\n                        ipu_ucr_code,\n                        ipu_pip_code,\n                        ipu_pip_pf_code,\n                        ipu_survey_agnt_code,\n                        ipu_quza_code,\n                        ipu_survey,\n                        ipu_maintenance_period_type,\n                        ipu_maintenance_period,\n                        ipu_other_client_deductibles,\n                        ipu_coin_other_client_charges)\n            SELECT v_new_ipu_code,\n                   ipu_property_id,\n                   ipu_item_desc,\n                   ipu_qty,\n                   ipu_value,\n                   ipu_wef,\n                   ipu_wet,\n                   ipu_pol_policy_no,\n                   ipu_pol_ren_endos_no,\n                   ipu_pol_batch_no,\n                   ipu_basic_premium,\n                   ipu_nett_premium,\n                   ipu_compulsory_excess,\n                   ipu_add_theft_excess,\n                   ipu_add_exp_excess,\n                   ipu_prr_rate,\n                   ipu_comp_retention,\n                   ipu_pol_est_max_loss,\n                   ipu_avail_fulc_bal,\n                   ipu_endos_diff_amt,\n                   ipu_prem_wef,\n                   ipu_earth_quake_cover,\n                   ipu_earth_quake_prem,\n                   ipu_location,\n                   ipu_itl,\n                   ipu_polin_code,\n                   ipu_sec_sect_code,\n                   ipu_sect_sht_desc,\n                   ipu_sec_scl_code,\n                   ipu_ncd_status,\n                   ipu_cert_issued,\n                   ipu_related_ipu_code,\n                   ipu_prorata,\n                   ipu_bp,\n                   ipu_gp,\n                   ipu_fp,\n                   ipu_fap,\n                   ipu_prev_ipu_code,\n                   ipu_cummulative_reins,\n                   ipu_eml_si,\n                   ipu_reinsured,\n                   ipu_ct_code,\n                   ipu_sht_desc,\n                   ipu_quz_code,\n                   ipp_quz_sht_desc,\n                   ipu_quz_sht_desc,\n                   ipu_ncl_level,\n                   ipu_ncd_level,\n                      TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                   || gin_ipu_id_seq.NEXTVAL,\n                   ipu_gross_comp_retention,\n                   ipu_bind_code,\n                   ipu_commission,\n                   ipu_comm_endos_diff_amt,\n                   ipu_facre_amount,\n                   ipu_clp_code,\n                   ipu_excess_rate,\n                   ipu_excess_type,\n                   ipu_excess_rate_type,\n                   ipu_excess_min,\n                   ipu_excess_max,\n                   ipu_prereq_ipu_code,\n                   ipu_escalation_rate,\n                   ipu_endos_remove,\n                   ipu_comm_rate,\n                   ipu_prev_batch_no,\n                   ipu_cur_code,\n                   ipu_relr_code,\n                   ipu_relr_sht_desc,\n                   ipu_reinsure_amt,\n                   ipu_prp_code,\n                   ipu_max_exposure,\n                   ipu_com_retention_rate,\n                   ipu_eff_wef,\n                   ipu_eff_wet,\n                   ipu_retro_cover,\n                   ipu_retro_wef,\n                   ipu_covt_code,\n                   ipu_covt_sht_desc,\n                   ipu_si_diff,\n                   ipu_terr_code,\n                   ipu_terr_desc,\n                   ipu_comments,\n                   ipu_from_time,\n                   ipu_to_time,\n                   ipu_mar_cert_no,\n                   ipu_tot_endos_prem_dif,\n                   ipu_tot_gp,\n                   ipu_tot_value,\n                   ipu_cover_days,\n                   ipu_grp_comp_net_ret,\n                   ipu_grp_si_risk_pct,\n                   ipu_grp_top_loc,\n                   ipu_grp_comp_gross_ret,\n                   ipu_prev_prem,\n                   ipu_current_prrd_code,\n                   ipu_ri_agnt_com_rate,\n                   ipu_ri_agnt_comm_amt,\n                   ipu_tot_fap,\n                   ipu_max_dc_refund_pct,\n                   ipu_extra_premium,\n                   ipu_status,\n                   ipu_uw_yr,\n                   ipu_endose_fap_or_bc,\n                   ipu_tot_first_loss,\n                   ipu_accumulation_limit,\n                   ipu_compute_max_exposure,\n                   ipu_trans_eff_wet,\n                   ipu_prem_tax,\n                   ipu_rate_change_comment,\n                   ipu_trans_count,\n                   ipu_paid_premium,\n                   ipu_paid_tl,\n                   ipu_inception_uwyr,\n                   ipu_prem_comment,\n                   ipu_coin_tl,\n                   ipu_dc_paid_premium,\n                   ipu_dc_ap,\n                   ipu_item_details,\n                   ipu_eml_based_on,\n                   ipu_aggregate_limits,\n                   ipu_rc_code,\n                   ipu_rc_sht_desc,\n                   ipu_free_limit,\n                   ipu_contrad_ipu_code,\n                   ipu_survey_date,\n                   ipu_declared,\n                   ipu_prev_fap,\n                   ipu_prev_tot_fap,\n                   ipu_min_premium_used,\n                   ipu_cancellation_days,\n                   ipu_allowed_comm_rate,\n                   ipu_allowed_comm_amt,\n                   ipu_dc_penalty_pct,\n                   ipu_reinsure_diff_amt,\n                   ipu_prev_reinsure_amt,\n                   ipu_phfund,\n                   ipu_coin_phfund,\n                   ipu_enforce_cvt_min_prem,\n                   ipu_instal_prem,\n                   ipu_prev_ri_si,\n                   ipu_policy_status,\n                   ipu_earthqke_prem_diff,\n                   ipu_override_ri_retention,\n                   ipu_risk_oth_int_parties,\n                   ipu_prorata_sect_prem,\n                   ipu_nonprorata_sect_prem,\n                   ipu_prev_prorata_sect_prem,\n                   ipu_prev_nonprorata_sect_prem,\n                   ipu_tot_prorata_sect_prem,\n                   ipu_tot_nonprorata_sect_prem,\n                   ipu_prev_tot_prorata_s_prem,\n                   ipu_prev_tot_nonprorata_s_prem,\n                   ipu_sub_agn_comm_rate,\n                   ipu_sub_agn_comm_amt,\n                   ipu_lta_endos_com_amt,\n                   ipu_lta_commission,\n                   ipu_lta_comm_rate,\n                   ipu_admin_fee_disc_amt,\n                   ipu_admin_fee_disc_rate,\n                   ipu_lta_comm_disc_rate,\n                   ipu_lta_comm_disc_amt,\n                   ipu_tot_families,\n                   ipu_tot_individuals,\n                   ipu_tot_females,\n                   ipu_tot_males,\n                   ipu_conveyance_type,\n                   ipu_stamp_duty,\n                   ipu_mktr_com_amt,\n                   ipu_mktr_com_rate,\n                   ipu_vat_amt,\n                   ipu_vat_rate,\n                   ipu_comm_disc_type,\n                   ipu_comm_disc_rate,\n                   ipu_comm_disc_amt,\n                   ipu_prev_status,\n                   ipu_rs_code,\n                   ipu_rescue_mem,\n                   ipu_ped_code,\n                   ipu_cover_suspended,\n                   ipu_suspend_wef,\n                   ipu_suspend_wet,\n                   ipu_ncd_cert_no,\n                   ipu_pymt_install_pcts,\n                   ipu_susp_reinstmt_type,\n                   ipu_install_period,\n                   ipu_rescue_charge,\n                   ipu_previous_insurer,\n                   ipu_next_inst_prem,\n                   ipu_wtht,\n                   ipu_drcr_no,\n                   ipu_post_retro_wet,\n                   ipu_post_retro_cover,\n                   ipu_co_phfund,\n                   ipu_cover_note_remarks,\n                   ipu_cover_note_wet,\n                   ipu_cover_note_wef,\n                   ipu_cover_note_date,\n                   ipu_cover_note_by,\n                   ipu_cover_note_no,\n                   ipu_health_tax,\n                   ipu_motor_tax,\n                   ipu_certchg,\n                   ipu_road_safety_tax,\n                   ipu_client_vat_amt,\n                   ipu_motor_levy,\n                   ipu_overrideride_ret_type,\n                   ipu_db_code,\n                   ipu_rare_model,\n                   ipu_cashback_appl,\n                   ipu_cashback_level,\n                   ipu_vehicle_model,\n                   ipu_vehicle_make,\n                   ipu_vehicle_model_code,\n                   ipu_vehicle_make_code,\n                   ipu_loc_town,\n                   ipu_prop_address,\n                   ipu_other_com_charges,\n                   ipu_risk_note,\n                   ipu_model_yr,\n                   ipu_insured_driver,\n                   ipu_cert_no,\n                   ipu_validate_ucr,\n                   ipu_ucr_code,\n                   ipu_pip_code,\n                   ipu_pip_pf_code,\n                   ipu_survey_agnt_code,\n                   ipu_quza_code,\n                   ipu_survey,\n                   ipu_maintenance_period_type,\n                   ipu_maintenance_period,\n                   ipu_other_client_deductibles,\n                   ipu_coin_other_client_charges\n              FROM gin_insured_property_unds\n             WHERE ipu_code = v_ipu_code;\n\n\n        IF v_is_motor_risk = 'Y'\n        THEN\n            BEGIN\n                gin_stp_uw_pkg.populate_cert_to_print (v_ipu_pol_batch_no,\n                                                       'N',\n                                                       'N',\n                                                       NULL,\n                                                       v_new_ipu_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                           'Error allocating certificates at step 1....'\n                        || SQLERRM (SQLCODE));\n            END;\n        END IF;\n\n        --      INSERT INTO gin_policy_active_risks\n        --                  (polar_pol_batch_no, polar_ipu_code, polar_prev_batch_no,\n        --                   polar_ipu_id, polar_pol_policy_no, polar_prp_code)\n        --         SELECT polar_pol_batch_no, v_new_ipu_code, polar_prev_batch_no,\n        --                polar_ipu_id, polar_pol_policy_no, polar_prp_code\n        --           FROM gin_policy_active_risks\n        --          WHERE polar_ipu_code = v_ipu_code;\n        INSERT INTO gin_policy_clauses (pocl_sbcl_cls_code,\n                                        pocl_cls_sht_desc,\n                                        pocl_sbcl_scl_code,\n                                        pocl_pol_policy_no,\n                                        pocl_pol_ren_endos_no,\n                                        pocl_pol_batch_no,\n                                        pocl_ipu_code,\n                                        plcl_cls_type,\n                                        pocl_clause,\n                                        pocl_cls_editable,\n                                        pocl_new,\n                                        pocl_heading)\n            SELECT pocl_sbcl_cls_code,\n                   pocl_cls_sht_desc,\n                   pocl_sbcl_scl_code,\n                   pocl_pol_policy_no,\n                   pocl_pol_ren_endos_no,\n                   pocl_pol_batch_no,\n                   v_new_ipu_code,\n                   plcl_cls_type,\n                   pocl_clause,\n                   pocl_cls_editable,\n                   pocl_new,\n                   pocl_heading\n              FROM gin_policy_clauses\n             WHERE pocl_ipu_code = v_ipu_code;\n\n        INSERT INTO gin_policy_insured_limits (pil_code,\n                                               pil_ipu_code,\n                                               pil_sect_code,\n                                               pil_sect_sht_desc,\n                                               pil_row_num,\n                                               pil_calc_group,\n                                               pil_limit_amt,\n                                               pil_prem_rate,\n                                               pil_prem_amt,\n                                               pil_rate_type,\n                                               pil_rate_desc,\n                                               pil_sect_type,\n                                               pil_sect_excess_detail,\n                                               pil_original_prem_rate,\n                                               pil_rate_change_remarks,\n                                               pil_change_done_by,\n                                               pil_min_premium,\n                                               pil_comment,\n                                               pil_multiplier_rate,\n                                               pil_multiplier_div_factor,\n                                               pil_annual_premium,\n                                               pil_rate_div_fact,\n                                               pil_desc,\n                                               pil_used_limit,\n                                               pil_compute,\n                                               pil_indem_prd,\n                                               pil_prd_type,\n                                               pil_indem_fstprd,\n                                               pil_indem_fstprd_pct,\n                                               pil_indem_remprd_pct,\n                                               pil_dual_basis,\n                                               pil_prem_accumulation,\n                                               pil_prem_prorata,\n                                               pil_prev_prem,\n                                               pil_declaration_section,\n                                               pil_prev_limit,\n                                               pil_actual_prem,\n                                               pil_prev_prem_prorata,\n                                               pil_annual_actual_prem,\n                                               pil_eml_pct,\n                                               pil_top_loc_rate,\n                                               pil_top_loc_div_fact,\n                                               pil_free_limit_amt,\n                                               pil_limit_prd,\n                                               pil_actual_rate_prem,\n                                               pil_prev_endr_prem_rate,\n                                               pil_prev_endr_rate_div_fact,\n                                               pil_prev_endr_mult_rate,\n                                               pil_prev_endr_mult_div_fact,\n                                               pil_expired,\n                                               pil_free_limit,\n                                               pil_prorata_full,\n                                               pil_si_limit_type,\n                                               pil_si_rate,\n                                               pil_cover_type,\n                                               pil_prr_max_rate,\n                                               pil_prr_min_rate,\n                                               pil_firstloss,\n                                               pil_firstloss_amt_pcnt,\n                                               pil_firstloss_value)\n            SELECT gin_pil_code_seq.NEXTVAL,\n                   v_new_ipu_code,\n                   pil_sect_code,\n                   pil_sect_sht_desc,\n                   pil_row_num,\n                   pil_calc_group,\n                   pil_limit_amt,\n                   pil_prem_rate,\n                   pil_prem_amt,\n                   pil_rate_type,\n                   pil_rate_desc,\n                   pil_sect_type,\n                   pil_sect_excess_detail,\n                   pil_original_prem_rate,\n                   pil_rate_change_remarks,\n                   pil_change_done_by,\n                   pil_min_premium,\n                   pil_comment,\n                   pil_multiplier_rate,\n                   pil_multiplier_div_factor,\n                   pil_annual_premium,\n                   pil_rate_div_fact,\n                   pil_desc,\n                   pil_used_limit,\n                   pil_compute,\n                   pil_indem_prd,\n                   pil_prd_type,\n                   pil_indem_fstprd,\n                   pil_indem_fstprd_pct,\n                   pil_indem_remprd_pct,\n                   pil_dual_basis,\n                   pil_prem_accumulation,\n                   pil_prem_prorata,\n                   pil_prev_prem,\n                   pil_declaration_section,\n                   pil_prev_limit,\n                   pil_actual_prem,\n                   pil_prev_prem_prorata,\n                   pil_annual_actual_prem,\n                   pil_eml_pct,\n                   pil_top_loc_rate,\n                   pil_top_loc_div_fact,\n                   pil_free_limit_amt,\n                   pil_limit_prd,\n                   pil_actual_rate_prem,\n                   pil_prev_endr_prem_rate,\n                   pil_prev_endr_rate_div_fact,\n                   pil_prev_endr_mult_rate,\n                   pil_prev_endr_mult_div_fact,\n                   pil_expired,\n                   pil_free_limit,\n                   pil_prorata_full,\n                   pil_si_limit_type,\n                   pil_si_rate,\n                   pil_cover_type,\n                   pil_prr_max_rate,\n                   pil_prr_min_rate,\n                   pil_firstloss,\n                   pil_firstloss_amt_pcnt,\n                   pil_firstloss_value\n              FROM gin_policy_insured_limits\n             WHERE pil_ipu_code = v_ipu_code;\n\n        INSERT INTO gin_pol_sec_perils (gpsp_per_code,\n                                        gpsp_per_sht_desc,\n                                        gpsp_sec_sect_code,\n                                        gpsp_sect_sht_desc,\n                                        gpsp_sec_scl_code,\n                                        gpsp_ipp_code,\n                                        gpsp_ipu_code,\n                                        gpsp_limit_amt,\n                                        gpsp_excess_amt,\n                                        gsps_min_excess_amt,\n                                        gsps_excess_calc_type,\n                                        gsps_excess_percentage)\n            SELECT gpsp_per_code,\n                   gpsp_per_sht_desc,\n                   gpsp_sec_sect_code,\n                   gpsp_sect_sht_desc,\n                   gpsp_sec_scl_code,\n                   gpsp_ipp_code,\n                   v_new_ipu_code,\n                   gpsp_limit_amt,\n                   gpsp_excess_amt,\n                   gsps_min_excess_amt,\n                   gsps_excess_calc_type,\n                   gsps_excess_percentage\n              FROM gin_pol_sec_perils\n             WHERE gpsp_ipu_code = v_ipu_code;\n\n        INSERT INTO gin_risk_excess (re_ipu_code,\n                                     re_excess_rate,\n                                     re_excess_type,\n                                     re_excess_rate_type,\n                                     re_excess_min,\n                                     re_excess_max,\n                                     re_comments)\n            SELECT v_new_ipu_code,\n                   re_excess_rate,\n                   re_excess_type,\n                   re_excess_rate_type,\n                   re_excess_min,\n                   re_excess_max,\n                   re_comments\n              FROM gin_risk_excess\n             WHERE re_ipu_code = v_ipu_code;\n    END;",
        "pop_loading_rsk_limits": "PROCEDURE pop_loading_rsk_limits (v_new_ipu_code   IN NUMBER,\n                                      v_scl_code       IN NUMBER,\n                                      v_bind_code      IN NUMBER,\n                                      v_cvt_code       IN NUMBER,\n                                      v_batch_no       IN NUMBER,\n                                      v_sect_type      IN VARCHAR2,\n                                      v_range          IN NUMBER)\n    IS\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_pol_binder                VARCHAR2 (2);\n        v_ncd_status                gin_insured_property_unds.ipu_ncd_status%TYPE;\n        v_ncd_level                 gin_insured_property_unds.ipu_ncd_level%TYPE;\n        v_calc_group                NUMBER := 1;\n        v_calc_row                  NUMBER := 1;\n\n        CURSOR pil_cur IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type = v_sect_type\n                   AND v_range BETWEEN prr_range_from AND prr_range_to\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code)\n            UNION\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type = v_sect_type\n                   AND v_range BETWEEN prr_range_from AND prr_range_to\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code)\n            UNION\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type = v_sect_type\n                   AND v_range BETWEEN prr_range_from AND prr_range_to\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n\n        CURSOR pil_cur_ncd IS\n            SELECT *\n              FROM gin_policy_insured_limits\n             WHERE pil_ipu_code = v_new_ipu_code AND pil_sect_type = 'ND';\n    BEGIN\n        BEGIN\n            SELECT pol_binder_policy,\n                   NVL (ipu_ncd_status, 'N'),\n                   NVL (ipu_ncd_level, 0)\n              INTO v_pol_binder, v_ncd_status, v_ncd_level\n              FROM gin_policies, gin_insured_property_unds\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND ipu_code = v_new_ipu_code\n                   AND pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error determining the policy binder...');\n        END;\n\n        IF NVL (v_pol_binder, 'N') != 'Y'\n        THEN\n            FOR pil_cur_rec IN pil_cur\n            LOOP\n                BEGIN\n                    SELECT DISTINCT SCVTS_ORDER, SCVTS_CALC_GROUP\n                      INTO v_calc_row, v_calc_group\n                      FROM GIN_SUBCL_COVT_SECTIONS\n                     WHERE     SCVTS_SECT_CODE = pil_cur_rec.sect_code\n                           AND SCVTS_SCL_CODE = v_scl_code\n                           AND SCVTS_COVT_CODE IN\n                                   (SELECT IPU_COVT_CODE\n                                      FROM GIN_INSURED_PROPERTY_UNDS\n                                     WHERE IPU_CODE = v_new_ipu_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_calc_group := 1;\n                        v_calc_row := 1;\n                END;\n\n                v_row := NVL (v_row, 0) + 1;\n\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_calc_row, --pil_cur_rec.pil_row_num ,--v_row,\n                                        v_calc_group, -- pil_cur_rec.pil_calc_group,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END LOOP;\n\n            FOR pil_cur_ncd_rec IN pil_cur_ncd\n            LOOP\n                BEGIN\n                    SELECT DISTINCT SCVTS_ORDER, SCVTS_CALC_GROUP\n                      INTO v_calc_row, v_calc_group\n                      FROM GIN_SUBCL_COVT_SECTIONS\n                     WHERE     SCVTS_SECT_CODE =\n                               pil_cur_ncd_rec.pil_sect_code\n                           AND SCVTS_SCL_CODE = v_scl_code\n                           AND SCVTS_COVT_CODE IN\n                                   (SELECT IPU_COVT_CODE\n                                      FROM GIN_INSURED_PROPERTY_UNDS\n                                     WHERE IPU_CODE = v_new_ipu_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_calc_group := 1;\n                        v_calc_row := 1;\n                END;\n\n                --         RAISE_ERROR('NCD .....'||pil_cur_ncd_rec.pil_prem_amt);\n                DELETE gin_policy_insured_limits\n                 WHERE pil_code = pil_cur_ncd_rec.pil_code;\n\n\n                v_row := NVL (v_row, 0) + 1;\n\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate,\n                                    pil_firstloss,\n                                    pil_firstloss_amt_pcnt,\n                                    pil_firstloss_value)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        pil_cur_ncd_rec.pil_ipu_code,\n                                        pil_cur_ncd_rec.pil_sect_code,\n                                        pil_cur_ncd_rec.pil_sect_sht_desc,\n                                        pil_cur_ncd_rec.pil_desc,\n                                        v_calc_row, --pil_cur_rec.pil_row_num ,--v_row,\n                                        v_calc_group,\n                                        --pil_cur_ncd_rec.pil_row_num,\n                                        --pil_cur_ncd_rec.pil_calc_group,\n                                        pil_cur_ncd_rec.pil_limit_amt,\n                                        pil_cur_ncd_rec.pil_prem_rate,\n                                        pil_cur_ncd_rec.pil_prem_amt,\n                                        pil_cur_ncd_rec.pil_rate_type,\n                                        pil_cur_ncd_rec.pil_rate_desc,\n                                        pil_cur_ncd_rec.pil_sect_type,\n                                        pil_cur_ncd_rec.pil_original_prem_rate,\n                                        pil_cur_ncd_rec.pil_multiplier_rate,\n                                        pil_cur_ncd_rec.pil_multiplier_div_factor,\n                                        pil_cur_ncd_rec.pil_annual_premium,\n                                        pil_cur_ncd_rec.pil_rate_div_fact,\n                                        pil_cur_ncd_rec.pil_compute,\n                                        pil_cur_ncd_rec.pil_prd_type,\n                                        pil_cur_ncd_rec.pil_dual_basis,\n                                        pil_cur_ncd_rec.pil_prem_accumulation,\n                                        pil_cur_ncd_rec.pil_declaration_section,\n                                        pil_cur_ncd_rec.pil_annual_actual_prem,\n                                        pil_cur_ncd_rec.pil_free_limit,\n                                        pil_cur_ncd_rec.pil_prorata_full,\n                                        pil_cur_ncd_rec.pil_prr_max_rate,\n                                        pil_cur_ncd_rec.pil_prr_min_rate,\n                                        pil_cur_ncd_rec.pil_firstloss,\n                                        pil_cur_ncd_rec.pil_firstloss_amt_pcnt,\n                                        pil_cur_ncd_rec.pil_firstloss_value);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END LOOP;\n        END IF;\n    END pop_loading_rsk_limits;",
        "pop_bouquet_rsk_limits": "PROCEDURE pop_bouquet_rsk_limits (v_new_ipu_code    IN NUMBER,\n                                      v_scl_code        IN NUMBER,\n                                      v_bind_code       IN NUMBER,\n                                      v_cvt_code        IN NUMBER,\n                                      v_batch_no        IN NUMBER,\n                                      v_sect_type       IN VARCHAR2,\n                                      v_range           IN NUMBER,\n                                      v_garage_applic   IN VARCHAR2,\n                                      v_no_claim_hist   IN NUMBER,\n                                      v_usage_type      IN VARCHAR2,\n                                      v_vehicle_size    IN VARCHAR2)\n    IS\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_pol_binder                VARCHAR2 (2);\n        v_ncd_status                gin_insured_property_unds.ipu_ncd_status%TYPE;\n        v_ncd_level                 gin_insured_property_unds.ipu_ncd_level%TYPE;\n\n        CURSOR pil_cur IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type = v_sect_type\n                   --AND NVL(v_range,0) BETWEEN NVL(prr_range_from,0) AND NVL(prr_range_to,0)\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n        /*UNION\n        SELECT DISTINCT sect_sht_desc, sect_code, sect_desc sect_desc,\n                      sect_type,DECODE (sect_type,'ND', 'NCD','ES', 'Extension SI','EL', 'Extension Limit','SS', 'Section SI',\n                              'SL', 'Section Limit','DS', 'Discount','LO', 'Loading', 'EC', 'Escalation' ) type_desc, prr_rate_type,\n                      DECODE (prr_rate_type,'SRG', 0,'RCU', 0,prr_rate) prr_rate,\n                      DECODE (prr_rate_type,     'SRG', 0,  'RCU', 0,   prr_rate    ) rate,\n                      '0' terr_description,  DECODE (prr_rate_type, 'SRG', 0,'RCU', 0, prr_prem_minimum_amt) prr_prem_minimum_amt,\n                      DECODE (prr_rate_type,'SRG', 1,    'RCU', 1, prr_multiplier_rate) prr_multiplier_rate,\n                      DECODE (prr_rate_type,    'SRG', 1,   'RCU', 1,   prr_division_factor ) prr_division_factor,\n                      DECODE (prr_rate_type, 'SRG', 1, 'RCU', 1,prr_multplier_div_fact) prr_multplier_div_fact,\n                      prr_rate_desc, prr_free_limit, prr_prorated_full,prr_max_rate, prr_min_rate\n                 FROM gin_premium_rates, gin_sections\n                WHERE prr_sect_code = sect_code\n                  AND prr_scl_code = v_scl_code\n                  AND prr_bind_code = v_bind_code\n                  AND sect_type =v_sect_type\n                  AND v_range  BETWEEN prr_range_from AND prr_range_to\n                  AND sect_code NOT IN (\n                                      SELECT pil_sect_code\n                                       FROM gin_policy_insured_limits\n                                        WHERE pil_ipu_code =\n                                                         v_new_ipu_code)\nUNION\nSELECT DISTINCT sect_sht_desc, sect_code, sect_desc sect_desc,\n                      sect_type,DECODE (sect_type,'ND', 'NCD','ES', 'Extension SI','EL', 'Extension Limit','SS', 'Section SI',\n                              'SL', 'Section Limit','DS', 'Discount','LO', 'Loading', 'EC', 'Escalation' ) type_desc, prr_rate_type,\n                      DECODE (prr_rate_type,'SRG', 0,'RCU', 0,prr_rate) prr_rate,\n                      DECODE (prr_rate_type,     'SRG', 0,  'RCU', 0,   prr_rate    ) rate,\n                      '0' terr_description,  DECODE (prr_rate_type, 'SRG', 0,'RCU', 0, prr_prem_minimum_amt) prr_prem_minimum_amt,\n                      DECODE (prr_rate_type,'SRG', 1,    'RCU', 1, prr_multiplier_rate) prr_multiplier_rate,\n                      DECODE (prr_rate_type,    'SRG', 1,   'RCU', 1,   prr_division_factor ) prr_division_factor,\n                      DECODE (prr_rate_type, 'SRG', 1, 'RCU', 1,prr_multplier_div_fact) prr_multplier_div_fact,\n                      prr_rate_desc, prr_free_limit, prr_prorated_full,prr_max_rate, prr_min_rate\n                 FROM gin_premium_rates, gin_sections\n                WHERE prr_sect_code = sect_code\n                  AND prr_scl_code = v_scl_code\n                  AND prr_bind_code = v_bind_code\n                 AND sect_type  =v_sect_type\n                  AND v_range  BETWEEN prr_range_from AND prr_range_to\n                  AND sect_code NOT IN (\n                                       SELECT pil_sect_code\n                                        FROM gin_policy_insured_limits\n                                        WHERE pil_ipu_code =\n                                                            v_new_ipu_code);*/\n    BEGIN\n        --RAISE_eRROR('v_pol_binder='||v_pol_binder);\n        FOR pil_cur_rec IN pil_cur\n        LOOP\n            v_row := NVL (v_row, 0) + 1;\n\n            IF pil_cur_rec.sect_type NOT IN ('GD',\n                                             'GR',\n                                             'NC',\n                                             'CL',\n                                             'UD',\n                                             'VU',\n                                             'VL')\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            IF     pil_cur_rec.sect_type IN ('GD')\n               AND NVL (v_garage_applic, 'N') = 'N'\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            IF     pil_cur_rec.sect_type IN ('GR')\n               AND NVL (v_garage_applic, 'N') = 'Y'\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            IF     pil_cur_rec.sect_type IN ('NC')\n               AND NVL (v_no_claim_hist, 0) = 0\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            IF     pil_cur_rec.sect_type IN ('CL')\n               AND NVL (v_no_claim_hist, 0) != 0\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            IF     pil_cur_rec.sect_type IN ('UD')\n               AND UPPER (v_usage_type) = 'PRIVATE'\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            IF pil_cur_rec.sect_type IN ('VU')\n            THEN\n                IF UPPER (v_usage_type) = 'COMMERCIAL'\n                THEN\n                    BEGIN\n                        --RAISE_ERROR(  'v_usage_type' || v_usage_type);\n                        INSERT INTO gin_policy_insured_limits (\n                                        pil_code,\n                                        pil_ipu_code,\n                                        pil_sect_code,\n                                        pil_sect_sht_desc,\n                                        pil_desc,\n                                        pil_row_num,\n                                        pil_calc_group,\n                                        pil_limit_amt,\n                                        pil_prem_rate,\n                                        pil_prem_amt,\n                                        pil_rate_type,\n                                        pil_rate_desc,\n                                        pil_sect_type,\n                                        pil_original_prem_rate,\n                                        pil_multiplier_rate,\n                                        pil_multiplier_div_factor,\n                                        pil_annual_premium,\n                                        pil_rate_div_fact,\n                                        --PIL_DESC,\n                                        pil_compute,\n                                        pil_prd_type,\n                                        pil_dual_basis,\n                                        pil_prem_accumulation,\n                                        pil_declaration_section,\n                                        pil_annual_actual_prem,\n                                        pil_free_limit,\n                                        pil_prorata_full,\n                                        pil_prr_max_rate,\n                                        pil_prr_min_rate)\n                                 VALUES (\n                                               TO_NUMBER (\n                                                   TO_CHAR (SYSDATE, 'RRRR'))\n                                            || gin_pil_code_seq.NEXTVAL,\n                                            v_new_ipu_code,\n                                            pil_cur_rec.sect_code,\n                                            pil_cur_rec.sect_sht_desc,\n                                            pil_cur_rec.sect_desc,\n                                            v_row,\n                                            1,\n                                            NULL,\n                                            DECODE (\n                                                pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                            0,\n                                            pil_cur_rec.prr_rate_type,\n                                            pil_cur_rec.prr_rate_desc,\n                                            pil_cur_rec.sect_type,\n                                            pil_cur_rec.prr_rate,\n                                            pil_cur_rec.prr_multiplier_rate,\n                                            pil_cur_rec.prr_multplier_div_fact,\n                                            0,\n                                            pil_cur_rec.prr_division_factor,\n                                            --v_type_desc,\n                                            'Y',\n                                            NULL,\n                                            'N',\n                                            0,\n                                            v_pil_declaration_section,\n                                            0,\n                                            pil_cur_rec.prr_free_limit,\n                                            pil_cur_rec.prr_prorated_full,\n                                            pil_cur_rec.prr_max_rate,\n                                            pil_cur_rec.prr_min_rate);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error (\n                                   'Error inserting risk sections..'\n                                || v_usage_type);\n                    END;\n                END IF;\n            END IF;\n\n            IF pil_cur_rec.sect_type IN ('VH')\n            THEN\n                IF UPPER (v_usage_type) = 'HIRE'\n                THEN\n                    BEGIN\n                        --RAISE_ERROR(  'v_usage_type' || v_usage_type);\n                        INSERT INTO gin_policy_insured_limits (\n                                        pil_code,\n                                        pil_ipu_code,\n                                        pil_sect_code,\n                                        pil_sect_sht_desc,\n                                        pil_desc,\n                                        pil_row_num,\n                                        pil_calc_group,\n                                        pil_limit_amt,\n                                        pil_prem_rate,\n                                        pil_prem_amt,\n                                        pil_rate_type,\n                                        pil_rate_desc,\n                                        pil_sect_type,\n                                        pil_original_prem_rate,\n                                        pil_multiplier_rate,\n                                        pil_multiplier_div_factor,\n                                        pil_annual_premium,\n                                        pil_rate_div_fact,\n                                        --PIL_DESC,\n                                        pil_compute,\n                                        pil_prd_type,\n                                        pil_dual_basis,\n                                        pil_prem_accumulation,\n                                        pil_declaration_section,\n                                        pil_annual_actual_prem,\n                                        pil_free_limit,\n                                        pil_prorata_full,\n                                        pil_prr_max_rate,\n                                        pil_prr_min_rate)\n                                 VALUES (\n                                               TO_NUMBER (\n                                                   TO_CHAR (SYSDATE, 'RRRR'))\n                                            || gin_pil_code_seq.NEXTVAL,\n                                            v_new_ipu_code,\n                                            pil_cur_rec.sect_code,\n                                            pil_cur_rec.sect_sht_desc,\n                                            pil_cur_rec.sect_desc,\n                                            v_row,\n                                            1,\n                                            NULL,\n                                            DECODE (\n                                                pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                            0,\n                                            pil_cur_rec.prr_rate_type,\n                                            pil_cur_rec.prr_rate_desc,\n                                            pil_cur_rec.sect_type,\n                                            pil_cur_rec.prr_rate,\n                                            pil_cur_rec.prr_multiplier_rate,\n                                            pil_cur_rec.prr_multplier_div_fact,\n                                            0,\n                                            pil_cur_rec.prr_division_factor,\n                                            --v_type_desc,\n                                            'Y',\n                                            NULL,\n                                            'N',\n                                            0,\n                                            v_pil_declaration_section,\n                                            0,\n                                            pil_cur_rec.prr_free_limit,\n                                            pil_cur_rec.prr_prorated_full,\n                                            pil_cur_rec.prr_max_rate,\n                                            pil_cur_rec.prr_min_rate);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            raise_error ('Error inserting risk sections..');\n                    END;\n                END IF;\n            END IF;\n\n            IF     pil_cur_rec.sect_type IN ('VD')\n               AND UPPER (v_vehicle_size) = 'CAR'\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            IF     pil_cur_rec.sect_type IN ('VL')\n               AND UPPER (v_vehicle_size) = 'VAN'\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            IF     pil_cur_rec.sect_type IN ('VL')\n               AND UPPER (v_vehicle_size) = 'TRUCK'\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_rate,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        --v_type_desc,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        0,\n                                        v_pil_declaration_section,\n                                        0,\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_prorated_full,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n        END LOOP;\n    END pop_bouquet_rsk_limits;",
        "delete_rsk_limits": "PROCEDURE delete_rsk_limits (v_ipu_code IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_policy_insured_limits\n         WHERE     pil_ipu_code = v_ipu_code\n               AND pil_sect_type IN ('SC', 'CC', 'VA');\n    END;",
        "pop_loading_quot_rsk_limits": "PROCEDURE pop_loading_quot_rsk_limits (v_qr_code     IN NUMBER,\n                                           v_scl_code    IN NUMBER,\n                                           v_bind_code   IN NUMBER,\n                                           v_cvt_code    IN NUMBER,\n                                           v_batch_no    IN NUMBER,\n                                           v_sect_type   IN VARCHAR2,\n                                           v_range       IN NUMBER)\n    IS\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_pol_binder                VARCHAR2 (2);\n        v_ncd_status                VARCHAR2 (2);\n        v_ncd_level                 gin_quot_risks.qr_ncd_level%TYPE;\n\n        CURSOR pil_cur IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type = v_sect_type\n                   AND v_range BETWEEN prr_range_from AND prr_range_to\n                   AND sect_code NOT IN (SELECT qrl_sect_code\n                                           FROM gin_quot_risk_limits\n                                          WHERE qrl_qr_code = v_qr_code)\n            UNION\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type = v_sect_type\n                   AND v_range BETWEEN prr_range_from AND prr_range_to\n                   AND sect_code NOT IN (SELECT qrl_sect_code\n                                           FROM gin_quot_risk_limits\n                                          WHERE qrl_qr_code = v_qr_code)\n            UNION\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type = v_sect_type\n                   AND v_range BETWEEN prr_range_from AND prr_range_to\n                   AND sect_code NOT IN (SELECT qrl_sect_code\n                                           FROM gin_quot_risk_limits\n                                          WHERE qrl_qr_code = v_qr_code);\n\n        CURSOR pil_cur_ncd IS\n            SELECT *\n              FROM gin_quot_risk_limits\n             WHERE qrl_qr_code = v_qr_code AND qrl_sect_type = 'ND';\n    BEGIN\n        --RAISE_ERROR(v_qr_code||'='||v_bind_code||'v_range'||v_range||'v_sect_type='|| v_sect_type);\n        BEGIN\n            SELECT 'N', NVL ('N', 'N'), NVL (qr_ncd_level, 0)\n              INTO v_pol_binder, v_ncd_status, v_ncd_level\n              FROM gin_quotations, gin_quot_risks\n             WHERE     quot_code = qr_quot_code\n                   AND qr_code = v_qr_code\n                   AND quot_code = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error determining the policy binder...');\n        END;\n\n        IF NVL (v_pol_binder, 'N') != 'Y'\n        THEN\n            FOR pil_cur_rec IN pil_cur\n            LOOP\n                v_row := NVL (v_row, 0) + 1;\n\n                BEGIN\n                    INSERT INTO gin_quot_risk_limits (\n                                    qrl_code,\n                                    qrl_ipu_code,\n                                    qrl_sect_code,\n                                    qrl_sect_sht_desc,\n                                    qrl_desc,\n                                    qrl_row_num,\n                                    qrl_calc_group,\n                                    qrl_limit_amt,\n                                    qrl_prem_rate,\n                                    qrl_prem_amt,\n                                    qrl_rate_type,\n                                    qrl_rate_desc,\n                                    qrl_sect_type,\n                                    qrl_multiplier_rate,\n                                    qrl_multiplier_div_factor,\n                                    qrl_annual_prem,\n                                    qrl_rate_div_factor,\n                                    qrl_compute,\n                                    qrl_prd_type,\n                                    qrl_dual_basis,\n                                    qrl_free_limit,\n                                    qrl_max_prem_rate,\n                                    qrl_min_prem_rate,\n                                    qrl_qr_code)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_qr_code,\n                                        pil_cur_rec.sect_code,\n                                        pil_cur_rec.sect_sht_desc,\n                                        pil_cur_rec.sect_desc,\n                                        v_row,\n                                        1,\n                                        NULL,\n                                        DECODE (pil_cur_rec.prr_rate_type,\n                                                'SRG', 0,\n                                                'RCU', 0,\n                                                pil_cur_rec.prr_rate),\n                                        0,\n                                        pil_cur_rec.prr_rate_type,\n                                        pil_cur_rec.prr_rate_desc,\n                                        pil_cur_rec.sect_type,\n                                        pil_cur_rec.prr_multiplier_rate,\n                                        pil_cur_rec.prr_multplier_div_fact,\n                                        0,\n                                        pil_cur_rec.prr_division_factor,\n                                        'Y',\n                                        NULL,\n                                        'N',\n                                        pil_cur_rec.prr_free_limit,\n                                        pil_cur_rec.prr_max_rate,\n                                        pil_cur_rec.prr_min_rate,\n                                        v_qr_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END LOOP;\n\n            FOR pil_cur_ncd_rec IN pil_cur_ncd\n            LOOP\n                DELETE gin_quot_risk_limits\n                 WHERE qrl_code = pil_cur_ncd_rec.qrl_code;\n\n                v_row := NVL (v_row, 0) + 1;\n\n                BEGIN\n                    INSERT INTO gin_quot_risk_limits (\n                                    qrl_code,\n                                    qrl_ipu_code,\n                                    qrl_sect_code,\n                                    qrl_sect_sht_desc,\n                                    qrl_desc,\n                                    qrl_row_num,\n                                    qrl_calc_group,\n                                    qrl_limit_amt,\n                                    qrl_prem_rate,\n                                    qrl_prem_amt,\n                                    qrl_rate_type,\n                                    qrl_rate_desc,\n                                    qrl_sect_type,\n                                    qrl_multiplier_rate,\n                                    qrl_multiplier_div_factor,\n                                    qrl_annual_prem,\n                                    qrl_rate_div_factor,\n                                    qrl_compute,\n                                    qrl_prd_type,\n                                    qrl_dual_basis,\n                                    qrl_free_limit,\n                                    qrl_max_prem_rate,\n                                    qrl_min_prem_rate,\n                                    qrl_qr_code)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        pil_cur_ncd_rec.qrl_ipu_code,\n                                        pil_cur_ncd_rec.qrl_sect_code,\n                                        pil_cur_ncd_rec.qrl_sect_sht_desc,\n                                        pil_cur_ncd_rec.qrl_desc,\n                                        pil_cur_ncd_rec.qrl_row_num,\n                                        pil_cur_ncd_rec.qrl_calc_group,\n                                        pil_cur_ncd_rec.qrl_limit_amt,\n                                        pil_cur_ncd_rec.qrl_prem_rate,\n                                        pil_cur_ncd_rec.qrl_prem_amt,\n                                        pil_cur_ncd_rec.qrl_rate_type,\n                                        pil_cur_ncd_rec.qrl_rate_desc,\n                                        pil_cur_ncd_rec.qrl_sect_type,\n                                        pil_cur_ncd_rec.qrl_multiplier_rate,\n                                        pil_cur_ncd_rec.qrl_multiplier_div_factor,\n                                        pil_cur_ncd_rec.qrl_annual_prem,\n                                        pil_cur_ncd_rec.qrl_rate_div_factor,\n                                        pil_cur_ncd_rec.qrl_compute,\n                                        pil_cur_ncd_rec.qrl_prd_type,\n                                        pil_cur_ncd_rec.qrl_dual_basis,\n                                        pil_cur_ncd_rec.qrl_free_limit,\n                                        pil_cur_ncd_rec.qrl_max_prem_rate,\n                                        pil_cur_ncd_rec.qrl_min_prem_rate,\n                                        pil_cur_ncd_rec.qrl_qr_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END LOOP;\n        END IF;\n    END pop_loading_quot_rsk_limits;",
        "delete_quot_rsk_limits": "PROCEDURE delete_quot_rsk_limits (v_qr_code IN NUMBER)\n    IS\n    BEGIN\n        DELETE gin_quot_risk_limits\n         WHERE     qrl_qr_code = v_qr_code\n               AND qrl_sect_type IN ('SC', 'CC', 'VA');\n    END;",
        "pop_ren_loading_rsk_limits": "PROCEDURE pop_ren_loading_rsk_limits (v_new_ipu_code   IN NUMBER,\n                                          v_scl_code       IN NUMBER,\n                                          v_bind_code      IN NUMBER,\n                                          v_cvt_code       IN NUMBER,\n                                          v_batch_no       IN NUMBER,\n                                          v_sect_type      IN VARCHAR2,\n                                          v_range          IN NUMBER)\n    IS\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_pol_binder                VARCHAR2 (2);\n\n        CURSOR pil_cur_ncd IS\n            SELECT *\n              FROM gin_ren_policy_insured_limits\n             WHERE     pil_ipu_code = v_new_ipu_code\n                   AND pil_sect_type = v_sect_type;\n    BEGIN\n        --RAISE_ERROR(v_scl_code||'='||v_bind_code||'='||v_new_ipu_code||'=v_range'||v_range);\n        BEGIN\n            SELECT pol_binder_policy\n              INTO v_pol_binder\n              FROM gin_ren_policies, gin_ren_insured_property_unds\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND ipu_code = v_new_ipu_code\n                   AND pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error determining the policy binder...');\n        END;\n\n        IF NVL (v_pol_binder, 'N') != 'Y'\n        THEN\n            FOR pil_cur_ncd_rec IN pil_cur_ncd\n            LOOP\n                DELETE gin_ren_policy_insured_limits\n                 WHERE pil_code = pil_cur_ncd_rec.pil_code;\n\n                v_row := NVL (v_row, 0) + 1;\n\n                BEGIN\n                    INSERT INTO gin_ren_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    pil_compute,\n                                    pil_prd_type,\n                                    pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    pil_free_limit,\n                                    pil_prorata_full,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate,\n                                    pil_firstloss,\n                                    pil_firstloss_amt_pcnt,\n                                    pil_firstloss_value)\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        pil_cur_ncd_rec.pil_ipu_code,\n                                        pil_cur_ncd_rec.pil_sect_code,\n                                        pil_cur_ncd_rec.pil_sect_sht_desc,\n                                        pil_cur_ncd_rec.pil_desc,\n                                        pil_cur_ncd_rec.pil_row_num,\n                                        pil_cur_ncd_rec.pil_calc_group,\n                                        pil_cur_ncd_rec.pil_limit_amt,\n                                        pil_cur_ncd_rec.pil_prem_rate,\n                                        pil_cur_ncd_rec.pil_prem_amt,\n                                        pil_cur_ncd_rec.pil_rate_type,\n                                        pil_cur_ncd_rec.pil_rate_desc,\n                                        pil_cur_ncd_rec.pil_sect_type,\n                                        pil_cur_ncd_rec.pil_original_prem_rate,\n                                        pil_cur_ncd_rec.pil_multiplier_rate,\n                                        pil_cur_ncd_rec.pil_multiplier_div_factor,\n                                        pil_cur_ncd_rec.pil_annual_premium,\n                                        pil_cur_ncd_rec.pil_rate_div_fact,\n                                        pil_cur_ncd_rec.pil_compute,\n                                        pil_cur_ncd_rec.pil_prd_type,\n                                        pil_cur_ncd_rec.pil_dual_basis,\n                                        pil_cur_ncd_rec.pil_prem_accumulation,\n                                        pil_cur_ncd_rec.pil_declaration_section,\n                                        pil_cur_ncd_rec.pil_annual_actual_prem,\n                                        pil_cur_ncd_rec.pil_free_limit,\n                                        pil_cur_ncd_rec.pil_prorata_full,\n                                        pil_cur_ncd_rec.pil_prr_max_rate,\n                                        pil_cur_ncd_rec.pil_prr_min_rate,\n                                        pil_cur_ncd_rec.pil_firstloss,\n                                        pil_cur_ncd_rec.pil_firstloss_amt_pcnt,\n                                        pil_cur_ncd_rec.pil_firstloss_value);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END LOOP;\n        END IF;\n    END pop_ren_loading_rsk_limits;",
        "pop_sbu_dtls": "PROCEDURE pop_sbu_dtls (v_pol_batch_no        IN NUMBER,\n                            v_pol_unit_code       IN VARCHAR2,\n                            v_pol_location_code   IN VARCHAR2,\n                            v_pol_add_edit        IN VARCHAR2)\n    IS\n        v_pdl_code   NUMBER;\n        v_cnt        NUMBER;\n    BEGIN\n        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))\n               || gin_pdl_code_seq.NEXTVAL\n          INTO v_pdl_code\n          FROM DUAL;\n\n        IF NVL (v_pol_add_edit, 'E') = 'A'\n        THEN\n            BEGIN\n                INSERT INTO gin_policy_sbu_dtls (pdl_code,\n                                                 pdl_pol_batch_no,\n                                                 pdl_unit_code,\n                                                 pdl_location_code,\n                                                 pdl_prepared_date)\n                     VALUES (v_pdl_code,\n                             v_pol_batch_no,\n                             v_pol_unit_code,\n                             v_pol_location_code,\n                             TRUNC (SYSDATE));\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    NULL;\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error Creating Policy Other Details Record..');\n            END;\n        ELSE\n            BEGIN\n                SELECT COUNT (pdl_code)\n                  INTO v_cnt\n                  FROM gin_policy_sbu_dtls\n                 WHERE pdl_pol_batch_no = v_pol_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error checking if policy exists..');\n            END;\n\n            IF NVL (v_cnt, 0) = 0\n            THEN\n                INSERT INTO gin_policy_sbu_dtls (pdl_code,\n                                                 pdl_pol_batch_no,\n                                                 pdl_unit_code,\n                                                 pdl_location_code,\n                                                 pdl_prepared_date)\n                     VALUES (v_pdl_code,\n                             v_pol_batch_no,\n                             v_pol_unit_code,\n                             v_pol_location_code,\n                             TRUNC (SYSDATE));\n            ELSE\n                --  RAISE_ERROR('v_pol_unit_code'||v_pol_unit_code||'v_pol_location_code'||v_pol_location_code);\n                UPDATE gin_policy_sbu_dtls\n                   SET pdl_unit_code = NVL (v_pol_unit_code, pdl_unit_code),\n                       pdl_location_code =\n                           NVL (v_pol_location_code, pdl_unit_code)\n                 WHERE pdl_pol_batch_no = v_pol_batch_no;\n            END IF;\n        END IF;\n    END;",
        "gin_policies_stp_prc": "PROCEDURE gin_policies_stp_prc (v_pro_code     IN     NUMBER,\n                                    v_brn_code     IN     NUMBER,\n                                    v_cover_from   IN     DATE,\n                                    v_cover_to     IN     DATE,\n                                    v_user         IN     VARCHAR2,\n                                    v_cur_code     IN     NUMBER,\n                                    v_prp_code     IN     NUMBER,\n                                    v_bind_code    IN     NUMBER,\n                                    v_rsk_data     IN     web_risk_tab,\n                                    v_uni_code     IN     NUMBER,\n                                    v_loc_code     IN     NUMBER,\n                                    v_agnt_code    IN     NUMBER,\n                                    v_pop_taxes    IN     VARCHAR2,\n                                    v_batchno         OUT NUMBER)\n    IS\n        v_cnt                      NUMBER;\n        v_new_polin_code           NUMBER;\n        v_exp_flag                 VARCHAR2 (2);\n        v_uw_yr                    VARCHAR2 (1);\n        v_open_cover               VARCHAR2 (2);\n        v_pol_status               VARCHAR2 (5);\n        v_trans_no                 NUMBER;\n        v_stp_code                 NUMBER;\n        v_wet_date                 DATE;\n        v_pol_renewal_dt           DATE;\n        v_new_ipu_code             NUMBER;\n        v_client_pol_no            VARCHAR2 (45);\n        v_end_no                   VARCHAR2 (45);\n        --v_batchno                 NUMBER;\n        v_cur_symbol               VARCHAR2 (15);\n        v_cur_rate                 NUMBER;\n        v_pwet_dt                  DATE;\n        v_pol_uwyr                 NUMBER;\n        v_policy_doc               VARCHAR2 (200);\n        v_brn_sht_desc             VARCHAR2 (15);\n        v_endrsd_rsks_tab          gin_stp_pkg.endrsd_rsks_tab;\n        v_rsk_sect_data            web_sect_tab;\n        v_admin_fee_applicable     VARCHAR2 (1);\n        v_ren_cnt                  NUMBER;\n        v_admin_disc               NUMBER;\n        v_pro_min_prem             NUMBER;\n        v_uw_trans                 VARCHAR2 (1);\n        v_valid_trans              VARCHAR2 (1);\n        v_inception_dt             DATE;\n        v_inception_yr             NUMBER;\n        y                          NUMBER;\n        vuser                      VARCHAR2 (35)\n            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.pvg_username');\n        v_seqno                    VARCHAR2 (35);\n        v_brn_sht_length           NUMBER;\n        v_growth_type              VARCHAR2 (5);\n        v_pol_loaded               VARCHAR2 (5);\n        v_policy_status            VARCHAR2 (5);\n        v_prev_tot_instlmt         NUMBER;\n        v_install_pct              NUMBER;\n        v_pymnt_tot_instlmt        NUMBER;\n        v_ipu_wef                  DATE;\n        v_ipu_wet                  DATE;\n        v_install_period           NUMBER;\n        v_cover_days               NUMBER;\n        v_pro_sht_desc             gin_products.pro_sht_desc%TYPE;\n        next_ggts_trans_no         NUMBER;\n        v_old_act_code             NUMBER;\n        v_new_act_code             NUMBER;\n        v_pro_travel_cnt           NUMBER;\n        v_ren_wef_dt               DATE;\n        v_ren_wet_dt               DATE;\n        v_pdl_code                 NUMBER;\n        v_agnt_agent_code          NUMBER;\n        v_seq                      NUMBER;\n        v_pol_seq_type             VARCHAR2 (100);\n        v_trans_type               VARCHAR2 (5);\n        vcur_code                  NUMBER;\n        v_coinsurance              VARCHAR2 (1);\n        v_div_code                 NUMBER;\n        v_pol_no                   VARCHAR2 (50);\n        v_serial_no                NUMBER;\n        v_policy_type              VARCHAR2 (50);\n        v_binder_policy            VARCHAR2 (2);\n        v_agent_code               NUMBER;\n        v_agnt_sht_desc            VARCHAR2 (50);\n        --v_pop_taxes              VARCHAR2 (2);\n        v_outside_system           VARCHAR2 (1);\n        v_interface_type           VARCHAR2 (50);\n        v_row                      NUMBER;\n        v_comm_allowed             VARCHAR2 (1);\n        v_tran_ref_no              VARCHAR2 (100);\n        v_serial                   VARCHAR2 (100);\n        v_cashback_lvl             NUMBER;\n        v_cashback_rate            NUMBER;\n        sect_cursor                SYS_REFCURSOR;\n        v_sect_sht_desc            gin_sections.sect_sht_desc%TYPE;\n        v_sec_code                 gin_sections.sect_code%TYPE;\n        v_sect_desc                gin_sections.sect_desc%TYPE;\n        v_sect_type                gin_sections.sect_type%TYPE;\n        v_type_desc                VARCHAR2 (25);\n        v_prr_rate_type            gin_premium_rates.prr_rate_type%TYPE;\n        v_prr_rate                 gin_premium_rates.prr_rate%TYPE;\n        v_terr_description         VARCHAR2 (5);\n        v_prr_prem_minimum_amt     gin_premium_rates.prr_prem_minimum_amt%TYPE;\n        v_prr_multiplier_rate      gin_premium_rates.prr_multiplier_rate%TYPE;\n        v_prr_division_factor      gin_premium_rates.prr_division_factor%TYPE;\n        v_prr_multplier_div_fact   gin_premium_rates.prr_multplier_div_fact%TYPE;\n        v_prr_rate_desc            gin_premium_rates.prr_rate_desc%TYPE;\n        v_prr_free_limit           gin_premium_rates.prr_free_limit%TYPE;\n        v_sec_declaration          gin_subcl_sections.sec_declaration%TYPE;\n        v_scvts_order              gin_subcl_covt_sections.scvts_order%TYPE;\n        v_prr_prorated_full        gin_premium_rates.prr_prorated_full%TYPE;\n        v_prr_si_limit_type        gin_premium_rates.prr_si_limit_type%TYPE;\n        v_prr_si_rate              gin_premium_rates.prr_si_rate%TYPE;\n    BEGIN\n        vuser := v_user;\n\n        IF vuser IS NULL\n        THEN\n            raise_error ('User unknown...');\n        END IF;\n\n        BEGIN\n            SELECT brn_sht_desc\n              INTO v_brn_sht_desc\n              FROM tqc_branches\n             WHERE brn_code = v_brn_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('ERROR GETTING BRANCH DETAILS');\n        END;\n\n        BEGIN\n            SELECT bind_agnt_agent_code\n              INTO v_agent_code\n              FROM gin_binders\n             WHERE bind_code = v_bind_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('ERROR GETTING BINDER DETAILS');\n        END;\n\n        BEGIN\n            SELECT agn_sht_desc\n              INTO v_agnt_sht_desc\n              FROM tqc_agencies\n             WHERE agn_code = v_agnt_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('ERROR GETTING AGENT DETAILS');\n        END;\n\n        BEGIN\n            SELECT pro_interface_type\n              INTO v_interface_type\n              FROM gin_products\n             WHERE pro_code = v_pro_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('ERROR GETTING BINDER DETAILS');\n        END;\n\n        IF v_cover_from IS NULL OR v_cover_to IS NULL\n        THEN\n            raise_error ('PROVIDE COVER PERIOD');\n        END IF;\n\n        v_wet_date := v_cover_to;\n        v_cur_rate := v_cur_rate;\n        v_pol_renewal_dt := get_renewal_date (v_pro_code, v_wet_date);\n        v_uw_trans := 'Y';\n        v_trans_type := 'NB';\n        v_uw_yr := 'P';\n        v_pol_status := 'NB';\n\n        IF v_pro_code IS NULL\n        THEN\n            raise_error ('SELECT THE POLICY PRODUCT ...');\n        END IF;\n\n        DBMS_OUTPUT.put_line (23);\n\n        -- RAISE_ERROR(v_pol_data (i).pol_binder_policy||';'||v_pol_data (i).pol_bind_code);\n        IF v_bind_code IS NULL\n        THEN\n            raise_error ('YOU HAVE NOT DEFINED THE BORDEREAUX CODE ..');\n        END IF;\n\n        v_pol_uwyr := TO_NUMBER (TO_CHAR (v_cover_from, 'RRRR'));\n        v_inception_dt := v_cover_from;\n        v_inception_yr := v_pol_uwyr;\n        DBMS_OUTPUT.put_line (25);\n        v_pol_renewal_dt := get_renewal_date (v_pro_code, v_wet_date);\n\n        IF v_cur_code IS NULL\n        THEN\n            v_cur_rate := NULL;\n\n            BEGIN\n                SELECT org_cur_code, cur_symbol\n                  INTO vcur_code, v_cur_symbol\n                  FROM tqc_organizations, tqc_systems, tqc_currencies\n                 WHERE     org_code = sys_org_code\n                       AND org_cur_code = cur_code\n                       AND sys_code = 37;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('UNABLE TO RETRIEVE THE BASE CURRENCY');\n            END;\n\n            IF vcur_code IS NULL\n            THEN\n                raise_error (\n                    'THE BASE CURRENCY HAVE NOT BEEN DEDFINED. CANNOT PROCEED.');\n            END IF;\n        ELSE\n            SELECT cur_code, cur_symbol\n              INTO vcur_code, v_cur_symbol\n              FROM tqc_currencies\n             WHERE cur_code = v_cur_code;\n        END IF;\n\n        IF v_cur_rate IS NULL\n        THEN\n            v_cur_rate := get_exchange_rate (v_cur_code, v_cur_code);\n        END IF;\n\n        BEGIN\n            SELECT NVL (pro_expiry_period, 'Y'), NVL (pro_open_cover, 'N')\n              INTO v_exp_flag, v_open_cover\n              FROM gin_products\n             WHERE pro_code = v_pro_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('ERROR SECURING OPEN COVER STATUS..');\n        END;\n\n        IF v_pol_no IS NULL OR v_end_no IS NULL OR v_batchno IS NULL\n        THEN\n            BEGIN\n                gen_pol_numbers (v_pro_code,\n                                 v_brn_code,\n                                 v_pol_uwyr,\n                                 v_pol_status,\n                                 v_pol_no,\n                                 v_end_no,\n                                 v_batchno,\n                                 v_serial_no,\n                                 v_policy_type,\n                                 v_coinsurance,\n                                 v_div_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('UNABLE TO GENERATE THE POLICY NUMBER...');\n            END;\n        END IF;\n\n        BEGIN\n            check_policy_unique (v_pol_no);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                BEGIN\n                    SELECT TO_NUMBER (\n                               SUBSTR (\n                                   v_pol_no,\n                                   DECODE (\n                                       gin_parameters_pkg.get_param_varchar (\n                                           'POL_SERIAL_AT_END'),\n                                       'N', DECODE (\n                                                DECODE (v_policy_type,\n                                                        'N', 'P',\n                                                        'F'),\n                                                'P', gin_parameters_pkg.get_param_varchar (\n                                                         'POL_SERIAL_POS'),\n                                                gin_parameters_pkg.get_param_varchar (\n                                                    'POL_FAC_SERIAL_POS')),\n                                         LENGTH (v_pol_no)\n                                       - gin_parameters_pkg.get_param_varchar (\n                                             'POLNOSRLENGTH')\n                                       + 1),\n                                   gin_parameters_pkg.get_param_varchar (\n                                       'POLNOSRLENGTH')))\n                      INTO v_seq\n                      FROM DUAL;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error Selecting Used Sequence...1');\n                END;\n\n                BEGIN\n                    SELECT DECODE (v_policy_type, 'N', 'P', 'F')\n                      INTO v_pol_seq_type\n                      FROM DUAL;\n\n                    gin_sequences_pkg.update_used_sequence (v_pol_seq_type,\n                                                            v_pro_code,\n                                                            v_brn_code,\n                                                            v_pol_uwyr,\n                                                            v_pol_status,\n                                                            v_seq,\n                                                            v_pol_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        -- introduced for monarch where branch id vary from 2 charaters to 3 characters posing a challenge\n                        BEGIN\n                            SELECT TO_NUMBER (\n                                       SUBSTR (\n                                           v_pol_no,\n                                           DECODE (\n                                               gin_parameters_pkg.get_param_varchar (\n                                                   'POL_SERIAL_AT_END'),\n                                               'N', DECODE (\n                                                        DECODE (\n                                                            v_policy_type,\n                                                            'N', 'P',\n                                                            'F'),\n                                                        'P', gin_parameters_pkg.get_param_varchar (\n                                                                 'POL_SERIAL_POS'),\n                                                        gin_parameters_pkg.get_param_varchar (\n                                                            'POL_FAC_SERIAL_POS')),\n                                                 LENGTH (v_pol_no)\n                                               - gin_parameters_pkg.get_param_varchar (\n                                                     'POLNOSRLENGTH')\n                                               + 1),\n                                           gin_parameters_pkg.get_param_varchar (\n                                               'POLNOSRLENGTH')))\n                              INTO v_seqno\n                              FROM DUAL;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'Error Selecting Used Sequence...2');\n                        END;\n\n                        BEGIN\n                            SELECT LENGTH (brn_sht_desc)\n                              INTO v_brn_sht_length\n                              FROM tqc_branches\n                             WHERE brn_code = v_brn_code;\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                NULL;\n                        END;\n\n                        IF NVL (v_brn_sht_length, 0) = 2\n                        THEN\n                            BEGIN\n                                v_seq := TO_NUMBER (v_seqno);\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        ELSIF NVL (v_brn_sht_length, 0) = 3\n                        THEN\n                            BEGIN\n                                v_seq := TO_NUMBER (SUBSTR (v_seqno, 2));\n                            EXCEPTION\n                                WHEN OTHERS\n                                THEN\n                                    NULL;\n                            END;\n                        ELSE\n                            raise_error ('Error here....');\n                        END IF;\n\n                        BEGIN\n                            SELECT DECODE (v_policy_type, 'N', 'P', 'F')\n                              INTO v_pol_seq_type\n                              FROM DUAL;\n\n                            gin_sequences_pkg.update_used_sequence (\n                                v_pol_seq_type,\n                                v_pro_code,\n                                v_brn_code,\n                                v_pol_uwyr,\n                                v_pol_status,\n                                v_seq,\n                                v_pol_no);\n                        EXCEPTION\n                            WHEN OTHERS\n                            THEN\n                                raise_error (\n                                    'ERROR UPDATING USED SEQUENCE...');\n                        END;\n                --RAISE_ERROR('ERROR UPDATING USED SEQUENCE...');\n                END;\n\n                raise_error (\n                    'Error generating Policy number  at step 2' || v_pol_no);\n        END;\n\n        BEGIN\n            SELECT TO_NUMBER (\n                       SUBSTR (\n                           v_pol_no,\n                           DECODE (\n                               gin_parameters_pkg.get_param_varchar (\n                                   'POL_SERIAL_AT_END'),\n                               'N', DECODE (\n                                        DECODE (v_policy_type, 'N', 'P', 'F'),\n                                        'P', gin_parameters_pkg.get_param_varchar (\n                                                 'POL_SERIAL_POS'),\n                                        gin_parameters_pkg.get_param_varchar (\n                                            'POL_FAC_SERIAL_POS')),\n                                 LENGTH (v_pol_no)\n                               - gin_parameters_pkg.get_param_varchar (\n                                     'POLNOSRLENGTH')\n                               + 1),\n                           gin_parameters_pkg.get_param_varchar (\n                               'POLNOSRLENGTH')))\n              INTO v_seq\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                NULL;\n        END;\n\n        BEGIN\n            SELECT DECODE (v_policy_type, 'N', 'P', 'F')\n              INTO v_pol_seq_type\n              FROM DUAL;\n\n            gin_sequences_pkg.update_used_sequence (v_pol_seq_type,\n                                                    v_pro_code,\n                                                    v_brn_code,\n                                                    v_pol_uwyr,\n                                                    v_pol_status,\n                                                    v_seq,\n                                                    v_pol_no);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                -- introduced for monarch where branch id vary from 2 charaters to 3 characters posing a challenge\n                BEGIN\n                    SELECT (SUBSTR (\n                                v_pol_no,\n                                DECODE (\n                                    gin_parameters_pkg.get_param_varchar (\n                                        'POL_SERIAL_AT_END'),\n                                    'N', DECODE (\n                                             DECODE (v_policy_type,\n                                                     'N', 'P',\n                                                     'F'),\n                                             'P', gin_parameters_pkg.get_param_number (\n                                                      'POL_SERIAL_POS'),\n                                             gin_parameters_pkg.get_param_number (\n                                                 'POL_FAC_SERIAL_POS')),\n                                      LENGTH (v_pol_no)\n                                    - gin_parameters_pkg.get_param_number (\n                                          'POLNOSRLENGTH')\n                                    + 1),\n                                gin_parameters_pkg.get_param_varchar (\n                                    'POLNOSRLENGTH')))\n                      INTO v_seqno\n                      FROM DUAL;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR SELECTING USED SEQUENCE...');\n                END;\n\n                BEGIN\n                    SELECT LENGTH (brn_sht_desc)\n                      INTO v_brn_sht_length\n                      FROM tqc_branches\n                     WHERE brn_code = v_brn_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        NULL;\n                END;\n\n                --RAISE_ERROR('HERE='||v_seqNO||';'||v_brn_sht_length||';'||v_seq);\n                IF NVL (v_brn_sht_length, 0) = 2\n                THEN\n                    BEGIN\n                        v_seq := TO_NUMBER (v_seqno);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n                ELSIF NVL (v_brn_sht_length, 0) = 3\n                THEN\n                    BEGIN\n                        v_seq := TO_NUMBER (SUBSTR (v_seqno, 2));\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            NULL;\n                    END;\n                ELSE\n                    raise_error ('Error here....');\n                END IF;\n\n                BEGIN\n                    SELECT DECODE (v_policy_type, 'N', 'P', 'F')\n                      INTO v_pol_seq_type\n                      FROM DUAL;\n\n                    gin_sequences_pkg.update_used_sequence (v_pol_seq_type,\n                                                            v_pro_code,\n                                                            v_brn_code,\n                                                            v_pol_uwyr,\n                                                            v_pol_status,\n                                                            v_seq,\n                                                            v_pol_no);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR UPDATING USED SEQUENCE...');\n                END;\n        --RAISE_ERROR('ERROR UPDATING USED SEQUENCE...');\n        END;\n\n        IF     NVL (v_binder_policy, 'N') = 'Y'\n           AND tqc_parameters_pkg.get_org_type (37) NOT IN ('INS')\n        THEN\n            BEGIN\n                SELECT bind_policy_no\n                  INTO v_client_pol_no\n                  FROM gin_binders\n                 WHERE bind_code = v_bind_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error getting the Contract policy no...');\n            END;\n        ELSE\n            IF tqc_interfaces_pkg.get_org_type (37) IN ('INS')\n            THEN\n                v_client_pol_no := v_pol_no;\n            ELSE\n                v_client_pol_no := 'TBA';\n            END IF;\n        END IF;\n\n        DBMS_OUTPUT.put_line (4);\n        v_policy_doc := v_policy_doc;\n\n        -- RAISE_ERROR('v_policy_doc '||v_policy_doc);\n        IF v_policy_doc IS NULL\n        THEN\n            BEGIN\n                SELECT SUBSTR (pro_policy_word_doc, 1, 30), pro_min_prem\n                  INTO v_policy_doc, v_pro_min_prem\n                  FROM gin_products\n                 WHERE pro_code = v_pro_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error getting the default policy document..');\n            END;\n        END IF;\n\n        SELECT pro_sht_desc\n          INTO v_pro_sht_desc\n          FROM gin_products\n         WHERE pro_code = v_pro_code;\n\n        /* Check the policy uniqueness again to ensure that the policy does not exist on new business   */\n        BEGIN\n            check_policy_unique (v_pol_no);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (SQLERRM (SQLCODE));\n        END;\n\n        v_admin_fee_applicable := 'N';\n        v_growth_type :=\n            gin_stp_uw_pkg.get_growth_type (v_prp_code,\n                                            v_pol_status,\n                                            v_pol_no,\n                                            v_batchno);\n\n        IF v_agnt_code = 0\n        THEN\n            v_comm_allowed := 'N';\n        ELSE\n            v_comm_allowed := 'Y';\n        END IF;\n\n        BEGIN\n            v_cashback_lvl := 0;\n            v_cashback_rate := 0;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                ROLLBACK;\n                raise_error ('Unable to generate CASH BACK...');\n        END;\n\n        BEGIN\n            INSERT INTO gin_policies (pol_policy_no,\n                                      pol_ren_endos_no,\n                                      pol_batch_no,\n                                      pol_agnt_agent_code,\n                                      pol_agnt_sht_desc,\n                                      pol_bind_code,\n                                      pol_wef_dt,\n                                      pol_wet_dt,\n                                      pol_uw_year,\n                                      pol_policy_status,\n                                      pol_inception_dt,\n                                      pol_cur_code,\n                                      pol_prepared_by,\n                                      pol_prepared_date,\n                                      pol_policy_type,\n                                      pol_client_policy_number,\n                                      pol_brn_code,\n                                      pol_cur_rate,\n                                      pol_coinsurance,\n                                      pol_coinsure_leader,\n                                      pol_cur_symbol,\n                                      pol_brn_sht_desc,\n                                      pol_prp_code,\n                                      pol_current_status,\n                                      pol_authosrised,\n                                      pol_post_status,\n                                      pol_inception_uwyr,\n                                      pol_pro_code,\n                                      pol_your_ref,\n                                      pol_prop_holding_co_prp_code,\n                                      pol_oth_int_parties,\n                                      pol_pro_sht_desc,\n                                      pol_prev_batch_no,\n                                      pol_uwyr_length,\n                                      pol_binder_policy,\n                                      pol_renewable,\n                                      pol_policy_cover_from,\n                                      pol_policy_cover_to,\n                                      pol_coinsurance_share,\n                                      pol_renewal_dt,\n                                      pol_trans_eff_wet,\n                                      pol_ri_agent_comm_rate,\n                                      pol_ri_agnt_sht_desc,\n                                      pol_ri_agnt_agent_code,\n                                      pol_policy_doc,\n                                      pol_commission_allowed,\n                                      pol_coin_fee,\n                                      pol_sub_agn_code,\n                                      pol_sub_agn_sht_desc,\n                                      pol_div_code,\n                                      pol_pmod_code,\n                                      pol_adm_fee_applicable,\n                                      pol_aga_code,\n                                      pol_clna_code,\n                                      pol_sub_aga_code,\n                                      pol_admin_fee_disc_rate,\n                                      pol_med_policy_type,\n                                      pol_freq_of_payment,\n                                      pol_min_prem,\n                                      pol_coin_leader_combined,\n                                      pol_declaration_type,                --,\n                                      pol_mktr_agn_code,\n                                      pol_curr_rate_type,\n                                      pol_coin_gross,\n                                      pol_past_period_endos,\n                                      pol_bussiness_growth_type,\n                                      pol_subagent,\n                                      pol_ipf_nof_instals,\n                                      pol_coagent,\n                                      pol_coagent_main_pct,\n                                      pol_agn_discounted,\n                                      pol_agn_disc_type,\n                                      pol_agn_discount,\n                                      pol_pip_pf_code,\n                                      pol_tot_instlmt,\n                                      pol_uw_period,\n                                      pol_ipf_down_pymt_type,\n                                      pol_ipf_down_pymt_amt,\n                                      pol_ipf_interest_rate,\n                                      pol_outside_system,\n                                      pol_open_cover,\n                                      pol_endors_status,\n                                      pol_open_policy,\n                                      pol_pip_code,\n                                      pol_policy_debit,\n                                      pol_scheme_policy,\n                                      pol_pro_interface_type,\n                                      pol_checkoff_agnt_sht_desc,\n                                      pol_checkoff_agnt_code,\n                                      pol_pymt_faci_agnt_code,\n                                      pol_old_policy_no,\n                                      pol_old_agent,\n                                      pol_joint,\n                                      pol_joint_prp_code,\n                                      pol_intro_code,\n                                      pol_instlmt_day,\n                                      pol_pop_taxes,\n                                      pol_bdiv_code,\n                                      pol_regional_endors,\n                                      pol_cashback_level,\n                                      pol_cashback_rate,\n                                      pol_admin_fee_allowed)\n                 VALUES (v_pol_no,\n                         v_end_no,\n                         v_batchno,\n                         v_agnt_code,\n                         v_agnt_sht_desc,\n                         v_bind_code,\n                         v_cover_from,            --v_pol_data (i).pol_wef_dt,\n                         v_cover_to,\n                         v_pol_uwyr,\n                         v_pol_status,\n                         v_inception_dt,\n                         v_cur_code,\n                         vuser,\n                         TRUNC (SYSDATE),\n                         NVL (v_policy_type, 'N'),\n                         --NVL (v_pol_data (i).pol_policy_type, 'N'),\n                         NVL (v_pol_no, v_client_pol_no),\n                         v_brn_code,\n                         v_cur_rate,\n                         NVL (v_coinsurance, 'N'),\n                         --v_pol_data (i).pol_coinsurance,\n                         NULL,\n                         --v_pol_data (i).pol_coinsure_leader,\n                         v_cur_symbol,\n                         v_brn_sht_desc,\n                         v_prp_code,\n                         --v_pol_data (i).pol_prp_code,\n                         'D',\n                         'N',\n                         'N',\n                         v_inception_yr,\n                         v_pro_code,\n                         NULL,\n                         --v_pol_data (i).pol_your_ref,\n                         NULL,  --v_pol_data (i).pol_prop_holding_co_prp_code,\n                         NULL,           --v_pol_data (i).pol_oth_int_parties,\n                         NVL (v_pro_sht_desc, v_pro_sht_desc),\n                         v_batchno,\n                         CEIL (MONTHS_BETWEEN (v_cover_to, v_cover_from)),\n                         v_binder_policy,  --v_pol_data (i).pol_binder_policy,\n                         'Y',\n                         --NVL (v_pol_data (i).pol_renewable, 'Y'),\n                         v_cover_from,\n                         v_cover_to,              --v_pol_data (i).pol_wef_dt,\n                         NULL,         --v_pol_data (i).pol_coinsurance_share,\n                         get_renewal_date (v_pro_code, v_cover_to),\n                         v_wet_date,\n                         NULL,\n                         --v_pol_data (i).pol_ri_agent_comm_rate,\n                         NULL,          --v_pol_data (i).pol_ri_agnt_sht_desc,\n                         NULL,        --v_pol_data (i).pol_ri_agnt_agent_code,\n                         v_policy_doc,\n                         v_comm_allowed,\n                         --NVL (v_pol_data (i).pol_commission_allowed, 'Y'),\n                         NULL,                  --v_pol_data (i).pol_coin_fee,\n                         NULL,              --v_pol_data (i).pol_sub_agn_code,\n                         NULL,         --v_pol_data (i).pol_sub_agnt_sht_desc,\n                         NULL,                 --v_pol_data (i).pol_bdiv_code,\n                         NULL,                 --v_pol_data (i).pol_pmod_code,\n                         v_admin_fee_applicable,\n                         NULL,\n                         --v_pol_data (i).pol_aga_code,\n                         NULL,                 --v_pol_data (i).pol_clna_code,\n                         NULL,              --v_pol_data (i).pol_sub_aga_code,\n                         v_admin_disc,                                     --,\n                         NULL,           --v_pol_data (i).pol_med_policy_type,\n                         'A',\n                         NULL,                               --v_pro_min_prem,\n                         NULL,      --v_pol_data (i).pol_coin_leader_combined,\n                         NULL,\n                         --v_pol_data (i).pol_declaration_type,           --,\n                         NULL,             --v_pol_data (i).pol_mktr_agn_code,\n                         NULL,            --v_pol_data (i).pol_curr_rate_type,\n                         NULL,                --v_pol_data (i).pol_coin_gross,\n                         'N',\n                         v_growth_type,\n                         NULL,                  --v_pol_data (i).pol_subagent,\n                         NULL,           --v_pol_data (i).pol_ipf_nof_instals,\n                         NULL,                   --v_pol_data (i).pol_coagent,\n                         NULL,          --v_pol_data (i).pol_coagent_main_pct,\n                         NULL,            --v_pol_data (i).pol_agn_discounted,\n                         NULL,             --v_pol_data (i).pol_agn_disc_type,\n                         NULL,              --v_pol_data (i).pol_agn_discount,\n                         NULL,               --v_pol_data (i).pol_pip_pf_code,\n                         NULL,            --v_pol_data (i).pol_no_installment,\n                         1,\n                         NULL,        --v_pol_data (i).pol_ipf_down_pymt_type,\n                         NULL,         --v_pol_data (i).pol_ipf_down_pymt_amt,\n                         NULL,         --v_pol_data (i).pol_ipf_interest_rate,\n                         NULL,            --v_pol_data (i).pol_outside_system,\n                         'N',      --NVL (v_pol_data (i).pol_open_cover, 'N'),\n                         NULL,             --v_pol_data (i).pol_endors_status,\n                         NULL,               --v_pol_data (i).pol_open_policy,\n                         NULL,           --v_pol_data (i).pol_oth_int_parties,\n                         NULL,              --v_pol_data (i).pol_policy_debit,\n                         NULL,             --v_pol_data (i).pol_scheme_policy,\n                         v_interface_type, --v_pol_data (i).pol_interface_type,\n                         NULL,\n                         --v_pol_data (i).pol_checkoff_agnt_sht_desc,\n                         NULL,        --v_pol_data (i).pol_checkoff_agnt_code,\n                         NULL,       --v_pol_data (i).pol_pymt_faci_agnt_code,\n                         NULL,             --v_pol_data (i).pol_old_policy_no,\n                         NULL,                 --v_pol_data (i).pol_old_agent,\n                         NULL,                     --v_pol_data (i).pol_joint,\n                         NULL,            --v_pol_data (i).pol_joint_prp_code,\n                         NULL,                --v_pol_data (i).pol_intro_code,\n                         NULL,               --v_pol_data (i).pol_instlmt_day,\n                         NVL (v_pop_taxes, 'N'),\n                         v_div_code,\n                         NULL,\n                         v_cashback_lvl,\n                         v_cashback_rate,\n                         'N');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('ERROR CREATING POLICY RECORD..');\n        END;\n\n        BEGIN\n            pop_sbu_dtls (v_batchno,\n                          v_uni_code,\n                          v_loc_code,\n                          'A');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error Creating Policy Other Details Record..');\n        END;\n\n        BEGIN\n            SELECT TO_NUMBER (\n                       TO_CHAR (SYSDATE, 'RRRR') || ggt_trans_no_seq.NEXTVAL)\n              INTO v_trans_no\n              FROM DUAL;\n\n            INSERT INTO gin_gis_transactions (ggt_doc_ref,\n                                              ggt_trans_no,\n                                              ggt_pol_policy_no,\n                                              ggt_cmb_claim_no,\n                                              ggt_pro_code,\n                                              ggt_pol_batch_no,\n                                              ggt_pro_sht_desc,\n                                              ggt_btr_trans_code,\n                                              ggt_done_by,\n                                              ggt_done_date,\n                                              ggt_client_policy_number,\n                                              ggt_uw_clm_tran,\n                                              ggt_trans_date,\n                                              ggt_trans_authorised,\n                                              ggt_trans_authorised_by,\n                                              ggt_trans_authorise_date,\n                                              ggt_old_tran_no,\n                                              ggt_effective_date)\n                 VALUES (v_pol_no,              --v_pol_data (i).pol_your_ref,\n                         v_trans_no,\n                         v_pol_no,\n                         NULL,\n                         v_pro_code,\n                         v_batchno,\n                         v_pro_sht_desc,\n                         'NB',\n                         vuser,\n                         TRUNC (SYSDATE),\n                         v_client_pol_no,\n                         'U',\n                         TRUNC (SYSDATE),\n                         'N',\n                         NULL,\n                         NULL,\n                         NULL,\n                         TRUNC (SYSDATE));\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error Creating Transaction Record..');\n        END;\n\n        BEGIN\n            v_tran_ref_no :=\n                gin_sequences_pkg.get_number_format (\n                    'BARCODE',\n                    v_pro_code,\n                    v_brn_code,\n                    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR')),\n                    'NB',\n                    v_serial);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'unable to generate transmittal number.Contact the system administrator...');\n        END;\n\n        BEGIN\n            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                   || ggts_tran_no_seq.NEXTVAL\n              INTO next_ggts_trans_no\n              FROM DUAL;\n\n            INSERT INTO gin_gis_transmitals (ggts_tran_no,\n                                             ggts_pol_policy_no,\n                                             ggts_cmb_claim_no,\n                                             ggts_pol_batch_no,\n                                             ggts_done_by,\n                                             ggts_done_date,\n                                             ggts_uw_clm_tran,\n                                             ggts_pol_renewal_batch,\n                                             ggts_tran_ref_no,\n                                             ggts_ipay_alphanumeric)\n                 VALUES (next_ggts_trans_no,\n                         v_pol_no,\n                         NULL,\n                         v_batchno,\n                         v_user,\n                         SYSDATE,\n                         'U',\n                         NULL,\n                         v_tran_ref_no,\n                         'Y');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'TRANSMITAL ERROR. CONTACT THE SYSTEM ADMINISTRATOR...');\n        END;\n\n        --raise_error(v_pol_data (i).POL_SERIAL_NO||'='||v_pol_data (i).POL_OUTSIDE_SYSTEM);\n        IF v_serial_no IS NOT NULL AND v_outside_system = 'Y'\n        THEN\n            BEGIN\n                gin_manage_exceptions.proc_certs_excepts (v_batchno,\n                                                          v_trans_no,\n                                                          TRUNC (SYSDATE),\n                                                          'NB',\n                                                          'UW');\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_when_others (\n                        'ERROR CREATING CERTIFICATE EXCEPTION ....');\n            END;\n        END IF;\n\n        BEGIN\n            SELECT COUNT (1)\n              INTO v_cnt\n              FROM gin_file_master\n             WHERE film_file_no = v_pol_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'ERROR CHECKING IF POLICY FILE ALREADY EXISTS..');\n        END;\n\n        IF NVL (v_cnt, 0) = 0\n        THEN\n            BEGIN\n                INSERT INTO gin_file_master (film_file_no,\n                                             film_file_desc,\n                                             film_type,\n                                             film_open_dt,\n                                             film_location,\n                                             film_location_dept,\n                                             film_home_shelf_no)\n                    SELECT DISTINCT pol_policy_no,\n                                    clnt_name || ' ' || clnt_other_names,\n                                    'U',\n                                    NVL (pol_inception_dt, TRUNC (SYSDATE)),\n                                    'HOME',\n                                    'HOME',\n                                    NULL\n                      FROM gin_policies, tqc_clients\n                     WHERE     pol_prp_code = clnt_code\n                           AND pol_batch_no = v_batchno;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'ERROR CREATING A FILE RECORD FOR THIS POLICY..');\n            END;\n        END IF;\n\n        --RAISE_eRROR('v_pop_taxes='||v_pop_taxes);\n        IF NVL (v_pop_taxes, 'Y') = 'Y'\n        THEN\n            BEGIN\n                pop_taxes (v_pol_no,\n                           v_end_no,\n                           v_batchno,\n                           v_pro_code,\n                           v_binder_policy,\n                           v_pol_status);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('ERROR UPDATING TAXES..');\n            END;\n        END IF;\n\n        BEGIN\n            pop_clauses (v_pol_no,\n                         v_end_no,\n                         v_batchno,\n                         v_pro_code);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('ERROR CREATING POPULATING CLAUSES');\n        END;\n\n        FOR x IN 1 .. v_rsk_data.COUNT\n        LOOP\n            BEGIN\n                gin_ipu_stp_prc (v_batchno,\n                                 v_bind_code,\n                                 v_rsk_data (x).ipu_property_id,\n                                 v_rsk_data (x).ipu_desc,\n                                 v_user,\n                                 v_rsk_data (x).ipu_scl_code,\n                                 v_rsk_data (x).ipu_cvt_code,\n                                 v_new_ipu_code,\n                                 v_rsk_data (x).ipu_db_code);\n            --          EXCEPTION\n            --             WHEN OTHERS\n            --             THEN\n            --                raise_error ('ERROR CREATING RISK');\n            END;\n\n            BEGIN\n                sect_cursor :=\n                    gis_web_pkg.get_bouquet_sections (\n                        v_rsk_data (x).ipu_scl_code,\n                        v_rsk_data (x).ipu_cvt_code,\n                        v_bind_code,\n                        v_rsk_data (x).ipu_db_code,\n                        v_new_ipu_code);\n\n                LOOP\n                    EXIT WHEN sect_cursor%NOTFOUND;\n\n                    FETCH sect_cursor\n                        INTO v_sect_sht_desc,\n                             v_sec_code,\n                             v_sect_desc,\n                             v_sect_type,\n                             v_type_desc,\n                             v_prr_rate_type,\n                             v_prr_rate,\n                             v_terr_description,\n                             v_prr_prem_minimum_amt,\n                             v_prr_multiplier_rate,\n                             v_prr_division_factor,\n                             v_prr_multplier_div_fact,\n                             v_prr_rate_desc,\n                             v_prr_free_limit,\n                             v_sec_declaration,\n                             v_scvts_order,\n                             v_prr_prorated_full,\n                             v_prr_si_limit_type,\n                             v_prr_si_rate;\n\n                    --RAISE_ERROR('v_prr_prorated_full ==== '||v_prr_prorated_full);\n                    v_rsk_sect_data := web_sect_tab ();\n                    v_rsk_sect_data.EXTEND (1);\n                    v_rsk_sect_data (1) :=\n                        web_sect_rec (NULL,\n                                      v_new_ipu_code,\n                                      v_sec_code,\n                                      v_sect_sht_desc,\n                                      NULL,\n                                      0,                               --NULL,\n                                      v_prr_rate,\n                                      NULL,\n                                      v_prr_rate_type,\n                                      v_sect_type,\n                                      v_prr_prem_minimum_amt,\n                                      NULL,\n                                      v_prr_multiplier_rate,\n                                      v_prr_multplier_div_fact,\n                                      NULL,\n                                      v_prr_division_factor,\n                                      'Y',\n                                      'N',\n                                      0,\n                                      v_sec_declaration,\n                                      v_prr_free_limit,\n                                      NULL,\n                                      NULL,\n                                      NVL (v_prr_prorated_full, 'P'),\n                                      NULL,\n                                      v_sect_desc,\n                                      v_prr_si_limit_type,\n                                      v_prr_si_rate,\n                                      NULL,\n                                      NULL,\n                                      NULL,\n                                      NULL,\n                                      NULL,\n                                      NULL,\n                                      NULL,\n                                      NULL,\n                                      NULL,\n                                      'N',\n                                      'A',\n                                      NULL,\n                                      NULL,\n                                      NULL);\n                --RAISE_ERROR(v_rsk_sect_data.COUNT);\n                END LOOP;\n\n                gin_rsk_stp_limits (v_new_ipu_code,\n                                    v_rsk_data (x).ipu_scl_code,\n                                    v_bind_code,\n                                    v_row,\n                                    'A',\n                                    v_rsk_data (x).ipu_cvt_code,\n                                    v_rsk_sect_data,\n                                    v_rsk_data (x).ipu_db_code);\n            --          EXCEPTION\n            --             WHEN OTHERS\n            --             THEN\n            --                raise_error ('ERROR CREATING POPULATING SECTIONS');\n            END;\n        END LOOP;\n    END;",
        "gin_ipu_stp_prc": "PROCEDURE gin_ipu_stp_prc (v_batchno        IN     NUMBER,\n                               v_bind_code      IN     NUMBER,\n                               v_property_id    IN     VARCHAR2,\n                               v_ipu_desc       IN     VARCHAR2,\n                               -- v_limit      IN      NUMBER,\n                               v_user           IN     VARCHAR2,\n                               --v_rsk_sect_data               IN   web_sect_tab,\n                               v_scl_code       IN     NUMBER,\n                               v_covt_code      IN     NUMBER,\n                               v_new_ipu_code      OUT NUMBER,\n                               v_db_code        IN     NUMBER)\n    IS\n        v_loaded                   VARCHAR2 (1) DEFAULT 'N';\n        v_ipu_ncd_cert_no          VARCHAR2 (30) DEFAULT NULL;\n        v_del_sect                 VARCHAR2 (1) DEFAULT NULL;\n        v_cnt                      NUMBER;\n        v_new_polin_code           NUMBER;\n        v_uw_yr                    VARCHAR2 (1);\n        v_wef_date                 DATE;\n        v_wet_date                 DATE;\n        v_cover_days               NUMBER;\n        v_bind_name                VARCHAR2 (100);\n        v_cert_no                  VARCHAR2 (35);\n        v_quz_sht_desc             VARCHAR2 (35);\n        --v_count                                NUMBER;\n        v_uw_trans                 VARCHAR2 (1);\n        v_ren_cnt                  NUMBER;\n        v_ipu_prev_status          VARCHAR2 (35);\n        v_ipu_prorata              VARCHAR2 (2);\n        v_pol_tot_instlmt          NUMBER;\n        v_pymnt_tot_instlmt        NUMBER;\n        v_install_pct              NUMBER;\n        v_ipu_id                   NUMBER;\n        v_cer_cnt                  NUMBER;\n        v_ct_code                  NUMBER;\n        v_error                    VARCHAR2 (200);\n        v_cer_cnt                  NUMBER;\n        v_ipu_id                   NUMBER;\n        v_install_period           NUMBER;\n        v_polc_code                NUMBER;\n        v_risk_pymt_install_pcts   VARCHAR2 (50);\n        v_susp_reinst_type         VARCHAR2 (5);\n        v_suspend_wef              DATE;\n        v_suspend_wet              DATE;\n        v_new_pol_wet              DATE;\n        v_rsk_trans_type           VARCHAR2 (3);\n        v_pol_instal_wet           DATE;\n        v_wef                      DATE;\n        v_prev_install_period      NUMBER;\n        v_increment_by             NUMBER;\n        v_increment                VARCHAR2 (2);\n        v_interface_type           VARCHAR2 (50);\n        v_cnt1                     NUMBER;\n        v_risk_id_format           VARCHAR2 (50);\n        v_risk_id_format_param     VARCHAR2 (50);\n        v_id_reg_no                VARCHAR2 (50);\n        v_clnt_pin_no              VARCHAR2 (50);\n        v_ipu_covt_code            NUMBER;\n        v_clnt_passport_no         VARCHAR2 (50);\n        v_agent_code               NUMBER;\n        v_agn_pin                  VARCHAR2 (50);\n        v_max_exposure             NUMBER;\n        v_pol_status               VARCHAR2 (10);\n        v_enforce_covt_prem        VARCHAR2 (1);\n        v_cert_autogen             VARCHAR2 (1);\n        v_agnt_agent_code          NUMBER;\n        v_trans_type               VARCHAR2 (5);\n        v_covt_sht_desc            VARCHAR2 (20);\n\n        CURSOR pol_cur IS\n            SELECT gin_policies.*,\n                   NVL (pro_expiry_period, 'Y')     pro_expiry_period,\n                   NVL (pol_open_cover, 'N')        pro_open_cover,\n                   NVL (pro_earthquake, 'N')        pro_earthquake,\n                   NVL (pro_moto_verfy, 'N')        pro_moto_verfy,\n                   NVL (pro_stp, 'N')               pro_stp\n              FROM gin_policies, gin_products\n             WHERE pro_code = pol_pro_code AND pol_batch_no = v_batchno;\n    BEGIN\n        v_trans_type := 'NB';\n\n        SELECT bind_name\n          INTO v_bind_name\n          FROM gin_binders\n         WHERE bind_code = v_bind_code;\n\n        --RAISE_eRROR(v_bind_code|| ' = '||v_scl_code);\n        --                    SELECT db_covt_code\n        --                      INTO v_covt_code\n        --                      FROM gin_binder_details\n        --                     WHERE db_bind_code = v_bind_code;\n        SELECT covt_sht_desc\n          INTO v_covt_sht_desc\n          FROM gin_cover_types\n         WHERE covt_code = v_covt_code;\n\n        SELECT scl_bond_subclass\n          INTO v_cert_autogen\n          FROM gin_sub_classes\n         WHERE scl_code = v_scl_code;\n\n        FOR pol_cur_rec IN pol_cur\n        LOOP\n            IF pol_cur_rec.pol_policy_status = 'NB'\n            THEN\n                v_enforce_covt_prem := 'Y';\n            END IF;\n\n            IF    NVL (pol_cur_rec.pol_binder_policy, 'N') = 'Y'\n               OR NVL (pol_cur_rec.pro_open_cover, 'N') = 'Y'\n            THEN\n                v_uw_yr := 'R';\n            ELSE\n                v_uw_yr := 'P';\n            END IF;\n\n            SELECT db_max_limit\n              INTO v_max_exposure\n              FROM gin_binder_details\n             WHERE db_code = v_db_code;\n\n            v_wef_date := pol_cur_rec.pol_policy_cover_from;\n            v_wet_date := pol_cur_rec.pol_policy_cover_to;\n            -- raise_error(pol_cur_rec.pol_policy_cover_from||' = '||pol_cur_rec.pol_policy_cover_to);\n            v_wef := v_wef_date;\n\n            BEGIN\n                IF v_pol_instal_wet != pol_cur_rec.pol_paid_to_date\n                THEN\n                    UPDATE gin_policies\n                       SET pol_paid_to_date = v_pol_instal_wet\n                     WHERE pol_batch_no = v_batchno;\n                END IF;\n            END;\n\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM gin_policy_insureds\n                 WHERE     polin_pol_batch_no = v_batchno\n                       AND polin_prp_code = pol_cur_rec.pol_prp_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error checking if insured already exists');\n            END;\n\n            IF NVL (v_cnt, 0) = 0\n            THEN\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                           || polin_code_seq.NEXTVAL\n                      INTO v_new_polin_code\n                      FROM DUAL;\n\n                    INSERT INTO gin_policy_insureds (polin_code,\n                                                     polin_pol_policy_no,\n                                                     polin_pol_ren_endos_no,\n                                                     polin_pol_batch_no,\n                                                     polin_prp_code,\n                                                     polin_new_insured)\n                         VALUES (v_new_polin_code,\n                                 pol_cur_rec.pol_policy_no,\n                                 pol_cur_rec.pol_ren_endos_no,\n                                 v_batchno,\n                                 pol_cur_rec.pol_prp_code,\n                                 'Y');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR SAVING INSURED DETAILS..');\n                END;\n            ELSE\n                BEGIN\n                    SELECT polin_code\n                      INTO v_new_polin_code\n                      FROM gin_policy_insureds\n                     WHERE     polin_pol_batch_no = v_batchno\n                           AND polin_prp_code = pol_cur_rec.pol_prp_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'ERROR CHECKING IF INSURED ALREADY EXISTS');\n                END;\n            END IF;\n\n            v_ipu_prorata := 'P';    -- NVL (v_ipu_data (i).ipu_prorata, 'P');\n\n            IF v_wef_date NOT BETWEEN pol_cur_rec.pol_policy_cover_from\n                                  AND pol_cur_rec.pol_policy_cover_to\n            THEN\n                raise_error (\n                       'THE RISK COVER DATES PROVIDED MUST BE WITHIN THE POLICY COVER PERIODS. '\n                    || pol_cur_rec.pol_policy_cover_from\n                    || ' TO '\n                    || pol_cur_rec.pol_policy_cover_to);\n            END IF;\n\n            IF v_wet_date NOT BETWEEN pol_cur_rec.pol_policy_cover_from\n                                  AND pol_cur_rec.pol_policy_cover_to\n            THEN\n                raise_error (\n                       'THE RISK COVER DATES PROVIDED MUST BE WITHIN THE POLICY COVER PERIODS. '\n                    || pol_cur_rec.pol_policy_cover_from\n                    || ' TO '\n                    || pol_cur_rec.pol_policy_cover_to);\n            END IF;\n\n            BEGIN\n                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                       || gin_ipu_code_seq.NEXTVAL\n                  INTO v_new_ipu_code\n                  FROM DUAL;\n\n                INSERT INTO gin_schedule_mapping\n                     VALUES (v_new_ipu_code, NULL, v_batchno);\n\n                -- raise_Error('7777v_batch_no='||v_batchno);\n                INSERT INTO gin_insured_property_unds (\n                                ipu_code,\n                                ipu_property_id,\n                                ipu_item_desc,\n                                ipu_qty,\n                                ipu_value,\n                                ipu_wef,\n                                ipu_wet,\n                                ipu_pol_policy_no,\n                                ipu_pol_ren_endos_no,\n                                ipu_pol_batch_no,\n                                ipu_earth_quake_cover,\n                                ipu_earth_quake_prem,\n                                ipu_location,\n                                ipu_polin_code,\n                                ipu_sec_scl_code,\n                                ipu_ncd_status,\n                                ipu_related_ipu_code,\n                                ipu_prorata,\n                                ipu_gp,\n                                ipu_fap,\n                                ipu_prev_ipu_code,\n                                ipu_ncd_level,\n                                ipu_quz_code,\n                                ipu_quz_sht_desc,\n                                ipu_sht_desc,\n                                ipu_id,\n                                ipu_bind_code,\n                                ipu_excess_rate,\n                                ipu_excess_type,\n                                ipu_excess_rate_type,\n                                ipu_excess_min,\n                                ipu_excess_max,\n                                ipu_prereq_ipu_code,\n                                ipu_escalation_rate,\n                                ipu_comm_rate,\n                                ipu_prev_batch_no,\n                                ipu_cur_code,\n                                ipu_relr_code,\n                                ipu_relr_sht_desc,\n                                ipu_pol_est_max_loss,\n                                ipu_eff_wef,\n                                ipu_eff_wet,\n                                ipu_retro_cover,\n                                ipu_retro_wef,\n                                ipu_covt_code,\n                                ipu_covt_sht_desc,\n                                ipu_si_diff,\n                                ipu_terr_code,\n                                ipu_terr_desc,\n                                ipu_from_time,\n                                ipu_to_time,\n                                ipu_mar_cert_no,\n                                ipu_comp_retention,\n                                ipu_gross_comp_retention,\n                                ipu_com_retention_rate,\n                                ipu_prp_code,\n                                ipu_tot_endos_prem_dif,\n                                ipu_tot_gp,\n                                ipu_tot_value,\n                                ipu_ri_agnt_com_rate,\n                                ipu_cover_days,\n                                ipu_bp,\n                                ipu_prev_prem,\n                                ipu_ri_agnt_comm_amt,\n                                ipu_tot_fap,\n                                ipu_max_exposure,\n                                ipu_status,\n                                ipu_uw_yr,\n                                ipu_tot_first_loss,\n                                ipu_accumulation_limit,\n                                ipu_compute_max_exposure,\n                                ipu_reinsure_amt,\n                                ipu_paid_premium,\n                                ipu_trans_count,\n                                ipu_paid_tl,\n                                ipu_inception_uwyr,\n                                ipu_trans_eff_wet,\n                                ipu_eml_based_on,\n                                ipu_aggregate_limits,\n                                ipu_rc_sht_desc,\n                                ipu_rc_code,\n                                ipu_survey_date,\n                                ipu_item_details,\n                                ipu_prev_tot_fap,\n                                ipu_prev_fap,\n                                ipu_prev_reinsure_amt,\n                                ipu_free_limit,\n                                ipu_fp,\n                                ipu_conveyance_type,\n                                ipu_endose_fap_or_bc,\n                                ipu_mktr_com_rate,\n                                ipu_prev_status,\n                                ipu_ncd_cert_no,\n                                ipu_install_period,\n                                ipu_pymt_install_pcts,\n                                ipu_susp_reinstmt_type,\n                                ipu_cover_suspended,\n                                ipu_suspend_wef,\n                                ipu_suspend_wet,\n                                ipu_rs_code,\n                                ipu_rescue_mem,\n                                ipu_rescue_charge,\n                                ipu_post_retro_wet,\n                                ipu_post_retro_cover,\n                                ipu_previous_insurer,\n                                ipu_enforce_cvt_min_prem,\n                                ipu_eml_si,\n                                ipu_db_code)\n                         VALUES (\n                                    TO_NUMBER (v_new_ipu_code),    --IPU_CODE,\n                                    v_property_id,\n                                    --IPU_PROPERTY_ID,\n                                    v_ipu_desc,               --IPU_ITEM_DESC,\n                                    NULL,                           --IPU_QTY,\n                                    NULL,\n                                    --IPU_VALUE,\n                                    v_wef_date,                     --IPU_WEF,\n                                    v_wet_date,\n                                    --IPU_WET,\n                                    pol_cur_rec.pol_policy_no,\n                                    --IPU_POL_POLICY_NO,\n                                    pol_cur_rec.pol_ren_endos_no,\n                                    --IPU_POL_REN_ENDOS_NO,\n                                    v_batchno,\n                                    --IPU_POL_BATCH_NO,\n                                    NULL,             --IPU_EARTH_QUAKE_COVER,\n                                    NULL,              --IPU_EARTH_QUAKE_PREM,\n                                    NULL, --     v_ipu_data (i).ipu_risk_address,\n                                    --IPU_LOCATION,\n                                    v_new_polin_code,        --IPU_POLIN_CODE,\n                                    v_scl_code,\n                                    --IPU_SEC_SCL_CODE,\n                                    NULL,     --v_ipu_data (i).ipu_ncd_status,\n                                    --IPU_NCD_STATUS,\n                                    NULL,\n                                    --IPU_RELATED_IPU_CODE,\n                                    v_ipu_prorata,\n                                    --IPU_PRORATA,\n                                    NULL,                            --IPU_GP,\n                                    NULL,                           --IPU_FAP,\n                                    TO_NUMBER (v_new_ipu_code),\n                                    --ipu_prev_ipu_code,\n                                    NULL, --v_ipu_data (i).ipu_ncd_lvl, --IPU_NCD_LEVEL,\n                                    NULL, --v_ipu_data (i).ipu_quz_code, --IPU_QUZ_CODE,\n                                    NULL,\n                                    --v_quz_sht_desc,          --IPU_QUZ_SHT_DESC,\n                                    NULL,                      --IPU_SHT_DESC,\n                                       TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                                    || gin_ipu_id_seq.NEXTVAL,       --IPU_ID,\n                                    v_bind_code,\n                                    -- THIS IS ONLY APPLICABLE FOR BINDER POLICIES. CHECK THE BINDER LOV ON UND_QUERY TO ADD",
        "gin_ipu_stp_prc090216": "PROCEDURE gin_ipu_stp_prc090216 (v_batchno        IN     NUMBER,\n                                     v_bind_code      IN     NUMBER,\n                                     v_property_id    IN     VARCHAR2,\n                                     v_ipu_desc       IN     VARCHAR2,\n                                     -- v_limit      IN      NUMBER,\n                                     v_user           IN     VARCHAR2,\n                                     --v_rsk_sect_data               IN   web_sect_tab,\n                                     v_scl_code       IN     NUMBER,\n                                     v_covt_code      IN     NUMBER,\n                                     v_new_ipu_code      OUT NUMBER)\n    IS\n        v_loaded                   VARCHAR2 (1) DEFAULT 'N';\n        v_ipu_ncd_cert_no          VARCHAR2 (30) DEFAULT NULL;\n        v_del_sect                 VARCHAR2 (1) DEFAULT NULL;\n        v_cnt                      NUMBER;\n        v_new_polin_code           NUMBER;\n        v_uw_yr                    VARCHAR2 (1);\n        v_wef_date                 DATE;\n        v_wet_date                 DATE;\n        v_cover_days               NUMBER;\n        v_bind_name                VARCHAR2 (100);\n        v_cert_no                  VARCHAR2 (35);\n        v_quz_sht_desc             VARCHAR2 (35);\n        --v_count                                NUMBER;\n        v_uw_trans                 VARCHAR2 (1);\n        v_ren_cnt                  NUMBER;\n        v_ipu_prev_status          VARCHAR2 (35);\n        v_ipu_prorata              VARCHAR2 (2);\n        v_pol_tot_instlmt          NUMBER;\n        v_pymnt_tot_instlmt        NUMBER;\n        v_install_pct              NUMBER;\n        v_ipu_id                   NUMBER;\n        v_cer_cnt                  NUMBER;\n        v_ct_code                  NUMBER;\n        v_error                    VARCHAR2 (200);\n        v_cer_cnt                  NUMBER;\n        v_ipu_id                   NUMBER;\n        v_install_period           NUMBER;\n        v_polc_code                NUMBER;\n        v_risk_pymt_install_pcts   VARCHAR2 (50);\n        v_susp_reinst_type         VARCHAR2 (5);\n        v_suspend_wef              DATE;\n        v_suspend_wet              DATE;\n        v_new_pol_wet              DATE;\n        v_rsk_trans_type           VARCHAR2 (3);\n        v_pol_instal_wet           DATE;\n        v_wef                      DATE;\n        v_prev_install_period      NUMBER;\n        v_increment_by             NUMBER;\n        v_increment                VARCHAR2 (2);\n        v_interface_type           VARCHAR2 (50);\n        v_cnt1                     NUMBER;\n        v_risk_id_format           VARCHAR2 (50);\n        v_risk_id_format_param     VARCHAR2 (50);\n        v_id_reg_no                VARCHAR2 (50);\n        v_clnt_pin_no              VARCHAR2 (50);\n        v_ipu_covt_code            NUMBER;\n        v_clnt_passport_no         VARCHAR2 (50);\n        v_agent_code               NUMBER;\n        v_agn_pin                  VARCHAR2 (50);\n        v_max_exposure             NUMBER;\n        v_pol_status               VARCHAR2 (10);\n        v_enforce_covt_prem        VARCHAR2 (1);\n        v_cert_autogen             VARCHAR2 (1);\n        v_agnt_agent_code          NUMBER;\n        v_trans_type               VARCHAR2 (5);\n        v_covt_sht_desc            VARCHAR2 (20);\n\n        CURSOR pol_cur IS\n            SELECT gin_policies.*,\n                   NVL (pro_expiry_period, 'Y')     pro_expiry_period,\n                   NVL (pol_open_cover, 'N')        pro_open_cover,\n                   NVL (pro_earthquake, 'N')        pro_earthquake,\n                   NVL (pro_moto_verfy, 'N')        pro_moto_verfy,\n                   NVL (pro_stp, 'N')               pro_stp\n              FROM gin_policies, gin_products\n             WHERE pro_code = pol_pro_code AND pol_batch_no = v_batchno;\n    BEGIN\n        v_trans_type := 'NB';\n\n        SELECT bind_name\n          INTO v_bind_name\n          FROM gin_binders\n         WHERE bind_code = v_bind_code;\n\n        --RAISE_eRROR(v_bind_code|| ' = '||v_scl_code);\n        --                    SELECT db_covt_code\n        --                      INTO v_covt_code\n        --                      FROM gin_binder_details\n        --                     WHERE db_bind_code = v_bind_code;\n        SELECT covt_sht_desc\n          INTO v_covt_sht_desc\n          FROM gin_cover_types\n         WHERE covt_code = v_covt_code;\n\n        SELECT scl_bond_subclass\n          INTO v_cert_autogen\n          FROM gin_sub_classes\n         WHERE scl_code = v_scl_code;\n\n        FOR pol_cur_rec IN pol_cur\n        LOOP\n            IF pol_cur_rec.pol_policy_status = 'NB'\n            THEN\n                v_enforce_covt_prem := 'Y';\n            END IF;\n\n            IF    NVL (pol_cur_rec.pol_binder_policy, 'N') = 'Y'\n               OR NVL (pol_cur_rec.pro_open_cover, 'N') = 'Y'\n            THEN\n                v_uw_yr := 'R';\n            ELSE\n                v_uw_yr := 'P';\n            END IF;\n\n            v_wef_date := pol_cur_rec.pol_policy_cover_from;\n            v_wet_date := pol_cur_rec.pol_policy_cover_to;\n            -- raise_error(pol_cur_rec.pol_policy_cover_from||' = '||pol_cur_rec.pol_policy_cover_to);\n            v_wef := v_wef_date;\n\n            BEGIN\n                IF v_pol_instal_wet != pol_cur_rec.pol_paid_to_date\n                THEN\n                    UPDATE gin_policies\n                       SET pol_paid_to_date = v_pol_instal_wet\n                     WHERE pol_batch_no = v_batchno;\n                END IF;\n            END;\n\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM gin_policy_insureds\n                 WHERE     polin_pol_batch_no = v_batchno\n                       AND polin_prp_code = pol_cur_rec.pol_prp_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error checking if insured already exists');\n            END;\n\n            IF NVL (v_cnt, 0) = 0\n            THEN\n                BEGIN\n                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                           || polin_code_seq.NEXTVAL\n                      INTO v_new_polin_code\n                      FROM DUAL;\n\n                    INSERT INTO gin_policy_insureds (polin_code,\n                                                     polin_pol_policy_no,\n                                                     polin_pol_ren_endos_no,\n                                                     polin_pol_batch_no,\n                                                     polin_prp_code,\n                                                     polin_new_insured)\n                         VALUES (v_new_polin_code,\n                                 pol_cur_rec.pol_policy_no,\n                                 pol_cur_rec.pol_ren_endos_no,\n                                 v_batchno,\n                                 pol_cur_rec.pol_prp_code,\n                                 'Y');\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('ERROR SAVING INSURED DETAILS..');\n                END;\n            ELSE\n                BEGIN\n                    SELECT polin_code\n                      INTO v_new_polin_code\n                      FROM gin_policy_insureds\n                     WHERE     polin_pol_batch_no = v_batchno\n                           AND polin_prp_code = pol_cur_rec.pol_prp_code;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                            'ERROR CHECKING IF INSURED ALREADY EXISTS');\n                END;\n            END IF;\n\n            v_ipu_prorata := 'P';    -- NVL (v_ipu_data (i).ipu_prorata, 'P');\n\n            IF v_wef_date NOT BETWEEN pol_cur_rec.pol_policy_cover_from\n                                  AND pol_cur_rec.pol_policy_cover_to\n            THEN\n                raise_error (\n                       'THE RISK COVER DATES PROVIDED MUST BE WITHIN THE POLICY COVER PERIODS. '\n                    || pol_cur_rec.pol_policy_cover_from\n                    || ' TO '\n                    || pol_cur_rec.pol_policy_cover_to);\n            END IF;\n\n            IF v_wet_date NOT BETWEEN pol_cur_rec.pol_policy_cover_from\n                                  AND pol_cur_rec.pol_policy_cover_to\n            THEN\n                raise_error (\n                       'THE RISK COVER DATES PROVIDED MUST BE WITHIN THE POLICY COVER PERIODS. '\n                    || pol_cur_rec.pol_policy_cover_from\n                    || ' TO '\n                    || pol_cur_rec.pol_policy_cover_to);\n            END IF;\n\n            BEGIN\n                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                       || gin_ipu_code_seq.NEXTVAL\n                  INTO v_new_ipu_code\n                  FROM DUAL;\n\n                INSERT INTO gin_schedule_mapping\n                     VALUES (v_new_ipu_code, NULL, v_batchno);\n\n                -- raise_Error('7777v_batch_no='||v_batchno);\n                INSERT INTO gin_insured_property_unds (\n                                ipu_code,\n                                ipu_property_id,\n                                ipu_item_desc,\n                                ipu_qty,\n                                ipu_value,\n                                ipu_wef,\n                                ipu_wet,\n                                ipu_pol_policy_no,\n                                ipu_pol_ren_endos_no,\n                                ipu_pol_batch_no,\n                                ipu_earth_quake_cover,\n                                ipu_earth_quake_prem,\n                                ipu_location,\n                                ipu_polin_code,\n                                ipu_sec_scl_code,\n                                ipu_ncd_status,\n                                ipu_related_ipu_code,\n                                ipu_prorata,\n                                ipu_gp,\n                                ipu_fap,\n                                ipu_prev_ipu_code,\n                                ipu_ncd_level,\n                                ipu_quz_code,\n                                ipu_quz_sht_desc,\n                                ipu_sht_desc,\n                                ipu_id,\n                                ipu_bind_code,\n                                ipu_excess_rate,\n                                ipu_excess_type,\n                                ipu_excess_rate_type,\n                                ipu_excess_min,\n                                ipu_excess_max,\n                                ipu_prereq_ipu_code,\n                                ipu_escalation_rate,\n                                ipu_comm_rate,\n                                ipu_prev_batch_no,\n                                ipu_cur_code,\n                                ipu_relr_code,\n                                ipu_relr_sht_desc,\n                                ipu_pol_est_max_loss,\n                                ipu_eff_wef,\n                                ipu_eff_wet,\n                                ipu_retro_cover,\n                                ipu_retro_wef,\n                                ipu_covt_code,\n                                ipu_covt_sht_desc,\n                                ipu_si_diff,\n                                ipu_terr_code,\n                                ipu_terr_desc,\n                                ipu_from_time,\n                                ipu_to_time,\n                                ipu_mar_cert_no,\n                                ipu_comp_retention,\n                                ipu_gross_comp_retention,\n                                ipu_com_retention_rate,\n                                ipu_prp_code,\n                                ipu_tot_endos_prem_dif,\n                                ipu_tot_gp,\n                                ipu_tot_value,\n                                ipu_ri_agnt_com_rate,\n                                ipu_cover_days,\n                                ipu_bp,\n                                ipu_prev_prem,\n                                ipu_ri_agnt_comm_amt,\n                                ipu_tot_fap,\n                                ipu_max_exposure,\n                                ipu_status,\n                                ipu_uw_yr,\n                                ipu_tot_first_loss,\n                                ipu_accumulation_limit,\n                                ipu_compute_max_exposure,\n                                ipu_reinsure_amt,\n                                ipu_paid_premium,\n                                ipu_trans_count,\n                                ipu_paid_tl,\n                                ipu_inception_uwyr,\n                                ipu_trans_eff_wet,\n                                ipu_eml_based_on,\n                                ipu_aggregate_limits,\n                                ipu_rc_sht_desc,\n                                ipu_rc_code,\n                                ipu_survey_date,\n                                ipu_item_details,\n                                ipu_prev_tot_fap,\n                                ipu_prev_fap,\n                                ipu_prev_reinsure_amt,\n                                ipu_free_limit,\n                                ipu_fp,\n                                ipu_conveyance_type,\n                                ipu_endose_fap_or_bc,\n                                ipu_mktr_com_rate,\n                                ipu_prev_status,\n                                ipu_ncd_cert_no,\n                                ipu_install_period,\n                                ipu_pymt_install_pcts,\n                                ipu_susp_reinstmt_type,\n                                ipu_cover_suspended,\n                                ipu_suspend_wef,\n                                ipu_suspend_wet,\n                                ipu_rs_code,\n                                ipu_rescue_mem,\n                                ipu_rescue_charge,\n                                ipu_post_retro_wet,\n                                ipu_post_retro_cover,\n                                ipu_previous_insurer,\n                                ipu_enforce_cvt_min_prem,\n                                ipu_eml_si)\n                         VALUES (\n                                    TO_NUMBER (v_new_ipu_code),    --IPU_CODE,\n                                    v_property_id,\n                                    --IPU_PROPERTY_ID,\n                                    v_ipu_desc,               --IPU_ITEM_DESC,\n                                    NULL,                           --IPU_QTY,\n                                    NULL,\n                                    --IPU_VALUE,\n                                    v_wef_date,                     --IPU_WEF,\n                                    v_wet_date,\n                                    --IPU_WET,\n                                    pol_cur_rec.pol_policy_no,\n                                    --IPU_POL_POLICY_NO,\n                                    pol_cur_rec.pol_ren_endos_no,\n                                    --IPU_POL_REN_ENDOS_NO,\n                                    v_batchno,\n                                    --IPU_POL_BATCH_NO,\n                                    NULL,             --IPU_EARTH_QUAKE_COVER,\n                                    NULL,              --IPU_EARTH_QUAKE_PREM,\n                                    NULL, --     v_ipu_data (i).ipu_risk_address,\n                                    --IPU_LOCATION,\n                                    v_new_polin_code,        --IPU_POLIN_CODE,\n                                    v_scl_code,\n                                    --IPU_SEC_SCL_CODE,\n                                    NULL,     --v_ipu_data (i).ipu_ncd_status,\n                                    --IPU_NCD_STATUS,\n                                    NULL,\n                                    --IPU_RELATED_IPU_CODE,\n                                    v_ipu_prorata,\n                                    --IPU_PRORATA,\n                                    NULL,                            --IPU_GP,\n                                    NULL,                           --IPU_FAP,\n                                    TO_NUMBER (v_new_ipu_code),\n                                    --ipu_prev_ipu_code,\n                                    NULL, --v_ipu_data (i).ipu_ncd_lvl, --IPU_NCD_LEVEL,\n                                    NULL, --v_ipu_data (i).ipu_quz_code, --IPU_QUZ_CODE,\n                                    NULL,\n                                    --v_quz_sht_desc,          --IPU_QUZ_SHT_DESC,\n                                    NULL,                      --IPU_SHT_DESC,\n                                       TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                                    || gin_ipu_id_seq.NEXTVAL,       --IPU_ID,\n                                    v_bind_code,\n                                    -- THIS IS ONLY APPLICABLE FOR BINDER POLICIES. CHECK THE BINDER LOV ON UND_QUERY TO ADD",
        "gin_rsk_stp_limits": "PROCEDURE gin_rsk_stp_limits (v_new_ipu_code    IN NUMBER,\n                                  v_scl_code        IN NUMBER,\n                                  v_bind_code       IN NUMBER,\n                                  v_row             IN NUMBER,\n                                  v_add_edit        IN VARCHAR2,\n                                  v_covt_code       IN NUMBER,\n                                  v_rsk_sect_data   IN web_sect_tab,\n                                  v_dbcode          IN NUMBER)\n    IS\n        v_sect_sht_desc            VARCHAR2 (30);\n        v_sect_desc                VARCHAR2 (80);\n        v_sect_type                VARCHAR2 (30);\n        v_type_desc                VARCHAR2 (30);\n        v_prr_rate_type            VARCHAR2 (10);\n        v_prr_rate                 NUMBER;\n        v_terr_description         VARCHAR2 (30);\n        v_prr_prem_minimum_amt     NUMBER;\n        v_prr_multiplier_rate      NUMBER;\n        v_prr_division_factor      NUMBER;\n        v_prr_multplier_div_fact   NUMBER;\n        v_prr_rate_desc            VARCHAR2 (30);\n        v_cnt                      NUMBER;\n        v_cover_days               NUMBER;\n        v_prrd_max_rate            NUMBER;\n        v_prrd_min_rate            NUMBER;\n        v_age                      NUMBER;\n        v_cur_code                 NUMBER;\n        v_batch_no                 NUMBER;\n        v_count                    NUMBER := 0;\n        v_dec_section              VARCHAR2 (5);\n\n        CURSOR pil_cur (v_db_code     IN NUMBER,\n                        vrange        IN NUMBER,\n                        vfreg         IN VARCHAR2,\n                        v_sect_code      NUMBER)\n        IS\n            SELECT sect_sht_desc,\n                   sect_desc,\n                   sect_type,\n                   type_desc,\n                   prr_rate_type,\n                   prr_rate,\n                   terr_description,\n                   prr_prem_minimum_amt,\n                   prr_multiplier_rate,\n                   prr_division_factor,\n                   prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_max_rate,\n                   prr_min_rate,\n                   prr_prorated_full,\n                   prr_free_limit,\n                   sect_code,\n                   prr_si_limit_type\n              FROM (SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate,\n                           prr_prorated_full,\n                           prr_free_limit,\n                           prr_si_limit_type\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND prr_sect_code = v_sect_code\n                           AND sect_sht_desc != 'NCD'\n                           AND sect_type NOT IN ('GR',\n                                                 'GD',\n                                                 'OM',\n                                                 'OD',\n                                                 'VD',\n                                                 'VL',\n                                                 'LD',\n                                                 'L',\n                                                 'UD',\n                                                 'VU',\n                                                 'NA',\n                                                 'DL',\n                                                 'DL',\n                                                 'MM',\n                                                 'MD',\n                                                 'ND',\n                                                 'CL',\n                                                 'NC',\n                                                 'VH',\n                                                 'TL')\n                           AND prr_db_code = v_db_code\n                           AND NVL (prr_rate_freq_type, 'A') =\n                               NVL (vfreg, 'A')\n                           AND prr_rate_type = 'FXD'\n                           AND NVL (vrange, 0) BETWEEN NVL (prr_range_from,\n                                                            0)\n                                                   AND NVL (prr_range_to, 0)\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate,\n                           prr_prorated_full,\n                           prr_free_limit,\n                           prr_si_limit_type\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND prr_db_code = v_db_code\n                           AND prr_sect_code = v_sect_code\n                           AND sect_type NOT IN ('GR',\n                                                 'GD',\n                                                 'OM',\n                                                 'OD',\n                                                 'VD',\n                                                 'VL',\n                                                 'LD',\n                                                 'L',\n                                                 'UD',\n                                                 'VU',\n                                                 'NA',\n                                                 'DL',\n                                                 'DL',\n                                                 'MM',\n                                                 'MD',\n                                                 'ND',\n                                                 'CL',\n                                                 'NC',\n                                                 'VH',\n                                                 'TL')\n                           AND prr_rate_type IN ('SRG', 'RCU')\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate,\n                           prr_prorated_full,\n                           prr_free_limit,\n                           prr_si_limit_type\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND prr_db_code = v_db_code\n                           AND prr_sect_code = v_sect_code\n                           AND sect_type != 'ND'\n                           AND sect_type NOT IN ('GR',\n                                                 'GD',\n                                                 'OM',\n                                                 'OD',\n                                                 'VD',\n                                                 'VL',\n                                                 'LD',\n                                                 'L',\n                                                 'UD',\n                                                 'VU',\n                                                 'NA',\n                                                 'DL',\n                                                 'DL',\n                                                 'MM',\n                                                 'MD',\n                                                 'ND',\n                                                 'CL',\n                                                 'NC',\n                                                 'VH',\n                                                 'TL')\n                           AND prr_rate_type = 'ARG'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'ND', 'NCD')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate,\n                           prr_prorated_full,\n                           prr_free_limit,\n                           prr_si_limit_type\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND prr_sect_code = v_sect_code\n                           AND prr_db_code = v_db_code\n                           AND sect_type NOT IN ('GR',\n                                                 'GD',\n                                                 'OM',\n                                                 'OD',\n                                                 'VD',\n                                                 'VL',\n                                                 'LD',\n                                                 'L',\n                                                 'UD',\n                                                 'VU',\n                                                 'NA',\n                                                 'DL',\n                                                 'DL',\n                                                 'MM',\n                                                 'MD',\n                                                 'ND',\n                                                 'CL',\n                                                 'NC',\n                                                 'VH',\n                                                 'TL')\n                           AND sect_type = 'ND');\n\n        v_freq                     VARCHAR2 (2);\n        v_range                    NUMBER;\n        v_alb_required             VARCHAR2 (2);\n        v_pol_status               VARCHAR2 (10);\n        v_prr_prorated_full        VARCHAR2 (10);\n        v_prr_free_limit           NUMBER;\n        v_sect_code                NUMBER;\n        v_prr_si_limit_type        VARCHAR2 (10);\n    -- v_dbcode                   NUMBER;\n    BEGIN\n        --      BEGIN\n        --         SELECT db_code\n        --           INTO v_dbcode\n        --           FROM gin_binder_details\n        --          WHERE db_bind_code = v_bind_code\n        --            AND db_scl_code = v_scl_code\n        --            AND db_covt_code = v_covt_code;\n\n        --         IF v_dbcode IS NULL\n        --         THEN\n        --            raise_error ('Binder Details have not been set up');\n        --         END IF;\n        --      EXCEPTION\n        --         WHEN OTHERS\n        --         THEN\n        --            raise_error ('Error getting the premium rates for 1st section..');\n        --      END;\n        FOR x IN 1 .. v_rsk_sect_data.COUNT\n        LOOP\n            OPEN pil_cur (v_dbcode,\n                          v_range,\n                          v_freq,\n                          v_rsk_sect_data (x).pil_sect_code);\n\n            LOOP\n                EXIT WHEN pil_cur%NOTFOUND;\n\n                FETCH pil_cur\n                    INTO v_sect_sht_desc,\n                         v_sect_desc,\n                         v_sect_type,\n                         v_type_desc,\n                         v_prr_rate_type,\n                         v_prr_rate,\n                         v_terr_description,\n                         v_prr_prem_minimum_amt,\n                         v_prr_multiplier_rate,\n                         v_prr_division_factor,\n                         v_prr_multplier_div_fact,\n                         v_prr_rate_desc,\n                         v_prrd_max_rate,\n                         v_prrd_min_rate,\n                         v_prr_prorated_full,\n                         v_prr_free_limit,\n                         v_sect_code,\n                         v_prr_si_limit_type;\n            END LOOP;\n\n            CLOSE pil_cur;\n\n            IF NVL (v_add_edit, 'A') = 'A'\n            THEN\n                BEGIN\n                    IF v_prr_rate_type IS NULL\n                    THEN\n                        raise_error (\n                            'Error getting Rate Type...Please specify rate type..1..');\n                    END IF;\n\n                    IF v_pol_status = 'DC'\n                    THEN\n                        raise_error (\n                            'You cannot add a section to a declaration...');\n                    END IF;\n\n                    --raise_error('pil_limit_amt='||v_rsk_sect_data(1).pil_limit_amt);\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    --pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    --pil_prd_type,\n                                    --pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    --pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    -- pil_comment,\n                                    pil_free_limit,\n                                    pil_limit_prd,\n                                    pil_prorata_full,\n                                    pil_si_limit_type,\n                                    --pil_si_rate,\n                                    --pil_cover_type,\n                                    pil_min_premium,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate                       --,\n                                                    --pil_indem_prd,\n                                                    --pil_indem_fstprd,\n                                                    --pil_indem_fstprd_pct,\n                                                    --pil_indem_remprd_pct,\n                                                    --pil_eml_pct,\n                                                    --pil_top_loc_rate--,\n                                                    --pil_top_loc_div_fact\n                                                    )\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        v_rsk_sect_data (x).pil_sect_code,\n                                        --p.PIL_SECT_CODE,\n                                        v_sect_sht_desc,\n                                        v_sect_desc,\n                                        --NVL (p.pil_desc, v_sect_desc),\n                                        NVL (v_rsk_sect_data (x).pil_row_num,\n                                             1),\n                                        --,NVL (v_row, 1),\n                                        NVL (\n                                            v_rsk_sect_data (x).pil_calc_group,\n                                            1),\n                                        ----1,--NVL (p.pil_calc_group, 1),\n                                        v_rsk_sect_data (x).pil_limit_amt,\n                                        --p.pil_limit_amt,\n                                        v_prr_rate,\n                                        --NVL (p.pil_prem_rate,v_prr_rate),\n                                        --NVL (p.pil_prem_amt, 0),\n                                        v_prr_rate_type,\n                                        v_prr_rate_desc,\n                                        v_sect_type,\n                                        v_prr_rate,\n                                        v_prr_multiplier_rate,\n                                        --NVL (p.pil_multiplier_rate, v_prr_multiplier_rate),\n                                        v_prr_multplier_div_fact,\n                                        --NVL (p.pil_multiplier_div_factor,v_prr_multplier_div_fact),\n                                        0,\n                                        v_prr_division_factor,\n                                        --NVL (p.pil_rate_div_fact,v_prr_division_factor ),\n\n                                        --v_type_desc,\n                                        'Y',       --NVL (p.pil_compute, 'Y'),\n                                        --p.pil_prd_type,\n                                        --NVL (p.pil_dual_basis, 'N'),\n                                        0,\n                                        -- NVL (v_rsk_sect_data (1).pil_declaration_section,\n                                        --     'N' ),\n                                        0,\n                                        --p.pil_comment,\n                                        v_prr_free_limit, --p.pil_free_limit_amt,\n                                        0,                  --p.pil_limit_prd,\n                                        v_prr_prorated_full,\n                                        --p.prr_prorated_full,\n                                        v_prr_si_limit_type, --p.pil_si_limit_type,\n                                        --p.pil_si_rate,\n                                        --p.pil_cover_type,\n                                        v_prr_prem_minimum_amt,\n                                        --NVL (p.prr_prem_minimum_amt, v_prr_prem_minimum_amt),\n                                        v_prrd_max_rate,\n                                        v_prrd_min_rate                    --,\n                                                       --p.pil_indem_prd,\n                                                       --p.pil_indem_fstprd,\n                                                       --p.pil_indem_fstprd_pct,\n                                                       --p.pil_indem_remprd_pct,\n                                                       --p.pil_eml_pct,\n                                                       --p.pil_top_loc_rate,\n                                                       --p.pil_top_loc_div_fact\n                                                       );\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                               'Error inserting risk sections..'\n                            || v_dbcode\n                            || '='\n                            || v_rsk_sect_data (x).pil_sect_code);\n                END;\n            END IF;\n\n            BEGIN\n                UPDATE gin_policies\n                   SET pol_prem_computed = 'N'\n                 WHERE pol_batch_no = (SELECT ipu_pol_batch_no\n                                         FROM gin_insured_property_unds\n                                        WHERE ipu_code = v_new_ipu_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error updating policy premium status to changed');\n            END;\n        END LOOP;\n    END;",
        "gin_rsk_stp_limits090216": "PROCEDURE gin_rsk_stp_limits090216 (v_new_ipu_code    IN NUMBER,\n                                        v_scl_code        IN NUMBER,\n                                        v_bind_code       IN NUMBER,\n                                        v_row             IN NUMBER,\n                                        v_add_edit        IN VARCHAR2,\n                                        v_covt_code       IN NUMBER,\n                                        v_rsk_sect_data   IN web_sect_tab)\n    IS\n        v_sect_sht_desc            VARCHAR2 (30);\n        v_sect_desc                VARCHAR2 (80);\n        v_sect_type                VARCHAR2 (30);\n        v_type_desc                VARCHAR2 (30);\n        v_prr_rate_type            VARCHAR2 (10);\n        v_prr_rate                 NUMBER;\n        v_terr_description         VARCHAR2 (30);\n        v_prr_prem_minimum_amt     NUMBER;\n        v_prr_multiplier_rate      NUMBER;\n        v_prr_division_factor      NUMBER;\n        v_prr_multplier_div_fact   NUMBER;\n        v_prr_rate_desc            VARCHAR2 (30);\n        v_cnt                      NUMBER;\n        v_cover_days               NUMBER;\n        v_prrd_max_rate            NUMBER;\n        v_prrd_min_rate            NUMBER;\n        v_age                      NUMBER;\n        v_cur_code                 NUMBER;\n        v_batch_no                 NUMBER;\n        v_count                    NUMBER := 0;\n        v_dec_section              VARCHAR2 (5);\n\n        CURSOR pil_cur (v_bind_code   IN NUMBER,\n                        v_scl_code    IN NUMBER,\n                        vrange        IN NUMBER,\n                        vfreg         IN VARCHAR2,\n                        v_covt_code   IN NUMBER)\n        IS\n            SELECT sect_sht_desc,\n                   sect_desc,\n                   sect_type,\n                   type_desc,\n                   prr_rate_type,\n                   prr_rate,\n                   terr_description,\n                   prr_prem_minimum_amt,\n                   prr_multiplier_rate,\n                   prr_division_factor,\n                   prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_max_rate,\n                   prr_min_rate,\n                   prr_prorated_full,\n                   prr_free_limit,\n                   sect_code,\n                   prr_si_limit_type\n              FROM (SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate,\n                           prr_prorated_full,\n                           prr_free_limit,\n                           prr_si_limit_type\n                      FROM gin_premium_rates,\n                           gin_sections,\n                           gin_subcl_sections,\n                           gin_subcl_covt_sections,\n                           gin_binders,\n                           gin_binder_details\n                     WHERE     prr_sect_code = sect_code\n                           AND sec_sect_code = prr_sect_code\n                           AND sec_scl_code = prr_scl_code\n                           AND sect_sht_desc != 'NCD'\n                           AND bind_code = db_bind_code\n                           AND sect_type NOT IN ('GR',\n                                                 'GD',\n                                                 'OM',\n                                                 'OD',\n                                                 'VD',\n                                                 'VL',\n                                                 'LD',\n                                                 'L',\n                                                 'UD',\n                                                 'VU',\n                                                 'NA',\n                                                 'DL',\n                                                 'DL',\n                                                 'MM',\n                                                 'MD',\n                                                 'ND',\n                                                 'CL',\n                                                 'NC',\n                                                 'VH')\n                           AND bind_type = 'Q'\n                           AND db_scl_code = prr_scl_code\n                           AND db_covt_code = scvts_covt_code\n                           AND db_covt_code = v_covt_code\n                           AND prr_scl_code = v_scl_code\n                           AND prr_bind_code = v_bind_code\n                           AND scvts_scl_code = v_scl_code\n                           AND sect_code = scvts_sect_code\n                           AND NVL (prr_rate_freq_type, 'A') =\n                               NVL (vfreg, 'A')\n                           AND prr_rate_type = 'FXD'\n                           AND NVL (vrange, 0) BETWEEN NVL (prr_range_from,\n                                                            0)\n                                                   AND NVL (prr_range_to, 0)\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate,\n                           prr_prorated_full,\n                           prr_free_limit,\n                           prr_si_limit_type\n                      FROM gin_premium_rates,\n                           gin_sections,\n                           gin_binders,\n                           gin_binder_details\n                     WHERE     prr_sect_code = sect_code\n                           AND prr_bind_code = v_bind_code\n                           AND prr_scl_code = v_scl_code\n                           AND db_covt_code = v_covt_code\n                           AND bind_code = db_bind_code\n                           AND bind_type = 'Q'\n                           AND db_scl_code = prr_scl_code\n                           AND sect_type NOT IN ('GR',\n                                                 'GD',\n                                                 'OM',\n                                                 'OD',\n                                                 'VD',\n                                                 'VL',\n                                                 'LD',\n                                                 'L',\n                                                 'UD',\n                                                 'VU',\n                                                 'NA',\n                                                 'DL',\n                                                 'DL',\n                                                 'MM',\n                                                 'MD',\n                                                 'ND',\n                                                 'CL',\n                                                 'NC',\n                                                 'VH')\n                           AND prr_rate_type IN ('SRG', 'RCU')\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate,\n                           prr_prorated_full,\n                           prr_free_limit,\n                           prr_si_limit_type\n                      FROM gin_premium_rates,\n                           gin_sections,\n                           gin_binders,\n                           gin_binder_details\n                     WHERE     prr_sect_code = sect_code\n                           AND prr_bind_code = v_bind_code\n                           AND prr_scl_code = v_scl_code\n                           AND bind_type = 'Q'\n                           AND db_scl_code = prr_scl_code\n                           AND bind_code = db_bind_code\n                           AND db_covt_code = v_covt_code\n                           AND sect_type != 'ND'\n                           AND sect_type NOT IN ('GR',\n                                                 'GD',\n                                                 'OM',\n                                                 'OD',\n                                                 'VD',\n                                                 'VL',\n                                                 'LD',\n                                                 'L',\n                                                 'UD',\n                                                 'VU',\n                                                 'NA',\n                                                 'DL',\n                                                 'DL',\n                                                 'MM',\n                                                 'MD',\n                                                 'ND',\n                                                 'CL',\n                                                 'NC',\n                                                 'VH')\n                           AND prr_rate_type = 'ARG'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'ND', 'NCD')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate,\n                           prr_prorated_full,\n                           prr_free_limit,\n                           prr_si_limit_type\n                      FROM gin_premium_rates,\n                           gin_sections,\n                           gin_binders,\n                           gin_binder_details\n                     WHERE     prr_sect_code = sect_code\n                           AND prr_bind_code = v_bind_code\n                           AND prr_scl_code = v_scl_code\n                           AND bind_type = 'Q'\n                           AND sect_type NOT IN ('GR',\n                                                 'GD',\n                                                 'OM',\n                                                 'OD',\n                                                 'VD',\n                                                 'VL',\n                                                 'LD',\n                                                 'L',\n                                                 'UD',\n                                                 'VU',\n                                                 'NA',\n                                                 'DL',\n                                                 'DL',\n                                                 'MM',\n                                                 'MD',\n                                                 'ND',\n                                                 'CL',\n                                                 'NC',\n                                                 'VH')\n                           AND db_scl_code = prr_scl_code\n                           AND bind_code = db_bind_code\n                           AND db_covt_code = v_covt_code\n                           AND sect_type = 'ND');\n\n        v_freq                     VARCHAR2 (2);\n        v_range                    NUMBER;\n        v_alb_required             VARCHAR2 (2);\n        v_pol_status               VARCHAR2 (10);\n        v_prr_prorated_full        VARCHAR2 (10);\n        v_prr_free_limit           NUMBER;\n        v_sect_code                NUMBER;\n        v_prr_si_limit_type        VARCHAR2 (10);\n    BEGIN\n        BEGIN\n            OPEN pil_cur (v_bind_code,\n                          v_scl_code,\n                          v_range,\n                          v_freq,\n                          v_covt_code);\n\n            LOOP\n                EXIT WHEN pil_cur%NOTFOUND;\n\n                FETCH pil_cur\n                    INTO v_sect_sht_desc,\n                         v_sect_desc,\n                         v_sect_type,\n                         v_type_desc,\n                         v_prr_rate_type,\n                         v_prr_rate,\n                         v_terr_description,\n                         v_prr_prem_minimum_amt,\n                         v_prr_multiplier_rate,\n                         v_prr_division_factor,\n                         v_prr_multplier_div_fact,\n                         v_prr_rate_desc,\n                         v_prrd_max_rate,\n                         v_prrd_min_rate,\n                         v_prr_prorated_full,\n                         v_prr_free_limit,\n                         v_sect_code,\n                         v_prr_si_limit_type;\n            END LOOP;\n\n            CLOSE pil_cur;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                    'Error getting the premium rates for 1st section..');\n        END;\n\n        --RAISE_ERROR(v_bind_code||'='||v_scl_code||'='||v_range||'='||v_freq||'='||v_covt_code);\n        FOR p IN pil_cur (v_bind_code,\n                          v_scl_code,\n                          v_range,\n                          v_freq,\n                          v_covt_code)\n        LOOP\n            IF NVL (v_add_edit, 'A') = 'A'\n            THEN\n                BEGIN\n                    IF v_prr_rate_type IS NULL\n                    THEN\n                        raise_error (\n                            'Error getting Rate Type...Please specify rate type..2..');\n                    END IF;\n\n                    IF v_pol_status = 'DC'\n                    THEN\n                        raise_error (\n                            'You cannot add a section to a declaration...');\n                    END IF;\n\n                    --raise_error('pil_limit_amt='||v_rsk_sect_data(1).pil_limit_amt);\n                    INSERT INTO gin_policy_insured_limits (\n                                    pil_code,\n                                    pil_ipu_code,\n                                    pil_sect_code,\n                                    pil_sect_sht_desc,\n                                    pil_desc,\n                                    pil_row_num,\n                                    pil_calc_group,\n                                    pil_limit_amt,\n                                    pil_prem_rate,\n                                    --pil_prem_amt,\n                                    pil_rate_type,\n                                    pil_rate_desc,\n                                    pil_sect_type,\n                                    pil_original_prem_rate,\n                                    pil_multiplier_rate,\n                                    pil_multiplier_div_factor,\n                                    pil_annual_premium,\n                                    pil_rate_div_fact,\n                                    --PIL_DESC,\n                                    pil_compute,\n                                    --pil_prd_type,\n                                    --pil_dual_basis,\n                                    pil_prem_accumulation,\n                                    --pil_declaration_section,\n                                    pil_annual_actual_prem,\n                                    -- pil_comment,\n                                    pil_free_limit,\n                                    pil_limit_prd,\n                                    pil_prorata_full,\n                                    pil_si_limit_type,\n                                    --pil_si_rate,\n                                    --pil_cover_type,\n                                    pil_min_premium,\n                                    pil_prr_max_rate,\n                                    pil_prr_min_rate                       --,\n                                                    --pil_indem_prd,\n                                                    --pil_indem_fstprd,\n                                                    --pil_indem_fstprd_pct,\n                                                    --pil_indem_remprd_pct,\n                                                    --pil_eml_pct,\n                                                    --pil_top_loc_rate--,\n                                                    --pil_top_loc_div_fact\n                                                    )\n                             VALUES (\n                                           TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'RRRR'))\n                                        || gin_pil_code_seq.NEXTVAL,\n                                        v_new_ipu_code,\n                                        v_sect_code,        --p.PIL_SECT_CODE,\n                                        v_sect_sht_desc,\n                                        v_sect_desc, --NVL (p.pil_desc, v_sect_desc),\n                                        NVL (v_rsk_sect_data (1).pil_row_num,\n                                             1),\n                                        --,NVL (v_row, 1),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_calc_group,\n                                            1),\n                                        ----1,--NVL (p.pil_calc_group, 1),\n                                        v_rsk_sect_data (1).pil_limit_amt,\n                                        --p.pil_limit_amt,\n                                        v_prr_rate,\n                                        --NVL (p.pil_prem_rate,v_prr_rate),\n                                        --NVL (p.pil_prem_amt, 0),\n                                        v_prr_rate_type,\n                                        v_prr_rate_desc,\n                                        v_sect_type,\n                                        v_prr_rate,\n                                        v_prr_multiplier_rate,\n                                        --NVL (p.pil_multiplier_rate, v_prr_multiplier_rate),\n                                        v_prr_multplier_div_fact,\n                                        --NVL (p.pil_multiplier_div_factor,v_prr_multplier_div_fact),\n                                        0,\n                                        v_prr_division_factor,\n                                        --NVL (p.pil_rate_div_fact,v_prr_division_factor ),\n\n                                        --v_type_desc,\n                                        'Y',       --NVL (p.pil_compute, 'Y'),\n                                        --p.pil_prd_type,\n                                        --NVL (p.pil_dual_basis, 'N'),\n                                        0,\n                                        -- NVL (v_rsk_sect_data (1).pil_declaration_section,\n                                        --     'N' ),\n                                        0,\n                                        --p.pil_comment,\n                                        v_prr_free_limit, --p.pil_free_limit_amt,\n                                        0,                  --p.pil_limit_prd,\n                                        v_prr_prorated_full,\n                                        --p.prr_prorated_full,\n                                        v_prr_si_limit_type, --p.pil_si_limit_type,\n                                        --p.pil_si_rate,\n                                        --p.pil_cover_type,\n                                        v_prr_prem_minimum_amt,\n                                        --NVL (p.prr_prem_minimum_amt, v_prr_prem_minimum_amt),\n                                        v_prrd_max_rate,\n                                        v_prrd_min_rate                    --,\n                                                       --p.pil_indem_prd,\n                                                       --p.pil_indem_fstprd,\n                                                       --p.pil_indem_fstprd_pct,\n                                                       --p.pil_indem_remprd_pct,\n                                                       --p.pil_eml_pct,\n                                                       --p.pil_top_loc_rate,\n                                                       --p.pil_top_loc_div_fact\n                                                       );\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            END IF;\n\n            BEGIN\n                UPDATE gin_policies\n                   SET pol_prem_computed = 'N'\n                 WHERE pol_batch_no = (SELECT ipu_pol_batch_no\n                                         FROM gin_insured_property_unds\n                                        WHERE ipu_code = v_new_ipu_code);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error updating policy premium status to changed');\n            END;\n        END LOOP;\n    END;",
        "populate_endos_rsk_dtls_cleang": "PROCEDURE populate_endos_rsk_dtls_cleang (\n        v_old_batch_no       IN     NUMBER,\n        v_trans_type         IN     VARCHAR2,\n        v_new_batch_no       IN     NUMBER,\n        v_old_ipu_code       IN     NUMBER,\n        v_ipu_add_edit       IN     VARCHAR2,\n        v_new_ipu_code          OUT NUMBER,\n        v_action_type        IN     VARCHAR2,\n        --S Suspend, C Cancel RT Reinstate R Revise\n        v_del_date           IN     DATE DEFAULT NULL,\n        v_susp_reinst_type   IN     VARCHAR2 DEFAULT 'PREM',\n        -- Reinstate by refund premium (PREM) or Extending days (DAYS)\n        v_rcpt_amt           IN     NUMBER DEFAULT NULL,\n        -- cash basis",
        "update_comm_details": "PROCEDURE update_comm_details (v_add_edit        IN VARCHAR2,\n                                   v_prc_code        IN NUMBER,\n                                   v_prc_group       IN NUMBER,\n                                   v_prc_used_rate   IN NUMBER,\n                                   v_prc_disc_type   IN VARCHAR2,\n                                   v_prc_disc_rate   IN NUMBER,\n                                   v_ipucode         IN NUMBER,\n                                   v_override_comm   IN VARCHAR2 DEFAULT 'N',\n                                   v_prc_amount      IN NUMBER DEFAULT NULL)\n    IS\n    BEGIN\n        IF v_add_edit = 'E'\n        THEN\n            BEGIN\n                UPDATE gin_policy_risk_commissions\n                   SET prc_group = v_prc_group,\n                       prc_used_rate = v_prc_used_rate,\n                       prc_disc_type = v_prc_disc_type,\n                       prc_disc_rate = v_prc_disc_rate,\n                       prc_override_comm = v_override_comm,\n                       prc_amount = v_prc_amount\n                 WHERE prc_code = v_prc_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error updating Commission Details.');\n            END;\n        END IF;\n\n        IF v_add_edit = 'D'\n        THEN\n            BEGIN\n                DELETE FROM gin_policy_risk_commissions\n                      WHERE prc_code = v_prc_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error updating Commission Details.');\n            END;\n        END IF;\n    END;",
        "add_comm_details": "PROCEDURE add_comm_details (v_trans_code   IN VARCHAR2,\n                                v_trnt_code    IN VARCHAR2,\n                                v_ipucode      IN NUMBER)\n    IS\n        v_pol_batch_no          NUMBER;\n        v_pol_agnt_agent_code   NUMBER;\n        v_bind_lta_type         VARCHAR (1);\n        v_bind_comm_type        VARCHAR (1);\n        v_agn_act_code          NUMBER;\n        v_type                  NUMBER;\n        v_count                 NUMBER;\n    BEGIN\n        BEGIN\n            SELECT pol_batch_no,\n                   pol_agnt_agent_code,\n                   bind_lta_type,\n                   bind_comm_type,\n                   agn_act_code\n              INTO v_pol_batch_no,\n                   v_pol_agnt_agent_code,\n                   v_bind_lta_type,\n                   v_bind_comm_type,\n                   v_agn_act_code\n              FROM gin_policies,\n                   gin_insured_property_unds,\n                   gin_binders,\n                   tqc_agencies\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND ipu_code = v_ipucode\n                   AND agn_code = pol_agnt_agent_code\n                   AND ipu_bind_code = bind_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error fetching policy details ');\n        END;\n\n        BEGIN\n            SELECT DECODE (\n                       DECODE (v_trnt_code,\n                               'LTA-U', v_bind_lta_type,\n                               v_bind_comm_type),\n                       'B', 1,\n                       2)    order_type\n              INTO v_type\n              FROM DUAL;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error fetching binder details ');\n        END;\n\n        BEGIN\n            SELECT COUNT (*)\n              INTO v_count\n              FROM gin_policy_risk_commissions\n             WHERE     prc_ipu_code = v_ipucode\n                   AND prc_trans_code = v_trans_code\n                   AND prc_trnt_code = v_trnt_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_count := 0;\n            WHEN OTHERS\n            THEN\n                raise_error ('Error fetching commission details ');\n        END;\n\n        IF (v_pol_agnt_agent_code != 0)\n        THEN\n            IF v_count = 0\n            THEN\n                BEGIN\n                    INSERT INTO gin_policy_risk_commissions (\n                                    prc_code,\n                                    prc_ipu_code,\n                                    prc_pol_batch_no,\n                                    prc_agn_code,\n                                    prc_trans_code,\n                                    prc_act_code,\n                                    prc_trnt_code,\n                                    prc_group)\n                         VALUES (tq_gis.prc_code_seq.NEXTVAL,\n                                 v_ipucode,\n                                 v_pol_batch_no,\n                                 v_pol_agnt_agent_code,\n                                 v_trans_code,\n                                 v_agn_act_code,\n                                 v_trnt_code,\n                                 v_type);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting commission Details. ');\n                END;\n            ELSE\n                raise_error ('Commission type already exists ');\n            END IF;\n        ELSE\n            raise_error ('Commission not applicable to direct bussiness.');\n        END IF;\n    END;",
        "updatepctriskdates": "PROCEDURE updatepctriskdates (v_pol_batch_no   IN NUMBER,\n                                  v_wef_dt         IN DATE,\n                                  v_wet_dt         IN DATE)\n    IS\n        v_current_ipu_code   NUMBER;\n        v_pol_batch_nos      NUMBER;\n    BEGIN\n        -- BEGIN\n        --   select   pol_batch_no  into v_pol_batch_nos  from gin_policies   where\n        --    --ipu_code=v_ipu_code\n        --    pol_batch_no=v_pol_batch_no\n        --   -- and ipu_pol_batch_no=pol_batch_no\n        --    and pol_policy_status='NB';\n        --\n        --    EXCEPTION WHEN OTHERS  THEN\n        --    raise_error('ERROR updating current risk dates');\n        --    END;\n        IF v_pol_batch_no IS NOT NULL\n        THEN\n            UPDATE gin_insured_property_unds\n               SET ipu_eff_wef = v_wef_dt, ipu_eff_wet = v_wet_dt\n             WHERE ipu_pol_batch_no = v_pol_batch_nos;\n        END IF;\n    END;",
        "populate_pol_risk_services": "PROCEDURE populate_pol_risk_services (v_ipu_code       IN NUMBER,\n                                          v_pol_batch_no   IN NUMBER,\n                                          v_rss_code       IN NUMBER,\n                                          v_rs_code        IN NUMBER,\n                                          v_policy_no      IN VARCHAR2,\n                                          v_endors_no      IN VARCHAR2)\n    IS\n        v_cnt      NUMBER;\n        v_end_no   VARCHAR2 (50);\n    BEGIN\n        IF v_endors_no = NULL\n        THEN\n            SELECT pol_ren_endos_no\n              INTO v_end_no\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n        END IF;\n\n        BEGIN\n            SELECT COUNT (*)\n              INTO v_cnt\n              FROM gin_policy_risk_services\n             WHERE prs_ipu_code = v_ipu_code AND prs_rss_code = v_rss_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_cnt := 0;\n        END;\n\n        IF NVL (v_cnt, 0) != 0\n        THEN\n            DELETE FROM\n                gin_policy_risk_services\n                  WHERE     prs_ipu_code = v_ipu_code\n                        AND prs_rss_code = v_rss_code;\n        END IF;\n\n        BEGIN\n            INSERT INTO gin_policy_risk_services (prs_code,\n                                                  prs_ipu_code,\n                                                  prs_pol_batch_no,\n                                                  prs_pol_policy_no,\n                                                  prs_pol_endors_no,\n                                                  prs_rss_code,\n                                                  prs_rs_code)\n                 VALUES (gin_prss_code_seq.NEXTVAL,\n                         v_ipu_code,\n                         v_pol_batch_no,\n                         v_policy_no,\n                         NVL (v_endors_no, v_end_no),\n                         v_rss_code,\n                         v_rs_code);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (SQLERRM);\n        END;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error (SQLERRM);\n    END;",
        "delete_pol_risk_services": "PROCEDURE delete_pol_risk_services (v_action     IN VARCHAR2,\n                                        v_prs_code   IN NUMBER,\n                                        v_ipu_code   IN NUMBER)\n    IS\n    BEGIN\n        IF NVL (v_action, 'X') = 'D'\n        THEN\n            DELETE FROM gin_policy_risk_services\n                  WHERE prs_ipu_code = v_ipu_code AND prs_code = v_prs_code;\n        END IF;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error (SQLERRM);\n    END;",
        "checkagentstatus": "PROCEDURE checkagentstatus (v_agn_code     IN NUMBER,\n                                v_trans_type   IN VARCHAR2 DEFAULT NULL)\n    IS\n        v_agn_status   VARCHAR2 (50);\n    BEGIN\n        ---CHECK THE AGENT STATUS IF INACTIVE OR ACTIVE\n        BEGIN\n            SELECT NVL (agn_status, 'XXX')\n              INTO v_agn_status\n              FROM tqc_agencies\n             WHERE agn_code = v_agn_code;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error getting agent status...........');\n        END;\n\n        --     RAISE_ERROR('v_trans_type='||v_trans_type);\n        IF     v_agn_status != 'ACTIVE'\n           AND NVL (v_trans_type, 'XX') NOT IN ('CO', 'CN')\n        THEN\n            raise_error (\n                'Error : Cannot raise a transaction  on an INACTIVE agent........');\n        END IF;\n    END;",
        "update_risk_values": "PROCEDURE update_risk_values (v_ipu_code   IN NUMBER,\n                                  v_survey     IN VARCHAR2 DEFAULT 'N')\n    IS\n    BEGIN\n        UPDATE gin_insured_property_unds\n           SET ipu_survey = UPPER (v_survey)\n         WHERE ipu_code = v_ipu_code;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            raise_error ('Error updating if risk is to undergo survey');\n    END;",
        "check_risk_count_applicable": "PROCEDURE check_risk_count_applicable (v_pol_batch_no   IN NUMBER,\n                                           v_uw_year        IN NUMBER)\n    IS\n        v_max_risk_count   NUMBER;\n        v_risk_count       NUMBER;\n    BEGIN\n        IF gin_parameters_pkg.get_param_varchar ('RISKS_COUNT_LIMIT_ALLOWED') =\n           'Y'\n        THEN\n            BEGIN\n                  SELECT COUNT (ipu_code), NVL (scl_max_risk_count, 0)\n                    INTO v_risk_count, v_max_risk_count\n                    FROM gin_policies,\n                         gin_sub_classes,\n                         gin_insured_property_unds,\n                         gin_policy_active_risks\n                   WHERE     ipu_pol_batch_no = pol_batch_no\n                         AND polar_ipu_code = ipu_code\n                         AND polar_pol_batch_no = ipu_pol_batch_no\n                         AND scl_code = ipu_sec_scl_code\n                         AND pol_batch_no = v_pol_batch_no\n                         AND pol_uw_year = v_uw_year\n                GROUP BY NVL (scl_max_risk_count, 0);\n            END;\n\n            IF NVL (v_risk_count, 0) > v_max_risk_count\n            THEN\n                raise_error (\n                       'Risks Count Limit Reached for UW year'\n                    || v_uw_year\n                    || ',Current Risk Count:'\n                    || v_risk_count\n                    || ', Risk Limit:'\n                    || v_max_risk_count);\n            END IF;\n        END IF;\n    END;",
        "auto_populate_risk_causes": "PROCEDURE auto_populate_risk_causes (v_ipu_code IN NUMBER)\n    IS\n        CURSOR risksrec IS\n            SELECT ipu_sec_scl_code,\n                   ipu_pol_policy_no,\n                   ipu_pol_ren_endos_no,\n                   ipu_pol_batch_no\n              FROM gin_insured_property_unds, gin_policies\n             WHERE ipu_code = v_ipu_code AND pol_batch_no = ipu_pol_batch_no;\n\n        CURSOR clauses (v_scl_code IN NUMBER)\n        IS\n              SELECT sbcl_cls_code,\n                     cls_sht_desc,\n                     cls_heading,\n                     sbcl_scl_code,\n                     scl_desc,\n                     cls_type,\n                     DECODE (cls_type,\n                             'CL', 'Clause',\n                             'WR', 'Warranty',\n                             'SC', 'Special Conditions')    type_desc,\n                     cls_wording,\n                     cls_editable\n                FROM gin_sub_classes,\n                     gin_clause,\n                     gin_subcl_clauses,\n                     gin_scl_cvt_mand_clauses\n               WHERE     sbcl_cls_code = cls_code\n                     AND scvtmc_cls_sht_desc = sbcl_cls_sht_desc\n                     AND sbcl_scl_code = scl_code\n                     AND scl_wet IS NULL\n                     AND scvmtc_cls_mandatory = 'Y'\n                     AND scvtmc_scl_code = v_scl_code\n                     AND scvtmc_sclcovt_code IN\n                             (SELECT ipu_covt_code\n                                FROM gin_insured_property_unds\n                               WHERE IPU_CODE = v_ipu_code)\n                     AND sbcl_cls_code NOT IN\n                             (SELECT pocl_sbcl_cls_code\n                                FROM gin_policy_clauses\n                               WHERE pocl_ipu_code = v_ipu_code)\n            ORDER BY sbcl_cls_code;\n    BEGIN\n        FOR risk IN risksrec\n        LOOP\n            BEGIN\n                FOR cls IN clauses (risk.ipu_sec_scl_code)\n                LOOP\n                    BEGIN\n                        INSERT INTO gin_policy_clauses (\n                                        pocl_sbcl_cls_code,\n                                        pocl_sbcl_scl_code,\n                                        pocl_cls_sht_desc,\n                                        pocl_pol_policy_no,\n                                        pocl_pol_ren_endos_no,\n                                        pocl_pol_batch_no,\n                                        pocl_ipu_code,\n                                        plcl_cls_type,\n                                        pocl_clause,\n                                        pocl_cls_editable,\n                                        pocl_new,\n                                        pocl_heading)\n                             VALUES (cls.sbcl_cls_code,\n                                     cls.sbcl_scl_code,\n                                     cls.cls_sht_desc,\n                                     risk.ipu_pol_policy_no,\n                                     risk.ipu_pol_ren_endos_no,\n                                     risk.ipu_pol_batch_no,\n                                     v_ipu_code,\n                                     cls.cls_type,\n                                     cls.cls_wording,\n                                     cls.cls_editable,\n                                     'N',\n                                     cls.cls_heading);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            ROLLBACK;\n                            raise_error (\n                                '  Error creating risk clauses record. Contact the system administrator...');\n                    END;\n                END LOOP;\n            END;\n        END LOOP;\n    END;\n\n\n    ---GIS-18364 GHANA UPDATES BY OLSON MUTWIRI   ON 17/05/2019\n    --",
        "pop_ren_mand_rsk_limits": "PROCEDURE pop_ren_mand_rsk_limits (v_new_ipu_code   IN NUMBER,\n                                       v_scl_code       IN NUMBER,\n                                       v_bind_code      IN NUMBER,\n                                       v_cvt_code       IN NUMBER,\n                                       v_batch_no       IN NUMBER)\n    IS                 -- populates mandatory sections for non binder policies\n        v_pil_declaration_section   VARCHAR2 (30);\n        v_row                       NUMBER;\n        v_pol_binder                VARCHAR2 (2);\n        v_ncd_status                gin_insured_property_unds.ipu_ncd_status%TYPE;\n        v_ncd_level                 gin_insured_property_unds.ipu_ncd_level%TYPE;\n\n        CURSOR pil_cur IS\n            SELECT DISTINCT\n                   sect_sht_desc,\n                   sect_code,\n                   sect_desc\n                       sect_desc,\n                   sect_type,\n                   DECODE (sect_type,\n                           'ND', 'NCD',\n                           'ES', 'Extension SI',\n                           'EL', 'Extension Limit',\n                           'SS', 'Section SI',\n                           'SL', 'Section Limit',\n                           'DS', 'Discount',\n                           'LO', 'Loading',\n                           'EC', 'Escalation')\n                       type_desc,\n                   prr_rate_type,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       prr_rate,\n                   DECODE (prr_rate_type,  'SRG', 0,  'RCU', 0,  prr_rate)\n                       rate,\n                   '0'\n                       terr_description,\n                   DECODE (prr_rate_type,\n                           'SRG', 0,\n                           'RCU', 0,\n                           prr_prem_minimum_amt)\n                       prr_prem_minimum_amt,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multiplier_rate)\n                       prr_multiplier_rate,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_division_factor)\n                       prr_division_factor,\n                   DECODE (prr_rate_type,\n                           'SRG', 1,\n                           'RCU', 1,\n                           prr_multplier_div_fact)\n                       prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_free_limit,\n                   prr_prorated_full,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM gin_premium_rates, gin_sections\n             WHERE     prr_sect_code = sect_code\n                   AND prr_scl_code = v_scl_code\n                   AND prr_bind_code = v_bind_code\n                   AND sect_type != 'ND'\n                   AND sect_code IN\n                           (SELECT scvts_sect_code\n                              FROM gin_subcl_covt_sections\n                             WHERE     scvts_scl_code = v_scl_code\n                                   AND scvts_covt_code = v_cvt_code\n                                   AND NVL (scvts_mandatory, 'N') = 'Y')\n                   AND sect_code NOT IN\n                           (SELECT pil_sect_code\n                              FROM gin_ren_policy_insured_limits\n                             WHERE pil_ipu_code = v_new_ipu_code);\n    BEGIN\n        BEGIN\n            SELECT pol_binder_policy,\n                   NVL (ipu_ncd_status, 'N'),\n                   NVL (ipu_ncd_level, 0)\n              INTO v_pol_binder, v_ncd_status, v_ncd_level\n              FROM gin_ren_policies, gin_ren_insured_property_unds\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND ipu_code = v_new_ipu_code\n                   AND pol_batch_no = v_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error ('Error determining the policy binder...');\n        END;\n\n        FOR pil_cur_rec IN pil_cur\n        LOOP\n            v_row := 1;\n\n            --raise_Error('innnnnnnnnnnn');\n            BEGIN\n                SELECT sec_declaration\n                  INTO v_pil_declaration_section\n                  FROM gin_subcl_sections\n                 WHERE     sec_sect_code = pil_cur_rec.sect_code\n                       AND sec_scl_code = v_scl_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Unable to retrieve the section declaration status');\n            END;\n\n            BEGIN\n                INSERT INTO gin_ren_policy_insured_limits (\n                                pil_code,\n                                pil_ipu_code,\n                                pil_sect_code,\n                                pil_sect_sht_desc,\n                                pil_desc,\n                                pil_row_num,\n                                pil_calc_group,\n                                pil_limit_amt,\n                                pil_prem_rate,\n                                pil_prem_amt,\n                                pil_rate_type,\n                                pil_rate_desc,\n                                pil_sect_type,\n                                pil_original_prem_rate,\n                                pil_multiplier_rate,\n                                pil_multiplier_div_factor,\n                                pil_annual_premium,\n                                pil_rate_div_fact,\n                                --PIL_DESC,\n                                pil_compute,\n                                pil_prd_type,\n                                pil_dual_basis,\n                                pil_prem_accumulation,\n                                pil_declaration_section,\n                                pil_annual_actual_prem,\n                                pil_free_limit,\n                                pil_prorata_full,\n                                pil_prr_max_rate,\n                                pil_prr_min_rate)\n                         VALUES (\n                                       TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))\n                                    || gin_pil_code_seq.NEXTVAL,\n                                    v_new_ipu_code,\n                                    pil_cur_rec.sect_code,\n                                    pil_cur_rec.sect_sht_desc,\n                                    pil_cur_rec.sect_desc,\n                                    v_row,\n                                    1,\n                                    NULL,\n                                    DECODE (pil_cur_rec.prr_rate_type,\n                                            'SRG', 0,\n                                            'RCU', 0,\n                                            pil_cur_rec.prr_rate),\n                                    0,\n                                    pil_cur_rec.prr_rate_type,\n                                    pil_cur_rec.prr_rate_desc,\n                                    pil_cur_rec.sect_type,\n                                    pil_cur_rec.prr_rate,\n                                    pil_cur_rec.prr_multiplier_rate,\n                                    pil_cur_rec.prr_multplier_div_fact,\n                                    0,\n                                    pil_cur_rec.prr_division_factor,\n                                    --v_type_desc,\n                                    'Y',\n                                    NULL,\n                                    'N',\n                                    0,\n                                    v_pil_declaration_section,\n                                    0,\n                                    pil_cur_rec.prr_free_limit,\n                                    pil_cur_rec.prr_prorated_full,\n                                    pil_cur_rec.prr_max_rate,\n                                    pil_cur_rec.prr_min_rate);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error inserting risk sections..');\n            END;\n        END LOOP;\n    END;",
        "populate_endos_rsk_dtls_port": "PROCEDURE populate_endos_rsk_dtls_port (\n        v_old_batch_no       IN     NUMBER,\n        v_trans_type         IN     VARCHAR2,\n        v_new_batch_no       IN     NUMBER,\n        v_old_ipu_code       IN     NUMBER,\n        v_ipu_add_edit       IN     VARCHAR2,\n        v_new_ipu_code          OUT NUMBER,\n        v_action_type        IN     VARCHAR2,\n        --S Suspend, C Cancel RT Reinstate R Revise\n        v_del_date           IN     DATE DEFAULT NULL,\n        v_susp_reinst_type   IN     VARCHAR2 DEFAULT 'PREM',\n        -- Reinstate by refund premium (PREM) or Extending days (DAYS)\n        v_rcpt_amt           IN     NUMBER DEFAULT NULL,\n        -- cash basis",
        "update_cert_contra_reason": "PROCEDURE update_cert_contra_reason (\n        v_accl_contra_pol_batch_no   IN aki_cert_cancellation_log.accl_contra_pol_batch_no%TYPE,\n        v_reason                     IN aki_cert_cancellation_log.accl_not_cancelled_reason%TYPE --,\n                                                                                                ----  v_err                           OUT VARCHAR2\n                                                                                                )\n    IS\n        v_cnt     NUMBER;\n        v_count   NUMBER := 0;\n\n        CURSOR active_certs IS\n            SELECT *\n              FROM gin_aki_policy_cert_dtls\n             WHERE     apcd_pol_policy_no IN\n                           (SELECT pol_policy_no\n                              FROM gin_policies\n                             WHERE pol_batch_no = v_accl_contra_pol_batch_no)\n                   AND ROWNUM = 1\n                   AND apcd_cert_cancelled != 'Y'\n                   AND apcd_wet >= TRUNC (SYSDATE)\n                   AND NVL (apcd_cert_allocated, 'N') = 'Y';\n    BEGIN\n        FOR contra_cert IN active_certs\n        LOOP\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_cnt\n                  FROM aki_cert_cancellation_log\n                 WHERE     accl_apcd_code = contra_cert.apcd_code\n                       AND accl_contra_pol_batch_no =\n                           v_accl_contra_pol_batch_no;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;      ----v_err := 'Getting cert cancellation count';\n            END;\n\n            IF v_cnt != 0\n            THEN\n                DELETE aki_cert_cancellation_log\n                 WHERE     accl_apcd_code = contra_cert.apcd_code\n                       AND accl_contra_pol_batch_no =\n                           v_accl_contra_pol_batch_no;\n            END IF;\n\n\n            BEGIN\n                INSERT INTO aki_cert_cancellation_log (\n                                accl_code,\n                                accl_contra_pol_batch_no,\n                                accl_cert_pol_batch_no,\n                                accl_ipu_code,\n                                accl_apcd_code,\n                                accl_not_cancelled_reason)\n                     VALUES (gin_accl_code_seq.NEXTVAL,\n                             v_accl_contra_pol_batch_no,\n                             contra_cert.apcd_pol_batch_no,\n                             contra_cert.apcd_ipu_code,\n                             contra_cert.apcd_code,\n                             v_reason);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            ---v_err :=\n            ---   'Error occured in creating cert cancellation log ...';\n            END;\n        END LOOP;\n    END update_cert_contra_reason;",
        "check_duplicate_quot_risks": "PROCEDURE check_duplicate_quot_risks (v_quot_code IN NUMBER)\n    IS\n        v_cnt                NUMBER;\n        v_allow_duplicates   VARCHAR2 (5);\n        v_msg                VARCHAR2 (2000);\n        v_count              NUMBER;\n\n        CURSOR dup_risk IS\n            SELECT qr_quot_code, qr_property_id, qr_scl_code\n              FROM gin_quot_risks\n             WHERE qr_quot_code = v_quot_code;\n\n        CURSOR dup_distinct_risk IS\n            SELECT DISTINCT qr_quot_code, qr_property_id, qr_scl_code\n              FROM gin_quot_risks\n             WHERE qr_quot_code = v_quot_code;\n    BEGIN\n        BEGIN\n            v_allow_duplicates :=\n                gin_parameters_pkg.get_param_varchar (\n                    'ALLOW_DUPLICATION_OF_RISKS');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_allow_duplicates := 'Y';\n        END;\n\n\n        IF NVL (v_allow_duplicates, 'N') = 'N'\n        THEN\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_cnt\n                  FROM (  SELECT qr_quot_code, qr_property_id\n                            FROM gin_quot_risks\n                           WHERE     qr_quot_code = v_quot_code\n                                 AND qr_scl_code IN\n                                         (SELECT scl_code\n                                            FROM gin_sub_classes\n                                           WHERE     scl_code = qr_scl_code\n                                                 AND NVL (scl_risk_unique, 'N') =\n                                                     'Y')\n                          HAVING COUNT (1) > 1\n                        GROUP BY qr_quot_code, qr_property_id);\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error checking for risk duplicates..');\n            END;\n\n            IF NVL (v_cnt, 0) > 0\n            THEN\n                FOR d_risk IN dup_risk\n                LOOP\n                      SELECT DISTINCT COUNT (1)\n                        INTO v_count\n                        FROM gin_quot_risks, tqc_clients, tqc_client_systems\n                       WHERE     qr_prp_code = clnt_code\n                             AND clnt_code = csys_clnt_code\n                             AND csys_sys_code = 37\n                             AND qr_scl_code = d_risk.qr_scl_code\n                             AND qr_property_id = d_risk.qr_property_id\n                             AND qr_quot_code = d_risk.qr_quot_code\n                    ORDER BY qr_code;\n                END LOOP;\n\n                FOR d_d_risk IN dup_distinct_risk\n                LOOP\n                    v_msg := v_msg || '<' || d_d_risk.qr_property_id || '> ';\n                END LOOP;\n\n\n                IF NVL (v_count, 0) <> 1\n                THEN\n                    --            Null;\n                    raise_error (\n                           'Risks are duplicated..'\n                        || v_msg\n                        || ' '\n                        || v_count\n                        || ' times ');\n                END IF;\n            END IF;\n        END IF;\n    END;",
        "gin_quote_rsk_limits": "PROCEDURE gin_quote_rsk_limits (v_qr_code         IN NUMBER,\n                                    v_scl_code        IN NUMBER,\n                                    v_bind_code       IN NUMBER,\n                                    v_sect_code       IN NUMBER,\n                                    v_limit           IN NUMBER,\n                                    v_row             IN NUMBER,\n                                    v_add_edit        IN VARCHAR2,\n                                    v_rsk_sect_data   IN web_sect_tab)\n    IS\n        v_sect_sht_desc            VARCHAR2 (30);\n        v_sect_desc                VARCHAR2 (80);\n        v_sect_type                VARCHAR2 (30);\n        v_type_desc                VARCHAR2 (30);\n        v_prr_rate_type            VARCHAR2 (10);\n        v_prr_rate                 NUMBER;\n        v_terr_description         VARCHAR2 (30);\n        v_prr_prem_minimum_amt     NUMBER;\n        v_prr_multiplier_rate      NUMBER;\n        v_prr_division_factor      NUMBER;\n        v_prr_multplier_div_fact   NUMBER;\n        v_prr_rate_desc            VARCHAR2 (30);\n        v_cnt                      NUMBER;\n        v_cover_days               NUMBER;\n        v_prrd_max_rate            NUMBER;\n        v_prrd_min_rate            NUMBER;\n        v_age                      NUMBER;\n        v_cur_code                 NUMBER;\n        v_rsk_travel_sect_data     gin_travel_stp_pkg.rsk_sect_tab;\n        v_batch_no                 NUMBER;\n        v_count                    NUMBER := 0;\n        v_dec_section              VARCHAR2 (5);\n        v_calc_group               NUMBER := 1;\n        v_calc_row                 NUMBER := 1;\n\n        CURSOR pil_cur (vsectcode       IN NUMBER,\n                        vbindcode       IN NUMBER,\n                        vsclcode        IN NUMBER,\n                        vrange          IN NUMBER,\n                        vfreg           IN VARCHAR2,\n                        v_cashbck_lvl   IN NUMBER)\n        IS\n            SELECT sect_sht_desc,\n                   sect_desc,\n                   sect_type,\n                   type_desc,\n                   prr_rate_type,\n                   prr_rate,\n                   terr_description,\n                   prr_prem_minimum_amt,\n                   prr_multiplier_rate,\n                   prr_division_factor,\n                   prr_multplier_div_fact,\n                   prr_rate_desc,\n                   prr_max_rate,\n                   prr_min_rate\n              FROM (SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND sect_type NOT IN ('ND', 'CB')\n                           AND prr_rate_type IN ('FXD', 'RT')\n                           AND prr_type = 'N'\n                           AND NVL (prr_rate_freq_type, 'A') = vfreg\n                           AND NVL (vrange, 0) BETWEEN NVL (prr_range_from,\n                                                            0)\n                                                   AND NVL (prr_range_to, 0)\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND prr_type = 'N'\n                           AND sect_type NOT IN ('ND', 'CB')\n                           AND prr_rate_type IN ('SRG', 'RCU')\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type,\n                                   'ES', 'EXTENSION SI',\n                                   'EL', 'EXTENSION LIMIT',\n                                   'SS', 'SECTION SI',\n                                   'SL', 'SECTION LIMIT',\n                                   'DS', 'DISCOUNT',\n                                   'LO', 'LOADING',\n                                   'EC', 'ESCALATION',\n                                   'RS', 'Rider Section')\n                               type_desc,\n                           prr_rate_type,\n                           0\n                               prr_rate,\n                           0\n                               rate,\n                           '0'\n                               terr_description,\n                           0\n                               prr_prem_minimum_amt,\n                           1\n                               prr_multiplier_rate,\n                           1\n                               prr_division_factor,\n                           1\n                               prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_type = 'N'\n                           AND prr_scl_code = vsclcode\n                           AND sect_type NOT IN ('ND', 'CB')\n                           AND prr_rate_type = 'ARG'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'ND', 'NCD')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND prr_type = 'N'\n                           AND sect_type = 'ND'\n                    UNION\n                    SELECT DISTINCT\n                           sect_sht_desc,\n                           sect_code,\n                           sect_desc\n                               sect_desc,\n                           sect_type,\n                           DECODE (sect_type, 'CB', 'CASHBACK')\n                               type_desc,\n                           prr_rate_type,\n                           prr_rate,\n                           prr_rate\n                               rate,\n                           '0'\n                               terr_description,\n                           prr_prem_minimum_amt,\n                           prr_multiplier_rate,\n                           prr_division_factor,\n                           prr_multplier_div_fact,\n                           prr_rate_desc,\n                           prr_max_rate,\n                           prr_min_rate\n                      FROM gin_premium_rates, gin_sections\n                     WHERE     prr_sect_code = sect_code\n                           AND sect_code = vsectcode\n                           AND prr_bind_code = vbindcode\n                           AND prr_scl_code = vsclcode\n                           AND prr_type = 'N'\n                           AND NVL (prr_cashback_level, 0) = v_cashbck_lvl\n                           AND NVL (prr_cashback_appl, 'N') = 'Y'\n                           AND sect_type = 'CB');\n\n        v_freq                     VARCHAR2 (2);\n        v_range                    NUMBER;\n        v_alb_required             VARCHAR2 (2);\n        v_pol_status               VARCHAR2 (10);\n        v_cashback_lvl             NUMBER;\n        v_pil_code                 NUMBER;\n        v_pro_code                 NUMBER;\n        v_qp_code                  NUMBER;\n        v_quot_code                NUMBER;\n    BEGIN\n        BEGIN\n            SELECT DECODE (scl_alb_required,\n                           'Y', NVL (quot_freq_of_payment, 'A'),\n                           'A'),\n                   DECODE (\n                       scl_alb_required,\n                       'Y', gin_travel_stp_pkg.get_alb (TRUNC (SYSDATE),\n                                                        clnt_dob),\n                       DECODE (NVL (scl_use_cover_period_range, 'N'),\n                               'Y', (QR_WET - QR_WEF),\n                               0)),\n                   scl_alb_required,\n                   QUOT_STATUS,\n                   'N'\n                       cashback_lvl,\n                   QP_PRO_CODE,\n                   QP_CODE,\n                   QUOT_CODE\n              INTO v_freq,\n                   v_range,\n                   v_alb_required,\n                   v_pol_status,\n                   v_cashback_lvl,\n                   v_pro_code,\n                   v_qp_code,\n                   v_quot_code\n              FROM gin_quot_risks,\n                   gin_quotations,\n                   tqc_clients,\n                   gin_sub_classes,\n                   gin_quot_products\n             WHERE     qr_quot_code = quot_code\n                   AND qp_quot_code = quot_code\n                   AND qr_prp_code = clnt_code\n                   AND qp_code = qr_qp_code\n                   AND qr_code = v_qr_code\n                   AND qr_scl_code = scl_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_freq := 'A';\n            WHEN OTHERS\n            THEN\n                v_freq := 'A';\n        END;\n\n        IF NVL (v_alb_required, 'N') = 'Y' AND NVL (v_range, 0) = 0\n        THEN\n            raise_error (\n                'Insured age is required for this subclass. Please define the insured age first....');\n        END IF;\n\n        BEGIN\n            --      RAISE_ERROR('sect code '||v_sect_code||'bind code '||v_bind_code||'scl code '||v_scl_code||';'||v_cashback_lvl);\n            OPEN pil_cur (v_sect_code,\n                          v_bind_code,\n                          v_scl_code,\n                          v_range,\n                          v_freq,\n                          v_cashback_lvl);\n\n            LOOP\n                EXIT WHEN pil_cur%NOTFOUND;\n\n                FETCH pil_cur\n                    INTO v_sect_sht_desc,\n                         v_sect_desc,\n                         v_sect_type,\n                         v_type_desc,\n                         v_prr_rate_type,\n                         v_prr_rate,\n                         v_terr_description,\n                         v_prr_prem_minimum_amt,\n                         v_prr_multiplier_rate,\n                         v_prr_division_factor,\n                         v_prr_multplier_div_fact,\n                         v_prr_rate_desc,\n                         v_prrd_max_rate,\n                         v_prrd_min_rate;\n            END LOOP;\n\n            --RAISE_ERROR('v_prrd_min_rate ==== '||v_prrd_min_rate);\n            CLOSE pil_cur;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_error (\n                       'Error getting the premium rates for 1st section..'\n                    || v_sect_code\n                    || '-'\n                    || v_bind_code\n                    || '-'\n                    || v_scl_code);\n        END;\n\n        --raise_error('v_sect_sht_desc '||v_sect_code||' v_bind_code '||v_bind_code||' v_scl_code '||v_scl_code);\n        IF NVL (v_add_edit, 'A') = 'A'\n        THEN\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_cnt\n                  FROM gin_products,\n                       gin_product_sub_classes,\n                       gin_product_groups\n                 WHERE     pro_prg_code = prg_code\n                       AND pro_code = clp_pro_code\n                       AND prg_type = 'TRAVEL'\n                       AND clp_scl_code = v_scl_code;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    NULL;\n            END;\n\n            --        IF NVL (v_cnt, 0) = 0\n            --        THEN\n            BEGIN\n                IF v_prr_rate_type IS NULL\n                THEN\n                    raise_error (\n                        'Error getting Rate Type...Please specify rate type..0..');\n                END IF;\n\n                IF v_pol_status = 'DC'\n                THEN\n                    raise_error (\n                        'You cannot add a section to a declaration...');\n                END IF;\n\n\n                BEGIN\n                    SELECT DISTINCT SCVTS_ORDER, SCVTS_CALC_GROUP\n                      INTO v_calc_row, v_calc_group\n                      FROM GIN_SUBCL_COVT_SECTIONS\n                     WHERE     SCVTS_SECT_CODE = v_sect_code\n                           AND SCVTS_SCL_CODE = v_scl_code\n                           AND SCVTS_COVT_CODE IN\n                                   (SELECT QR_COVT_CODE\n                                      FROM gin_quot_risks\n                                     WHERE qr_code = v_qr_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        v_calc_group := 1;\n                        v_calc_row := 1;\n                END;\n\n                --raise_error ('v_new_ipu_code='||v_new_ipu_code);\n\n                --QRL_QR_CODE\n                /****************************************************/\n                BEGIN\n                    INSERT INTO gin_quot_risk_limits (\n                                    qrl_code,\n                                    qrl_ipu_code,\n                                    qrl_sect_code,\n                                    qrl_sect_sht_desc,\n                                    qrl_limit_amt,\n                                    qrl_prem_rate,\n                                    qrl_prem_amt,\n                                    qrl_qr_code,\n                                    qrl_qr_quot_code,\n                                    qrl_qp_pro_code,\n                                    qrl_qp_code,\n                                    qrl_sect_type,\n                                    qrl_min_premium,\n                                    qrl_rate_type,\n                                    qrl_rate_desc,\n                                    qrl_rate_div_factor,\n                                    qrl_multiplier_rate,\n                                    qrl_multiplier_div_factor,\n                                    qrl_row_num,\n                                    qrl_calc_group,\n                                    qrl_compute,\n                                    qrl_annual_prem,\n                                    qrl_used_limit,\n                                    qrl_desc,\n                                    qrl_dual_basis,\n                                    qrl_indem_prd,\n                                    qrl_prd_type,\n                                    qrl_indem_fstprd,\n                                    qrl_indem_fstprd_pct,\n                                    qrl_indem_remprd_pct,\n                                    qrl_free_limit)\n                             VALUES (\n                                        TO_NUMBER (\n                                               TO_CHAR (SYSDATE, 'YYYY')\n                                            || gin_qrl_code_seq.NEXTVAL),\n                                        NULL,\n                                        v_sect_code,\n                                        v_sect_sht_desc,\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_limit_amt,\n                                            v_limit),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_prem_rate,\n                                            v_prr_rate),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_prem_amt,\n                                            0),\n                                        v_qr_code,\n                                        v_quot_code,\n                                        v_pro_code,\n                                        v_qp_code,\n                                        v_sect_type,\n                                        v_prr_prem_minimum_amt,\n                                        v_prr_rate_type,\n                                        v_prr_rate_desc,\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_rate_div_fact,\n                                            v_prr_division_factor),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_multiplier_rate,\n                                            v_prr_multiplier_rate),\n                                        NVL (\n                                            v_rsk_sect_data (1).pil_multiplier_div_factor,\n                                            v_prr_multplier_div_fact),\n                                        v_row,\n                                        1,\n                                        'Y',\n                                        0,\n                                        NULL,\n                                        NVL (v_rsk_sect_data (1).pil_desc,\n                                             v_sect_desc),\n                                        'N',\n                                        NULL,\n                                        NULL,\n                                        NULL,\n                                        NULL,\n                                        NULL,\n                                        v_rsk_sect_data (1).pil_free_limit_amt);\n                --raise_Error(v_qr_code||' = '||v_qr_code||' = '||v_cvt_code||'= ' ||v_cvt_code);\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error ('Error inserting risk sections..');\n                END;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error inserting risk sections..' || v_sect_sht_desc);\n            END;\n        --        END IF;\n        ELSE\n            NULL;\n        END IF;\n    END;\nEND gin_stp_pkg;"
    },
    "functions": {
        "determine_admin_fee": "FUNCTION determine_admin_fee (\n        v_clnt_code    IN     NUMBER,\n        v_pol_pol_no   IN     VARCHAR2 DEFAULT NULL,\n        v_admin_disc      OUT NUMBER)\n        RETURN BOOLEAN\n    IS\n        v_admin_count   NUMBER;\n    BEGIN\n        IF v_clnt_code IS NULL\n        THEN\n            raise_error ('Client not provided....');\n        END IF;\n\n        --RAISE_ERROR(v_clnt_code);\n        BEGIN\n            SELECT COUNT (*)\n              INTO v_admin_count\n              FROM gin_adminstration_fee\n             WHERE     adf_clnt_code = v_clnt_code\n                   --AND ADF_POL_POLICY_NO = v_pol_pol_no\n                   AND NVL (adf_policy_applicable, 'N') = 'Y'\n                   AND NVL (adf_authorised, 'N') = 'Y'\n                   AND NVL (adf_paid, 'N') = 'Y'\n                   AND (adf_wet IS NULL OR TRUNC (SYSDATE) <= adf_wet);\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_admin_count := 0;\n        END;\n\n        IF NVL (v_admin_count, 0) = 0\n        THEN\n            BEGIN\n                SELECT COUNT (*)\n                  INTO v_admin_count\n                  FROM gin_adminstration_fee\n                 WHERE     adf_clnt_code = v_clnt_code\n                       AND NVL (adf_authorised, 'N') = 'Y'\n                       AND NVL (adf_paid, 'N') = 'Y'\n                       AND (adf_wet IS NULL OR TRUNC (SYSDATE) <= adf_wet);\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    v_admin_count := 0;\n                WHEN OTHERS\n                THEN\n                    raise_error (\n                        'Error determining administration fee applicable....');\n            END;\n        END IF;\n\n        IF NVL (v_admin_count, 0) > 0\n        THEN\n            BEGIN\n                SELECT adf_disc_rate\n                  INTO v_admin_disc\n                  FROM gin_adminstration_fee\n                 WHERE     adf_clnt_code = v_clnt_code\n                       --AND ADF_POL_POLICY_NO = v_pol_pol_no\n                       AND NVL (adf_policy_applicable, 'N') = 'Y'\n                       AND NVL (adf_authorised, 'N') = 'Y'\n                       AND NVL (adf_paid, 'N') = 'Y'\n                       AND (adf_wet IS NULL OR TRUNC (SYSDATE) <= adf_wet);\n            EXCEPTION\n                WHEN NO_DATA_FOUND\n                THEN\n                    BEGIN\n                        SELECT adf_disc_rate\n                          INTO v_admin_disc\n                          FROM gin_adminstration_fee\n                         WHERE     adf_clnt_code = v_clnt_code\n                               AND NVL (adf_authorised, 'N') = 'Y'\n                               AND NVL (adf_paid, 'N') = 'Y'\n                               AND (   adf_wet IS NULL\n                                    OR TRUNC (SYSDATE) <= adf_wet);\n                    EXCEPTION\n                        WHEN OTHERS\n                        THEN\n                            v_admin_disc := 0;\n                    END;\n                WHEN OTHERS\n                THEN\n                    raise_error ('Error determining discount....');\n            END;\n\n            RETURN TRUE;\n        ELSE\n            RETURN FALSE;\n        END IF;\n    END determine_admin_fee;",
        "get_current_instal_period": "FUNCTION get_current_instal_period (v_date             IN     DATE,\n                                        v_pol_wef          IN     DATE,\n                                        v_pol_wet          IN     DATE,\n                                        v_pol_no_install   IN     NUMBER,\n                                        v_wef                 OUT DATE,\n                                        v_wet                 OUT DATE)\n        RETURN NUMBER\n    IS\n        v_lapsed_mnth   NUMBER;\n    BEGIN\n        IF v_date NOT BETWEEN v_pol_wef AND v_pol_wet\n        THEN\n            raise_error (\n                   'Date provided '\n                || v_date\n                || ' not between the policy cover period '\n                || v_pol_wef\n                || ' and '\n                || v_pol_wet);\n        END IF;\n\n        v_lapsed_mnth := CEIL (MONTHS_BETWEEN (v_date, v_pol_wef));\n\n        IF v_lapsed_mnth = 0\n        THEN\n            v_lapsed_mnth := 1;\n        END IF;\n\n        DBMS_OUTPUT.put_line (v_lapsed_mnth || '=' || v_pol_no_install);\n\n        IF v_lapsed_mnth >= NVL (v_pol_no_install, 1)\n        THEN\n            IF v_pol_no_install = 1\n            THEN\n                v_wef := v_pol_wef;\n                v_wet := v_pol_wet;\n            ELSE\n                v_wef := ADD_MONTHS (v_pol_wef, v_pol_no_install - 1) - 1;\n                v_wet := v_pol_wet;\n            END IF;\n\n            v_wef := GREATEST (v_wef, v_date);\n            RETURN (v_pol_no_install);\n        ELSE\n            IF v_pol_no_install = 1\n            THEN\n                v_wef := v_pol_wef;\n                v_wet := v_pol_wet;\n            ELSIF v_lapsed_mnth = 1\n            THEN\n                v_wef := v_pol_wef;\n                v_wet := ADD_MONTHS (v_pol_wef, v_lapsed_mnth) - 1;\n            ELSE\n                v_wef := ADD_MONTHS (v_pol_wef, v_lapsed_mnth - 1);\n                v_wet := ADD_MONTHS (v_pol_wef, v_lapsed_mnth) - 1;\n            END IF;\n\n            v_wef := GREATEST (v_wef, v_date);\n            RETURN (v_lapsed_mnth);\n        END IF;\n    END;",
        "merge_policies_text": "FUNCTION merge_policies_text (v_pol_batch_no   IN NUMBER,\n                                  v_raw_txt        IN VARCHAR2)\n        RETURN VARCHAR2\n    IS\n        v_text   VARCHAR2 (4000);\n    BEGIN\n        v_text :=\n            tqc_memo_web_pkg.process_gis_pol_memo (v_pol_batch_no,\n                                                   NULL,\n                                                   NULL,\n                                                   v_raw_txt,\n                                                   'U');\n        RETURN (v_text);\n    END;",
        "merge_ren_policies_text": "FUNCTION merge_ren_policies_text (v_pol_batch_no   IN NUMBER,\n                                      v_raw_txt        IN VARCHAR2)\n        RETURN VARCHAR2\n    IS\n        v_text   VARCHAR2 (4000);\n    BEGIN\n        v_text :=\n            tqc_memo_web_pkg.process_gis_pol_memo (v_pol_batch_no,\n                                                   NULL,\n                                                   NULL,\n                                                   v_raw_txt,\n                                                   'R');\n        RETURN (v_text);\n    END;",
        "merge_claims_text": "FUNCTION merge_claims_text (v_claim IN VARCHAR2, v_raw_txt IN VARCHAR2)\n        RETURN VARCHAR2\n    IS\n        v_text   VARCHAR2 (4000);\n    BEGIN\n        --RAISE_ERROR('v_claim '||v_claim||'Raw Text '||v_raw_txt);\n        v_text :=\n            tqc_memo_web_pkg.process_gis_pol_memo (NULL,\n                                                   v_claim,\n                                                   NULL,\n                                                   v_raw_txt,\n                                                   'C');\n        RETURN (v_text);\n    END;",
        "get_instalment_pct": "FUNCTION get_instalment_pct (v_install_no      IN     NUMBER,\n                                 v_comp_installs   IN     VARCHAR2,\n                                 v_tot_instals        OUT NUMBER)\n        RETURN NUMBER\n    IS\n        v_str       VARCHAR2 (50);\n        v_val       NUMBER;\n        v_tot_val   NUMBER;\n        --v_tot_instals number;\n        vchr        VARCHAR2 (2);\n        v_ret       NUMBER;\n    BEGIN\n        IF v_comp_installs IS NULL\n        THEN\n            raise_error ('Installments percentages not defined..');\n        END IF;\n\n        IF NVL (v_install_no, 0) <= 0\n        THEN\n            raise_error (\n                'Installment number not provided to determine payment percentage ');\n        END IF;\n\n        v_str := v_comp_installs;\n\n        FOR i IN 1 .. LENGTH (v_comp_installs)\n        LOOP\n            vchr := SUBSTR (v_comp_installs, i, 1);\n\n            IF vchr = ':'\n            THEN\n                v_tot_instals := NVL (v_tot_instals, 0) + 1;\n            END IF;\n        END LOOP;\n\n        v_tot_instals := NVL (v_tot_instals, 0) + 1;\n\n        --    DBMS_OUTPUT.PUT_LINE(v_tot_instals);\n        IF v_tot_instals = 0\n        THEN\n            raise_error (\n                   '1The percentages specified in setups '\n                || v_comp_installs\n                || ' is malformed');\n        ELSIF v_tot_instals < v_install_no\n        THEN\n            raise_error (\n                   'The percentages specified in setups '\n                || v_comp_installs\n                || ' do not cater for '\n                || v_install_no\n                || ' installments');\n        END IF;\n\n        FOR i IN 1 .. v_tot_instals\n        LOOP\n            --     DBMS_OUTPUT.PUT_LINE(v_str||'='||I||'='||v_tot_instals);\n            IF    INSTR (v_str, ':') != 0\n               OR (INSTR (v_str, ':') = 0 AND i = v_tot_instals)\n            THEN\n                BEGIN\n                    IF INSTR (v_str, ':') != 0\n                    THEN\n                        v_val := SUBSTR (v_str, 1, INSTR (v_str, ':') - 1);\n                    ELSE\n                        v_val := SUBSTR (v_str, 1);\n                    END IF;\n                EXCEPTION\n                    WHEN OTHERS\n                    THEN\n                        raise_error (\n                               'Error processing percentages specified in setups '\n                            || v_comp_installs);\n                END;\n\n                --     DBMS_OUTPUT.PUT_LINE('v_val='||v_val);\n                v_tot_val := NVL (v_tot_val, 0) + v_val;\n\n                IF i = v_install_no\n                THEN\n                    v_ret := v_val;\n                END IF;\n            --     DBMS_OUTPUT.PUT_LINE(v_val||'ww='||v_tot_val||'='||v_ret);\n            ELSIF INSTR (v_str, ':') = 0 AND i <= v_install_no\n            THEN\n                raise_error (\n                       'The percentages specified in setups '\n                    || v_comp_installs\n                    || ' do not cater for '\n                    || v_install_no\n                    || ' installments or is malformed');\n            END IF;\n\n            v_str := SUBSTR (v_str, INSTR (v_str, ':') + 1);\n        END LOOP;\n\n        IF NVL (v_tot_val, 0) != 100\n        THEN\n            raise_error (\n                   'The percentages specified in setups '\n                || v_comp_installs\n                || ' do not add to 100%');\n        END IF;\n\n        RETURN (v_ret);\n    END;",
        "contrad_trans_type": "FUNCTION contrad_trans_type (v_batch_no IN NUMBER)\n        RETURN VARCHAR2\n    IS\n        v_pol_status   VARCHAR2 (10);\n    BEGIN\n        -- raise_error('nnn');\n        SELECT DECODE (prev.pol_policy_status,\n                       'EN', 'RC',\n                       prev.pol_policy_status)\n          INTO v_pol_status\n          FROM gin_policies co, gin_policies prev\n         WHERE     co.pol_prev_batch_no = prev.pol_batch_no\n               AND co.pol_batch_no = v_batch_no;\n\n        RETURN (v_pol_status);\n    END;",
        "check_policy_pending_bal": "FUNCTION check_policy_pending_bal (v_pol_batch_no NUMBER)\n        RETURN VARCHAR2\n    IS\n        v_error       VARCHAR2 (200);\n        v_clnt_code   NUMBER;\n        v_agn_code    NUMBER;\n        v_count       NUMBER;\n    BEGIN\n        v_error := '';\n\n        BEGIN\n            SELECT pol_prp_code, pol_agnt_agent_code\n              INTO v_clnt_code, v_agn_code\n              FROM gin_policies\n             WHERE pol_batch_no = v_pol_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_error :=\n                    'Error getting policy details...' || v_pol_batch_no;\n                RETURN v_error;\n        END;\n\n        IF gin_parameters_pkg.get_param_varchar (\n               'ALLOW_CERTIFICATE_BALANCES') =\n           'N'\n        THEN\n            BEGIN\n                SELECT COUNT (1)\n                  INTO v_count\n                  FROM gin_policy_exceptions\n                 WHERE     gpe_pol_batch_no = v_pol_batch_no\n                       AND gpe_gge_code = 'PDR'\n                       AND NVL (gpe_authorised, 'N') = 'N';\n\n                IF NVL (v_count, 0) >= 0\n                THEN\n                    IF NVL (gis_accounts_utilities.getpaidprem (\n                                v_pol_batch_no,\n                                v_agn_code,\n                                v_clnt_code,\n                                'B'),\n                            9) > 0\n                    THEN\n                        v_error :=\n                               'Cannot Allocate Certificate when there is pending balance Of '\n                            || NVL (gis_accounts_utilities.getpaidprem (\n                                        v_pol_batch_no,\n                                        v_agn_code,\n                                        v_clnt_code,\n                                        'B'),\n                                    9);\n                        RETURN v_error;\n                    END IF;\n                ELSE\n                    v_error := '';\n                END IF;\n            EXCEPTION\n                WHEN OTHERS\n                THEN\n                    v_error :=\n                           'Error occured while getting certificate pending balance '\n                        || SQLERRM (SQLCODE);\n                    RETURN v_error;\n            END;\n        END IF;\n\n        RETURN v_error;\n    END;",
        "risk_check": "FUNCTION risk_check (v_batch_no        IN     NUMBER,\n                         v_prev_ipu_code   IN     NUMBER,\n                         v_new_ipu_code       OUT NUMBER)\n        RETURN VARCHAR2\n    IS\n        v_count   NUMBER;\n    BEGIN\n        BEGIN\n              SELECT COUNT (*), ipu_code\n                INTO v_count, v_new_ipu_code\n                FROM gin_insured_property_unds\n               WHERE     ipu_prev_ipu_code = v_prev_ipu_code\n                     AND ipu_pol_batch_no = v_batch_no\n            GROUP BY ipu_code;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                RETURN 'N';\n            WHEN OTHERS\n            THEN\n                raise_error ('Error determining if the risk exist....');\n        END;\n\n        IF NVL (v_count, 0) > 0\n        THEN\n            RETURN 'Y';\n        ELSE\n            RETURN 'N';\n        END IF;\n    END;",
        "check_risk_exists_backup": "FUNCTION check_risk_exists_backup (v_pol_batch_no       IN     NUMBER,\n                                       v_scl_code           IN     NUMBER,\n                                       v_property_id        IN     VARCHAR2,\n                                       v_allow_duplicates      OUT VARCHAR2)\n        RETURN VARCHAR2\n    IS\n        v_cnt   NUMBER;\n        v_msg   VARCHAR2 (2000);\n        v_id    NUMBER;\n    BEGIN\n        raise_error ('INNNNNNNNNNNN222');\n\n        BEGIN\n            v_allow_duplicates :=\n                gin_parameters_pkg.get_param_varchar (\n                    'ALLOW_DUPLICATION_OF_RISKS');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_allow_duplicates := 'Y';\n        END;\n\n        BEGIN\n            SELECT COUNT (1)\n              INTO v_cnt\n              FROM gin_policies, gin_insured_property_unds, gin_sub_classes\n             WHERE     pol_batch_no = ipu_pol_batch_no\n                   AND pol_current_status NOT IN ('CO', 'CN')\n                   AND pol_policy_status != 'CO'\n                   AND ipu_sec_scl_code = v_scl_code\n                   AND ipu_sec_scl_code = scl_code\n                   AND NVL (scl_risk_unique, 'N') = 'Y'\n                   AND ipu_property_id = v_property_id\n                   AND ipu_pol_batch_no <> v_pol_batch_no;\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_msg := 'Error checking risk duplicates..';\n                RETURN (v_msg);\n        END;\n\n        IF NVL (v_cnt, 0) != 0\n        THEN\n            v_msg :=\n                   'This risk/s ID '\n                || v_property_id\n                || ' is/are duplicated2222 '\n                || v_cnt\n                || ' times.';\n            RETURN (v_msg);\n        ELSE\n            RETURN NULL;\n        END IF;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            v_msg := 'Error checking risk duplicates..';\n            RETURN (v_msg);\n    END;",
        "check_risk_exists": "FUNCTION check_risk_exists (v_pol_batch_no       IN     NUMBER,\n                                v_scl_code           IN     NUMBER,\n                                v_property_id        IN     VARCHAR2,\n                                v_wef                IN     DATE,\n                                v_wet                IN     DATE,\n                                v_allow_duplicates      OUT VARCHAR2,\n                                v_add_edit           IN     VARCHAR2)\n        RETURN VARCHAR2\n    IS\n        v_cnt     NUMBER;\n        v_msg     VARCHAR2 (2000);\n        v_id      NUMBER;\n        v_count   NUMBER;\n    BEGIN\n        --      IF NVL (v_add_edit, 'N') = 'E'\n        --      THEN\n        --         RETURN NULL;\n        --      END IF;\n        BEGIN\n            v_allow_duplicates :=\n                gin_parameters_pkg.get_param_varchar (\n                    'ALLOW_DUPLICATION_OF_RISKS');\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_allow_duplicates := 'Y';\n        END;\n\n        BEGIN\n            SELECT COUNT (*)\n              INTO v_count\n              FROM gin_sub_classes\n             WHERE scl_code = v_scl_code AND NVL (scl_risk_unique, 'N') = 'Y';\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                v_count := 0;\n        END;\n\n        IF NVL (v_count, 0) <> 0 AND NVL (v_allow_duplicates, 'N') = 'N'\n        THEN\n              SELECT DISTINCT COUNT (1)\n                INTO v_cnt\n                FROM gin_insured_property_unds, tqc_clients, tqc_client_systems\n               WHERE     ipu_prp_code = clnt_code\n                     AND clnt_code = csys_clnt_code\n                     AND csys_sys_code = 37\n                     AND ipu_sec_scl_code = v_scl_code\n                     AND ipu_property_id = v_property_id\n                     --and ipu_id !=  v_ipu_id\n                     --AND ipu_status = 'NB'\n                     AND ipu_id NOT IN\n                             (SELECT DISTINCT polar_ipu_id\n                                FROM gin_policy_active_risks,\n                                     gin_insured_property_unds\n                               WHERE     ipu_id = polar_ipu_id\n                                     AND NVL (ipu_endos_remove, 'N') = 'Y'\n                                     AND ipu_property_id = v_property_id)\n                     AND ipu_id NOT IN\n                             (SELECT DISTINCT polar_ipu_id\n                                FROM gin_policy_active_risks,\n                                     gin_insured_property_unds\n                               WHERE     ipu_id = polar_ipu_id\n                                     AND ipu_property_id = v_property_id\n                                     AND (   ipu_status = 'S'\n                                          OR ipu_cover_suspended = 'Y')\n                                     AND TO_DATE (ipu_suspend_wef,\n                                                  'DD/MM/RRRR') BETWEEN v_wef\n                                                                    AND v_wet)\n                     AND (   (TO_DATE (ipu_wef, 'DD/MM/RRRR') BETWEEN v_wef\n                                                                  AND v_wet)\n                          OR (TO_DATE (ipu_wet, 'DD/MM/RRRR') BETWEEN v_wef\n                                                                  AND v_wet))\n                     AND ipu_pol_batch_no NOT IN\n                             (SELECT pol_batch_no\n                                FROM gin_policies, gin_insured_property_unds\n                               WHERE     pol_batch_no = ipu_pol_batch_no\n                                     AND ipu_sec_scl_code = v_scl_code\n                                     AND ipu_property_id = v_property_id\n                                     --and ipu_id !=  v_ipu_id\n                                     AND pol_current_status IN ('CN', 'CO') --  AND pol_current_status IN ('CN', 'D', 'CO')\n                                                                           )\n                     AND NVL (ipu_endos_remove, 'N') != 'Y'\n            ORDER BY ipu_code;\n\n            IF NVL (v_cnt, 0) != 0\n            THEN\n                v_msg :=\n                       'This risk/s ID '\n                    || v_property_id\n                    || ' is/are duplicated '\n                    || v_cnt\n                    || ' times.';\n                RETURN (v_msg);\n            ELSE\n                RETURN NULL;\n            END IF;\n        ELSE\n            RETURN NULL;\n        END IF;\n    EXCEPTION\n        WHEN OTHERS\n        THEN\n            v_msg := 'Error checking risk duplicates..';\n            RETURN (v_msg);\n    END;",
        "check_unique_riskid_format": "FUNCTION check_unique_riskid_format (v_rskid          IN VARCHAR2,\n                                         v_rskid_format   IN VARCHAR2)\n        RETURN BOOLEAN\n    IS\n        -- rskid VARCHAR2(15):= 'KAC 789';\n        val         VARCHAR2 (4000);\n        -- v_format VARCHAR2(200):='[K&& ###&][&& ### &&][&& ####]';\n        --v_rskid_format VARCHAR2(200):='[K&& ###&][&& ### &&][&& ####]';\n        vchr        VARCHAR2 (15);\n        vchr2       VARCHAR2 (15);\n        fmt         VARCHAR2 (5);\n        v_lenght    NUMBER;\n        v_start     NUMBER;\n        x           NUMBER;\n        v_conform   BOOLEAN;\n\n        TYPE v_fmts_tab IS TABLE OF VARCHAR2 (25)\n            INDEX BY BINARY_INTEGER;\n\n        v_fmts      v_fmts_tab;\n    BEGIN\n        -- RAISE_ERROR('v_rskid_format'||v_rskid_format);\n        FOR i IN 1 .. LENGTH (v_rskid_format)\n        LOOP\n            vchr := SUBSTR (v_rskid_format, i, 1);\n            v_lenght := NVL (v_lenght, 0) + 1;\n\n            IF vchr = '['\n            THEN\n                v_start := i + 1;\n                v_lenght := 0;\n            ELSIF vchr = ']'\n            THEN\n                x := NVL (x, 0) + 1;\n                vchr2 := SUBSTR (v_rskid_format, v_start, v_lenght - 1);\n\n                FOR i IN 1 .. LENGTH (vchr2)\n                LOOP\n                    fmt := SUBSTR (vchr2, i, 1);\n\n                    IF NOT (   (fmt IN ('#', '&', ' '))\n                            OR (ASCII (fmt) BETWEEN 65 AND 90)\n                            OR (ASCII (fmt) BETWEEN 48 AND 57))\n                    THEN\n                        DBMS_OUTPUT.put_line (fmt);\n                        DBMS_OUTPUT.put_line (ASCII (fmt));\n                        raise_error (\n                               'Format '\n                            || v_rskid_format\n                            || ' not defined correctly.');\n                    END IF;\n                END LOOP;\n\n                v_fmts (x) := vchr2;\n            END IF;\n        END LOOP;\n\n        v_conform := FALSE;\n\n        FOR i IN 1 .. v_fmts.COUNT\n        LOOP\n            IF     LENGTH (v_fmts (i)) > 0\n               AND LENGTH (v_rskid) = LENGTH (v_fmts (i))\n            THEN\n                v_conform := TRUE;\n\n                FOR y IN 1 .. LENGTH (v_rskid)\n                LOOP\n                    val := ASCII (SUBSTR (v_rskid, y, 1));\n                    fmt := SUBSTR (v_fmts (i), y, 1);\n\n                    IF    (fmt = '&' AND val NOT BETWEEN 65 AND 90)\n                       OR (fmt = '#' AND val NOT BETWEEN 48 AND 57)\n                       OR (fmt = '/' AND val NOT BETWEEN 48 AND 57)\n                    THEN\n                        v_conform := FALSE;\n                    ELSIF     (   (ASCII (fmt) BETWEEN 65 AND 90)\n                               OR (ASCII (fmt) BETWEEN 48 AND 57))\n                          AND ASCII (fmt) != val\n                    THEN\n                        v_conform := FALSE;\n                    END IF;\n                END LOOP;\n            END IF;\n\n            EXIT WHEN v_conform;\n        END LOOP;\n\n        IF NOT v_conform\n        THEN\n            RETURN v_conform;\n        --raise_error (   v_rskid\n        --            || ' Does not conform to ANY Formats provided '\n        --          || v_rskid_format\n        --        );\n        END IF;\n\n        RETURN v_conform;\n    END;",
        "create_uw_trans_func": "FUNCTION create_uw_trans_func (clientname                IN VARCHAR2,\n                                   clientpin                 IN VARCHAR2,\n                                   clienttype                IN VARCHAR2,\n                                   clienttitle               IN VARCHAR2,\n                                   policynumber              IN VARCHAR2,\n                                   policyendorsementnumber   IN VARCHAR2,\n                                   policyagentcode           IN VARCHAR2,\n                                   policycoverfrom           IN DATE,\n                                   policycoverto             IN DATE,\n                                   policyunderwritingyear    IN NUMBER,\n                                   policytransactiontype     IN VARCHAR2,\n                                   --  NB  - New business, EN  - Endorsements, RN  - Renewals\n                                   policypreparedby          IN VARCHAR2,\n                                   policyauthorizedby        IN VARCHAR2,\n                                   policybranchcode          IN VARCHAR2,\n                                   policydebitnotenumber     IN VARCHAR2,\n                                   policyproduct             IN VARCHAR2,\n                                   policystampduty           IN NUMBER,\n                                   policycurrency            IN VARCHAR2,\n                                   riskid                    IN VARCHAR2,\n                                   riskdesc                  IN VARCHAR2,\n                                   risksubclass              IN VARCHAR2,\n                                   riskcovertype             IN VARCHAR2,\n                                   risksuminsured            IN NUMBER,\n                                   riskbasicpremium          IN NUMBER,\n                                   --This is premium inclusive of commission but not inclusive of the taxes\n                                   riskcommissionamount      IN NUMBER,\n                                   risktraininglevy          IN NUMBER,\n                                   policyphcf                IN NUMBER,\n                                   premsection               IN NUMBER)\n        RETURN VARCHAR2\n    IS\n        vcount           NUMBER;\n        vreturn          VARCHAR2 (1);\n        vclntcode        NUMBER;\n        vprocnt          NUMBER;\n        r_no             NUMBER;\n        r_pol_no         NUMBER;\n        v_pol_rec        gin_policies_loading_tab := gin_policies_loading_tab ();\n        v_pol_dtls_rec   gin_load_policy_dtls_tbl\n                             := gin_load_policy_dtls_tbl ();\n        v_new_ipu_code   NUMBER;\n        v_pol_recd       web_pol_tab := web_pol_tab ();\n        v_poll_code      NUMBER;\n        v_batch_no       NUMBER;\n        v_user           VARCHAR2 (30) := 'VMUGO';\n        v_exceptions     VARCHAR2 (10);\n        v_policy_no      VARCHAR2 (30);\n        v_pol_wef        DATE;\n        v_pol_wet        DATE;\n        v_rn_id          NUMBER;\n        v_batchno        NUMBER;\n        v_trans_no       NUMBER;\n        v_itb_code       NUMBER;\n    BEGIN\n        /*This",
        "get_prev_tran_type": "FUNCTION get_prev_tran_type (v_batch_no        IN     NUMBER,\n                                     v_prev_batch_no      OUT VARCHAR2)\n            RETURN VARCHAR2\n        IS\n            v_retval   VARCHAR2 (5);\n            v_btchno   NUMBER;\n        BEGIN\n            SELECT pol_policy_status, pol_prev_batch_no\n              INTO v_retval, v_btchno\n              FROM gin_policies\n             WHERE pol_batch_no = v_batch_no;\n\n            IF v_retval = 'CO'\n            THEN\n                SELECT pol_policy_status, pol_prev_batch_no\n                  INTO v_retval, v_prev_batch_no\n                  FROM gin_policies\n                 WHERE pol_batch_no = v_btchno;\n            ELSE\n                v_prev_batch_no := v_btchno;\n            END IF;\n\n            RETURN (v_retval);\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                v_retval := 'NONE';\n            WHEN OTHERS\n            THEN\n                raise_error ('Error getting previous transaction type..');\n        END;\n    BEGIN\n        BEGIN\n            SELECT ROUND (pol_policy_cover_to - pol_policy_cover_from)\n              INTO v_cover_days\n              FROM gin_policies\n             WHERE pol_batch_no = v_prevbatch_no;\n        EXCEPTION\n            WHEN NO_DATA_FOUND\n            THEN\n                NULL;\n            WHEN OTHERS\n            THEN\n                NULL;\n        END;\n\n        v_max_extensions :=\n            NVL (\n                gin_parameters_pkg.get_param_varchar ('MAX_NO_OF_EXTENSION'),\n                0);\n        --v_prev_batch_no :=v_batch_no;\n        v_maxed := 'N';\n\n        FOR i IN 1 .. v_max_extensions\n        LOOP\n            v_trans_type := get_prev_tran_type (v_batch_no, v_prev_batch_no);\n            DBMS_OUTPUT.put_line (\n                   v_num\n                || '='\n                || v_batch_no\n                || '='\n                || v_prev_batch_no\n                || '='\n                || v_trans_type);\n            EXIT WHEN v_trans_type != 'EX';\n            v_batch_no := v_prev_batch_no;\n            v_num := NVL (v_num, 0) + 1;\n        END LOOP;\n\n        IF NVL (v_num, 0) >= v_max_extensions OR v_cover_days > 365\n        THEN\n            v_maxed := 'Y';\n        END IF;\n\n        DBMS_OUTPUT.put_line (v_maxed);\n        RETURN v_maxed;\n    END;",
        "create_uw_transx": "FUNCTION create_uw_transx (clientname                IN VARCHAR2,\n                               clientpin                 IN VARCHAR2,\n                               clienttype                IN VARCHAR2,\n                               clienttitle               IN VARCHAR2,\n                               policynumber              IN VARCHAR2,\n                               policyendorsementnumber   IN VARCHAR2,\n                               policyagentcode           IN NUMBER, -- this was change to agn_code\n                               policycoverfrom           IN DATE,\n                               policycoverto             IN DATE,\n                               policyunderwritingyear    IN NUMBER,\n                               policytransactiontype     IN VARCHAR2,\n                               --  NB  - New business, EN  - Endorsements, RN  - Renewals\n                               policybranchcode          IN VARCHAR2,\n                               policydebitnotenumber     IN VARCHAR2, -- same as the endos number\n                               policyproduct             IN VARCHAR2,\n                               policystampduty           IN NUMBER,\n                               v_risk_rec                IN med_risk_tab,\n                               v_ped_code                IN NUMBER)\n        RETURN VARCHAR2\n    IS\n        vcount           NUMBER;\n        vreturn          VARCHAR2 (1);\n        vclntcode        NUMBER;\n        vprocnt          NUMBER;\n        r_no             NUMBER;\n        r_pol_no         NUMBER;\n        v_pol_rec        gin_policies_loading_tab := gin_policies_loading_tab ();\n        v_pol_dtls_rec   gin_load_policy_dtls_tbl\n                             := gin_load_policy_dtls_tbl ();\n        v_new_ipu_code   NUMBER;\n        v_pol_recd       web_pol_tab := web_pol_tab ();\n        v_poll_code      NUMBER;\n        v_batch_no       NUMBER;\n        v_user           VARCHAR2 (30)\n            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');\n        v_exceptions     VARCHAR2 (10);\n        v_policy_no      VARCHAR2 (30);\n        v_pol_wef        DATE;\n        v_pol_wet        DATE;\n        v_rn_id          NUMBER;\n        v_batchno        NUMBER;\n        v_trans_no       NUMBER;\n        v_covt_type      VARCHAR2 (30);\n\n        CURSOR taxes (vbatchno IN NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_taxes\n             WHERE ptx_pol_batch_no = vbatchno;\n\n        v_tl             NUMBER;\n        v_phfund         NUMBER;\n        v_scl_code       NUMBER;\n        v_covt_code      NUMBER;\n        v_pro_sht_desc   VARCHAR2 (10);\n        v_itb_code       NUMBER;\n    BEGIN\n        /*This",
        "create_uw_transxx": "FUNCTION create_uw_transxx (\n        clientname                IN VARCHAR2,\n        clientpin                 IN VARCHAR2,\n        clienttype                IN VARCHAR2,\n        clienttitle               IN VARCHAR2,\n        policynumber              IN VARCHAR2,\n        policyendorsementnumber   IN VARCHAR2,\n        policyagentcode           IN NUMBER,    -- this was change to agn_code\n        policycoverfrom           IN DATE,\n        policycoverto             IN DATE,\n        policyunderwritingyear    IN NUMBER,\n        policytransactiontype     IN VARCHAR2,\n        --  NB  - New business, EN  - Endorsements, RN  - Renewals\n        policybranchcode          IN VARCHAR2,\n        policydebitnotenumber     IN VARCHAR2,     -- same as the endos number\n        policyproduct             IN VARCHAR2,\n        policystampduty           IN NUMBER,\n        v_risk_rec                IN med_risk_tab,\n        v_ped_code                IN NUMBER,\n        v_post_trans              IN VARCHAR2 DEFAULT 'Y')\n        RETURN VARCHAR2\n    IS\n        vcount           NUMBER;\n        vreturn          VARCHAR2 (1);\n        vclntcode        NUMBER;\n        vprocnt          NUMBER;\n        r_no             NUMBER;\n        r_pol_no         NUMBER;\n        v_pol_rec        gin_policies_loading_tab := gin_policies_loading_tab ();\n        v_pol_dtls_rec   gin_load_policy_dtls_tbl\n                             := gin_load_policy_dtls_tbl ();\n        v_new_ipu_code   NUMBER;\n        v_pol_recd       web_pol_tab := web_pol_tab ();\n        v_poll_code      NUMBER;\n        v_batch_no       NUMBER;\n        v_user           VARCHAR2 (30)\n            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');\n        v_exceptions     VARCHAR2 (10);\n        v_policy_no      VARCHAR2 (30);\n        v_pol_wef        DATE;\n        v_pol_wet        DATE;\n        v_rn_id          NUMBER;\n        v_batchno        NUMBER;\n        v_trans_no       NUMBER;\n        v_covt_type      VARCHAR2 (30);\n        v_itb_code       NUMBER;\n\n        CURSOR taxes (vbatchno IN NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_taxes\n             WHERE ptx_pol_batch_no = vbatchno;\n\n        v_tl             NUMBER;\n        v_phfund         NUMBER;\n        v_scl_code       NUMBER;\n        v_covt_code      NUMBER;\n        v_pro_sht_desc   VARCHAR2 (10);\n    BEGIN\n        /*This",
        "create_uw_trans": "FUNCTION create_uw_trans (\n        clientname                IN VARCHAR2,\n        clientcode                IN VARCHAR2,\n        clienttype                IN VARCHAR2,\n        clienttitle               IN VARCHAR2,\n        clientpin                 IN VARCHAR2,\n        postaladdrs               IN VARCHAR2,\n        postaltown                IN VARCHAR2,\n        postalcode                IN VARCHAR2,\n        telephoneno               IN VARCHAR2,\n        mobilenumber              IN VARCHAR2,\n        policybranchcode          IN VARCHAR2,\n        policyagentcode           IN NUMBER,    -- this was change to agn_code\n        country                   IN VARCHAR2,\n        policynumber              IN VARCHAR2,\n        policyendorsementnumber   IN VARCHAR2,\n        policydebitnotenumber     IN VARCHAR2,     -- same as the endos number\n        policytransactiontype     IN VARCHAR2,\n        --  NB  - New business, EN  - Endorsements, RN  - Renewals\n        policyproduct             IN VARCHAR2,\n        policycoverfrom           IN DATE,\n        policycoverto             IN DATE,\n        policyunderwritingyear    IN NUMBER,\n        policystampduty           IN NUMBER,\n        v_ped_code                IN NUMBER,\n        v_post_trans              IN VARCHAR2 DEFAULT 'Y')\n        RETURN VARCHAR2\n    IS\n        vcount                NUMBER;\n        vreturn               VARCHAR2 (1);\n        vclntcode             NUMBER;\n        vprocnt               NUMBER;\n        r_no                  NUMBER;\n        r_pol_no              NUMBER;\n        v_pol_rec             gin_policies_loading_tab := gin_policies_loading_tab ();\n        v_pol_dtls_rec        gin_load_policy_dtls_tbl\n                                  := gin_load_policy_dtls_tbl ();\n        v_new_ipu_code        NUMBER;\n        v_pol_recd            web_pol_tab := web_pol_tab ();\n        v_poll_code           NUMBER;\n        v_batch_no            NUMBER;\n        v_user                VARCHAR2 (30)\n            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');\n        v_exceptions          VARCHAR2 (10);\n        v_policy_no           VARCHAR2 (30);\n        v_pol_wef             DATE;\n        v_pol_wet             DATE;\n        v_rn_id               NUMBER;\n        v_batchno             NUMBER;\n        v_trans_no            NUMBER;\n        v_covt_type           VARCHAR2 (30);\n        v_uw_yr               NUMBER;\n        v_ipu_code            NUMBER;\n        v_si                  NUMBER;\n        v_tot_prem            NUMBER;\n        v_pol_policy_status   VARCHAR2 (30);\n        v_clnt_sht_desc       VARCHAR2 (30);\n        v_pro_code            NUMBER;\n        v_agn_status          VARCHAR2 (30);\n        v_user1               VARCHAR2 (30);\n        v_agn_sht_desc        VARCHAR2 (30);\n        v_itb_code            NUMBER;\n        v_err_msg             VARCHAR2 (200);\n\n        CURSOR taxes (vbatchno IN NUMBER)\n        IS\n            SELECT *\n              FROM gin_policy_taxes\n             WHERE ptx_pol_batch_no = vbatchno;\n\n        v_tl                  NUMBER;\n        v_phfund              NUMBER;\n        v_scl_code            NUMBER;\n        v_covt_code           NUMBER;\n        v_pro_sht_desc        VARCHAR2 (10);\n        v_risk_ri_rec         web_risk_tab := web_risk_tab ();\n        v_auth                VARCHAR2 (10);\n        v_clnt_name           VARCHAR2 (300);\n\n        -- v_clnt_sht_desc  VARCHAR2 (30);\n        CURSOR drpol (v_policy_no IN VARCHAR2)\n        IS\n            SELECT pol_batch_no\n              FROM gin_policies\n             WHERE     pol_policy_no = v_policy_no\n                   AND NVL (pol_authosrised, 'N') != 'A';\n\n        CURSOR rsk IS\n            SELECT *\n              FROM gin_policy_electronic_data\n             WHERE ped_code = v_ped_code;\n\n        CURSOR risk (vbatch IN NUMBER)\n        IS\n            SELECT *\n              FROM gin_insured_property_unds\n             WHERE ipu_pol_batch_no = vbatch;\n    BEGIN\n        /*This",
        "get_policy_facre": "FUNCTION get_policy_facre (v_batch_no IN NUMBER)\n        RETURN NUMBER\n    IS\n        v_count   NUMBER;\n    BEGIN\n        BEGIN\n            SELECT COUNT (1)\n              INTO v_count\n              FROM gin_policies\n             WHERE pol_policy_type = 'F' AND pol_batch_no = v_batch_no;\n\n            RETURN UPPER (v_count);\n        EXCEPTION\n            WHEN OTHERS\n            THEN\n                raise_application_error (\n                    -20001,\n                    'This policy is not a Facre business....');\n        END;\n    END;",
        "get_installment_period": "FUNCTION get_installment_period (\n        v_installment_def   IN VARCHAR2,\n        v_no_of_endos       IN NUMBER,\n        v_value_type        IN VARCHAR2 DEFAULT 'C')\n        RETURN NUMBER\n    IS\n        v_installment_perct   NUMBER;\n    BEGIN\n        ---raise_error('v_installment_def='||v_installment_def||'v_no_of_endos='||v_no_of_endos||'v_installment_perct='||v_installment_perct);\n        IF v_value_type = 'C'\n        THEN\n            SELECT COLUMN_VALUE\n              INTO v_installment_perct\n              FROM (SELECT ROWNUM COUNT, x.*\n                      FROM TABLE (convertstringtoarray (v_installment_def)) x)\n                   a\n             WHERE a.COUNT = v_no_of_endos;\n        ELSIF v_value_type = 'E'\n        THEN\n            SELECT SUM (COLUMN_VALUE)\n              INTO v_installment_perct\n              FROM TABLE (convertstringtoarray (v_installment_def))\n             WHERE ROWNUM <= v_no_of_endos;\n        END IF;\n\n        RETURN v_installment_perct;\n    END;",
        "merge_quote_text": "FUNCTION merge_quote_text (v_quote_code IN NUMBER, v_raw_txt IN VARCHAR2)\n        RETURN VARCHAR2\n    IS\n        v_text   VARCHAR2 (4000);\n    BEGIN\n        v_text :=\n            tqc_memo_web_pkg.process_gis_pol_memo (v_quote_code,\n                                                   NULL,\n                                                   NULL,\n                                                   v_raw_txt,\n                                                   'Q');\n        RETURN (v_text);\n    END;"
    },
    "cursors": {},
    "types": {},
    "variables": {}
}